
@@256135 <h> More <h> Measures <p> A measure is an object that retrieves information to be used by the skin . Measures are one of the two major kinds of objects in a skin , along with meters . <h> Usage <p> Unlike meters , measures do not display anything by themselves . You can not " see " a measure in a skin . The measure simply provides the information as a value , which can be used in several ways : <p> A meter can be bound to a measure . In this way , the meter will automatically display the value in a way that is appropriate for the type of meter . This also takes the measure 's range and scale into account ( if applicable ) . <p> The measure value can be referenced as a section variable . In this way , the value can be used in almost any meter or measure option . As a section variable , the value is used " literally , " which means it does not automatically account for the range or scale . <p> Some measure types @ @ @ @ @ @ @ @ @ @ in their individual articles . <h> Format <p> A measure is written as a section in the skin . All measures use the Measure option to define the section as a specific type of measure . Most other measure options depend on the type , but there are some general options that are valid in many or all measures . <p> Below is an example of a complete working measure : <p> MeasureFour @qwx22556 <p> Formula=2+2 <p> UpdateDivider=-1 <h> Values <p> A measure actually provides two values : a string , or " raw text , " and a number , which can be used in calculation formulas . Depending on the type of measure , these values may be the same , which means you can use them interchangeably ; or , they may be completely different . The article for each measure type explains what is provided for both the number and string values . <p> The Formula option in a Calc measure uses only the number values of other measures , unless section variables are used instead . <p> Although a string value is not a " @ @ @ @ @ @ @ @ @ @ number in formulas and options , as long as it contains only numeric characters and valid operators . ( Otherwise , it is treated as zero . ) Likewise , a number value can be displayed or stored to a variable as a string of text , although this may cause the value to lose precision . <h> Percentage <p> Some meters require that a measure provide a value that can be used as a percentage . These would include Bar , Histogram , Line , Rotator and Roundline meters . In order for these meters to know that the current value of the measure is 27% , they need to know what value 100% represents . In addition , you may want to display the percentage of the total value a measure is currently at in a String meter , or use the percentage value of a measure in a formula . <p> The percentage of the total that a measure 's current value reflects is based on the " range " that the measure can be . This is defined as the MinValue and MaxValue of the measure @ @ @ @ @ @ @ @ @ @ and Memory , automatically set the minimum and maximum range that the measure can be . FreeDiskSpace for instance knows how big the drive you are measuring is , and will set the MinValue to zero , and the MaxValue to the actual size of the drive . Then you can just use the measure 's value in a meter by binding the measure to it with MeasureName=MyMeasure and the percentage will be used in the display of the meter . There is nothing you need to do for this to work properly . <p> Other measures do not know themselves what the maximum value the measure can be . Examples of this are the NetIn/NetOut/NetTotal measures , SpeedFan , any Calc measures , and any WebParser measures . What Rainmeter will do in this case is to set the MinValue and MaxValue of the measure dynamically , to the smallest and largest values the measure has been since the skin was loaded or refreshed . This may not always be the behavior you desire . <p> To address this , you can manually define the range that the measure @ @ @ @ @ @ @ @ @ @ on the measure . Remember , you set this on the measure you are going to use as a percentage , not on the meter that is using it . <p> For example : <p> MeasureCPUTemp @qwx22557 <p> Plugin=SpeedFanPlugin <p> SpeedFanType=TEMPERATURE <p> SpeedFanScale=C <p> SpeedFanNumber=2 <p> MinValue=30 <p> MaxValue=100 <p> MeterCPUTempBar <p> Meter=Bar <p> **26;0;TOOLONG <p> While the String meter does not require a percentage when displaying the number value of a measure , it can be told to use the value as a percentage , by using the Percentual option on the meter . The meter will then use the MinValue and MaxValue of the measure to calculate what percentage of that the current value is . <p> Setting these options has no effect on the actual value of the measure , but only defines the low and high range , to used by meters . <p> Note : The current MinValue / MaxValue " range " for a measure can be viewed in the Skins tab of the About window . This can be useful for debugging problems when you are not getting the meter output you expect @ @ @ @ @ @ @ @ @ @ all measures in the skin are evaluated in order . This means that if a measure references the value of another measure that has not been evaluated yet , it will receive the value from the previous update . <p> For example : <p> MeasureCounterPlusOne @qwx22556 <p> Formula=MeasureCounter + 1 <p> MeasureCounter @qwx22556 <p> Formula=Counter <p> The intent is for MeasureCounterPlusOne to add one to the value of MeasureCounter , so that it is always greater than MeasureCounter . If the measures were in the opposite order , this would work . However , because MeasureCounterPlusOne is evaluated before MeasureCounter , it will only add to the old , " outdated " value , and the two measures will remain equal . 
@@256136 <h> String meter <h> Options <p> Name(s) of the measure(s) bound to the meter . The meter will display the current value of the measure defined in MeasureName , with values for additional measures bound to the meter available using the %N syntax in the Text option . <p> The meter does not require a MeasureNameN option if the Text option alone will be used to define the string to display . <p> TextDefault : %1 <p> Text to display . If MeasureName is specified , Text will default to the value of the measure . <p> The values of the measure(s) specified with MeasureName can be used with the %N syntax as follows : <p> MeasureName=SomeMeasure <p> **25;28;TOOLONG <p> Text=This is text containing %1 and %2 . <p> ; %1 and %2 will be replaced by the string values of SomeMeasure and <p> ; SomeMeasure2 , respectively . <p> The Text option can take any combination of the following forms : <p> Display the value of a measure bound with MeasureName <p> Display the values of multiple measures bound with MeasureNameN , and formatted with the %N syntax . @ @ @ @ @ @ @ @ @ @ meter . Valid values are : <p> Left , Right , Center ( or LeftTop , RightTop , CenterTop ) <p> LeftBottom , RightBottom , CenterBottom <p> LeftCenter , RightCenter , CenterCenter <p> The string will be aligned using the values of the X and or Y settings as the anchor point . So to CenterCenter align a string within a meter with a width and height of 100 , set X=50 , Y=50 and StringAlign=CenterCenter . <p> StringStyleDefault : Normal <p> Style of the string . Valid values are Normal , Bold , Italic , and BoldItalic . <p> StringCaseDefault : None <p> Converts the string to a case . Valid values are None , Upper , Lower , and Proper . <p> StringEffectDefault : None <p> Effect applied to a string . Valid values are None , Shadow , and Border . <p> Shadow makes a background copy of the string , offset 1px " right " and 1px " down " , in the color defined in FontEffectColor . <p> Border makes a background copy of the string , 2px " larger " , and offset 1px @ @ @ @ @ @ @ @ @ @ the color defined in FontEffectColor . <p> The size of the font used in the string has no effect on the fixed 1px size of the Shadow or Border effect . <p> Due to how these effects are created , transparent colors on the string may have undesirable results . <p> Controls how strings are truncated ( clipped ) or wrapped to fit in or expand the containing meter . Valid values are : <p> 0 : Disabled . The string will not be clipped or wrapped . ( default ) <p> 1 : Enabled . The string will be clipped with an added ellipsis ... when it exceeds the specified W ( width ) option on the meter . If the H ( height ) option is large enough to allow multiple lines , the text is wrapped until the value of H is reached , then clipped . <p> 2 : Auto . The string will be clipped or wrapped based on the value of W and/or H. If the width or height are not specified , the meter itself will change size to accommodate the string . @ @ @ @ @ @ @ @ @ @ options below , to set a " maximum " size that the meter should expand to accommodate the string before clipping . <p> Notes : The changing size of meters when ClipString=2 can cause truncation issues with the overall window size of the skin , unless DynamicWindowSize=1 is set in the Rainmeter section of the skin . <p> ClipString=2 will always wrap on word boundaries ( spaces or tabs ) . Any single word that is longer than the defined or maximum width will clip that line , rather than breaking the word in two . <p> When ClipString=2 is used with bound measures that have an initial value of " " , ( WebParser and QuotePlugin for example ) DynamicVariables=1 must be set on the meter . <p> ClipStringW <p> Sets a maximum width that the meter will expand to accommodate the string when ClipString=2 . This setting is ignored if the W option is set . <p> ClipStringH <p> Sets a maximum height that the meter will expand to accommodate the string when ClipString=2 . This setting is ignored if the H option is set . <p> AngleDefault @ @ @ @ @ @ @ @ @ @ radians . <p> Note : The size and position of the text are always calculated as if the text is horizontal . This also means that the click-able field used for Mouse Actions does not change . It remains where the text would be with no Angle . <p> If set to 1 , the value of bound measures are converted to a percentage . This is useful if a measure does not return a percentage value , but either automatically defines a valid " range " of values ( e.g. FreeDiskSpace ) or when the MinValue and/or MaxValue options are manually set on the measure . <p> NumOfDecimalsDefault : 0 <p> Number of decimals to display with numerical measure values . <p> ScaleDefault : 1 <p> Scaling factor used for the measure values . The measure value is divided by the specified value . If the specified value has a decimal point ( e.g. 1000.0 ) , the result will also display decimals . <p> Note : If AutoScale is enabled , this option is ignored . <p> AutoScaleDefault : 0 <p> Automatically scales the measure values . The @ @ @ @ @ @ @ @ @ @ , etc. as appropriate . Valid values are : <p> 0 : Disabled . <p> 1 : Scales by 1024 . <p> 1k : Scales by 1024 with kilo as the lowest unit . <p> 2 : Scales by 1000 . <p> 2k : Scales by 1000 with kilo as the lowest unit . <p> Note : The value returned by AutoScale adds a space between the scaled number and the scale unit abbreviation . To remove this space simply add Substitute= " " : " " to the Measure that the AutoScale is being applied to . <p> Note : Using the SolidColor option , with a value of SolidColor=0,0,0,1 , will give a string meter a solid but virtually transparent background . This can make executing mouse actions on the text easier and more reliable . 
@@256137 <h> More <h> Anatomy of a Skin <p> The goal of this guide is to familiarize users who are new to Rainmeter with what a Rainmeter skin is , and how it works . This is not intended to be comprehensive , but at a level of detail that will help users grasp the fundamentals of Rainmeter . Once you understand what a Rainmeter skin " is " , it will be far easier to come to terms with the huge amount of options and functionality described in detail in the rest of the documentation . <h> The skin window <p> In a simplified sense , each skin in Rainmeter is a free-floating window , which periodically gathers system and other information using various Measures , and displays the results on the window with various Meters . <p> So at its most basic , measures are " input " and meters are " output " . That is Rainmeter in a nutshell . <p> While the skin can simply obtain information and display it , the skin can also react to changing values in the information it measures , or @ @ @ @ @ @ @ @ @ @ very visibly dynamic and interactive . <h> How a skin is written <p> Let 's start with what a skin file looks like . Rainmeter uses a standard plain-text . INI format that consists of only three types of lines : <p> SectionName OptionName=Option Value ; Comment <p> There are only a few rules for the . INI format : <p> All section names in a skin must be unique . <p> All option names within a section must be unique . <p> Section and option names should include alphanumeric characters only ( no spaces or punctuation ) . <p> Option values must be kept on a single line . <p> The following is an example of a very simple Rainmeter skin file . It updates the skin once a second , measures the used CPU as a percentage , and displays that percentage . @qwx22547 @qwx22570 <p> MeasureCPU <p> Measure=CPU <p> MeterCPU @qwx22560 <p> MeasureName=MeasureCPU <h> There are six types of Sections <p> Rainmeter This section will always be named Rainmeter , and is used as sort of a header for the skin , to set up some options @ @ @ @ @ @ @ @ @ @ like the update rate of the skin , the background color or image for the skin , or actions you want to take when something happens to the entire skin . <p> Metadata This section will always be named Metadata , and is used to provide information about your skin . The author 's name , the version number , configuration or usage instructions and other information . This information will be visible when someone selects your skin in the Rainmeter Manage window . <p> Variables This section will always be named Variables , and is used to define values that can be used anywhere in the skin by enclosing the variable name inside #PoundSigns# . This can be helpful to create a value that you want to use many places in the skin , while allowing you to change it in only one place . A simple example might be : <p> MeterStyles These sections can have any unique name , and are similar to Variables in function . They allow you to set up " styles " for meters where you can for instance define some or all @ @ @ @ @ @ @ @ @ @ and use the MeterStyle in many meters while again allowing you to only have to change it in one place . A simple example might be : <p> Measures These sections can have any unique name , and are used to " measure " some system or other information . There are many measure types , defined by the value of the Measure=MeasureType option on the section . <p> There are two kinds of options used on a measure . There are general measure options that define behaviors for most or all measure types , and measure options that are specific to the type of measure . These specific options are explained in the manual section for each measure type . Some simple examples might be : <p> Meters These sections can have any unique name , and are used to " display " things in the skin window . Most often , a meter will be used to display some information obtained by a measure , which is done by " binding " the meter to one or more measures with the MeasureName=SomeMeasure option . A simple example might @ @ @ @ @ @ @ @ @ @ , %Y %#I : %M %p <p> MeterDateTime @qwx22560 <p> **27;55;TOOLONG <p> The meter MeterDateTime is " bound " to the measure MeasureDateTime , and will display the current value of the measure as it changes . <p> There are many meter types , defined by the value of the Meter=MeterType option on the section . These can display information as strings of text , various kinds of graphs , images you associate with values , interactive buttons or even animations . While a meter is most often used to display the results of measures " bound " to the meter . They can also be used to display text or images you define yourself . Meters are the " paint " , the skin window is the " canvas " . <p> There are two kinds of options used on a meter . There are general meter options that define behaviors for most or all meter types , and meter options that are specific to the type of meter . These specific options are explained in the manual section for each meter type . <h> How a skin behaves @ @ @ @ @ @ @ @ @ @ is to picture it in a big " loop " . <p> In the Rainmeter section of the skin , you will define an Update rate , which is how often , in milliseconds , that the " loop " will be run by Rainmeter for that skin . How often the skin will be " updated " by Rainmeter . <p> If you for instance have the default Update=1000 in Rainmeter , then once a second ( every 1000 milliseconds ) Rainmeter will : <p> Start the update cycle . <p> Update measures Each measure in the skin , in the order they are in the skin . ini file , will be updated . They will perform whatever work they are designed to do , and will then have a " value " that is the result . <p> You can further control how often a measure is updated by adding an UpdateDivider option to the measure . This will in effect say " update this measure only every UpdateDivider skin updates " . It is a way to have a measure that does n't need to update @ @ @ @ @ @ @ @ @ @ or once an hour instead . <p> Update meters Each meter in the skin , in the order they are in the skin . ini file , will be updated . They will get the current values of any measures they are " bound " to , and apply any meter options to the result . At this point the meter is ready to be displayed . <p> Redraw the skin The entire skin window , any skin background set in Rainmeter , and all meters , in the order they are in the skin . ini file , will be " redrawn " . The order that meters are in the skin . ini file can be important , as meters that overlap will visibly be in the " front to back " order that they are in the code . First behind , last in front . <p> Restart the update cycle . <p> Yes , it does all that in the space of a second , and in fact can do the entire update cycle in far less than a second . Rainmeter is very efficient , @ @ @ @ @ @ @ @ @ @ is all you need to know for the basics of how a Rainmeter skin behaves . If you understand what we have so far , how to measure things , how to display things , and how the skin updates to gather and display the changing results , you are off to a great start . This is an important " foundation " that we can now build on . <h> Actions in a skin <p> So your skin might be kind of boring if it is just measuring some value and displaying the result . As useful as just that is , the real power of Rainmeter is having your skin react to changing values in a dynamic way , and in allowing you to dynamically interact with the skin with your mouse . This is done by setting " action " options on measures and meters . <p> There are two primary kinds of action options : <p> Measure actions These are options that in a sense " test " the value or state of the measure they are on , and take actions , which are bangs @ @ @ @ @ @ @ @ @ @ " or " false " . These actions are evaluated and executed on each update of the measure . There are several types of actions for measures , which are detailed in the rest of the documentation . Certainly you can test if a measure 's current value is above or below some range you define , contains some string of text you define , or has changed since the last update . <p> A simple example might be : <p> MeasureCPU <p> Measure=CPU <p> IfCondition=MeasureCPU &gt; 60 <p> IfTrueAction= ! SetOption MeterCPU FontColor " 255,0,0 " <p> IfFalseAction= ! SetOption MeterCPU FontColor " 0,255,0 " <p> If the value of MeasureCPU is greater than 60 , then change the FontColor of the String meter MeterCPU to " red " , if not , change it to " green " . <p> Mouse actions These are options you put on meters , ( or the skin background ) that can react to various kinds of mouse hovers , clicks and scrolls , and take actions , which are bangs or commands . These action are immediate , when the mouse @ @ @ @ @ @ @ @ @ @ have to wait for the next skin or meter update cycle . This can make your skin very dynamic indeed to user interaction . <p> There are two kinds of actions you can take when an action option is executed : <p> Bangs These are internal Rainmeter commands , that allow you do a wide range of things in your skin . You might want to change some formatting option on a meter , set or change a variable value , hide or show meters , disable or enable measures , even load and unload skins . Multiple bangs can be executed by one action option by simply enclosing them in Square brackets . <p> There are a great many bangs , each of which is described in the manual . <p> Commands In addition , you can have an action option execute any external command to the Windows operating system . This is what allows you to create an " application launcher " in Rainmeter , by simply having a meter that for instance displays an image of a calculator run the program " calc.exe " when clicked . @ @ @ @ @ @ @ @ @ @ browser by simply executing the URL as a Windows command . <p> Some simple examples might be : <p> LeftMouseUpAction= " C : Program FilesWinRarWinRar.exe " <p> LeftMouseUpAction= " http : //cnn.com " <p> Hopefully this will get you off and running with Rainmeter skins . There are other areas of how the application itself works that are important to understand , and the Getting Started and User Interface sections of the manual are important references . Do n't skip them . 
@@256138 <h> What 's on your desktop ? <p> Rainmeter displays customizable skins , like memory and battery power , RSS feeds and weather forecasts , right on your desktop . Many skins are even functional : they can record your notes and to-do lists , launch your favorite applications , and control your media player - all in a clean , unobtrusive interface that you can rearrange and customize to your liking . Rainmeter is at once an application and a toolkit . You are only limited by your imagination and creativity . <p> Rainmeter is open source software distributed free of charge under the terms of the GNU GPL v2 license . 
@@256139 <p> If set to 1 , the measure value is never updated . A disabled measure always returns 0 as its value in numerical contexts ( e.g. when used in a Calc formula or with IfActions ) , but may still return a previously obtained string value ( e.g. when used in String meters ) . <p> PausedDefault : 0 <p> If set to 1 , the measure value is never updated . A paused measure will return its most recent number and/or string value . <p> Group <p> Defines a group or series of groups that the measure belongs to . For more information please see the Groups page . 
@@256140 <h> More <h> Substitute <p> Substitute replaces some or all of a string value returned by a measure with another string . <h> Options <p> Substitute <p> A list of comma delimited " pattern " : " replacement " pairs . All occurrences of pattern in the measure string value are replaced with replacement . For example , " This " : " That " substitutes all occurrences of This with That . <p> If multiple " pattern " : " replacement " pairs are specified , each substitution is attempted in the specified order . For example , " This " : " That " , " Here " : " There " first replaces all occurrences of This with That and then replaces all occurrences of Here with There . <p> Each of the " pattern " : " replacement " pairs are a separate action , and act on the results of the previous substitute pairs . For example , with " 1 " : " One " , " 10 " : " Ten " , all occurrences of 1 are replaced with One , but @ @ @ @ @ @ @ @ @ @ because the first substitution already changed all 1 characters to One . For the desired behavior , the order can be reversed as " 10 " : " Ten " , " 1 " : " One " . <p> Instead of " pattern " : " replacement " , single quotes can be used either around the pattern or the replacement . ( i.e. ' pattern ' : " replacement " or " pattern " : ' replacement ' , but not ' pattern ' : ' replacement ' ) This can be useful when either the pattern or the replacement contains double quotes . For example , ' " ' : " double quote " replaces all occurrences of " with double quote . <p> If captures are used in the pattern , ( e.g. ( . + ) ) they can be referenced in the replacement part using 1 , ( first capture ) 2 , ( second capture ) etc . The entire match can also be referenced with 0 . <p> Note : With RegExpSubstitute , a ( capture ) may not return an empty @ @ @ @ @ @ @ @ @ @ zero or more ) quantifiers or ( ? ( ? = ( If/Then ) lookahead tests , as a capture must either cause the entire regular expression to " fail " , or return a value of some kind . <h> Examples <p> Normal substitution : <p> MeasureYear @qwx22558 <p> Format=%Y <p> Substitute= " 2012 " : " Twenty Twelve " , " 2013 " : " Twenty Thirteen " <p> ; Assuming that the current year is 2012 , the string value of MeasureYear will <p> ; be " Twenty Twelve " ( without quotes ) . Since Substitute only affects the string <p> ; value , the number value of MeasureYear will continue to be 2012 . <p> MeasureCalc1 @qwx22556 <p> Formula=MeasureYear <p> ; Since the number value of MeasureYear is used above , the value of MeasureCalc1 <p> ; will also be 2012 . <p> MeasureCalc2 @qwx22556 <p> Formula=MeasureYear @qwx22552 <p> ; Since the string value of MeasureYear is used above , a syntax error will occur 
@@256141 <h> Obtaining fonts <p> Do pay attention to the license for fonts you download and use . If a font is commercial , or licensed for personal use only , it may be technically illegal for you to distribute them with your skins . <h> No need to install 3rd-party fonts in Windows <p> Fonts installed in Windows ( they will be in the WindowsFonts folder ) will automatically be available for use in Rainmeter. 3rd-party fonts , which you might obtain from one of those sites listed above , can easily be used in and distributed with your skins , without any need for you or your users to install them in Windows . It 's really just a small waste of memory to install fonts that you are only using in Rainmeter . <h> Using Fonts <p> 3rd-party font files can be used by creating a folder @ResourcesFonts in the root level folder of the skin , and putting the font . ttf or . otf files there . Rainmeter will automatically load any fonts found in that folder , and they will be available to use as @ @ @ @ @ @ @ @ @ @ font is done with the FontFace option in a String meter . The font is identified by specifying the family name of the font ( e.g. FontFace=Trebuchet MS ) . The family name can be found by double clicking the font . ttf/.otf file and at the very top left in the Windows font viewer using the Font Name there . <p> MeterString @qwx22560 <p> FontFace=Trebuchet MS <p> Text=Hello World <h> Font Attributes <p> Additional attributes for the font can then be specified with other options available on the String meter . <p> FontWeight : A number between 0-999 specifying the weight of the font . Details on this option can be found at FontWeight . <p> MeterString @qwx22560 <p> FontFace=Trebuchet MS <p> FontSize=12 @qwx22554 <p> FontWeight=400 <p> Text=Hello World <p> In addition , there are other attributes that can be set using the InlineSetting option on a String meter . Some of the features that can be set are Italic , Oblique , Unlderline , StrikeThrough and Shadow , as well as adding gradients to the text . <h> Advanced <p> Many fonts will come in a . zip @ @ @ @ @ @ @ @ @ @ , with each being a different weight or style . Generally these are all fonts that share the same font family name , but the font viewer program in Windows may show the font name including sub-family names , like " Fira Sans Bold " or " Roboto Italic " . If you use those full family / sub-family names , that is almost always going to be fine . Rainmeter will figure out the actual family name when the font is loaded , and will use the correct font file when attributes like weight or italic are used . <p> However , there is a really nice tool that can give you a lot more information about your fonts . This can be useful when specifying the family name in FontFace , as well as when using Typography ( See the " Glyph substitution " tab ) options . This can also provide copyright and license information . <p> Get the dp4 Font Viewer free utility from http : //us.fontviewer.de/ . It is a portable application that you can just run from any folder . When you run it @ @ @ @ @ @ @ @ @ @ lot of useful information is available . <p> In this example , I would simply use FontFace=Fira Sans , and all those weights will be available to me using FontWeight. 
@@256142 <h> Options <p> Crops out and uses a defined part of the image . The option value should be in the form : X , Y , W , H , Origin . <p> Origin is optional and can be set to one of the following : <p> 1 : Top left ( default ) <p> 2 : Top right <p> 3 : Bottom right <p> 4 : Bottom left <p> 5 : Center <p> A way to envision what ImageCrop is doing is : <p> ImageCrop=-50 , -30,100,60,5 <p> Start at the Origin of 5 or " Center " . Then move -50 pixels left ( negative number is left , positive number is right ) and -30 pixels up ( negative number is up , positive number is down ) . Then capture 100 pixels of width , and 60 pixels of height , and that is the new image . This will crop and use 100 X 60 pixels of the center of the image . <p> Notes : <p> ImageCrop is done before any resizing of the image with the W and H general meter options @ @ @ @ @ @ @ @ @ @ " cropped " image will be resized to fit . <p> If W and H are not defined , ImageCrop will change the size of the entire meter container to the size of the " cropped " image . <p> GreyscaleDefault : 0 <p> If set to 1 , the image is greyscaled. ( color desaturated ) <p> ImageTintDefault : 255,255,255,255 <p> Color to tint the image with . If the alpha value is specified , the image can be made semi-transparent ( 0 means invisible , 255 mean fully opaque ) . The default value ( 255,255,255,255 for opaque white ) and leaves the image unaltered . <p> Note : Combining Greyscale and ImageTint recolors the image to the specified color . Without Greyscale , the specified color is added to the image ( i.e. the original image color is tinted ) . <p> ImageAlphaDefault : 255 <p> Opacity of the image ranging from 0 ( invisible ) to 255 ( opaque ) . If set , this overrides the alpha component specified in ImageTint . <p> ImageFlipDefault : None <p> Flips the image . Valid values are None @ @ @ @ @ @ @ @ @ @ 0.0 <p> Rotates the image by the specified angle in degrees . Negative angles can be used for counter-clockwise rotation . <p> **25;84;TOOLONG : 0 <p> If set to 1 , the image is rotated based on the EXIF data encoded in the image by a camera . <p> ColorMatrixN <p> Defines a 5x5 matrix used to manipulate the color values of the image . It is divided into five separate options , one for each row , each numbered . The default matrix is as follows : <p> ColorMatrix1=1 ; 0 ; 0 ; 0 ; 0 <p> ColorMatrix2=0 ; 1 ; 0 ; 0 ; 0 <p> ColorMatrix3=0 ; 0 ; 1 ; 0 ; 0 <p> ColorMatrix4=0 ; 0 ; 0 ; 1 ; 0 <p> ColorMatrix5=0 ; 0 ; 0 ; 0 ; 1 <p> The values on the main diagonal are , from top-left to bottom-right : Red , Green , Blue , Alpha and a placeholder . The values represent the percentage of the particular value present in the image , where 0.0 is none and 1.0 is normal . The remaining entries in @ @ @ @ @ @ @ @ @ @ in terms of another color ( e.g. the value of Red might have half of the Blue value added ) , with the entries in the final row ( ColorMatrix5 ) determining offset values that are added directly to the color ( e.g. ColorMatrix5=0.5 ; 0 ; 0 ; 0 ; 1 adds 50% to the red value ) . 
@@256143 <h> Contents <h> More <h> Using a Measure as a Variable <p> In Rainmeter , dynamic variables ( DVs ) let you use measure values almost anywhere you want . When you use a measure value in a Calc formula , there are special rules to consider . A Calc formula is the only place where you do not need DVs to use another measure 's value . For example : <p> MeasureA <p> Measure= ... <p> MeasureB @qwx22556 <p> Formula=MeasureA+3 <p> Sometimes , however , you may still want to use DVs to get a measure value into a Calc formula . Why ? Because in fact , every measure has two values : a number value and a string value . Normally , Calc formulas use the number value . But using DVs ( with brackets around the measure name ) forces Rainmeter to use the string value . Which means that this ... <p> MeasureB @qwx22556 <p> Formula=MeasureA+3 <p> ... does not always mean the same thing as this : <p> MeasureB @qwx22556 <p> Formula=MeasureA+3 @qwx22552 <h> When should I use brackets ? <p> In general , @ @ @ @ @ @ @ @ @ @ without brackets ) . This is the " safe " approach , because : <p> If a measure 's string and number values are the same , then dynamic variables are unnecessary . Calc measures without DVs are a tiny bit faster , and your formula will behave consistently whether or not DVs are enabled . <p> If the string and number values are different , then the string value may be inappropriate for mathematical calculations . <p> The common exception to this rule is when a substitute has been applied . ( See below . ) <h> When are the string and number values different ? <p> No math . If the original measure value contains any non-numeric characters , aside from valid operators , the number value is zero . This includes letters , punctuation and special characters . <p> You 'll probably never use a measure like this in a Calc formula to begin with . <p> Rounding . Even when a measure gives you an actual number , Rainmeter may round the string value to a certain decimal place . The number value preserves the " @ @ @ @ @ @ @ @ @ @ . <p> Even if you want a rounded number , the ROUND ( x , precision ) calculator function will give you much finer control over the result . <p> Formatting . Some measures return a formatted string value that is meant for display , but not for calculations . For example , the Time measure gives a string value with hours , minutes and seconds ( " HH:MM:SS " ) , which is how a real person would want to see the time , but which makes no sense in a math equation . The number value gives the raw Windows timestamp , which can be used by a Calc measure , e.g. to calculate the difference between two dates . <p> There may be cases in which you would want to use a formatted string value in a Calc formula , but these would likely be rare and unorthodox . <p> Substitution . Measure substitution is applied only to the string value , not the number value . For example : <p> MeasureA @qwx22556 <p> Formula=1 <p> Substitute= " 1 " : " 2 " <p> MeasureB @qwx22556 @ @ @ @ @ @ @ @ @ @ uses the number value of MeasureA . It ignores the Substitute string on Measure A. Therefore , MeasureB returns a value of 4 . In MeasureC , we use DVs to get the string value of MeasureA . This value has substituted the original value , " 1 " , with " 2 " . So MeasureC returns a value of 5 . <p> This means that if you need the substituted value of a measure , you will need to use DVs and brackets . This can be useful when the original value of a measure is not a number at all ( as in case #1 ) , but a Substitute is used to change it into one : <p> MeasureGetStatus @qwx22557 <p> **27;111;TOOLONG <p> URL=http : **34;140;TOOLONG <p> LONG ... @qwx22567 <p> Substitute= " Running " : " 1 " , " Offline " : " 0 " <p> MeasureCheckStatus @qwx22556 <p> Formula=MeasureGetStatus <p> IfEqualValue=1 <p> IfEqualAction= ! SetOption Light MeterStyle " Green " <p> IfBelowValue=1 <p> IfBelowAction= ! SetOption Light MeterStyle " Red " @qwx22552 <p> In this case , we have a web feed that @ @ @ @ @ @ @ @ @ @ But we ca n't do math on a wordsince neither of those values is a number or mathematical formula , the number value for both would be zero . Instead , we use a Substitute to transform the string value into " 1 " or " 0 " , respectively . That way , our Calc measure can compare it to our IfEqualValue and IfBelowValue , and take the right action . If 1 ( " Running " ) , then the light turns green ; if 0 ( " Offline " ) , the light turns red . <p> Substitution is virtually the only case in which you would want to use a string value in a Calc formula . <h> Other Notes <p> You can use measures as number values if you are using DVs elsewhere in the Calc measure . You can even mix types of measure values within the same formula : <p> MeasureD @qwx22556 <p> **36;176;TOOLONG <p> IfAboveValue=MeasureC <p> IfAboveAction= ! HideMeter MeterE @qwx22552 <h> A quick reference to using measure values <p> All measures that return numbers create them as both a " number @ @ @ @ @ @ @ @ @ @ return a number and a string that are the same . Some measures ( Win7Audio , Time , NowPlaying for instance ) can return a " number " and a " string " that are different . <p> Substitute acts only on the string value of a measure . <p> The About window in the Rainmeter context menu displays the string value of measures . <p> When you use the name of a measure in MeasureName= on a meter , the type of meter determines which is used . For instance , Bar meters use the number value , and String meters use the string value . Again , in most cases this is not important , as they are for practical purposes the same thing . <p> When you use the name of a measure in a Calc measure in a formula ( without square brackets ) , such as Formula= ( 200 * MeasureName ) , the number value is used . <p> When you use the name of a measure in a Calc measure or other formula ( with square brackets and DynamicVariables=1 ) , then the @ @ @ @ @ @ @ @ @ @ functionality offers some additional control . Used with DynamicVariables=1 , it uses the number value of the measure . This is particularly useful where you want to use the value of a measure dynamically in a formula on a meter or measure , while not getting the string or Substituted value . 
@@256144 <h> Options <p> Display format for the string value of the measure . This can be any combination of text and Time Format codes . <p> An example might be : <p> Format=%A , %B %#d , %Y %#I : %M %pTuesday , January 27 , 2015 3:22:30 PM <p> If Format is not defined , the string value returned is in the default format %H : %M : %S , however the number value will be a Windows timestamp . If Format is defined , the number value will be the value defined by the format , or zero if the format does not define a numeric value . <p> Note : If a Format option is defined , the Windows timestamp value of the measure can still be retrieved and used with the MeasureName:Timestamp section variable measure modifier . <p> TimeStamp <p> The TimeStamp option is used to define an alternative to the default current system date and time used by the measure . <p> This option can take one of several forms : <h> A numeric Windows timestamp . <p> If TimeStamp is a numeric Windows timestamp @ @ @ @ @ @ @ @ @ @ number , in seconds since January 1 , 1601 , will be used as the basis for measuring the date and time . <h> Daylight Saving Time codes <p> This can be one of several TimeStamp codes that represent various Daylight Saving Time values . <p> TimeStamp=DSTNextStart Returns the local date and time of the next start of Daylight Saving Time . <p> TimeStamp=DSTNextEnd Returns the local date and time of the next end of Daylight Saving Time . <p> TimeStamp=DSTStart Returns the local date and time of the start of Daylight Saving Time for the current year . <p> TimeStamp=DSTEnd Returns the local date and time of the end of Daylight Saving Time for the current year . <p> TimeStamp=DSTStartYYYY Returns the local date and time of the start of Daylight Saving Time for a defined year . Example : TimeStamp=DSTStart2016 <p> TimeStamp=DSTEndYYYY Returns the local date and time of the end of Daylight Saving Time for a defined year . Example : TimeStamp=DSTEnd2016 <p> Notes:These values can not be modified with the TimeZone option to obtain valid Daylight Saving Time information for another location . These are always @ @ @ @ @ @ @ @ @ @ A formatted date and time string . <p> TimeStamp can be any formatted date and/or time string . This might be a string the skin retrieves from a website with the WebParser plugin , or any string value that represents a date and/or time defined for the option . <p> Some examples might be : <p> **30;214;TOOLONG <p> TimeStamp=Tue , 27 Jan 2015 15:22:30 <p> TimeStamp=1/27/2105 15:22:30 <p> TimeStamp=Tuesday , January 27 , 2015 at 15:22:30 <p> Any date and time format can be used , as long as the constituent values can be expressed with any combination of the the Time Format codes and text . This form of the TimeStamp option MUST be used in conjunction with a matching TimeStampFormat option , which will be used to create a mask that will define the structure and values of the date and time string . <p> TimeStampFormat <p> The TimeStampFormat option creates a mask that defines the structure and values used in a matching TimeStamp formatted date and/or time string . If the TimeStamp option is not defined , or if the TimeStampFormat mask does not match the format @ @ @ @ @ @ @ @ @ @ . <p> The TimeStampFormat is created with any combination of the the Time Format codes and text , to create a mask of the TimeStamp option 's formatted date and/or time string . <p> In this usage , the TimeStamp and TimeStampFormat options are used together to turn a formatted string into a valid Windows timestamp . That timestamp value can be used for mathematical comparisons or formulas , or the Format and FormatLocale options can be used to format the timestamp any way desired for display . <p> Note : These values can not evaluate any time zone information in the string and can not be modified with the TimeZone option . What is internally arrived at by the measure is a resolution of the date and/or time string to a Windows timestamp , which is a number of seconds since January 1 , 1601 , and independent of any time zone . <p> TimeStampLocale <p> An optional value that defines the " language / locale " that the formatted date / time string defined in TimeStamp is in . <p> This will allow a TimeStamp formatted string that @ @ @ @ @ @ @ @ @ @ resolved when TimeStampFormat is defined . The TimeStamp and TimeStampFormat options are required to use this option . <p> The values for this option can be found at NLS Language / Locale Identifiers . The values in the columns " Culture Name " or " Language Name Abbreviation " or " Language " can be used . Be sure to select your Windows version from the pull-down on the top left to get the most accurate information . <p> Hint : In addition , a combination of " Language " , an " " underscore , " Country " ( from inside the parentheses in the " Locale " column ) a " . " dot and the value of the " ANSI Codepage " column can be used to be very specific . <p> Note : While the NLS Language / Locale information is included with all versions of Windows XP ( Service Pack 2 ) or later , extraordinarily rare cases of missing or damaged information can be corrected by downloading and installing the package at Microsoft National Language Support Downlevel APIs 1.0 . <p> FormatLocaleDefault : A @ @ @ @ @ @ @ @ @ @ " language / locale " that the measure value formatted by the Format option will be displayed in . <p> This will allow a Time measure 's value to be automatically " translated " , and displayed in a particular language when used with the Format option . This will translate things like the " month name " , " day of week name " and other text values to the language defined in this option . <p> The values for this option are the same ones defined for the TimeStampLocale option . <p> In addition , using the value Local , e.g. FormatLocale=Local on the measure will cause the output format to automatically use the date / time " locale " language and format set in Windows for the machine the skin is running on , rather than defaulting to a standard platform-agnostic " English " representation . <p> TimeStamp=Wednesday , February 18 , 2015 at **26;246;TOOLONG , %B %#d , %Y at LONG ... The result in a String meter will be the language and format representation appropriate for the system the skin is running on . <p> @ @ @ @ @ @ @ @ @ @ , the codes like %#c that return long or short representations of the date and/or time for the system locale or the locale defined by TimeStampLocale or FormatLocal are particularly useful for easily changing between locale values from the " input " to the " output " . Not only will it use the language defined by the locale , but also with the appropriate order , structure and punctuation . <p> TimeZoneDefault : local <p> If specified , GMT time is used , modified with the specified positive or negative offset number . E.g. TimeZone=-5 would measure the time as GMT -5.0 . If not specified , or set to local , local time for the computer is used . <p> **25;274;TOOLONG : 1 <p> If DaylightSavingTime is set to 0 and TimeZone is supplied , the current local offset for Daylight Saving Time is not applied to the value . <p> Note : All locations do not follow the same Daylight Saving Time schedule , if any . If a Time measure is intended to provide the time in a specific location , and that location follows a @ @ @ @ @ @ @ @ @ @ default value will be wrong on certain dates over the course of the year . In order to provide an accurate time , DaylightSavingTime must be set to 0 , and TimeZone must be set in a way that accounts for the current Daylight Saving Time rules for that location . <h> Format codes <p> The following formatting codes are used in the Format and TimeStampFormat options . <p> %a : Abbreviated weekday name . ( e.g. " Sat " ) <p> %A : Full weekday name . ( e.g. " Saturday " ) <p> %b : Abbreviated month name . ( e.g. " Dec " ) <p> %B : Full month name . ( e.g. " December " ) <p> %c : Abbreviated date and time for system or defined locale. ( e.g. " Sat Dec 26 22:55:03 2015 " ) <p> %#c : Long date and time for system or defined locale. ( e.g. " Saturday , December 26 , 2015 , 22:55:03 " ) 
@@256146 <h> More <h> Installing Skins <p> There are two ways of installing Rainmeter skins downloaded from the internet : <p> Automatically : If the skin is in the . rmskin format.In short : Double-click the . rmskin file , click Install . <p> Manually : If the file is a . zip/.rar/.7z archive.In short : Unzip the archive to the Rainmeter Skins folder . Refresh Rainmeter . <h> Installing Automatically <p> Skins in the Rainmeter Skin Packager ( . rmskin ) format can be easily and automatically installed with the Rainmeter Skin Installer . During a normal Rainmeter installation , the . rmskin extension is associated in Windows with the Skin Installer program , and simply double-clicking the file will install it in Rainmeter . <p> This dialog lists each component that will be installed . These may include : <p> Skins : At least one skin will always be included and installed in the RainmeterSkins folder . The author of the package may indicate that one or more skins will automatically be loaded when the installation is complete . <p> Layouts : If the author has added a layout @ @ @ @ @ @ @ @ @ @ folder . If Apply included layout is selected , the layout will be applied to Rainmeter following installation . <p> Plugins : If the author has added custom plugins to the package the appropriate 32bit/64bit architecture version of the plugin . dll files will be installed to the RainmeterPlugins folder . <p> Fonts : If an author has included font files with the package , they will be installed in the WindowsFonts folder . This may be disabled by unchecking Install fonts to system in the Advanced pull-down menu . <p> Addons : If an author has included addon executable files with the package , they will be installed in the RainmeterAddons folder . <p> If any of the skins to be installed already exist , they will be moved to a Backup folder before installation . This may be disabled by unchecking Backup skins in the Advanced pull-down menu . <p> Click Install to complete the installation of the package . <p> Note : If Rainmeter is being run as a portable installation , start SkinInstaller.exe from the Rainmeter program folder , and browse to the . rmskin file @ @ @ @ @ @ @ @ @ @ 1.3 , most skins had to be unzipped and moved to the Skins folder by hand . All versions of Rainmeter are 100% backwards-compatible , so these older skins will still work just fine . Here is how to install them : <p> First of all , if a skin comes in an archive , such as a ZIP , RAR or 7Z file , software is needed to " extract " them . 7-Zip is one of the popular choices , since it can handle almost any archive type . After installing the software , right-click the archive in Explorer to extract it . <p> The archive may include a readme.txt file with further instructions . If not , look for a folder with the same name as the skin - it might be inside another folder that is actually called " Skins " . Move the folder to the Rainmeter " Skins " folder : <p> C : **37;301;TOOLONG <p> 1 . " YourName " is an example . <p> Finally , right-click the Rainmeter Windows Notification area icon and select Refresh all . The new skins will @ @ @ @ @ @ @ @ @ @ context menus . 
@@256147 <h> More <h> Built-In Variables <p> Rainmeter automatically creates a number of helpful variables for each skin . These variables do not need to be defined in the Variables section and can not be directly modified by actions in a skin . Some built-in variables are dynamic . <h> Miscellaneous variables <p> The name of the section in which the variable is used . Provides a blank string if used in another context , such as GetVariable in a Lua script . <h> Monitor variables <p> Notes : <p> Monitor variables are dynamic , and DynamicVariables=1 will be required to detect changes when used in a skin . The values will be static when used in the Rainmeter section of a skin . <p> When the variables are used without specifying an @N monitor number , by default the values will be based on the primary monitor , where Rainmeter is started . In order to have the values reflect the monitor the skin is currently on , set AutoSelectScreen to " 1 " in Manage . or alternately , use the ! AutoSelectScreen bang in the skin . 
@@256148 <h> Script Measure <p> The script measure is used to load a Lua script from a file and interface with the script . The script file must be a text file , and typically has the extension . lua . <p> Much like plugin measures , each script measure creates a separate instance of its script . This means that a skin can have any number of scripts loaded simultaneouslyeven from the same script file . ( The order in which scripts are executed is determined by the measure order . ) " Global " variables are not shared between instances . <h> Dynamic Variables <p> Dynamic variables are generally not needed with script measures . This is because functions are provided to get the current values of variables , measures and options within Lua . If these functions are used in the Update function , they will return the current values at the time the function is called . <h> ! CommandMeasure <p> The ! CommandMeasure bang can be used to execute Lua code in the context of a particular script instance : <p> ! CommandMeasure " MyScriptMeasure " @ @ @ @ @ @ @ @ @ @ semicolons ( ; ) . All statements are global . <p> All statements must be passed as a single parameter in the bang . Because single-quotes ( ' ) and double-quotes ( " ) are both valid string containers in Lua , while only double-quotes are recognized in Rainmeter , single quotes are recommended when passing strings with ! CommandMeasure . <h> Initialize <p> If the Initialize function is defined in any script , the function is called one time ( without parameters ) when the skin is activated or refreshed . This happens even if the script measure is disabled . If the script file is changed by a ! SetOption bang , the new script 's Initialize function is called as well . <p> functionInitialize() <p> MyVariable = ' Hello , world ! ' <p> end <p> Actions that are needed to " set up " the script , such as declaring global variables , should be done in the Initialize function . <p> Using dofile <p> The dofile function can be used to include libraries or other snippets of Lua code . You must specify a full @ @ @ @ @ @ @ @ @ @ 'C : PathToDoFileSomeLua.lua ' ) . Use the GetVariable function if you want to use the #@# variable shortcut to the @Resources folder for the current config , or MakePathAbsolute if you want to have the . lua file be relative to the current skin folder . <p> functionInitalize() <p> LONG ... <p> **28;340;TOOLONG ( ' toolkit.lua ' ) ) <p> end <p> Note : While a dofile you call can be anywhere on your system , be aware that if you do not put the dofile . lua file somewhere in the path to the current config , you wo n't be able to distribute it with your skin as a . rmskin package . A . rmskin package can only distribute the contents of a single root config folder . <h> Update <p> If the Update function is defined in any script , the function is called ( without parameters ) whenever the script measure updates . The script measure responds normally to the Disabled option , the UpdateDivider option , and all measure bangs . <p> functionUpdate() <p> MyVariable = ' Hello , world ! ' <p> @ @ @ @ @ @ @ @ @ @ value determines what values are provided by the script measure . Strings and numbers in Lua are analogous to string values and number values in Rainmeter measures . Examples : <p> returnProvides 0 as the number value , and ' ' ( blank ) as the string value . The same is true if no return is stated . <p> return 99 and return ' 99'Provides 99 as the number value , and ' 99 ' as the string value . <p> return ' Ninety-Nine'Provides 0 as the number value ( because the string can not be converted to a number ) , and ' Ninety-Nine ' as the string value . <p> The values provided by the script measure can be used in the same way as other measure values . ( Note : the values only update when the measure itself updates . Calling Update() within Lua does not update the measure values . ) <h> Log <p> Lua errors are logged in the About window . The print function may also be used to write strings to the log . This can provide helpful feedback when writing @ @ @ @ @ @ @ @ @ @ value of MyVariable is : ' .. MyVariable ) <h> Functions <p> Lua functions are provided to identify a meter , a measure , or the current skin as a Lua object . Additional functions are provided for manipulating each type of object in specific ways . <h> SKIN object <p> The SKIN object is created automatically . <p> GetMeasureParameter : MeasureName <p> Creates a handle object for the named measure . Returns nil if the measure is not found . <p> Example:MyMeasure = **28;370;TOOLONG ' ) <p> GetMeterParameter : MeterName <p> Creates a handle object for the named meter . Returns nil if the meter is not found . <p> Example:MyMeter = SKIN:GetMeter ( 'MeterName ' ) <p> GetVariableParameter : VariableName , Default <p> Returns the current value of the named variable as a string . If the variable does not exist , returns the given default value , or nil if no default is given . <p> Note : In spite of the need for a separate SKIN:Bang() function for each bang you want to use , this second method is strongly recommended . You will quickly find @ @ @ @ @ @ @ @ @ @ define the bang(s) will quickly become very complicated to properly quote if the bangs themselves contain strings that must be quoted . <p> **25;400;TOOLONG : File/Folder <p> Converts a relative file path into a full file path . The path will be relative to the skin folder . <p> If the given string is a valid formula , evaluates the formula and returns the result as the number . Otherwise , returns nil . This can take advantage of mathematical functions in Rainmeter that may not be built into Lua . Remember that formulas in Rainmeter must be entirely enclosed in ( parentheses ) . <p> numToRound = 239.78 <p> roundedNum = LONG ... <h> Measure object <p> A Measure object is created using GetMeasure . It creates a handle to a specific measure in the skin , which can then be used with the following functions to act on the measure . <p> Returns the measure 's current number percentage value as a number , scaled from 0.0 to 1.0 . The result will be based on the current defined or derived MinValue and MaxValue of the measure . @ @ @ @ @ @ @ @ @ @ value range of the measure as a number . The result will be based on the current defined or derived MinValue and MaxValue of the measure , and will be the difference between the two . <p> Example:MyMeasureRange = **25;457;TOOLONG <p> Disable <p> Disables the measure . <p> **27;484;TOOLONG <p> Enable <p> Enables the measure . <p> **26;513;TOOLONG <h> SELF object <p> The SELF object is created automatically . SELF is a measure object linked to the current script measure . All measure object functions are valid for SELF . <p> MyScriptMeasureName = SELF:GetName() <h> Meter object <p> A Meter object is created using GetMeter . It creates a handle to a specific meter in the skin , which can then be used with the following functions to act on the meter . <p> Example:MyMeter = SKIN:GetMeter ( 'MeterName ' ) <p> GetOptionParameters : OptionName , Default <p> Returns the current value of the named option as a string . If the option does not exist , returns the given default value , or ' ' if no default is given . <p> Example:MySolidColor = **29;541;TOOLONG ' , ' 000000 @ @ @ @ @ @ @ @ @ @ as a string . <p> Example:MyMeterName = MyMeter:GetName() <p> GetXParameters : Absolute <p> Returns the current X position of the meter as a number . If the optional Absolute parameter is true , returns the absolute ( or " real " ) X position , which may be different than the defined option on the meter . <p> Example:MyX = MyMeter:GetX() <p> GetYParameters : Absolute <p> Returns the current Y position of the meter as a number . If the optional Absolute parameter is true , returns the absolute ( or " real " ) Y position , which may be different than the defined option on the meter . 
@@256150 <h> More <h> Settings <p> This page details the files and folders in which Rainmeter-wide and skin-specific settings are saved . These include each skin 's position , transparency , draggability , active or inactive state , " snapping " behavior , and other general options . Normally , the user does not need to edit these files directly . Most settings can be changed using the Manager , the context menu , or bangs . <p> Note : Many skins include features that are described as " settings , " " options , " " preferences , " etc. that allow the user to customize the appearance and behavior of the skin . However , these features are different from the " settings " described on this page . They are handled entirely by the skin , usually as variables , and are not managed by Rainmeter at all . Options such as fonts , colors , passwords , RSS feeds and " weather codes " are in this category . These are not " standard " features , and are not supported in any formal way . <h> @ @ @ @ @ @ @ @ @ @ in Rainmeter 's application data folder . If Rainmeter has been installed normally , the default location of the folder is : <p> C : **37;572;TOOLONG <p> If Rainmeter is installed as a portable application , settings files are found in the installation folder . <p> 1 . " YourName " is an example . <h> Rainmeter.ini <p> Most settings are saved in a file called Rainmeter.ini . The file is written as a standard INI file , which uses the following1 format : <p> Section <p> Key=Value <p> Each key is an option that modifies the property identified in the section name . The following sections are used in Rainmeter.ini : <p> When settings are changed in Rainmeter , they are saved to Rainmeter.ini automatically . If settings are changed in Rainmeter.ini , a refresh application command is needed to apply the new settings . <p> 1 . " Section , " " Key " and " Value " are examples . <h> Other Files <h> Rainmeter.data <p> This file is used by Rainmeter 's program and some plugins to store " global " settings that are not related @ @ @ @ @ @ @ @ @ @ that are not saved with layouts . <h> Rainmeter.stats <p> This file records Windows ' network usage statistics over time . These statistics are used by the Net measures to display " cumulative " network usage data . The contents of Rainmeter.stats may be cleared using the ! ResetStats bang . <h> NewSkin.template <p> This file contains a template for a new skin used by the Create new skin button in Manage . This can be edited as desired . 
@@256154 <h> Contents <h> More <h> Wrapping Text <p> You wrap text on a String meter by using the W and H options along with the ClipString option . <p> ClipString controls how strings are truncated ( clipped ) or wrapped to fit in or expand the containing meter . If ClipString is set to 0 or not used ( default ) , then the String meter will just expand in width to contain the entire string on one line . <p> Example : @qwx22547 @qwx22570 @qwx22549 @qwx22553 <p> MeasureSomeString @qwx22558 <p> Format=This is a long line of text used to demonstrate wrapping in a string meter . <p> UpdateDivider=-1 <p> MeterString1 @qwx22560 <p> **29;611;TOOLONG <p> W=160 <p> H=18 <p> X=0 <p> Y=0 @qwx22555 <p> FontFace=Tahoma <p> FontColor=255,255,255 @qwx22565 @qwx22561 @qwx22550 <p> ClipString=1 <p> MeterString2 @qwx22560 <p> **29;642;TOOLONG <p> W=160 <p> H=70 <p> X=0 <p> Y=5R @qwx22555 <p> FontFace=Tahoma <p> FontColor=255,255,255 @qwx22565 @qwx22561 @qwx22550 <p> ClipString=1 <p> MeterString3 @qwx22560 <p> **29;673;TOOLONG <p> W=160 <p> H=35 <p> X=0 <p> Y=5R @qwx22555 <p> FontFace=Tahoma <p> FontColor=255,255,255 @qwx22565 @qwx22561 @qwx22550 <p> ClipString=1 <p> MeterString4 @qwx22560 <p> **29;704;TOOLONG <p> W=160 <p> X=0 <p> Y=5R @qwx22555 @ @ @ @ @ @ @ @ @ @ MeterString1 : If ClipString=1 is used , then the W ( width ) setting is followed , and the string will be truncated or " clipped " at the width defined in W. An ellipse , or ... will be added to the end of the string to indicate clipping has taken place . <p> MeterString2 : If ClipString=1 is used , wrapping will take place if the H ( height ) setting is large enough to hold more than one line of text at your current FontSize setting . The string will wrap on as many lines as the H setting allows , in this example the entire string will fit in the width and height defined . <p> MeterString3 : If ClipString=1 is used and the H setting is not large enough to contain the entire string , the text will wrap on as many lines as he H supports , and then will clip with the ... ellipse . <p> MeterString4 : If ClipString=2 is used and W is defined , then the meter will expand in height automatically , to allow the entire string to display @ @ @ @ @ @ @ @ @ @ ClipString=2 is used and H is defined , then the meter will expand in width automatically , to allow the entire string to display while wrapping to follow the defined height . <p> ClipStringW and ClipStringH can be used to define maximum values for width or height . If it exceeds this boundary , the string will be clipped with the ... ellipse . <p> Both W and H are required when ClipString=1 is used . At least one of eitherW/ClipStringW or H/ClipStringH is required when ClipString=2 is used . <p> Note : The Padding option used to format the display of the backgrounds for the meters in the example above is added after all clipping or wrapping is determined , and has no impact on ClipString functionality , which is based on the original W and H settings on the meter . 
@@256155 <h> Contents <h> More <h> ColorMatrix Guide <p> Tip by kenz0 <p> The ColorMatrix option represents a 5x5 matrix used to manipulate the color values of an image in an Image meter . It is divided into five separate parameters , one for each row , each numbered . The default matrix is as follows : <p> The values on the main diagonal are , from top-left to bottom-right : Red , Green , Blue , Alpha and a placeholder . The values represent the percentage of of the particular value present in the image , where 0.0 is none and 1.0 is normal . The remaining entries in the matrix allow a color to have its value modified in terms of another color ( ex : the value of Red might have half of the Blue value added ) , with the entries in the final row ( ColorMatrix5 ) determining offset values that are added directly to the color . ( ex : ColorMatrix5=0.5 ; 0 ; 0 ; 0 ; 1 will add 50% to the red value ) <p> The following shows the actual matrix values @ @ @ @ @ @ @ @ @ @ From the above information , we can calculate the proper color matrix to transform a given image . To use all three matrices , we need to multiply them together into one single transformation matrix ( using matrix multiplication ) . The result of multiplication is as follows : 
@@256156 <p> Note : This will generally be the desired option for a left mouse click . LeftMouseDownAction should be avoided unless there is a specific need to trap the downward press , as it will disable the ability to drag the skin . <p> Note : Some manufacturers and/or software have the ability to change what each extra button can do , therefore these actions may not work for everyone . It is not recommended to distribute skins that rely on these actions . <p> Action to execute when the mouse wheel is tilted or rotated to the left . Not all mice have this capability . <p> MouseScrollRightAction <p> Action to execute when the mouse wheel is tilted or rotated to the right . Not all mice have this capability . <h> Mouse Cursor Options <p> MouseActionCursorDefault : 1 <p> When set to 1 ( default ) on a meter with a mouse action , a pointer cursor will be shown when hovering the mouse over the meter . <p> The default for the entire skin can be set to 0 by putting MouseActionCursor=0 in the Rainmeter section of @ @ @ @ @ @ @ @ @ @ meter-by-meter basis with MouseActionCursor=1 . <p> Note : If you have a meter with a mouse action , and there is a meter on top of it , you will need to set MouseActionCursor=0 on the foreground meter ( even if it does not have a mouse action ) . <p> MouseActionCursorName <p> If a custom cursor file ( i.e. . cur or . ani ) is found in @ResourcesCursors in the root config folder of a skin , it will be automatically loaded and available as an alternative for the standard " hand " pointer for meters or skins with a mouse action . <p> The option can be used with **40;735;TOOLONG in any meter or the Rainmeter section . No path is used in the option . In addition , several built-in Windows cursors may be used without needing any file name or extension . Hand , Text , Help , Busy , Cross , Pen 
@@256157 <h> General Options <p> UpdateDefault : 1000 <p> Defines the update interval of the skin in milliseconds . On each update , measures and meters are updated , and the skin is redrawn . <p> The lowest possible effective value for Update is " 16 " . Some care should be taken to only use very low update rates ( less than 100 ) when really needed , and to balance a low Update with DefaultUpdateDivider , or UpdateDivider on individual measures and meters , in order to keep the CPU usage by Rainmeter as low as possible . <p> Using -1 will update the skin only once on load ( or on refresh ) . The skin can then be manually updated using the ! Update bang . <p> Note : While Update=1000 will update the skin " once a second " , Update is not related to the system clock , and if a computer is busy or a complicated skin takes longer than the interval to complete a full update of the skin , updates can be unreliable in relation to elapsed time . Do not use @ @ @ @ @ @ @ @ @ @ functions . <p> **27;777;TOOLONG : 1 <p> Default number of updates at which skin measure and meter values are updated . The Update option is multiplied by the specified value to determine how often measures and meters are updated . <p> Example : If Update=1000 and DefaultUpdateDivider=30 , then by default all measures and meters are updated every 30 seconds . <p> If DefaultUpdateDivider=-1 or any negative number , then by default all measures and meter are only updated once when the skin is loaded or refreshed . <p> Note : This option is designed to set a default UpdateDivider for all measures and meters in the skin . It can be overridden by setting UpdateDivider on individual measures or meters . This option should be used when a low Update is desired to support animations or other skin elements requiring rapid update , while avoiding having to manually set an UpdateDivider on a great many other measures and meters that do not need to be updated as quickly . <p> AccurateTextDefault : 0 <p> If set to 1 , String meters are measured and rendered using improved padding and @ @ @ @ @ @ @ @ @ @ DynamicWindowSizeDefault : 0 <p> If set to 1 , the window size is adjusted on each update to fit the meters . <p> SkinWidth , SkinHeightDefault : None <p> Either or both may be set . This will set and constrain the skin to the fixed dimensions defined , either the width , the height , or both . Any meter or part of a meter positioned outside the defined boundaries will be truncated . DynamicWindowSize will be ignored for the defined dimension(s) , and meters that would normally display even " outside " the skin will be truncated by the fixed skin dimension(s) . <p> DragMarginsDefault : 0,0,0,0 <p> Uses 4 values separated by commas to define the area from where the window can be dragged . The values define a margin of non-draggable area . It 's also possible to use negative numbers in which case the margin is calculated from the opposite side . E.g. DragMargins=0 , -100,0,0 . <p> Note : The action(s) defined will take place at the redraw the skin . <p> OnCloseAction <p> Action to execute when the skin is unloaded or when Rainmeter is closed . <p> OnFocusAction <p> Action to execute when the skin receives focus in Windows ( focus is given when the mouse is clicked on the skin ) . <p> Note : The action(s) defined will take place at redraw the skin . <p> OnUnfocusAction <p> Action to execute when the skin loses focus in Windows ( focus is lost when the mouse is clicked outside the skin ) . <p> Note : The action(s) defined will take place at redraw the skin . <p> OnWakeAction <p> Action to execute when Windows returns from the sleep or hibernate states . <p> Note : The action(s) defined will take place at the redraw the skin . <p> TransitionUpdateDefault : 100 <p> Defines the update time in milliseconds for meter transitions . While a transition is active the meter will update at this rate . Currently , only the Bitmap meter supports meter transitions . <p> ToolTipHiddenDefault : 0 <p> If set to 1 , all tooltips in the skin will be hidden . More information on tooltips . <p> Group <p> Defines a group or series of groups that the skin belongs to . For more information please see the Groups page . <p> If BackgroundMode=3 , defines margins of the Background image that are not scaled . The parameters are left , top , right , bottom . <p> @ @ @ @ @ @ @ @ @ @ the bottom of the image are not scaled . <p> SolidColor , SolidColor2Default : 0,0,0,0 <p> This option will specify the background color when BackgroundMode=2 . If SolidColor2 is also specified , the background is a gradient composed of SolidColor and SolidColor2 . <p> Hint:SolidColor=0,0,0,1 can be used to make transparent areas of the background clickable . <p> GradientAngle <p> Angle of the gradient in degrees ( for SolidColor and SolidColor2 ) when BackgroundMode=2 . <p> BevelTypeDefault : 0 <p> If enabled , draws a bevel around the edges of the entire skin when BackgroundMode=2 . Valid values are : <p> 0 : No bevel <p> 1 : Raised <p> 2 : Sunken <h> Context options <p> ContextTitle , ContextTitle2 , ContextTitle3 ... <p> If not blank , adds an item to the skin 's context menu under " Custom skin actions " . Up to 25 ContextTitleN options are allowed , with up to 30 characters per option . Additional characters are truncated with an ellipsis ( ... ) . If more than 3 ContextTitleN options are given , " Custom skin actions " becomes a submenu . If @ @ @ @ @ @ @ @ @ @ options are ignored . In addition , if more than 3 options are given , and the value of ContextTitleN includes only dashes ( - ) , the item is displayed as a separator . <p> Note : Variables in ContextTitleN are always dynamic . Variable values are read at the time the context menu is opened . This means that the ! SetOption bang can be used to change these values . <p> ContextAction , ContextAction2 , ContextAction3 ... <p> Action triggered by clicking the corresponding ContextTitleN item . ContextActionN is required for ContextTitleN to be valid , unless the item is a separator . <p> Note : Variables in ContextTitleN are always dynamic . Variable values are read at the time the context menu is opened . This means that the ! SetOption bang can be used to change these values . <h> Aero Blur options <p> BlurDefault : 0 <p> Set to 1 to enable Aero Blur on the Windows Windows 7 operating system . If no BlurRegions are specified , the entire skin background is blurred . <p> Note : The function will not work on @ @ @ @ @ @ @ @ @ @ , ... , BlurRegionN <p> Defines areas and shapes of the one or more regions of the skin to be blurred . The format of the option is : BlurRegion=Type , TopX , TopY , BottomX , BottomY , Radius . <p> Valid values for Type are : <p> 0 : Region is disabled <p> 1 : Rectangular region <p> 2 : Rectangular region with rounded corners ( requires Radius ) <p> 3 : Elliptical region <p> The parameters following Type define the size and shape of the region . They are , in order : <p> TopX : Top left horizontal point in the skin <p> TopY : Top left vertical point in the skin <p> BottomX : Bottom right horizontal point in the skin <p> BottomY : Bottom right vertical point in the skin <p> Radius : Radius of the corners of rounded rectangles ( required for Type=2 ) <p> Note : Aero Blur options can be dynamically controlled with several bangs . <h> Example @qwx22547 @qwx22570 <p> Blur=1 <p> **25;843;TOOLONG <p> ; BlurRegion creates a rectangle starting at 10 pixels from the left , 10 pixels down @ @ @ @ @ @ @ @ @ @ the right , 50 pixels from the top . <p> **26;870;TOOLONG <p> **31;898;TOOLONG <p> Background @qwx22559 <p> W=200 <p> H=180 <p> SolidColor=0,0,0,50 <p> LeftMouseUpAction= ! AddBlur " 1,0,0,200,80 " <h> Deprecated options <p> Author <p> The author of the skin . <p> Note : This option is deprecated . Author should be defined in the Metadata section of the skin . <p> AppVersion <p> Defines the minimum version of Rainmeter required to use the skin . The formula to calculate the value is : major * 1000000 + minor1 * 1000 + minor2 . <p> Note : This option is deprecated . Use the version capabilities in Skin Packager . <p> LocalFont , LocalFont2 , ... <p> Loads the specified TTF font files for use with FontFace in String meters. 
@@256159 <h> Rainmeter 4.0 <p> The following are the changes for the 4.0 beta version of Rainmeter . You can safely install the new 4.0 beta version right over top of your existing Rainmeter 3.3 or earlier installation , and nothing you have done will be lost or changed . There is never any need to uninstall any earlier version of Rainmeter to use the newest version . <h> Important change to Rainmeter 4.0 <p> Due to future application improvements we intend , which will require the latest version of the Direct2D / DirectWrite graphical engines : <p> As of Rainmeter 4.0 , Windows XP and Windows Vista are no longer supported by the application . <p> Rainmeter 4.0 requires at least Windows 7 with Service Pack 1 and the Platform Update applied . These should have been automatically applied several years ago by Windows Update , but if you have Windows Update turned off you may need to get and apply these updates manually . Windows versions later than Windows 7 are fully supported . <p> If you are on Windows XP or Windows Vista , and ca n't or @ @ @ @ @ @ @ @ @ @ stay on the 3.3 Release version of Rainmeter . <h> Changes in Rainmeter beta 4.0 <p> Additional details on important changes as the beta cycle progresses can always be found at Change Announcements . <p> December 19 , 2016 - Revision 2731 <p> Added New Skin dialog . This new dialog is opened with the Create new skin button in Manage , or by using the context menus on existing folders . This will allow you to add new root-level folders and skin files , or add folders or files to existing skins . See New Skin for details . <p> December 4 , 2016 - Revision 2722 <p> Changed InputText plugin : InputNumber option has been changed to support negative and fractional numbers . A single - may be the first character , and a single . character may be entered anywhere in the input . <p> Added Manage : Add a Create new skin button to the top of the skins list . This will create a new root-level config / skin using a skin template you can edit . The new skin will be selected in Manage @ @ @ @ @ @ @ @ @ @ meter : Corrected an issue where using TransformationMatrix on a Shape meter would cause incorrect mouse detection . <p> Fixed Rainmeter : Corrected an issue parsing options that use the pipe character as a separator , if they also contained a formula that used the Logical OR operator . <p> November 6 , 2016 - Revision 2679 <p> Added Shape meter : Draws shapes using Vector graphics . Rectangle and Combine shapes , as well as all Attribute and Transform modifiers implemented in this first beta . See the documentation at : Shape Meter , and other details and examples at Change Announcements . <p> Changed String meter : Changed the number of degrees of angle in InlineSetting Gradients to allow fractional numbers . ( e.g. 45.5 ) . <p> Fixed About dialog : Corrected an issue where tabs were not being correctly displayed in the Log and Skins panels . <p> Fixed RunCommand plugin : Corrected a rare issue when the command is run by OnCloseAction , where Rainmeter would unexpectedly terminate and the command not execute . <p> Changed Language : Updated the Polish language . <p> September @ @ @ @ @ @ @ @ @ @ : Corrected an issue in r2620 that could cause Lua to crash Rainmeter in rare cases . <p> September 4 , 2016 - Revision 2620 <p> Fixed Illustro skins : Changed the remote site used to get the user 's WAN IP address in the Network.ini skin . <p> Changed Lua scripting : Corrected an issue where anything defined in the Initialize() function of a Lua script was treated as " global " across all skins using Lua , which could cause " bleeding " of defined variables between skins , or between script measures in a single skin . Each Lua measure will now run in an entirely separate local context . <p> Changed Lua scripting : The above change to the context of each Lua measure in a skin has allowed for the use of the Lua dofile function in your scripts . Some changes were made to the standard Lua dofile functionality to support Unicode characters in a file path , and to improve error logging . <p> July 13 , 2016 - Revision 2618 <p> Fixed String meter : Corrected an issue where the position of @ @ @ @ @ @ @ @ @ @ was also used on the meter . <p> July 12 , 2016 - Revision 2617 <p> Added String meter : Added Shadow InlineSetting type to String meter Inline options . This will allow you to add a drop shadow to all or part of a string . <p> June 1 , 2016 - Revision 2613 <p> Fixed String meter : Corrected an issue where ClipString=1 was not working correctly if W ( width ) was defined without defining H ( height ) . <p> Note : If you are not sure what User Agent String or HTTP Header Fields are or whether or not you need them , then you do n't ... <p> March 22 , 2016 - Revision 2607 <p> Fixed Corrected a rare issue where skins might be loaded with only partial opacity when Windows is first started . <p> Changed The Rainmeter notification area icon is forced to be visible any time there are no skins loaded in Rainmeter . This will temporarily override any setting for " Show notification area icon " in Manage . This change is to eliminate the possibility that a user @ @ @ @ @ @ @ @ @ @ skins , thus no longer having any way to interact with Rainmeter . <p> Changed Language : Updates to Russian language . <p> March 18 , 2016 - Revision 2601 <p> Fixed Corrected an issue with the Insider Preview builds of Windows 10 that would not display the Rainmeter Notification Area / System Tray icon . <p> Fixed String case : Corrected an issue with non-English characters in the string case functionality of both StringCase and InlineSetting=Case in String meters . <p> March 17 , 2016 - Revision 2599 <p> Added String meter : Added Case InlineSetting type to String meter Inline options . This will allow you to set the string case to one of Lower , Upper , Proper , or Sentence for all or part of the displayed text . <p> March 12 , 2016 - Revision 2593 <p> Added SysInfo : Added DOMAINWORKGROUP SysInfoType value to the SysInfo plugin . This will return either the " domain " or " workgroup " set for the system . <p> Added WebParser : Added LogSubstringErrors parent measure option . If set to " 0 " , this will @ @ @ @ @ @ @ @ @ @ This can be useful when for instance you are using lookahead assertions in a regular expression , and missing ( captures ) should not be treated as an " error " . <p> Added SysInfo : added a new ADAPTERTYPE SysInfoType option for the SysInfo plugin . This will return the adapter type ( Ethernet or Wireless ) as both string and number values . Details can be found at Change Announcements . <p> Changed InlineSetting : Changed the default value for InlinePattern(N) to . * ( the entire string ) when the option is left off or set to " " . This will allow you to set an InlineSetting on the entire string value without needing to define any matching InlinePattern . Details can be found at Change Announcements . <p> Fixed GradientColor : Corrected a bug that would not properly adjust a GradientColor InlineSetting when the width or height of the meter was changed but the string value was not . 
@@256163 <h> Contents <h> More <h> Transformation Matrix Guide <p> Tip by Alex2539 <p> One of the coolest , but undoubtedly most confusing additions to Rainmeter is the TransformationMatrix setting . In theory , using this setting on a meter will allow you to scale it , to rotate it , to flip it , to skew it in any way you choose . In practice , it makes your head hurt with all of the mumbo jumbo associated . Here , I hope to provide a decent explanation on how to use these transformations so that you can make bigger , better skins for the world . <h> Understanding Matrices <p> Depending on what math courses you 've taken , you may already know what a matrix is . If not , it 's somewhat important to understand them . In this section I 'll explain what they are to those of you who do n't know . Once you understand what a matrix is and how to work with it , a transformation matrix will be no sweat for you later on . <p> A matrix ( the plural @ @ @ @ @ @ @ @ @ @ all organized in a rectangular grid . The grid can have as many rows and columns as you like , depending on what you 're going to be using the matrix for . In the world of mathematics , matrices have applications in almost every field . They are most commonly used in linear algebra , where you try to solve multiple equations with multiple unknowns . They can , however also be used in geometry . That 's where we come in . By representing any point using a matrix , we can use a second matrix to modify that point in any way . This is called a transformation . When you have a lot of points that make up shape or an image , you can apply that transformation to every individual point , and the result will usually be something familiar , like a rotation , a stretch , a movement or even combinations of them . That 's right , you can make something bigger and tilted at the same time . <p> When you write out a matrix by hand , all of the @ @ @ @ @ @ @ @ @ @ the whole thing is surrounded by two giant square brackets . Unfortunately , there 's no easy way to do that here , so when I write out a matrix , I 'll just use a bunch of bars on each side to represent it . Do n't get too caught up on it , it 's just to make it clear where the matrix starts and ends . You 'll notice that the Rainmeter help file does the same thing . <p> When writing the size of a matrix , we say it m x n where " m " is the number of rows and " n " is the number of columns . So , as you can see , a matrix can be any shape and have any kind of number , decimals included . You can even put variables in there and , with sufficient information , actually solve the matrix to find the values of the variables . It 's like solving for X in an equation , but bigger and better . We 're not going to go into that though since it @ @ @ @ @ @ @ @ @ @ . <h> Transformation Matrices <p> As I said at the start , one of the applications of matrices is in geometry where we can represent points as matrices and use other matrices to transform them . This is exactly what Rainmeter is going to do for you . At least , it will once you know how to tell it to do that . <p> In this matrix , a , b , c , and d are different values which will affect the shape of what we want to transform . The variables tx and ty are the values by which the x and y ( horizontal and vertical respectively ) coordinates will be moved . The last row that shows " 0 0 1 " can be used , but not by Rainmeter , so we 'll leave those three values alone . Just know that they 're there and that they are 0 , 0 , and 1 . <p> Next we have to have a matrix that represents the position of the point we want to transform . It will look like this : <p> x @ @ @ @ @ @ @ @ @ @ are the coordinates of the point and that last 1 wo n't really be used , just keep it there . By the end , every point in the object you want to transform will be covered by this . Luckily , Rainmeter does all of that math for you . So just sit back and watch it go ! <p> The transformation matrix used by Rainmeter is exactly like this . The only difference is that since that last row never changes , you do n't have to deal with it when you 're typing in the TransformationMatrix setting . After all , it would get a little tedious writing in 0 ; 0 ; 1 at the end every single time . Oh , but do n't write it in thinking you 're " clever and doing it the right way " . That will just cause an error and there will be no transformation for you . Rainmeter leaves it out , so you leave it out . <p> Applying a Transformation Matrix <p> Now that we have the model for a transformation matrix as well as @ @ @ @ @ @ @ @ @ @ the two together ? How do we say " Hey , Mr. Point , do what that other matrix tells you ! " . The answer is through multiplication . One of the handy things you can do with matrices is multiply them together . The only caveat is that if you have matrices A and B , A x B does not equal B x A. The order of multiplication is important . I repeat : THE ORDER OF MULTIPLICATION IS IMPORTANT . The matrix on the left must have the same number of columns as the number of rows in the matrix on the right . Here are some examples : <p> So , in order to multiplying the transformation matrix by the coordinates will have to look like this : <p> a c tx x b d ty x y 0 0 1 1 <p> The result of a matrix multiplication is another matrix . The new matrix 's size will come from the other two . It will have the same number of rows as the first matrix and the same number of columns as the @ @ @ @ @ @ @ @ @ @ a 3x1 matrix will result in a 3x1 matrix . Multiplying a 3x2 matrix by a 2x3 matrix will result in a 3x3 matrix . Multiplying a 3x3 matrix by a 3x2 matrix will result in a 3x2 matrix , etc ... The trick to remember is that if you write the dimensions of the two matrices next to each other in the same order you would multiply them ( ex : 3x3 3x1 ) then the two inner numbers should match and the two outer numbers will be the size of the new matrix . <p> That 's all there is to it . By doing that , you 've successfully transformed that one point . Well ... Rainmeter actually does the work , but now you know what it does . But how does it work ? I have n't told you how to actually multiply the matrices yet , I just told you how to set it up . Multiplying matrices is a little more involved that just multiplying two numbers together . You have to break it down and go row by row , column by @ @ @ @ @ @ @ @ @ @ what the result will look like . Since we are multiplying a 3x3 and a 3x1 , the result will be another 3x1 . It 's no coincidence that it 's the same shape as our coordinate vector since the result is just the new set of coordinates . It could be written like this : <p> a c tx x x ' b d ty x y = y ' 0 0 1 1 1 <p> Now we 'll go through how to get some actual values for the result . First , take the first row of the first matrix and the first column of the second matrix . In this case , that 's a , c and tx from the transformation matrix and x , y and 1 from the coordinate vector . Next , we multiply the corresponding values in each set of numbers ( first times first , second times second , third times third ) and add them all together . If you were to write it as a formula , it would look like this : x ' = ax + cy @ @ @ @ @ @ @ @ @ @ be x ' ( read : x-prime ) which is the new location for the x coordinate . <p> Next , we move on to the second row of the transformation matrix . Again , we take the corresponding values and multiply them : y ' = bx + dy + ty . Here , the result is y ' ( read : y-prime ) which is the now location for the y coordinate . <p> Finally , we move on to the last row of the transformation matrix and do the same thing . Notice that the first two values here are zero . That means that x and y are multiplied by zero , so they have no effect of the result . Then the 1 is just multiplied by 1 . That means that the final value is 0+0+1=1 . This is why Rainmeter pulls out the last row . As you can see , it will always come out the same . But , we 're going to keep it in for now since it will actually be necessary for the more complicated transformations . <p> @ @ @ @ @ @ @ @ @ @ move on the the next one and multiply down all of the rows again . This would give us the next column of the result . But , since we only have a vector our job is done . <h> Transformations <p> Alright ... now we know what a matrix is , we know what the matrices we want to use look like and we know how to apply our transformations . But just what are the transformations ? How do we use this to scale and skew ? Well , I 'll tell you . The simplest way to think of it is like this : each value in the transformation matrix has a different job . I 've already told you that tx and ty are for translations ( the fancy word for just plain moving it around ) . The rest also have specific purposes : <p> a is used to scale the x value <p> d is used to scale the y value <p> c is used to skew the x value <p> b is used to skew the y value <p> That 's right , @ @ @ @ @ @ @ @ @ @ It 's as simple as that . If you make a=2 , then the x value will double in size . If you make a=0.5 and d=0.5 , the whole thing will shrink to half the size . One neat trick is to make the values negative . Doing that will flip the image as well . For example , if a=-1 , then the image will be flipped along the vertical axis . The one that may not be entirely intuitive is the skewing . The simple way to understand it is to go back to our multiplication . Remember that the new x value is represented by this : x ' = ax + cy + tx . You already know that this means x will be scaled by whatever a is , it will be moved by whatever tx is and ... what 's that " y " doing there ? That 's the skew . A skew will alter one dimension according to the other . So the farther down the shape is , the more x is shifted . It 's still the same height @ @ @ @ @ @ @ @ @ @ . In the end it looks like the shape is slanted . Or , in pictograms : <p> --&gt; / / <p> At this point you can make a simple testing skin in Rainmeter to try things out . It does n't have to be complicated . I suggest just something like this : <p> MeterBG @qwx22559 <p> w=200 <p> h=200 <p> **26;931;TOOLONG <p> MeterSquare @qwx22559 <p> w=50 <p> h=50 <p> x=75 <p> y=75 <p> SolidColor=0,0,0 <p> TransformationMatrix=1 ; 0 ; 0 ; 1 ; 0 ; 0 <p> That will give you nothing more than a black square on a semi-transparent white background . The background is only there because when you see a transformed square , Rainmeter still sees the original square . Anything outside the skin 's borders gets clipped , so if the square where alone , any transformation would get clipped off by the tiny border . By adding a background , you basically just increased the size of your playground . If you read Rainmeter 's help section on Transformation matrices , it will tell you this : <p> TransformationMatrix This defines a 3x2 @ @ @ @ @ @ @ @ @ @ There must be exactly 6 values separated by ' ; ' -character ( e.g. " 1 ; 0 ; 0 ; 1 ; 0 ; 0 " ) which define the matrix in order of " m11 ; m12 ; m21 ; m22 ; m31 ; m32 " . m11 m21 m31 m12 m22 m32 <p> As I already explained , that matrix is that same transformation matrix I 've shown you , only with the bottom clipped row off since you do n't need to work with it . The important part is the placement of the values in the string . If you use the letters I do , the string will look like this : TransformationMatrix=a ; b ; c ; d ; tx ; ty . I 'll bet you were wondering why I picked the letters I did . Well , that 's why . Now that you know what each letter does , using them is as simple as putting them in the right order . <p> So that 's it . If you want to stretch it and skew it , then those @ @ @ @ @ @ @ @ @ @ ? Rotation seems like it would be more straightforward than skewing . After all , I turn things all the time , but how often does a person skew ? In the case of transformation matrices , there 's no single value you can change that will result in a rotation . The only way to do it is to combine stretching and skewing . Think of it this way : if you skew along the x-axis , all of the vertical lines become slanted . Now , if you skew along the the y-axis , all of the horizontal lines will be slanted . But , what if you skewed it just enough that the angles stayed at 90 degrees ? I 'm going to save you some time and tell you right now that it works . It 's simple too . Just skew it negatively the same amount you skewed it the other way . So , if you skew x by 1 , skew y by -1 . If you do that , you actually wind up with a 45 degree counterclockwise rotation around the top-left @ @ @ @ @ @ @ @ @ @ switch the positive and negative . So there you go . You have a 45 degree rotation . <p> Did you try it out ? Did you make that sample skin rotate that square with TransformationMatrix=1 ; -1 ; 1 ; 1 ; 0 ; 0 ? If you did , you 'll notice two things . First , the whole thing just moved up to the top . That 's got to do with how Rainmeter sees things and we 'll get to that later . The second thing you should see is that yes , the square is now a diamond , but it also got bigger . It 's actually been multiplied by about 1.414 , in case you were wondering . Remember what skewing is ? When you skew along the x-axis , the height stays the same . So yes , you do get some nifty diagonal lines , but they 're also longer than they used to be . When you skew along the y-axis , you get more diagonals that are also longer than they used to be . Remember when I said @ @ @ @ @ @ @ @ @ @ Well here 's how to do it properly . You ca n't just change a and d to get a smaller square . Try it . It 'll get smaller , but it will also rotate more . You have to change what it 's skewing by . How do you know what that is ? Well , to be honest , it 's pretty long winded and I do n't want to get into it , so I 'll just give you the formula : <p> a = cos(angle) <p> b = -sin(angle) <p> c = sin(angle) <p> d = cos(angle) <p> There you have it . That will rotate your object by whatever you specify " angle " to be . You 'll notice it looks a lot like what you wanted it to , does n't it ? You skew it by the same amount along each axis , with one of them flipped to negative , then you scale it to make sure it 's the same size again . If you want to rotate the other way , just make c negative and b positive @ @ @ @ @ @ @ @ @ @ know how to scale , skew and rotate . Using these you can get some pretty interesting effects . But first , there 's a question on your mind . If you 've been experimenting in Rainmeter , then you must surely be asking yourself ... <h> What the heck is Rainmeter doing ? ! <p> Glad you asked . You see , when you tell Rainmeter what you want it to do , you have to realize that it sees things differently than you do . For example , if you want to scale something , you see it as wanting to do this : <p> Rainmeter will try to do this : <p> Every transformation you do will always be relative to the origin . That 's the point with coordinates ( 0,0 ) . Normally , that would be the top-left corner of your object . However , according to Rainmeter , the origin will always be the top-left corner of the entire skin . That 's why when you rotated the square , it shot up to the top . It rotated alright , but it @ @ @ @ @ @ @ @ @ @ skin , not around its own corner . For this reason , whenever you scale , skew or rotate something , you have to take into account that the whole thing is going to move . Adjusting for this is pretty simple . All you have to do is pick a point that you do n't want to move and translate the whole thing so that that one point is back where it 's supposed to be . <p> Let 's say you want to scale it by 1.5 in both directions and have the top-left corner stay in the same place . First , you have to find to coordinates of that point . In this case , it 's pretty simple : it 's just the x and positions of your square . If you 're using the test skin I suggested ( and why would n't you be ? ) that would mean that your square is at ( 75,75 ) . Next , you have to find out where it 's ended up and work from there . To do this , just look at our @ @ @ @ @ @ @ @ @ @ scaling it by 1.5 and our x and y are 75 , then the multiplication should look something like this : <p> We already know what x ' and y ' are . We want them both to come out to 75 . So , if you plug 75 into both equations and solve for tx and ty , you 'll wind up with this : tx = 75 - 75*1.5 = -37.5 ty = 75 - 75*1.5 = -37.5 <p> Of course , by " we do the math " I mean " Rainmeter does the math " . Remember that this part will be taken care of by Rainmeter , but it 's good to know exactly what 's going on so that you are n't shooting in the dark when something goes wrong and you need to fix it . By the way , in case you had n't noticed , our square 's back where it should be . Happy day ! <p> That technique will work for any transformation you use . Of particular interest is when you use it with rotation . When you @ @ @ @ @ @ @ @ @ @ point that wo n't move . Every other will go around it by however much you specify . If you want an image to just rotate about itself , you can use the center of the image as the center of rotation and use the technique you just learned to shift that point back to where it started off . In fact , let 's try it with our square . Let 's say we want the square to rotate by 30 degrees counterclockwise about its own center . First , where 's the center ? Well , in our case , it 's right smack dab in the middle of the skin : ( 100,100 ) . Next , we 'll need to figure out the transformation matrix for a 30 degree rotation . If you remember , that 's a scale and a skew in every direction using the sin and cosine of the angle . This is what it 'll look like : <p> Some of you might be complaining that there are a lot more than four decimals in the answers , but Rainmeter does n't @ @ @ @ @ @ @ @ @ @ just a few . So now let 's see what our full transformation matrix will look like : <p> Unfortunately when you go to implement this , Rainmeter wo n't let you use cos(30) and sin(30) as values . You 'll have to get actual values . In the end , you should have something like this : <p> LONG ... <p> And that will get you a square that is rotated counterclockwise by 30 degrees around its center . What 's that ? You wanted it to go clockwise ? Well just switch around values b and c and recalculate tx and ty . It should come out to : <p> LONG ... <p> Those are the basics . You can now stretch , slant and spin a meter in any way you like . But , keep reading because it gets better ! <h> Multiple Transformations in One ! <p> You might be thinking to yourself " Hey , I like rotating and stretching , but what if I want to do both ? " . Well the answer to that is not so obvious . Let 's @ @ @ @ @ @ @ @ @ @ . You might be thinking that you know how to rotate it and you know that the a and d values are for scaling , so why not do a rotation and double those values ? Well , remember what happened when you first tried to simply scale that first skew-rotation ? It changed the angle and the new size was n't easy to predict . So what do you do ? The answer is matrix multiplication . <p> If you wanted to scale and rotate something , the first thing you have to decide is what order you 'll do it in . Remember that since we 're dealing with matrix multiplication , the order is going to matter . In fact , it 's almost intuitive . Let 's say that you want to rotate your square 15 degrees around the top-left corner , then scale it so that that top-right corner stays in the same place . Now imagine doing it the other way around . Scale it first , then rotate it . You 're going to get different results . Sure , you 'll have @ @ @ @ @ @ @ @ @ @ , but the two methods get different results . So , before you start , make sure you know exactly how you want to do this . <p> To figure out how you 're going to get Rainmeter to do this , start by thinking how you would do it by hand . If you decided you want to rotate it first , you would apply the appropriate transformation matrix and get its results . Do n't worry , I did the math for you : <p> That will rotate every x and y position to x ' and y ' and shift it upward . You now want to take what you just did , and scale the whole thing by 2 , keeping the top-right corner where it is . The transformation matrix for that is pretty simple : <p> And that 's it . You just apply two transformation matrices , on on top of the other . But look at it more closely . What have you really done ? If you replace the vector in that second transformation with what it actually is , which @ @ @ @ @ @ @ @ @ @ While the order your multiply matrices in does matter , if you have three or more being multiplied at once , it does n't matter which pair you start with as long as they are adjacent . For example , if you have three matrices A , B and C and you want to multiply them together to get a new matrix D , you would use A x B x C = D. From there you can either do A x B = M and then M x C = D , or you can do B x C = N and then A x N = D. Either way will get you the same answer as long as overall , the order of the matrices is preserved . If we apply that rule to our current situation , we can multiply our two transformation matrices together first . If you remember the trick , you already know that a 3x3 times a 3x3 will give you another 3x3 matrix . So , how do you multiply these ? It 's exactly the same as I mentioned before . @ @ @ @ @ @ @ @ @ @ first column of the second matrix , multiply the corresponding values , and add it all up to get the first value . Do that for every row and column . If you 're not sure where these values are going to be put in the new matrix , just remember which row and column you 're working on . Thing of it like a crosshair . Your target is going to be where the two lines intersect . For the first row and column , they intersect on the top-left value . That means whatever value you get will go in that position in the new matrix . <p> In the end , you 'll have a new 3x3 matrix . The only problem is that the process of getting this new matrix is long , tedious and error-prone . But , there 's a better way . Make someone else do the work for you ! There are many different resources that will multiply matrices automatically . A graphing calculator will do it , but if you do n't have one on hand , you can always go @ @ @ @ @ @ @ @ @ @ your matrices and make sure that in the " C= " field that they 're multiplying in the correct order ( your second transformation goes first ) . By plugging in our original two matrices , I got the following new matrix : <p> 1.9318 0.5176 -157.0034 -0.5176 1.9318 -18.1255 0 0 1 <p> You 'll notice that the telltale bottom row makes this new matrix look suspiciously like a transformation matrix . Well , that 's because it is . It turns out that multiplying two transformation matrices together just makes a new one ! And , if you followed the derivation , this new , single matrix is the exact same as doing one transformation , then the other . If you plug in the values in Rainmeter , you 'll get something like this : <p> **27;959;TOOLONG ; -0.5176 ; 0.5176 ; 1.9318 ; -157.0034 ; -18.1255 <p> Try it out . Your square will do exactly what it was meant to . First it will rotate itself , with the top-left corner as the center of rotation , then the square doubles in size , keeping @ @ @ @ @ @ @ @ @ @ will work with any two transformations . In fact , if you wanted to transform it a third time , you just need to multiply a third matrix . It all works as long as the order is preserved . <p> That 's it . That 's all you need to know . With this information , you can now transform any meter in any way you choose . Using this you can get some pretty interesting shapes . Just remember that left and right sides will always be parallel and the same length , as will top and bottom . That means no trapezoids , no strange quadrilaterals , only parallelograms . But that 's your only restriction . <h> Help ! It 's not working ! <p> Sit down and take a deep breath . If it 's not working , just go over what you did . After all , it 's all math and you 're only human which means there are going to be mistakes . Look over what you did step-by-step . Redo it if you have to . Make sure that everything is @ @ @ @ @ @ @ @ @ @ when you write it out it looks like this : TransformationMatrix=a ; b ; c ; d ; tx ; ty . If you did multiple transformations , make sure that they were done correctly . After all , different orders can give incredibly different results . Finally , make sure that what you want to achieve is possible . Remember what transformations you 're restricted to : scale , skew and rotate . That means that while you can get some interesting effects , there is no way whatsoever that you can get a trapezoid . That is , whatever the left and right sides originally were will always be parallel to one another and will always have the same length . The same goes for top and bottom . <h> Bonus ! Some helpful tips : <p> The following are just a few tricks that I find useful . In the future , answers to questions may show up here as well . <p> Specific Skews : So you know how to skew , but how to you skew at the angle you want ? Well , the @ @ @ @ @ @ @ @ @ @ or may not know , the equation of a straight line on a graph is y=mx+b , where x and y are your coordinates , m is the slope of the line and b is a value by which you can shift this up and down . Basically , every time you move the x-value by 1 , the y moves by whatever m is , plus whatever b is . This is also exactly what a skew is . If you want to skew along the x-axis , this really means that you 're altering the y-values by using x . We can replace the equation of the line with this : y ' =bx+dy+ty . That 's the equation you already saw for finding where the y coordinate will end up . Now , let 's say that you 're not scaling , just skewing . We can take out " dy " to make things simple . y ' =bx+ty . Again , this means that the y-coordinate depends on the x-coordinate , plus a little bit from ty . How do we use this to find @ @ @ @ @ @ @ @ @ @ a right-angled triangle . The horizontal side would be what x changes by and the vertical side is what y changes by . If you 're just skewing along the y-axis by 1 , the triangle would look like this : <p> / / 1 / 1 y ' =1*y <p> The bottom will always be 1 , unless you decide to scale x . The right side will be the value of y ' when y=1 , which is 1 in our case . The translation values ( tx and ty ) do n't figure into this . Now , typically when referring to the angle , we mean the one on the bottom left . Using trigonometry , we know that the tangent of that angle is equal to the length opposite side of the triangle divided by the the length of the side adjacent to the angle we 're looking at . For us , tan(angle) = 1/1 . Pretty simple . However , what we 're going to want to do is start with an angle and then find our " b " value from that @ @ @ @ @ @ @ @ @ @ y-axis ) . If , in general , the equation looks like this : tan(angle)=by/ax ( you put the " a " in because scaling x changes the bottom value ) , then , if we take into account that x and y themselves are going to be 1 , we can manipulte the equation to look like this : tan(angle)=b/a , and then we can do this : a*tan(angle)=b . There you have it ! Just pull out a calculator and find the tan of the angle you want , multiply that by what you 're scaling x by , and that will be your value for " b " in the matrix ! Skewing along the x-axis is exactly the same , only you switch " b " for " c " and " a " for " d " : d*tan(angle)=c . <p> Make something Spin : While rotating something at an agle is nice , maybe you want to do it more than once . Maybe so often that the object you 're transforming spins there is a simple way to accomplish this using Dynamic Variables @ @ @ @ @ @ @ @ @ @ a measure as a variable in other measures and meters . To make use of this functionality , we only need to add the line " DynamicVariables=1 " to whichever meter or measure we want it to occur in . By using this , we can have the values of a transformation matrix change according to a measure . In this case , we 'll be needing more than one measure . First , remember that the values of a Transformation Matrix when rotating correspond to this pattern : <p> a = cos(angle) <p> b = -sin(angle) <p> c = sin(angle) <p> d = cos(angle) <p> If you look at this , you can see that all we need is the sine of an angle , the cosine of that angle and one more measure that flips the sign of the sine of that angle . That 's three simple Calc measures . You 'll also need two more : one for calculating tx and one for ty . We ca n't use static numbers since all of the other are going to be changing . Let 's say we @ @ @ @ @ @ @ @ @ @ , positioned at ( 60,60 ) and rotate it around its center . It could be an image , a block of text , a bar , whatever . For the purpose of this example , all it really needs to be is 100x100 and positioned at ( 60,60 ) . First we would set up our five Calc measures like so : <p> MeasureSinAngle @qwx22556 <p> Formula=SIN ( ( Counter%360 ) /360*2*PI ) <p> MeasureNegSinAngle @qwx22556 <p> **26;988;TOOLONG <p> MeasureCosAngle @qwx22556 <p> Formula=COS ( ( Counter%360 ) /360*2*PI ) <p> MeasureTX @qwx22556 <p> LONG ... <p> MeasureTY @qwx22556 <p> LONG ... <p> Remember that you can get TX and TY by following that formula we discussed above . All we did here is use the values of measures instead of hrad values to do that calculating . One you have these in place , all you need to is add the following to your meter : <p> And there you have it . Your meter will now rotate around the point ( 110,110 ) , which is ( 60,60 ) plus the center of your meter , which is @ @ @ @ @ @ @ @ @ @ the instances of 110 in TX and TY you can easily change the point the meter rotates around . Any other meter you add this to will also rotate around that point in the skin . 
@@256164 <p> There are a few place where formulas are not allowed . These are primarily places where the option value is assumed to be a string and only a string . In those cases , the characters used in a formula are treated as any other string character . A few examples are : <p> The Text option of a String meter . <p> The String option of a String measure . <p> The RegExp option of a WebParser measure . <p> IfMatch options . <p> TootipText or TooltipTitle options . <p> While formulas can be used in the Variables section of a skin , be aware that the Variables section itself does not resolve the formula . If you have a variable MyVar= ( 5 * 2 ) , then the value of #MyVar# is not " 10 " , but literally " ( 5 * 2 ) " . However , if you then use the variable in an option that does allow formulas , that option itself will do the math , as in X=#MyVar# in a meter . <p> Mathematical formulas must be entirely enclosed in @ @ @ @ @ @ @ @ @ @ formula , unless they are being used in the Formula option of a Calc measure or in a IfCondition option , where the function is always assumed to be a formula , and the enclosing parentheses are optional . <p> Note : While Measures , SectionVariables : and #Variables# can be used in a formula , all the components of a formula must be numeric , using only numbers , operators , functions and constants . Using .5 or .25 in a formula will cause an error . It must be 0.5 or 0.25 . <p> Round ( x , precision ) : Rounds x to an integer , or to a specified number of decimal places . precision is optional . <h> Constants <p> PI : Mathematical constant Pi ( 3.14159265 ... ) . <p> E : Mathematical constant e ( 2.71828182 ... ) . <h> Conditional Operations <p> &lt;condition&gt; ? &lt;expr. if true . &gt; : &lt;expr. if false . &gt; <p> This will evaluate condition as being either true or false . If it is true , the expression to the left of the colon ( : @ @ @ @ @ @ @ @ @ @ expression to the right is evaluated . This is equivalent to the following if-then-else statement : <p> if ( condition ) then expr. if true else expr. if false end if <p> Measure @qwx22556 <p> Formula=5 <p> Meter @qwx22560 <p> X= ( Measure &lt; 6 ? 0 : 10 ) @qwx22552 <p> The meter would be positioned at X=0 since the condition Measure &lt; 6 evaluates to true . <p> Conditional operators can be nested . It should be noted that there is a maximum of 30 nested operators . <p> The meter would be positioned at X=97 . Since the first statement of Measure &lt; 1 is false , the formula begins testing the nested formulas in order until the condition becomes true . If none of the conditions are met , the final false value of 96 would be set . 
@@256166 <h> More <h> Meters <p> A meter is an object that defines a visual element that is displayed in a skin . Meters are one of the two major kinds of objects in a skin , along with measures . <h> Usage <p> A meter does not have a " value " in the way that measures do . Some meters are used to display or respond to informational values in two ways : <p> A meter can be bound to a measure . In this way , the meter will automatically display the value in a way that is appropriate for the type of meter . For example , a string meter would display the string value of a measure as a block of text , while a bar meter would display the same measure 's number value as a percentage of its maximum value . Some meter types must be bound to a specific measure ; on others , binding is optional . <p> A meter can use variables in any option . This includes section variables , which provide an alternative way of using measure values . @ @ @ @ @ @ @ @ @ @ ( other than the Meter option ) . <p> Not all meters are used to display information . Some are used to create static elements , such as background images , frames and labels . Specific options and requirements for each meter type are detailed in their individual articles . <h> Format <p> A meter is written as a section in the skin . All meters use the Meter option to define the section as a specific type of meter . Most other meter options depend on the type , but there are some general options that are valid in many or all meters . <p> Below is an example of a complete working meter : <p> MyMeter @qwx22560 <p> Text=Hello , world ! <h> Positions <p> A meter has a certain position , which is given by its X and Y options , and dimensions , which are given by its W and H options . This means that every meter is actually bounded by a rectangular block of pixels , even though it may have a transparent background and therefore appear to be " free-floating . " <p> @ @ @ @ @ @ @ @ @ @ that when the skin is moved , its meters move with it . It also means that meter positions are given relative to the top-left corner of the skin , rather than the desktop . For example , a meter with the option X=15 starts 15 pixels from the left edge of the skin . <p> The dimensions of the skin window are determined by the positions and dimensions of all meters when the skin is loaded . If the skin has DynamicWindowSize enabled , the window will be " pushed " outward if meters are moved rightward or downward or expand in width or height . However , meters that move leftward beyond X=0 , or upward beyond Y=0 , will appear either " cut off " or completely invisible . There is no technical limit to the size of the skin window , but , practically speaking , skins should be made to fit within the current desktop work area . <p> Left : a skin with a single meter that appears to be " free-floating . " Right : the same skin with colored backgrounds added , @ @ @ @ @ @ @ @ @ @ inside the skin window ( green ) and " pushes " the window boundaries to the lower-right . <h> Order <p> The order of meters in the skin code is important in two ways : <p> " Z " position . Meters are drawn in order . Later meters appear " on top of " or " in front of " earlier meters . This means that , for example , a background image that appears behind all other meters must be the first meter that appears in the skin code . <p> Relative positions . A meter 's X or Y position may be set " relative " to the position of the previous meter . This is useful for groups of meters that follow a common pattern , such as lists , tabs or menu items . <h> MeterStyles <p> Meters can use option values from other meters . Using the MeterStyle option , one meter may inherit all options from one or more " parent " sections . 
@@256168 <h> More <h> General Meter Options <h> Options <p> Type of the meter ( e.g. Bar or String ) . This option is required and may not be changed dynamically . <p> MeterStyle <p> Specifies one or more sections as MeterStyles from which option values are inherited . Multiple MeterStyles are delimited with pipes ( ) . <p> MeasureName , MeasureName2 , MeasureName3 ... <p> " Binds " the meter to one or more measures . This means that the meter displays the values of these measures in some way . The exact form of the display depends on the type of meter . See each meter type 's page for details about what kind of values are valid for that type , and how the values are displayed . <p> X , YDefault : 0 <p> Specifies the x ( horizontal ) and y ( vertical ) position of the meter in pixels relative to the top-left edge of the skin . <p> Relative positioning : If the value is appended with r , the position is relative to the top/left edge of the previous meter . If the @ @ @ @ @ @ @ @ @ @ to the bottom/right edge of the previous meter . <p> Examples:X=150 : Meter begins 150 horizontal pixels from the left edge of the skin window.Y=75 : Meter begins 75 vertical pixels from the top edge of the skin window . <p> X=10R : Meter begins 10 horizontal pixels to the right of the previous meter.Y=0r : Meter begins at the same vertical position as the previous meter . <p> W , H <p> Specifies the width and height of the meter in pixels . String meters and meters which display an image file can automatically determine the width and height . For all other cases , W and H must be defined . <p> PaddingFormat : Left , Top , Right , Bottom <p> Adds padding in pixels around any or all sides of a meter . The width and height of the meter will dynamically be adjusted to the new size . The padding will be drawn using the Color defined with SolidColor / SolidColor2 . <p> Note : This is done by setting the width and height of the meter to zero , so some care should be @ @ @ @ @ @ @ @ @ @ or Y on any following meters . While in effect a " singularity " , the hidden meter still exists and occupies a position in space . <p> UpdateDividerDefault : 1 <p> Frequency at which the meter is updated . The Update option in the Rainmeter section of the skin is multiplied by the specified value to determine how often the meter is updated . <p> Example : If Update=1000 ( in the Rainmeter section ) and UpdateDivider=30 , the meter is updated every 30 seconds . <p> If UpdateDivider=-1 or any negative number , then the meter is only updated once when the skin is loaded or refreshed . <p> Note : All transformations are relative to the top left corner of the window and not to the meter itself . So if you want to rotate the meter by its center the translation component in the matrix must be relative to the top left corner of the window . <p> Also note that the even if the meter 's visual location and orientation is changed by the transformation the place where it would be located without the transformation @ @ @ @ @ @ @ @ @ @ register the mouse clicks . This might change in the future though . <p> Group <p> Defines a group or series of groups that the meter belongs to . For more information please see the Groups page . 
@@256173 <h> More <h> Skins <p> Rainmeter 's basic purpose is to run skins . A skin is a movable , dynamic , sometimes-interactive window that appears over the Windows desktop , and usually gathers and displays information of some kind . <p> Skins come with many different sizes , styles , user interfaces , and levels of complexity . Rainmeter includes utilities for publishing and installing 3rd-party skins . Each skin is generally stored and loaded as an independent , self-contained module . <h> Files and Folders <p> All skins are stored in Rainmeter 's " Skins " folder . If Rainmeter has been installed normally , the default location of the Skins folder is : <p> C : **37;1016;TOOLONG <p> If Rainmeter is installed as a portable application , the Skins folder is found in the installation folder . The Skins folder can also be changed in Rainmeter 's settings . <p> A skin is stored as a file called " SkinName.ini " in its own folder within Skins , as in : **36;1055;TOOLONG ( The file and folder names do not need to match . ) <h> Variants @ @ @ @ @ @ @ @ @ @ are each considered variants of the same skin . This means that only one variant can be active at a time , and all variants use the same settings . Separate skins must be stored in separate folders . <p> 1 . " YourName " and " SkinName " are examples . <h> @Resources <p> Any supporting files used by the skin , such as images , addon executables , sounds , or Lua scripts , should also be stored in the skin folder . Complex skins are recommended to store supporting files in a folder called @Resources inside the root config folder . The @Resources folder is ignored by Rainmeter , except to load custom fonts and custom cursors . <h> Config <p> Each skin is identified with a certain config name . The config name is based on the path from the main Skins folder to the skin file . For example , if a skin is located at ... <p> LONG ... <p> ... then the config name would be : <p> FooBar <p> Because skins may have any number of variants , many Rainmeter featuresespecially bangsrefer @ @ @ @ @ @ @ @ @ @ than the skin 's filename . <h> Root config <p> Skins may also be stored in subfolders within the same root config folder . They share the same @Resources folder , and are packaged and installed together . Otherwise , Rainmeter treats each subfolder as a separate config . <p> This means that they are both located in the same root config folder , " illustro , " in the main Skins directory . <p> LONG ... <p> Each skin has a unique config name : <p> **28;1093;TOOLONG <p> But since they belong to the same root config , they share the same @Resources folder : <p> LONG ... <p> A suite is an informal term for skins that are organized together in this manner . Suites are often used by skin authors to make a set of skins that share a common style , or complement each other in some way . If a root config folder contains only one SkinName.ini file , then the config and root config are the same , and the skin can be stored , packaged and installed by itself . <h> Format <p> @ @ @ @ @ @ @ @ @ @ , which uses the following1 format : <p> Section <p> Key=Value <p> Each property of the skin is defined by a section . Each key is an option that modifies that property . The following sections may be used in skins : <p> Metadata Defines the name , version , license , and other non-functional information about the skin . <p> A skin must have at least one meter . All other properties are optional , and may not even be present , depending on what is needed for the skin . For skins that are publicly distributed , the Metadata section is strongly recommended . <p> There are only a few rules about using the INI format : <p> All section names in a skin must be unique . <p> All option names within a section must be unique . <p> Section and option names should include alphanumeric characters only ( no spaces or punctuation ) . <p> Option values may be contained by quotes ( " ) . If so , Rainmeter will ignore the containing quotes . <p> Option values must be kept on a single line @ @ @ @ @ @ @ @ @ @ " and " Value " are examples . <h> Update <p> When a skin is loaded , it updates on a regular cycle . The length of time between updates is defined by the Update option in the Rainmeter section , and defaults to 1 second ( or 1000 milliseconds ) . The update determines when the skin reacts to changes in the values of variables , measures and options . <p> Individual meters and measures can be made to update more slowly by " skipping " cycles , using the UpdateDivider option . In addition , the ! Update bang forces the skin to update immediately , resetting the timed cycle . <h> Refresh <p> When a skin refreshes , all values are reset , and the skin starts over as if it had just been loaded for the first time . Refreshing also applies any changes that have been made to the code in SkinName.ini. 
@@256175 <h> Contents <h> More <h> WebParser Tutorial <p> This tutorial is meant to she 'd some light on using the WebParser plugin in Rainmeter to retrieve information from a website for use in your skins . A lot of us have used WebParser to get RSS feeds or other data from websites , but often by using or tweaking existing code , and without really understanding how it works . <h> WebParser overview <p> WebParser is a plugin measure type in Rainmeter , that is used to connect to some resource , normally a web site on the internet , read the raw HTML output that the site returns , and parse information from that output to use in meters in your skin . <p> When we say parse in this context , what we mean is to search the output for some text strings . Finding those strings will position you in the output at a point where you want some information . Then you capture that information , and display the results in meters . <p> The basic format of a WebParser skin is : <p> MeasureParent @qwx22557 @qwx22564 @ @ @ @ @ @ @ @ @ @ @qwx22564 <p> URL=MeasureParent @qwx22567 <p> MeasureChild2 @qwx22557 @qwx22564 <p> URL=MeasureParent <p> StringIndex=2 <p> MeterChild1 @qwx22560 <p> **25;1123;TOOLONG <p> MeterChild2 @qwx22560 <p> **25;1150;TOOLONG <p> It is important right off to understand that WebParser works with a " parent / child " approach . What happens is that the parent measure connects to the site with the URL , and uses the RegExp option to capture some information with one or more instances of ( . * ) . The captured information is held by WebParser , and is individually referenced by child measures with the StringIndex numbers . Each ( . * ) captures some information and creates a StringIndex . <h> The RegExp option <p> Now let 's spend a minute talking about the key part of the code , that RegExp option . As we saw above , WebParser uses a regular expression to search for the bits of information you want to retrieve , and return them in one or more StringIndex values on the measure . <p> So how do we build one of these mysterious RegExp statements in Rainmeter ? Let me use a template showing @ @ @ @ @ @ @ @ @ @ siU ) Search1 ( . * ) Search2. * <p> So enclosed in quotes , you have : <p> ( ? siU ) - Which is an " options modifier " for the regular expression , telling it how you want it to behave . <p> Search1 - Which will be some text you will search on to get you right up to the data you want . <p> ( . * ) - The data you want returned in the array to use in your skin . The parentheses tell it to " capture " everything between " Search1 " and " Search2 " . In our examples we are using the string " . * " in our captures , which simply means " . " ( any character ) and " * " ( zero or more of them ) . <p> Search2 - Use this to tell RegExp what to look for to know it 's time to " stop " capturing information . <p> . * - This will contain data from the website which is between this set of search/return parameters and the next @ @ @ @ @ @ @ @ @ @ not enclose the . * in parentheses , and will not use a StringIndex number . This is used to " skip " to the next search you want to do . <p> What is this ( ? siU ) stuff ? <p> The ( ? siU ) starts with the ? character to tell the regular expression that what follows inside the parentheses are directives for the overall expression . <p> the " s " tells RegExp to ignore line breaks and tabs when doing a search . For example , if you search for " Every good boy deserves favor " and it is split on two lines in the output , it will still match . <p> The " i " tells the search to be " case insensitive " . Matches will work on both upper and lower case . <p> The " U " tells RegExp to be " ungreedy " , meaning that it will return only the first instance of the match on the search string . <p> These directives are not required , but you will find that they are generally the @ @ @ @ @ @ @ @ @ @ and you will want to use " ( ? siU ) " to start your RegExp most of the time . <h> A quick example : <p> You have a web page you want to get the " title " tag from . Here is the RegExp you would use : <p> RegExp= ( ? siU ) &lt;title&gt; ( . * ) &lt;/title&gt; <p> So we have told RegExp to search for the text " &lt;title&gt; " then capture ( . * ) everything after it in StringIndex 1 of the measure until it sees " &lt;/title&gt; " , where it will stop capturing . <p> This guide is meant to be simple and very " WebParser " focused . It is NOT a full-blown guide to regular expressions . I would encourage you to either now or later open up a browser tab/window here : Regular expression options and check out the various references and guides available . <h> Our tutorial skin <p> So what we are going to do today is parse a website http : **31;1177;TOOLONG to get our IP and location information to use in a @ @ @ @ @ @ @ @ @ @ open the page in a new tab/window . <p> Here is what the web page we are going to parse looks like , with the information we are going to extract numbered : <p> Here is the final skin we will create : <h> Let 's Build It <p> First , let 's get our skin started , and use an option on our first parent WebParser measure to get the raw HTML output from the site into a text file we can use for reference . @qwx22547 @qwx22570 @qwx22549 @qwx22553 <p> MeasureSite @qwx22557 @qwx22564 <p> URL=http : **31;1210;TOOLONG <p> RegExp= <p> Debug=2 <p> MeterDummy @qwx22560 <p> As you can see , we do n't even have a RegExp option filled in yet , and only one dummy meter . We just want to use that Debug=2 option on the measure , then save and load the skin . <p> When Debug=2 is used , WebParser will connect to the site , and download the HTML that is returned into a text file . That file will be called WebParserDump.txt and will be in the same folder with the skin @ @ @ @ @ @ @ @ @ @ editor , so you have it to work with as we create our measures . <p> Once you have a copy of the site output in WebParserDump.txt , you should remove that Debug=2 option and save your skin . <p> Now let 's look at the first bit of information we want to retrieve . <p> We want to start by getting our IP address . On the web page , it is near the top of the area with all the information we want , with a label " Your IP Address : " <p> Open up WebParserDump.txt ( the saved output from the website ) and search for that label . You will find a section of the html which looks like this : <p> &lt;tbody&gt; <p> &lt;tr&gt;&lt;tdwidth= " 100 " &gt;Your IP LONG ... <p> LONG ... United **28;1243;TOOLONG <p> Use the ( ? siU ) expression directives , ( described earlier ) search for &lt;td. *&gt;Your IP Address : &lt;/td&gt;&lt;td&gt; and capture everything to a StringIndex ( . * ) until it sees &lt;/td&gt; , where it will stop . <p> So if we look again @ @ @ @ @ @ @ @ @ @ &gt;Your IP LONG ... <p> <p> &lt;p&gt;You can see that we will return 72.205.25.80 in StringIndex 1&lt;/p&gt; <p> **43;1273;TOOLONG - We want to check the website at a rate 3600 times the value in the " Update= " parameter in the " Rainmeter " section . As this defaults to " 1000 " or once every 1000 milliseconds ( 1 second ) we will be running WebParser every 3600 seconds or 60 minutes . This is plenty often , as your IP information does n't change much and you do n't want to " spam " the website with requests . You may well find yourself blocked ... &lt;/p&gt; <p> &lt;h2&gt;The first child measure&lt;/h2&gt; <p> &lt;p&gt;Then , we build a " child " measure , to grab that information from StringIndex 1 of the " parent " measure . &lt;/p&gt; <p> txt <p> MeasureIP @qwx22557 @qwx22564 @qwx22571 @qwx22567 <p> We are using the values returned by our parent measure MeasureSite as the URL for this measure , and setting the value contained in StringIndex=1 . So the value of this child measure will be " 72.205.25.80 " . <h> Testing @ @ @ @ @ @ @ @ @ @ much leave open while building your skin ) the About / Skins dialog . In this panel you can see the values of your measures as you save and refresh your skin . You will be able to tell at a glance whether you are getting the values you expect from your RegExp . If there are problems , be sure to check the About / Log panel for any error messages . <h> The rest of our child measures <p> Now let 's get the next bit of information we want from the website . ( Remember , the RegExp reads the website in order from top to bottom , so you need to use the correct order in the " RegExp= " statement . You can display the information in any order you want on your skin however . ) <p> The next information in the WebParserDump file that we want is the local path and name of the country flag image . <p> LONG ... United **28;1318;TOOLONG <p> So we want to add to our " RegExp= " statement , search for the flag image name , @ @ @ @ @ @ @ @ @ @ parent measure : <p> So after the first pair of start/stop searches we already did , we are adding : <p> . *&lt;td&gt;Country : &lt;/td&gt;. *&lt;img src= " ( . * ) " &gt; <p> This will tell RegExp to skip everything until it finds &lt;td&gt;Country : &lt;/td&gt;. *&lt;img src= " and then capture everything until it sees " &gt; and put it in StringIndex=2 . The result in my example will be " flags/us.png " . <h> Downloading an image <p> What we really want is not the file name of the flag image , but the image itself . WebParser can easily do this . <p> As long as the value from the parent measure that is returned in the StringIndex number is the URL to an image file , you can simply add the Download=1 option to the child measure , and the image will be downloaded . The value of the child measure will then be the full local path to the file in the Windows TEMP folder Rainmeter will create . <p> However , wait .. that value " flags/us.png " is not a full @ @ @ @ @ @ @ @ @ @ path " to the image on the remote server . That 's ok , we can still get it . <p> MeasureFlagImage @qwx22557 @qwx22564 <p> URL=http : **32;1348;TOOLONG <p> StringIndex=2 <p> Download=1 <p> What we are doing is appending the first part of the URL , the one we used on the parent measure to the beginning of the URL option , followed by the reference to MeasureSite and the StringIndex=2 option . Then we add Download=1 and that full URL of http : **33;1382;TOOLONG will be used to retrieve the image file . <p> The value of the child measure will in my case be : <p> LONG ... <p> Which we can use in an Image meter later to display it . <h> Our next child measure <p> Now we want to get the " Country Code " that the flag image represents . It just so happens that the file name of the image IS the Country Code , in this case " us " <p> To get that , we will use a child measure like this : <p> MeasureCountryCode @qwx22557 @qwx22564 @qwx22571 <p> StringIndex=2 <p> @ @ @ @ @ @ @ @ @ @ . png " : " 1 " <p> Note that the StringIndex number that we use is the same StringIndex=2 as our child measure that got the flag image . That is because we are just using the same capture from the RegExp , that returned " flags/us.png " . We are just using the value a little differently this time . <p> We are using RegExpSubstitute to allow a regular expression in a Substitute option . What Substitute= " . */ ( . * ) . png " : " 1 " does is extract and capture just the file name of the image , with no extension . It then replaces the entire string value of the measure with this . The measure ends up with a string value of " us " . We will capitalize and use that in a String meter later . 
@@256176 <h> Contents <h> More <h> Screen Position Variables <p> The following built-in variables in Rainmeter can help you position things on the screen even on different screen resolutions . <p> **35;1417;TOOLONG The total dimensions of the user 's screen resolution . <p> **31;1454;TOOLONG The dimensions of the " work area " - the desktop as constrained by the taskbar and any " docking " or " ranging " software . <p> #WORKAREAX##WORKAREAY# The absolute X and Y position of the work area 's top-left corner . <p> In the past , if your users wanted to change the width of something , they had to open a window full of scary code and find the appropriate line . We shall hereafter refer to these as the Dark Ages of Rainmeter . Now my Taskbar skin , for example , is nothing more than this : <p> Taskbar @qwx22559 <p> ImageName=Taskbar.jpg <p> W=#WORKAREAWIDTH# <p> H=33 <p> These variables support mathematical transformations , too . If I wanted a bar that filled up a third of the screen , for instance , I 'd write : <p> W= ( #WORKAREAWIDTH# / 3 @ @ @ @ @ @ @ @ @ @ you can use these variables to set the initial positions of whole skins in a . thm file for RainThemes . <p> Placing a skin relative to the top or left sides of the desktop area is effortless - ( #WORKAREAX# + X ) or ( #WORKAREAY# + Y ) . The right or bottom sides are a bit tricker , but just as effective . For example , if I want the Taskbar to be 33 pixels from the bottom - since it 's 33 pixels high - I 'd type : <p> WindowY= ( #WORKAREAY# + ( #WORKAREAHEIGHT# - 33 ) ) <p> In other words , you 're telling Rainmeter to start at the top of the work area , go all the way down , then back up by 33 . <p> Centering a skin is just as easy . It 's a tad more complicated in that you ca n't just make X and Y the center of the screen - the skin has its own height and width , remember . With Enigma , I 've kept a consistent format for all of my @ @ @ @ @ @ @ @ @ @ center-aligned at X=60 . So if I wanted to center the whole skin as part of a theme , I 'd use this format : <p> WindowX= ( ( #SCREENAREAWIDTH# / 2 ) - 60 ) <p> It depends on the number of skins you 've got , but in general , it 's pretty easy to construct an entire theme that automatically adjusts to the user 's resolution when it loads . As an example , I 've copied the whole of Enigma 's new default state below . It 's easy for me to imagine most skins being packaged with themes like this , now that you can guarantee a proper and instantaneous presentation on any screen , large or small . 
@@256179 <h> Skin sections <h> Options <p> The current active state of the config . If Active is 0 , the config is inactive . If a number other than 0 , the active skin . ini or variant is the file in alphabetical order in the config folder . <p> WindowX , WindowY <p> The X and Y position of the skin . A trailing % sign indicates that the value is a percentage of the screen width . A trailing R will make the position relative to the right edge of the screen instead of the left . A trailing B will make the position relative to the bottom edge of the screen instead of the top . <p> The % and R / B modifiers can be used together . <p> By default the position is relative to the primary screen . You can override this with @N where N is 0 to 32 and denotes which screen to position the skin on ( 1-32 ) or the virtual desktop ( 0 ) . The screen selection will apply to both WindowX and WindowY if the value is @ @ @ @ @ @ @ @ @ @ AnchorY <p> By default WindowX and WindowY control the position of the upper left corner of the config window . AnchorX and AnchorY allow that anchor position to be changed . The Anchor can be defined in pixels from the upper left corner of the window or as a percentage of the config if % is used . If a letter R or B is added to AnchorX or AnchorY , then the position is relative to the right or bottom edge of the window . <p> As an example , by setting WindowX , WindowY , AnchorX and AnchorY all to 50% the config will be truly centered in the primary monitor regardless of screen resolution or aspect ratio . <p> SavePositionDefault : 1 <p> If set to 1 , changes to the window position will be saved to Rainmeter.ini . <p> AlwaysOnTopDefault : 0 <p> Defines the Z-position of the skin . Valid values are : <p> 2 : Always on top . The skin will be on top of all ( including topmost ) windows . <p> 1 : On top . The skin will be on @ @ @ @ @ @ @ @ @ @ The skin will stay visible when showing the desktop and will be brought to the foreground on click . <p> -1 : Bottom . The skin will stay behind other windows . <p> -2 : On desktop . Similar to 0 except that the skin will stick to the desktop and can not be brought to the foreground . <p> DraggableDefault : 1 <p> If set to 1 , the skin can be dragged around with the mouse . <p> SnapEdgesDefault : 1 <p> If set to 1 , the skin will snap onto screen edges and other skins when moved . To disable snapping temporarily , hold the CTRL key down while moving the skin . <p> StartHiddenDefault : 0 <p> If set to 1 , the skin will start hidden . The ! Show bang must be used to show the skin . <p> Note : A setting of 0 ( fully transparent ) will not allow detection of the mouse on the skin , and the HideOnMouseOver option will have no effect . To have a skin be invisible but react to the mouse , a minimum @ @ @ @ @ @ @ @ @ @ using the Transparency setting in the Manage interface , a range of percentages is offered , but corresponding numeric values are stored . <p> HideOnMouseOverDefault : 0 <p> Controls the transparency of the skin when the mouse is moved on and off of it . This works in conjunction with the setting in AlphaValue . This can be also be set with the On hover setting in the Manage interface . To temporarily disable this behavior , hold CTRL down when moving the cursor . <p> 0 ( Do Nothing - default ) : No action is taken . <p> 1 ( Hide ) : Skin will fade between the value in AlphaValue and hidden . If no AlphaValue is defined , it will simply fade between fully visible and hidden . <p> 2 ( Fade in ) : Skin will fade between the value in AlphaValue and fully visible . <p> 3 ( Fade out ) : Skin will fade between the value in AlphaValue and hidden . <p> FadeDurationDefault : 250 <p> Defines the length of the fade duration in milliseconds when HideOnMouseOver is used , activating/deactivating the @ @ @ @ @ @ @ @ @ @ <p> ClickThroughDefault : 0 <p> If set to 1 , mouse clicks will pass through the skin . To temporary disable this , hold the CTRL key when clicking . <p> KeepOnScreenDefault : 1 <p> If set to 1 , the skin will be kept within the bounds of the screen . <p> LoadOrderDefault : 0 <p> Determines the order in which the skins are loaded . The value can be any number ( even negative ) . Skins with the lowest load order are loaded first . <p> Example : Three skins having LoadOrder=-1 , LoadOrder=2 and LoadOrder=5 would load the configs in that order , with the config with LoadOrder=-1 appearing beneath the one with LoadOrder=2 which is in turn beneath the config containing LoadOrder=5 . If two configs have the same value for LoadOrder , they are then loaded in the order they are in Rainmeter.ini . <p> Note : The value of LoadOrder has no bearing on the Z-position of the skin . LoadOrder only affects how skins in the same Z-position interact with each other . That is to say , configs set to " @ @ @ @ @ @ @ @ @ @ Normal " , but two configs in " Topmost " will layer themselves according to their LoadOrder value . <p> AutoSelectScreenDefault : 0 <p> If set to 1 , the WindowX/WindowY " @N " settings are dynamically set based on the position of the meter 's window . This setting will reset to 0 when a monitor is selected in the Manage window or on the skins context menu . <p> Group <p> Defines a group or series of groups that the skin belongs to . For more information please see the Groups page . 
@@256180 <h> More <h> Getting Started <p> If this is your first experience with Rainmeter , then you 're in the right place ! Getting Started is a guide designed to walk you through the basics of setting up Rainmeter , using , customizing , and ultimately creating your own skins . <p> Before you begin , here are some frequently-asked questions about what Rainmeter is and how it works . <h> What is Rainmeter ? <p> Rainmeter is a free , open-source application for Windows PCs . It is a platform that enables skins to run on the desktop . <h> What is a " skin " ? <p> Some Rainmeter skins . Each skin is a separate window , and can be moved around on the desktop by clicking and dragging . Rainmeter can run any number of skins at one time , even from different sources . <p> A skin can be many things . Some skins are very simple , single-purpose tools , like Windows desktop gadgets , or " widgets " on an Android device . Others are more complex , like miniature applications themselves . @ @ @ @ @ @ @ @ @ @ and include their own tools for customizing their form and appearance , within or alongside Rainmeter 's basic user interface . Every skin works differently , depending on the choices of that skin 's individual author . <p> However , all skins are made from the same building blocks : measures , which gather information from your computer , a website , a text file , or some other source ; and meters , which create visual elements in the skin 's window , such as frames , borders , backgrounds , images , text , charts , or buttons . <p> Skins can interact with other skins and applications using special commands , called bangs , and they can be customized by changing short lines of text , called variables . All of these things are made possible by Rainmeter 's unique code language , which allows a skin to access functions and resources built into the Rainmeter application . Every skin 's code is completely open , and can be tweaked , modified or even completely rewritten using any text editing software . <h> How much technical skill @ @ @ @ @ @ @ @ @ @ only want to download skins from the Internet and use them as-is , then the answer is " none . " Rainmeter provides a basic user interface for managing your library of skins , saving and restoring layouts , and changing basic settings such as a skin 's location , transparency , and " always on top " behavior . <p> Most Rainmeter features can be reached through the basic Manage window or context menus . <p> Some skin authors create their own controls for users to customize their skins . These controls may be included as a separate utility , or they may be created entirely within Rainmeter as another skin . If this is the case , then you will not need to know any code to customize these skins . <p> In other cases , you may need to change some variables in the skin code . This may be scary if you are not a programmer , but usually , these " variables " are clearly marked labeled , located near the beginning of the file so that you do n't have to do any searching @ @ @ @ @ @ @ @ @ @ <p> An example of some Rainmeter code . <p> If you want to create skins , or modify someone else 's skin beyond the customization options that the author has provided , then you will get some hands-on experience with Rainmeter 's code language . You do not need to be professional programmer to become a proficient writer of Rainmeter skinsalthough those skills will certainly help you , and a full-powered scripting language is available for advanced users . But all of a skin 's basic properties are written using a simple configuration language that is suitable for novice programmers . The difficulty level is similar to that of HTML or JavaScript . <h> What is n't Rainmeter ? <p> Rainmeter is just one of many different tools that you can use to customize your Windows PC . It includes a powerful and flexible set of features , and we are continually surprised by the creative ways that those features are used . However , it is important to understand what Rainmeter does not do : <p> Rainmeter is also not a window manager . It does not keep track @ @ @ @ @ @ @ @ @ @ minimize other application windows ; and it does not enable " workspaces " or manage multi-monitor setups . <p> Rainmeter does not replace other applications that it interacts with . For example , an " iTunes " skin may let you pause , play or skip to the next track in your iTunes media player . But iTunes must still be running in the background for the skin to work . <p> In short , you can not usually download and apply someone else 's amazing desktop transformation in one click . Most customizers are courteous enough to provide links to the myriad programs , plugins , icons , wallpapers and other materials that they have used . 
@@256182 <h> Contents <h> More <h> Clean Rainmeter Uninstall <p> If Rainmeter is misbehaving for you , which might be due to some file corruption on your system , or a file " ownership " issue if you have restored Rainmeter from a backup of a different OS or computer , you might want to do a " clean " installation of Rainmeter . <p> Note : If you want to save any skins you have created or installed , first copy somewhere else the files in : <p> Be sure Rainmeter is working correctly and loading the default illustro suite of skins . If it is , then you can carefully copy back skins and plugins , testing between to make sure that a misbehaving skin or plugin was n't the cause of the issue in the first place . 
@@256184 <h> String meter <h> Options <p> Name(s) of the measure(s) bound to the meter . The meter will display the current value of the measure defined in MeasureName , with values for additional measures bound to the meter available using the %N syntax in the Text option . <p> The meter does not require a MeasureNameN option if the Text option alone will be used to define the string to display . <p> TextDefault : %1 <p> Text to display . If MeasureName is specified , Text will default to the value of the measure . <p> The values of the measure(s) specified with MeasureName can be used with the %N syntax as follows : <p> MeasureName=SomeMeasure <p> **25;1487;TOOLONG <p> Text=This is text containing %1 and %2 . <p> ; %1 and %2 will be replaced by the string values of SomeMeasure and <p> ; SomeMeasure2 , respectively . <p> The Text option can take any combination of the following forms : <p> Display the value of a measure bound with MeasureName <p> Display the values of multiple measures bound with MeasureNameN , and formatted with the %N syntax . @ @ @ @ @ @ @ @ @ @ , then 500 and below will use the font 's normal weight , and 600 and above will simulate a bold effect . <p> StringAlignDefault : Left <p> Horizontal and vertical alignment of the string within the meter . Valid values are : <p> Left , Right , Center ( or LeftTop , RightTop , CenterTop ) <p> LeftBottom , RightBottom , CenterBottom <p> LeftCenter , RightCenter , CenterCenter <p> The string will be aligned using the values of the X and or Y settings as the anchor point . So to CenterCenter align a string within a meter with a width and height of 100 , set X=50 , Y=50 and StringAlign=CenterCenter . <p> StringStyleDefault : Normal <p> Style of the string . Valid values are Normal , Bold , Italic , and BoldItalic . <p> Note : This option is for the most part deprecated and replaced by the far more powerful functionality in the FontWeight option above . It should only be used in new skins to obtain the Italic effect , and should not be used to control the weight attributes . <p> StringCaseDefault : None @ @ @ @ @ @ @ @ @ @ are None , Upper , Lower , and Proper . <p> StringEffectDefault : None <p> Effect applied to a string . Valid values are None , Shadow , and Border . <p> Shadow makes a background copy of the string , offset 1px " right " and 1px " down " , in the color defined in FontEffectColor . <p> Border makes a background copy of the string , 2px " larger " , and offset 1px " left " and 1px " up " , in the color defined in FontEffectColor . <p> The size of the font used in the string has no effect on the fixed 1px size of the Shadow or Border effect . <p> Due to how these effects are created , transparent colors on the string may have undesirable results . <p> Controls how strings are truncated ( clipped ) or wrapped to fit in or expand the containing meter . Valid values are : <p> 0 : Disabled . The string will not be clipped or wrapped . ( default ) <p> 1 : Enabled . The string will be clipped with an @ @ @ @ @ @ @ @ @ @ width ) option on the meter . If the H ( height ) option is large enough to allow multiple lines , the text is wrapped until the value of H is reached , then clipped . <p> 2 : Auto . The string will be clipped or wrapped based on the value of W and/or H. If the width or height are not specified , the meter itself will change size to accommodate the string . This setting works in conjunction with the ClipStringW and ClipStringH options below , to set a " maximum " size that the meter should expand to accommodate the string before clipping . <p> Notes : The changing size of meters when ClipString=2 can cause truncation issues with the overall window size of the skin , unless DynamicWindowSize=1 is set in the Rainmeter section of the skin . <p> ClipString=2 will always wrap on word boundaries ( spaces or tabs ) . Any single word that is longer than the defined or maximum width will clip that line , rather than breaking the word in two . <p> When ClipString=2 is used with bound @ @ @ @ @ @ @ @ @ @ ( WebParser and QuotePlugin for example ) DynamicVariables=1 must be set on the meter . <p> ClipStringW <p> Sets a maximum width that the meter will expand to accommodate the string when ClipString=2 . This setting is ignored if the W option is set . <p> ClipStringH <p> Sets a maximum height that the meter will expand to accommodate the string when ClipString=2 . This setting is ignored if the H option is set . <p> AngleDefault : 0.0 <p> Defines the angle of the text in radians . <p> Note : The size and position of the text are always calculated as if the text is horizontal . This also means that the click-able field used for Mouse Actions does not change . It remains where the text would be with no Angle . <p> If set to 1 , the value of bound measures are converted to a percentage . This is useful if a measure does not return a percentage value , but either automatically defines a valid " range " of values ( e.g. FreeDiskSpace ) or when the MinValue and/or MaxValue options are manually set @ @ @ @ @ @ @ @ @ @ of decimals to display with numerical measure values . <p> ScaleDefault : 1 <p> Scaling factor used for the measure values . The measure value is divided by the specified value . If the specified value has a decimal point ( e.g. 1000.0 ) , the result will also display decimals . <p> Note : If AutoScale is enabled , this option is ignored . <p> AutoScaleDefault : 0 <p> Automatically scales the measure values . The scaled result is appended with k , M , G , etc. as appropriate . Valid values are : <p> 0 : Disabled . <p> 1 : Scales by 1024 . <p> 1k : Scales by 1024 with kilo as the lowest unit . <p> 2 : Scales by 1000 . <p> 2k : Scales by 1000 with kilo as the lowest unit . <p> Note : The value returned by AutoScale adds a space between the scaled number and the scale unit abbreviation . To remove this space simply add Substitute= " " : " " to the Measure that the AutoScale is being applied to . <p> Note : Using the @ @ @ @ @ @ @ @ @ @ give a string meter a solid but virtually transparent background . This can make executing mouse actions on the text easier and more reliable . 
@@256185 <h> More <h> Customizing <p> Now that you are familiar with Rainmeter 's basic user interface , you 're ready to start customizing Rainmeter to your liking . <h> Finding Skins <p> There is no official , central repository of Rainmeter skins . Rainmeter is an open platform , and skins can be found all over the Internet , from large screenshot galleries to small personal blogs and websites . That said , there are a few major sites where the Rainmeter community tends to gather : <p> DeviantArt Probably the biggest and best collection of skins , deviantArt not only has a special Rainmeter category , but also a dedicated Rainmeter Group , which is run by members of the community and features a curated stream of skins , screenshots , tutorials , interviews and more . All skins on deviantArt are checked for malware before they are accepted by the group . <h> Malware <p> Rainmeter is built on an open software ecosystem . And like other open software , we occasionally have to deal with malware in our midst . Other than Rainmeter.net , the websites listed @ @ @ @ @ @ @ @ @ @ , and most sites have no policy of verifying either the identity of the uploader or the integrity of the files . We rely on members of the community to be watchful for malware and report it when found . <p> We recommend that you follow some simple , common-sense tips to make sure that your computer stays malware-free : <p> Whenever possible , only download skins in the Rainmeter Skin Installer . rmskin format . Recent versions of Rainmeter require new skin packages to be created by Rainmeter 's official Skin Packager , which helps reduce the risk of tampering . Many older skins may still be published as . zip files that must be installed manuallythese files are at greater risk of containing malware , and you should look for a newer version of the skin , if possible . You should never download a . exe file that claims to be a Rainmeter skin installer . <p> Make sure the skin publisher is trustworthy . An account that is new , or has very few downloads , page views , or profile detals may be suspicious . @ @ @ @ @ @ @ @ @ @ also suspicious . In contrast , a long-standing author who has many comments and downloads is more likely to be safe . <p> If comments are enabled on the submission , check them to see if other users have reported the skin as malware . Likewise , if you discover that a skin is dangerous , please take a moment to warn your fellow Rainmeter users , by posting a message in the comments and reporting the submission to the side administrators . Sites like deviantArt and Flickr include an easy " Report Spam " button on every page . <p> If you are suspicious of a skin for any reason , upload the file to VirusTotal , which will scan the file with over 40 anti-malware services and report the results to you . ( Note that false positives are common ; only report skins that are flagged as dangerous by a significant number of tests . ) <h> Adding Skins <p> Installing a typical Rainmeter skin . <p> Installing a skin in the Rainmeter Skin Installer ( . rmskin ) format is easy . Just double-click the file @ @ @ @ @ @ @ @ @ @ , and follow the instructions like you did when you installed Rainmeter . <p> ( Skins that are not in the . rmskin format , but instead come in an archive file like . zip , . rar or .7z , require a few more steps . See Installing Skins for more detailed instructions , including steps for installing skins on a portable version of Rainmeter . ) <h> Editing Skins <p> You have already learned how to change basic skin settings in Rainmeter . Now , it 's time to learn how to make edits to a skin itself . <p> Remember : every skin is different . Some skins provide more customization options , tools and instructions than others , and the processes for customizing two skins may be very different . In all cases , you should look to whatever documentation the author has provided , whether in the form of a " readme " file , an online support URL , or ; comments embedded in the skin code . <h> Controls <p> It is possible that your skin will provide some kind of built-in graphical @ @ @ @ @ @ @ @ @ @ , all you need to do is follow the instructions provided , clicking buttons and typing or pasting new text values as needed . The skin may have control buttons embedded in the skin itself , or it may summon a separate skin or addon where you can change all customization options in one place . <p> This kind of sophisticated control system is more the exception than the rule , and is usually found only on large suites . More often , you will need to edit the skin code directly in order to change or add your own values . <h> Variables <p> What a skin looks like on the inside . <p> Most of the time , a skin 's customization optionsthat is , options that the author intends and expects you , the user , to change aroundare saved as variables . To see an example , right-click the illustro " Clock " skin on your desktop , and select Edit skin . The file " Clock.ini " will open in Notepad ( or your default text editor ) . <p> This is what Rainmeter 's @ @ @ @ @ @ @ @ @ @ the right to zoom in . ) <p> Although it may look complex , everything in this file is actually one of three basic elements : <p> A section . Section names are contained in brackets ( ) and are used to " declare " some property of the skin . <p> A key . Keys are found at the beginning of each line in a section , followed by an equal sign ( = ) . <p> A value . The value is whatever meaning is assigned to a keyeverything after the first equal sign ( = ) is the value . ( Values must be constrained on a single line . ) In Rainmeter , the pairing of a key and a value is called an option . <p> Section1 <p> Key1=Value <p> Key2=Value <p> Key3=Value <p> Section2 <p> Key1=Value <p> Key2=Value <p> Key3=Value <p> When you 're editing variables in a skin , the values are what you are going to change . <p> Scroll down in your text editor to the section called Variables . Here 's what it looks like . ( Code examples in @ @ @ @ @ @ @ @ @ @ , keys and values. ) @qwx22548 <p> ; Variables declared here can be used later on between two # characters ( e.g. #MyVariable# ) . <p> fontName=Trebuchet MS <p> textSize=8 <p> colorBar=235,170,0,255 <p> **25;1514;TOOLONG <p> Try changing one of these variable values . Go to the line that begins with the fontName key , and change Trebuchet MS to another font - say , Times New Roman : <p> fontName=Times New Roman <p> Then , save the file . <h> Refresh <p> The refresh action is important in Rainmeter . The effect of refreshing a skin is the same as if you had unloaded and then re-loaded the skin . When this happens , all dynamic variables and other options are reset according to their original values in the skin file , and all measures restart from the beginning . Refreshing a skin is also necessary to apply any changes that have been made to a skin 's files . <p> You can refresh any skin by selecting Refresh skin in the context menu , or browsing to the skin in Manage and clicking the Refresh button in the top-right @ @ @ @ @ @ @ @ @ @ different . <p> When skin files have been added , renamed or removed , you will need to refresh the entire Rainmeter application in the same way . You can do this by selecting Refresh all in the context menu or the bottom-left of the Manage window . <p> Try refreshing the Clock skin that you edited before . You will see the skin 's font face instantly change . <p> You have now edited your first skin ! This is the same basic process that you will use to customize , modify , and eventually create skins of your own . <h> Going Further <p> If you do n't find the option that you want to change in the Variables section , and the author has provided no other instructions , then your objective goes beyond merely " customizing " a skin : you will need to actually modify the skin away from the original author 's design . <p> This is not only possiblewe actually encourage it ! Breaking down the pieces of someone else 's creation and building something new with them is one of the best @ @ @ @ @ @ @ @ @ @ skins involve basically the same skills and require an understanding of the same core concepts . It is the tweakers , the experimenters , who get the most out of the tools that Rainmeter has to offer . 
@@256186 <h> More <h> Variables <p> A variable is a string of text that is associated with a short , memorable name . Variable names can be used in most options throughout the skin , in place of the associated text . <p> Variables are helpful when a certain string is repeated many times throughout the skin . By referencing the variable name instead of the full string , the amount of " redundant " code is reduced , as is the overall size of the skin . Variables also simplify the task of changing values . A variable string can be modified in a single location , and without recreating the entire option in which it is used . <h> Variables section <p> Each skin may have a special section called Variables . Each option in Variables defines a variable name . Unlike most other option names in Rainmeter , variable names are not limited to a specific list . They can have any valid name , as long as they do not conflict with Rainmeter 's built-in variables . @qwx22548 <p> Foo=This is a string ! <p> Bar=So is @ @ @ @ @ @ @ @ @ @ in other options by surrounding the name with pound signs ( # ) , as in #Foo# . When the skin is loaded , Rainmeter replaces the variable reference with the corresponding string . Variables are inserted " literally , " which means they can be mixed with other variables or regular text . <p> MeterFoo @qwx22560 <p> Text=The value of my " Foo " variable is : #Foo# <p> FontColor=#Red# , #Green# , #Blue# , #Alpha# <p> MeterBar @qwx22560 <p> Text=The value of my " Bar " variable is : #Bar# <p> FontColor=#Red# , #Green# , #Blue# , #Alpha# <p> Variables can also be used to define other variables : @qwx22548 <p> Foo=rainmeter <p> Bar=http : //www. #Foo#.net/ <h> Changing Variables <p> The ! WriteKeyValue bang can be used to rewrite values in Variables . The skin must be refreshed to apply changes made by ! WriteKeyValue . <p> ! WriteKeyValue " Variables " " Foo " " This is a new string ! " <p> Alternatively , the ! SetVariable bang can be used to change variable values dynamically . ! SetVariable can be used to create a @ @ @ @ @ @ @ @ @ @ . <p> ! SetVariable " Foo " " This is a new string ! " <h> Dynamic Variables <p> A variable whose value changes while the skin is active is called a dynamic variable . Dynamic variables allow a skin to store , retrieve and display ever-changing information without refreshing the skin . <p> Dynamic variables can only be used in a measure or meter with the option DynamicVariables=1 . Any MeasureName used in a bang as a Section Variable is automatically dynamic , and DynamicVariables=1 is not required . <p> In addition , there are some plugins which do not support dynamic variables at this time . The following are sections where dynamic variables can not be used : <p> When a meter or measure has dynamic variables enabled , Rainmeter uses marginally more processor power . This difference is negligible for most skins , but it may be noticeable in very large , complex skins with many dynamic variables , or on image meters with very large images . For this reason , it is recommended to use dynamic variables only when necessary , and use alternatives such @ @ @ @ @ @ @ @ @ @ <p> Rainmeter automatically creates a number of helpful variables for each skin . These variables do not need to be defined in the Variables section . Some built-in variables are dynamic . <h> Section Variables <p> Some measure and meter properties can also be referenced as dynamic variables by using the section name in brackets ( ) , as in SectionName . These section variables can also be modified by certain parameters , as in SectionName:P1 , P2 . <h> Event Variables <p> Some action options allow the use of special variables that are related to the specific event that triggers the action . These variables are referenced by surrounding the name with dollar signs ( $ ) , as in $Foo$ . Event variables are evaluated at the time the action is triggered , used to execute the action , and then immediately discarded . For example , when using a command with the InputText plugin , the event variable $UserInput$ refers to the string that was entered into a text input box by the user . <h> Environment Variables <p> Windows environment variables can be referenced as variables @ @ @ @ @ @ @ @ @ @ signs ( % ) , such as %APPDATA% or %SystemDrive% . To see a complete list of environment variables available on your system , open a Windows command prompt ( cmd.exe ) and type set . <h> Escaping Variables <p> Rainmeter always attempts to replace #Name# or Name with a value , if " Name " refers to an existing variable , meter or measure . To prevent a variable reference from being replaced , place asterisks ( * ) inside the containers , as in : <p> #*Foo*# <p> *Bar* <p> These are replaced with the literal strings#Foo# and Bar respectively . The ! SetOption bang can use these escape characters to protect variable references when setting options on dynamic meters or measures . 
@@256187 <h> More <h> Launcher <h> Creating a new skin <p> let 's create a new folder under Skins , where we will store all of the skins we create in these tutorials . We want to keep them together in one root config folder , so we can later look at how to share some settings and resources between them . <p> In Windows Explorer , create a new folder called Tutorials . Under that folder , create another new folder called Launcher . In that TutorialsLauncher folder , create a new empty text file . In Windows explorer , you can simply right-click in the folder and say " New / Text document " . Give it the name Launcher.ini . <p> Now , left-click the Rainmeter icon in the Windows notification area on your taskbar , to open the Manage dialog . Click on the Refresh all button on the bottom left , and you should see your new Tutorials / Launcher config in the list . Find Launcher.ini in the list , right-click it and say " Edit " . This will open the new skin file @ @ @ @ @ @ @ @ @ @ skin just yet , we need to add some code first ... <h> Building the Launcher skin <p> First , as we did in our earlier " hello world " skin , let 's add the Rainmeter section to control the Update speed of the skin . <p> Note that the first two things we must do is create a SectionName for the meter , and tell Rainmeter what type of meter this is . <p> MeterLaunch1 @qwx22560 <p> This is a String meter , one of the most commonly used meters . It is used to display some text on the screen . Formatting control , like the position , size , color and font face can all be set with a combination of General meter options and the options specific to the String meter . Let 's look at some we have used here . <p> X and Y : These control the position of the meter relative to the overall skin . So what we are saying here is that we want this first meter to be five pixels right of the left edge of the skin @ @ @ @ @ @ @ @ @ @ skin . <p> FontFace : This determines which font you want to use when displaying the string . <p> StringStyle : Controls some style options for the string . We are using a Bold style . <p> AntiAlias : Does font smoothing on the text , to improve the display quality . <p> Then we are setting the Text option of the meter with Text=Notepad , defining the string of text we wish to display . String meters can also use the value of Measures as the text to display , we will go into that in more detail in a future tutorial . <p> The last two options in the meter are what really makes this into a " launcher " , and not just some text on the screen . <p> SolidColor=0,0,0,1 : This is a little trick used to create a solid but invisible " box " behind the string meter , to make clicking on the text easier . <p> LONG ... This is a mouse action , telling Rainmeter to take the defined action option when the meter is clicked with the mouse . In @ @ @ @ @ @ @ @ @ @ in the folder C : WindowsSystem32 . We will go into much more detail on different types of actions and Bangs in future tutorials . <p> So let 's load our new skin and take a look at where we stand . From the Manage dialog , find the Launcher.ini entry in the list and click on the Load button on the upper right . <p> Drag the skin anywhere on the screen you like . Rainmeter will remember the position any time you load this skin in the future . You can also right-click the skin to change other skin options as desired . <p> There we have our first meter , and a fully functioning Rainmeter skin . Clicking on the Notepad text will launch the application . Congratulations ! Take a short break . <h> Adding another meter <p> Next , let 's add another meter to launch another application . The format of the meter will be much the same as the earlier one , but we need to do some things to make sure the position of the meter is appropriate . <p> MeterLaunch2 @qwx22560 @ @ @ @ @ @ @ @ @ @ @qwx22568 <p> SolidColor=0,0,0,1 @qwx22550 <p> Text=Paint <p> LeftMouseUpAction= " MSPaint.exe " <p> The important changes here are in the X and Y options for the meter . Remember that X and Y set the position of a meter in the context of the overall skin . Note that we are using relative positioning to set the X option zero pixels relative to the left of the previous meter , ( in effect the same X as before ) and the Y option two pixels relative to the botton of the previous meter . We could also have specifically set the value of X and Y to some hard-coded value , but using relative positioning is often much easier when laying out a skin 's meters . <p> We have changed the Text and LeftMouseUpAction options for our second application , and we can now use Manage and the Refresh button at the upper right to see our changes in action . Note that you can also right-click the skin on the screen and say Refresh skin . <h> A new meter type : The Image meter <p> Now we are @ @ @ @ @ @ @ @ @ @ new meter type . What we want to do with the next meter is display an image , which we can click on to launch the application . <p> MeterLaunch3Image @qwx22559 <p> **27;1541;TOOLONG <p> W=32 <p> H=32 <p> X=0r <p> Y=2R <p> LeftMouseUpAction= " Calc.exe " <p> We have created a new section that has the Meter option set to Meter=Image . We are going to use an image file we will include with our skin , so we have a couple of things to do to set that up correctly . <p> First , we need to create a folder to hold all the images for our tutorial skins . We will use this folder not only for this Launcher skin , but other ones going forward . <p> In Windows Explorer , create a new folder under SkinsTutorials called @Resources . The @Resources folder is a special folder under the root config of a skin or suite of skins , used to hold images , sounds , fonts , include files and other shared resources for the skins . <p> In this SkinsTutorials@Resources folder , create a new @ @ @ @ @ @ @ @ @ @ into that **30;1570;TOOLONG folder . <p> Now let 's go back to our skin code . We have set the ImageName option to use the built-in #@# shortcut for the @Resources folder , and the sub-folder of Images where we put our calc.png image file . The Image meter will load and display this image . <p> Next , we decided that the 128x128 pixels size of that original image file was just too large for our purposes . So we used the W and H ( width and height ) options to change the size of the image to 32x32 pixels when displayed . Just like the String meter , Image meters use both General meter options and options specific to the Image meter type . <p> Just as you did with the second String meter above , use relative positioning and the X and Y options to position the image below the previous meter . <p> **27;1602;TOOLONG <p> W=32 <p> H=32 <p> X=0r <p> Y=2R <p> Then , just as with the String meters above , set the LeftMouseUpAction option to LeftMouseUpAction= " Calc.exe " so that the @ @ @ @ @ @ @ @ @ @ <p> Save your changes and refresh the skin . Click on the image to launch Windows Calculator . <p> You could just use the image as is , but let 's add a string label next to the image . For that , create a new String meter , much like the ones above . <p> MeterLaunch3Text @qwx22560 <p> X=0R <p> Y=6r <p> FontFace=Trebuchet MS <p> FontSize=14 <p> FontColor=146,197,94,255 @qwx22568 <p> SolidColor=0,0,0,1 @qwx22550 <p> Text=Calculator <p> LeftMouseUpAction= " Calc.exe " <p> Notice that we have used the X and Y options to set the position of the meter lined up just to the right of the previous meter ( the Image meter ) , and six pixels below the top of it . That will align the meter more or less centered to the right of the image of the calculator . We add the same LeftMouseAction that the Image meter has , so you can click on either to launch the application . Just for fun , we also changed the FontColor of the string . <p> Save your changes and refresh the skin . <p> Having this skin @ @ @ @ @ @ @ @ @ @ let 's add a background meter to put a nice dark box behind the entire skin . <p> An important concept in Rainmeter is that fact that how meters that " overlap " in position display from the standpoint of which is in " front " and which is in " back " on the screen is determined by the position of the meter 's code in the skin . ini file . Since we want our background meter to be " behind " all the other meters , we need to put the code for it before the other meters we want in front . <p> So , let 's go back up to the top of the skin , just below the Rainmeter section , but before the first String meter MeterLaunch1 and put in our new background Image meter . @qwx22547 @qwx22570 <p> MeterBackground @qwx22559 <p> W=145 <p> H=95 <p> SolidColor=60,60,60,255 <p> MeterLaunch1 @qwx22560 <p> X=5 <p> Y=5 <p> FontFace=Trebuchet MS <p> FontSize=14 @qwx22554 @qwx22568 <p> SolidColor=0,0,0,1 @qwx22550 <p> Text=Notepad <p> LONG ... <p> We have set a specific W and H ( width and height ) @ @ @ @ @ @ @ @ @ @ others , and no X and Y options . This is so the meter will be at the far left and top of the overall skin . We then set SolidColor=60,60,60,255 , which in the absence of any ImageName on an Image meter will simply draw a square or rectangle based on the size of the W and H options . <p> Save your changes and refresh the skin . <p> Good job ! You now have a pretty functional launcher skin that you can add items to , ( just follow the patterns you used above ) change string or image format options and positioning to modify to your tastes , and end up with something that is both functional and shows off your creativity . 
@@256189 <h> More <h> Using Rainmeter <p> The first time you run Rainmeter , your desktop will look something like this : <p> Illustro , the standard " suite " that comes with Rainmeter . <p> Each small window on the right side of your screen ( " System , " " Disk , " and so on ) is a skin . Rainmeter remembers each skin 's location and settings independently . To move a skin , just click and drag it to a new location . <h> Context Menu <p> A typical skin 's context menu . <p> The easiest way to interact with Rainmeter skins is through the context menu . A skin may have any number of tabs , buttons , menus , or other bells and whistles in its designbut no matter what , you can still access the context menu by right-clicking on the skin . <p> Some skins may assign some other action to right-clicking on the skin . In this case , you can still override this action and open the context menu by holding down the Ctrl key when you right-click . @ @ @ @ @ @ @ @ @ @ that you can see in the screenshot on the right . Some skins may have custom items to their context menus , but these these will not replace the basic items . Instead , both types of items will appear alongside each other . <h> Loading and Unloading <p> You can use the context menu to load skins from your library . Right-click on any of the illustro skins , and select illustro ? Google ? Google.ini . The " Google " skin will appear in the top-left corner of your desktop . You can now drag it into place alongside your other skins . <p> The Google skin has been loaded . <p> You can also unload a skin with the context menu . Right-click the new Google skin , and select Unload skin . You will see the skin fade away and disappear . <p> When a skin is unloaded , its location and settings are still saved . To see how this works , load the Google skin again . Notice that , instead of appearing in the top-left , it appears in the same location where @ @ @ @ @ @ @ @ @ @ loaded the Google skin , there was only one option under the " Google " menu , Google.ini . This is how most skins work : each skin is saved as a " SkinName.ini " file in a separate folder . What happens when there is more than one skin in the same folder ? The answer is that these skins become variants of each other . <p> " Disk " has two variants . <p> To see an example of a skin with variants , right-click the " Disk " skin and select Variants in the context menu . You can see that the 2 Disks.ini variant is already active . Click 1 Disk.ini to switch to that variant . Notice how the new variant replaces the old variant on the desktop . Variants share the same location and settings , and only one of a skin 's variants may be loaded at one time . <h> Settings <p> Rainmeter keeps track of a number of basic skin settings . These settings are created automatically for each skin . They include things like position ( whether a skin stays @ @ @ @ @ @ @ @ @ @ desktop ) , snap to edges ( whether skins automatically align with other skins when they are dragged close together ) , and of course , the skin 's coordinates ( location on the desktop ) and which variant is loaded . <p> " Welcome " is now transparent . <p> One of the most popular skin settings is transparency . Try changing the transparency of the " Welcome to Rainmeter ! " skin in the center of your desktop . Right-click the skin to open the context menu , then select Settings ? Transparency ? 50% . Now you can partially see through the skin and onto the desktop below . <p> Rainmeter does not manage any other " settings " beyond the basic ones found here . Extra customization optionslike fonts , colors , images and passwordsare all stored and managed separately by the skins themselves , as variables . This means that saving and restoring your layout settings in Rainmeter will not affect your customizations for specific skins . ( It also means that backing up your Rainmeter settings will not protect your customizations , so make @ @ @ @ @ @ @ @ @ @ . ) <h> Tray Icon <p> There are two ways to open a skin 's context menu . <p> Rainmeter has a Windows Notification Area ( formerly known as System Tray ) icon . You can reach the context menu for each of your loaded skins by right-clicking on the icon . This is a handy way to access a skin when you ca n't right-click it for some reason ( usually when the skin is hidden ) . It 's also a good place to see a complete list of all the skins that you have loaded . <h> Manage <p> Aside from the context menus , the most important part of Rainmeter 's basic user interface is the Manage window . Open Manage by selecting Manage from the context menu , or by left-clicking once on the tray icon . <p> The " Manage " window shows your whole library . <h> Skins <p> The Skins tab allows you to load , unload , or change settings for your entire library of skins . You can go to a specific skin 's settings in the Manage window by @ @ @ @ @ @ @ @ @ @ or choosing from the Active skins drop-down menu in Manage . You can also right-click to open any skin 's folder in Windows Explorer , where you can see other resource files for that skin , such as images or scripts , or delete a skin 's file , from your computer . <p> The Manage window does many of the same tasks as the context menu , but when you need to load or edit options for a number of skins at the same time , it 's much easier to use the window . <h> Layouts <p> Manage is also where you can load and save layouts . A layout is a permanent copy of your skin settings , including both loaded and unloaded skins . ( Again , these settings do not account for changes to your skin . ini or . inc files , which include any extra customization options . Loading a layout will also not recover a skin that has been deleted from your library . ) When you save a layout , you have the option of excluding settings for unloaded skins , @ @ @ @ @ @ @ @ @ @ skins that you may no longer have or use . You can also associate your current wallpaper with your layout . <h> About <p> The last part of Rainmeter 's interface is the About window . Open About by selecting About from the context menu , or by clicking Open log in Manage . <p> The " About " window shows you what Rainmeter is doing in real-time . <h> Log <p> The Log tab is where Rainmeter keeps a running record of what it is doing . This is also where Rainmeter reports errors related to a skin or the program itself . In addition , the Skins tab will show you the current values of all measures and variables in the skin . ( You 'll learn more about those later . ) This makes the About window an invaluable assistant whenever you 're writing , editing or troubleshooting a skin . <h> Version <p> The other tabs show information about the version of Rainmeter you are using , as well as the versions of plugins that you have installed . If you are ever having a technical @ @ @ @ @ @ @ @ @ @ community , the About window is where you can find a wealth of information about your Rainmeter setup that may be helpful in solving your problem . <h> Exiting Rainmeter <p> Rainmeter saves all settings automatically as soon as you change them . If you exit Rainmeter , ( by clicking Exit in the context menu ) all skin settings and your current layout will be loaded automatically the next time Rainmeter is launched . 
@@256190 <h> More <h> AudioLevel plugin <p> Plugin=AudioLevel monitors and analyzes streams of audio sound to or from an audio endpoint . <p> AudioLevel will monitor , filter and analyze the amplitude ( volume level ) of sound input or output on the default or defined device and channels . The value returned will be a number from 0.0 to 1.0 , which will be treated as a percentage for use in meters . <p> This can be used to create a volume level VU Meter for defined channels , or optionally can filter the audio stream into distinct frequency bands to create a Spectrum Analyzer . <p> The plugin monitors the amplitude of the post-mixer signal at a Windows audio endpoint. ( i.e. sound card speaker output , USB audio interface , headphone port , microphone input ) It does this by creating a WASAPI capture client in loopback mode . The capture client streams audio data to the plugin where it can be filtered and measured . The resulting volume level is returned by the plugin for use in Rainmeter measures and meters . <p> Note : Creating meters @ @ @ @ @ @ @ @ @ @ skin be set with a fairly low Update rate in the Rainmeter section of the skin . While the plugin is quite resource friendly and efficient , some care should be taken when deciding how much analysis should be done on the signal , and it is recommended that this plugin be used in a skin dedicated to it , and not as a part of a larger skin where the low update rate may cause higher CPU usage . <h> Usage <p> AudioLevel operates with a " parent / child " approach . A single " parent " AudioLevel measure is used to obtain and analyze the audio stream , and then as many " child " measures as desired request data from the parent to get individual values to display in meters . Example : <p> ; This parent measure processes the default audio output . <p> MeasureAudioRaw @qwx22557 <p> Plugin=AudioLevel <p> ; This child measure gets the current RMS value of the left channel ( 0.0 to 1.0 ) . <p> MeasureAudioRMSL @qwx22557 <p> Plugin=AudioLevel <p> Parent=MeasureAudioRaw <p> Channel=L <p> Type=RMS <p> ; This child measure gets @ @ @ @ @ @ @ @ @ @ to 1.0 ) . <p> MeasureAudioRMSR @qwx22557 <p> Plugin=AudioLevel <p> Parent=MeasureAudioRaw <p> Channel=R <p> Type=RMS <p> Note : Only the Type , Channel , FFTIdx and BandIdx child measure options can be changed dynamically with ! SetVariable or ! SetOption . Parent measure options may not be changed dynamically . <h> Options <h> Parent measure options <p> Specifies whether you want to measure the input or output levels for the given device . <p> Output ( default ) <p> Input <p> IDDefault : None <p> Specifies the audio device to measure . <p> If not set , it will use the default device for the specified Port . If you specify Port=Output and no I 'd , the plugin will connect to the default audio output device defined in Windows . <p> To specify a device other than the default , you will need to find the Windows device I 'd . See the DeviceList child measure option for more info . <p> Device I 'd 's will be in the form : LONG ... <p> Note : The default audio device in Windows can be changed by using " Manage Audio Devices @ @ @ @ @ @ @ @ @ @ <p> RMS is a way of calculating the average of values over a period of time , using the mathematical algorithm Root Mean Square . The signal value ( amplitude ) is squared , averaged over a period of time , then the square root of the result is calculated . The result is a value , that when squared , is related ( proportional ) to the effective power of the signal . <p> This is the most meaningful way of measuring audio volume levels in a skin . <p> The following parent options are used in combination with child measures having the Type=Peak option set . <p> PeakAttackDefault : 50 <p> Specifies the time in milliseconds over which to interpolate as the signal level increases . For example , how quickly a needle jumps up for a higher peak . <p> PeakDecayDefault : 2500 <p> Specifies the time in milliseconds over which to interpolate as the signal level decreases . For example , how quickly a needle subsides to a lower peak . <p> PeakGainDefault : 1.0 <p> A multiplication factor that will be applied to the Peak @ @ @ @ @ @ @ @ @ @ signal from the time domain to the frequency domain , with FTTSize determining how many points you get back in the frequency domain . This is done by analyzing the audio stream into a linear-based number of points using the mathematical algorithm Fast Fourier Transform . <p> This frequency information can then optionally be extrapolated into logarithm-based Bands to distinctly measure by frequency in the ranges that are the most useful for spectrum display , based on the way humans detect changes in sound . <p> In order to use Bands , both FFTSize and Bands must be set on the parent measure . <p> The following parent options are used in combination with child measures having the Type=FFTand FFTIdx or Type=Band and BandIdx options set . <p> FFTSizeDefault : 0 <p> A number value for the frequency resolution of the output data . <p> This will be an even integer greater than or equal to 0 , usually a power of 2 . Typical values are 256 , 512 , or 1024 , with the higher the number the greater the frequency resolution . <p> Note : It should @ @ @ @ @ @ @ @ @ @ more CPU resources and time will be needed to analyze the audio stream . A very high number here can both impact CPU usage and potentially cause some " lag " between the sound generation and the measurement by the plugin . <p> FFTOverlapDefault : 0 <p> Optionally , the FFT can be windowed to overlap successive sections . A Hann function is used to shape the data before the FFT is applied . Typical values are half the FFTSize . Increasing this value will lower the latency between the audio and the measure 's response , at the cost of extra CPU . <p> FFTAttackDefault : 300 <p> Specifies the time in milliseconds over which to interpolate as the signal level increases . For example , how quickly a needle jumps up for a higher level . <p> FFTDecayDefault : 300 <p> Specifies the time in milliseconds over which to interpolate as the signal level decreases . For example , how quickly a needle subsides to a lower level . <p> BandsDefault : 0 <p> An integer , specifying the number of frequency bands to generate . <p> The @ @ @ @ @ @ @ @ @ @ frequency bands , similar to a typical spectrum analyzer . This option specifies the number of bands to create . <p> FreqMinDefault : 20 <p> A number in Hz , specifying the minimum frequency band calculation . <p> FreqMaxDefault : 20000 <p> A number in Hz , specifying the maximum frequency band calculation . <p> SensitivityDefault : 35.0 <p> A number specifying in what dB range the measure will return FFT and Band data . Increasing this value will cause the measure to respond to quieter sounds , decreasing it will only trigger the measure on louder sounds . <h> Child measure options <p> ParentRequired <p> Defines the parent AudioLevel plugin measure to read values from . <p> Example : Parent=SomeMeasureName <p> ChannelDefault : Sum <p> This specifies which audio channel level to read from the parent . Channels can be identified by name or number , e.g. Channel=0 is the same as Channel=L or Channel=FL . <p> L or FL or 0 <p> R or FR or 1 <p> C or 2 <p> LFE or Sub or 3 <p> BL or 4 <p> BR or 5 <p> SL or @ @ @ @ @ @ @ @ @ @ TypeRequired <p> Specifies the type of data to retrieve from the parent measure . <p> RMS : The current RMS level ( 0.0 to 1.0 ) corresponding to the specified Channel . <p> Peak : The current Peak level ( 0.0 to 1.0 ) corresponding to the specified Channel . <p> FFT : The current FFT level ( 0.0 to 1.0 ) corresponding to the specified FFTIdx option . <p> FFTFreq : The frequency in Hz corresponding to the specified FFTIdx option . <p> Band : The current FFT level ( 0.0 to 1.0 ) value corresponding to the specified BandIdx option . <p> BandFreq : The frequency in Hz corresponding to the specified BandIdx option . <p> Format : A string describing the audio format of the device connected to with the parent I 'd option . <p> DeviceStatus : Status ( 0 or 1 ) of the device connected to with the parent I 'd option . <p> DeviceName : A string with the name of the device connected to with the parent I 'd option . <p> DeviceID : A string with the Windows I 'd of the device connected to @ @ @ @ @ @ @ @ @ @ string with a list of all available device I 'd 's for the specified Port This can be used to identify a desired device I 'd for use in the parent I 'd option . <p> Example : Type=RMS <p> FFTIdxDefault : 0 <p> Specifies which FFT point you want to extract from the parent . FFTSize must be enabled on the parent measure to use this option . <p> Valid values range from 0 to ( FFTSize/2 ) . <p> BandIdxDefault : 0 <p> Specifies which frequency band number , starting with 0 , you want to extract from the parent . FFTSize and Bands must be enabled on the parent measure to use this option . 
@@256192 <p> ADAPTERDESCRIPTION : String The description of the network adapter specified by SysInfoData . <p> ADAPTERTYPE : String and Number The type of network adapter specified by SysInfoData . <p> The string value will be one of Ethernet , Wireless or Other . The number value will be one of 6 ( Ethernet ) , 71 ( Wireless ) , or some other number in the range 0-280 ( Other ) . The meaning of numeric codes other than 6 and 71 can be found at : MSDN Adapter Info . <p> NETMASK : String The subnet mask of the network adapter specified by SysInfoData . <p> LANCONNECTIVITY : Number Returns 1 if your computer is connected to a LAN , -1 if not . <p> INTERNETCONNECTIVITY : Number Returns 1 if your computer is connected to the Internet , -1 if not . <h> Monitor and screen values <p> NUMMONITORS : Number The number of display monitors currently active . <p> SCREENSIZE : String The resolution of the primary display monitor in the form " width x height " . <p> SCREENWIDTH : Number The width , in pixels @ @ @ @ @ @ @ @ @ @ there are multiple . <p> SCREENHEIGHT : Number The height , in pixels , of the monitor specified by SysInfoData . <p> VIRTUALSCREENTOP : Number Y-Coordinate of the upper left corner of the virtual screen . Use SysInfoData to specify a monitor . These coordinates are relative to the primary monitor and can be negative . <p> VIRTUALSCREENLEFT : Number X-Coordinate of the upper left corner of the virtual screen . Use SysInfoData to specify a monitor . These coordinates are relative to the primary monitor and can be negative . <p> VIRTUALSCREENWIDTH : Number Width of the virtual screen which encompasses all display monitors . <p> VIRTUALSCREENHEIGHT : Number Height of the virtual screen which encompasses all display monitors . <p> WORKAREA : String The size of the client area of the primary display monitor in the form " width x height " . <p> WORKAREATOP : Number Y-Coordinate of the upper left corner of the client area . Use SysInfoData to specify a monitor . These coordinates are relative to the primary monitor and can be negative . <p> WORKAREALEFT : Number X-Coordinate of the upper left corner @ @ @ @ @ @ @ @ @ @ monitor . These coordinates are relative to the primary monitor and can be negative . <p> WORKAREAWIDTH : Number Width of the client area of the primary display monitor . Use SysInfoData to specify a different monitor . <p> WORKAREAHEIGHT : Number Height of the client area of the primary display monitor . Use SysInfoData to specify a different monitor . <h> Time Zone values <p> TIMEZONEISDST Number A flag indicating the current state of Daylight Savings Time for the local computer . Possible return values are:1 : Daylight Savings Time is currently in effect0 : Daylight Savings Time is currently not in effect-1 : The local region does not use Daylight Savings Time , or the functionality is disabled in Windows . <p> TIMEZONEBIAS Number The difference , in minutes , between standard local time and Coordinated Universal Time ( UTC ) . This is the difference from the standard local time to UTC , or UTC = standard local time + time zone bias . <p> TIMEZONESTANDARDNAME String The full name of the local computer 's Time Zone when Daylight Savings Time is not in effect . For @ @ @ @ @ @ @ @ @ @ Number The difference in minutes between standard local time and the local time when Daylight Savings Time is not in effect . For most areas , this will always be zero . Adding this to the value of TIMEZONEBIAS will produce the total actual difference in minutes between the local computer and UTC when Daylight Savings Time is not in effect , or UTC = standard local time + time zone bias + standard bias . <p> TIMEZONEDAYLIGHTNAME String The full name of the local computer 's Time Zone when Daylight Savings Time is in effect . For example , " Eastern Daylight Time " . <p> TIMEZONEDAYLIGHTBIAS Number The difference in minutes between standard local time and the local time when Daylight Savings Time is in effect . For most areas , this will always be -60 . Adding this to the value of TIMEZONEBIAS will produce the total actual difference in minutes between the local computer and UTC when Daylight Savings Time is in effect , or UTC = standard local time + time zone bias + daylight bias . <p> An additional selector option that can be @ @ @ @ @ @ @ @ @ @ <p> Network Interface Controller <p> For SysInfoType values related to network information , this will identify the network interface controller ( NIC ) to use . <p> This can be defined in one of several ways : <p> The string value Best , which will automatically detect the active interface . <p> The name of the network interface controller . For example , Qualcomm AR938x Wireless Network Adapter . <p> The index number of the network interface controller . <p> Example : SysInfoData=Best <p> Note : When the option is set to Best , the function will select a " wired " network connection in preference to a " wireless " one , if both are active . <p> When the option is set to Best , DyanmicVariables=1 must be set on the measure if you want it to automatically react to changes in the active interface . This should be done if for instance you have a laptop or other computer that you switch between wired and wireless connections . <p> Monitor number <p> For SysInfoType values related to monitor information , this will identify the monitor number to @ @ @ @ @ @ @ @ @ @ can be found by opening the Windows Display Properties dialog . It is important to note that " 1 " is not always the primary display monitor . 
@@256194 <h> More <h> Option Types <p> In the most basic sense , a skin in Rainmeter is controlled by a . ini file consisting of sections , options , and option values . <p> SectionName <p> OptionName=OptionValue <p> The skin can have various kinds of sections . These include : @qwx22547 <p> Metadata @qwx22548 <p> MeasureName <p> MeterName <p> These sections can have many options and option values . Some of which are general in nature , and some of which are very specific to the type of section , for instance specific options for the various measure , plugin or meter types . <p> While the options used can be general or specific , the options will fall into one of the following broad type categories : <h> Number options <h> Path options <p> Path options specify the relative or absolute path of either a file or a folder ( depending on the option ) . For example , the path and name of an image file is expected with ImageName . <p> There are built-in variables provided that automatically resolve to paths for the Rainmeter application or individual @ @ @ @ @ @ @ @ @ @ Variables . <p> In addition , there is a built-in variable #@# that resolves to the @Resources folder in the root config folder of the current skin . <p> ; Paths relative to the current skin folder : <p> ImageName=lolcat.png <p> ImageName= .. lolcat.png <p> ; Absolute path : <p> ImageName=C : lolcatslolcat.png <p> ; Path to the current skin folder : <p> **33;1631;TOOLONG <p> ; Path to the @ResourcesImages folder under the root config of the current skin : <p> **29;1666;TOOLONG <h> Color options <p> Color options such as SolidColor and FontColor should use the RGBA ( red-green-blue-alpha ) notation in either the hexadecimal or decimal form . The color results from a mixing of the red , green and blue components of the option , with the transparency ( alpha channel ) of the element set by the fourth component . <p> Decimal colors are specified as RRR , GGG , BBB , AAA , where RRR , GGG , BBB , and AAA are decimal numbers from 0 to 255 . Formulas can also be used in place of the numbers . <p> Hexadecimal colors are specified @ @ @ @ @ @ @ @ @ @ and AA are hexadecimal numbers from 00 to FF . <p> Note : The alpha component is optional . As with the other components it is a value from 0 to 255 ( 00 to FF ) , with 0 being completely invisible ( and the meter will not react to the mouse ) to 255 , which is completely opaque . The default is 255 ( or FF ) . To have a element be " invisible " while still reacting to the mouse , use an alpha value of 1 . <p> ; The following lines are equivalent to solid opaque red : <p> SolidColor=255,0,0,255 <p> SolidColor=255,0,0 <p> SolidColor= ( 200 + 55 ) , ( 2 - 2 ) , 0 <p> SolidColor=FF0000FF <p> SolidColor=FF0000 <h> Action options <p> Options in a skin which cause Rainmeter to take some action . Actions may be triggered by user input such as mouse actions or changing values and system events within the skin , such as IfActions or OnUpdateAction . <p> Normally the value of an action option is going to be one or more bangs , or the @ @ @ @ @ @ @ @ @ @ are defined on the same action option , enclose them in square brackets . <p> ; Single bang : <p> LeftMouseUpAction= ! HideMeter SomeMeter <p> LeftMouseUpAction= ! HideMeter SomeMeter <p> ; Multiple bangs : <p> LeftMouseUpAction= ! HideMeter SomeMeter ! HideMeter SomeOtherMeter <p> For bangs that take parameters , the arguments should be separated by a space . Parameters that contain spaces must use quotes around the parameter . <p> ; These two lines are equivalent : <p> LeftMouseUpAction= ! HideMeter SomeMeter <p> LeftMouseUpAction= ! HideMeter " SomeMeter " <p> ; These two are NOT equivalent . The first line will cause an error due to the spaces <p> ; in the parameters while the second will properly set the value of SomeVariable <p> ; These two may or may not be equivalent depending on the value of the #ImageFile# <p> ; variable . If #ImageFile# contains spaces , the first line will fail . In uncertain <p> ; cases , it is always best to use quotes as in the second line . <p> LeftMouseUpAction= ! SetWallpaper #ImageFile# <p> LeftMouseUpAction= ! SetWallpaper " #ImageFile# " <p> External Windows commands @ @ @ @ @ @ @ @ @ @ and any parameters . Enclose the command in square brackets , and enclose any values with spaces in quotes . <p> LeftMouseUpAction= " C : WindowsNotepad.exe " MyFile.txt <p> ; Runs Notepad.exe and loads the file MyFile.txt . <p> LONG ... <p> ; Opens the URL in the default web browser . <h> Magic Quotes <p> A parameter to a bang that contains embedded quotes should be surrounded by a what we call " " " magic quotes " " " . A pair of triple quotes . <p> ; The first line will fail due to extra quotes . The second line will properly log <p> ; Example string : Bob said " hello " to Susan <p> LeftMouseUpAction= ! Log " Bob said " hello " to Susan " <p> LeftMouseUpAction= ! Log " " " Bob said " hello " to Susan " " " <h> Escaping a #Variable# or MeasureName <p> When using #VarName# or MeasureName in an action option , the current value of the variable or measure will be used . To have the literal string " #VarName# " or " MeasureName " used @ @ @ @ @ @ @ @ @ @ the variable or measure name with asterisk * characters . <p> For example , use #*VarName*# or *MeasureName* to tell Rainmeter to " escape " the variable or measure name . You do not want the value resolved , but rather used as a literal string . <p> LeftMouseUpAction= ! SetOption SomeMeter FontSize #VarName# <p> ; The FontSize option for SomeMeter will be set to the current value of the variable . <p> LeftMouseUpAction= ! SetOption SomeMeter FontSize #*VarName*# <p> ; The FontSize option for SomeMeter will be set to the the string " #VarName# " <p> LeftMouseUpAction= ! SetOption SomeMeter FontSize MeasureName <p> ; The FontSize option for SomeMeter will be set to the current value of the measure . <p> LeftMouseUpAction= ! SetOption SomeMeter FontSize *MeasureName* <p> ; The FontSize option for SomeMeter will be set to the string " MeasureName " . <h> Regular expression options <p> These options use Perl Compatible Regular Expressions ( PCRE ) to match specific parts of a text string . Regular expressions are used when the structure of a piece of data is known , but the content is not . @ @ @ @ @ @ @ @ @ @ by the WebParser plugin to interpret ( or " parse " ) web-based or local text file data sources , but they can also be used to modify the string value of a measure using Substitute options , or to test a string in a measure with IfMatch options . 
@@256195 <h> Contents <h> More <h> Radians Guide <p> Two of the meters in Rainmeter use a unit of measurement called Radians in order to calculate a position on the circumference of a circle . This is a common unit used by mathematicians , scientists , and yes , programmers when working with things that are round . This guide will try to make it easier to understand and use radians in the context of Rainmeter . <p> The two meters that use radians in their options are Roundline and Rotator . Roundline draws a line or solid fill that rotates around a center point based on some measure value . Rotator does much the same , using an image you provide rather than drawing the meter . Both use StartAngle and RotationAngle to control the starting point on the circle , and the total amount of distance around the circle that constitutes 100 percent . That way they can be used to display the value of any measure that defines a percentage . <h> So what are radians ? <p> Without going too deeply into the math involved , ( @ @ @ @ @ @ @ @ @ @ your brain with the details ) radians measure an arc angle that defines a distance around the circumference of a circle . The default starting point , or 0 radians , is directly to the right of the center point . This is probably the most important thing to wrap your head around right from the start . Radians have nothing at all to do with the degrees on a compass , which is traditionally shown with 0 degrees ( or North ) pointing straight up . <p> So in short , radians are a way of defining a point on a circle of any size , measuring a distance around the circle from 0 radians to the point you want . <p> It is a bit cumbersome to try to think of a circle in terms of radians . It is more intuitive to think of a circle in terms of degrees . A circle has 360 degrees , and we are all used to and can easily picture what 45 , 90 , 180 and 270 mean in terms of distance . All we need to do is @ @ @ @ @ @ @ @ @ @ of center , and add the number of degrees we need to get to the desired point . <p> So for example , if we want to define the point at the top of a circle , we can easily see that it will be 270 away from 0 , going clockwise around the circle . So what we want is a way to define that distance of 270 as a number of radians . <h> Calculating radians <p> Degrees to Radians : ( degrees* ( PI/180 ) ) <p> You can also reverse the process if you need to : <p> Radians to Degrees : ( radians* ( 180/PI ) ) <p> Note : The simplest way to do this is to just use Google . If you search using " nn degrees in radians " it will provide exactly the answer you need . <p> 45 degrees = 0.785398163 radians <h> A Rainmeter shortcut <p> While we think it is important to have a basic understanding of how radians work in Rainmeter , there is a way to cheat . There is a function in Rainmeter that can @ @ @ @ @ @ @ @ @ @ a number of radians for you . It is the Rad(x) formula function , which will convert " x " as a number of degrees to the corresponding number of radians . Remember that any formula used outside of the Formula option of a Calc measure must be enclosed in parentheses. @qwx22566 <h> Example <p> We can use a CPU measure , which returns the amount of CPU usage as a percentage from 0% to 100% . Then we want to have a Roundline meter that displays the current value as filling a circle . We want the starting point at the top of the circle , and 100% defined as coming all the way back around to the top . <p> MeasureCPU <p> Measure=CPU <p> MeterCPUCircle <p> Meter=Roundline <p> MeasureName=MeasureCPU <p> W=40 <p> H=40 @qwx22566 <p> RotationAngle= ( Rad(360) ) <p> LineWidth=5 <p> LineStart=15 <p> LineLength=20 <p> **25;1697;TOOLONG <p> Solid=1 @qwx22550 <p> The important bits here are the two options StartAngle and RotationAngle . StartAngle is defined as ( Rad(270) ) , which is to say 270 in radians . This means that if you start directly from the @ @ @ @ @ @ @ @ @ @ in radians to define the distance to the top of the circle moving clockwise . That will be the starting point for the meter . RotationAngle is defined as ( Rad(360) ) , which is telling Rainmeter that the distance defined as 100% is all the way around 360 , or the full circle . <p> In another example , if you wanted to do a " VU Meter " type of approach , with the starting point on the left and 100% defined on the right , you would use : <p> StartAngle= ( Rad(180) ) <p> RotationAngle= ( Rad(180) ) <p> This is saying start 180 clockwise from 0 / 360 ( remember , starting directly right of center ) , and travel a total distance of 180 from there to define 100%. 
@@256197 <h> Rainmeter 4.0 Release <p> There are a lot of new features and capabilities in the latest Rainmeter 4.0 . You can safely install the new 4.0 release version right over your existing Rainmeter 3.3.3 or earlier installation , and nothing you have done will be lost or changed . There is never any need to uninstall any earlier version of Rainmeter to use the newest version . <h> Important change to supported versions of Microsoft Windows <p> Due to current and future improvements and additions to functionality , which will require the latest version of the Direct2D / DirectWrite graphical engines : <p> As of Rainmeter 4.0 , Windows XP and Windows Vista are no longer supported . <p> Rainmeter 4.0 requires at least Windows 7 with Service Pack 1 and the Platform Update applied . These should have been automatically applied several years ago by Windows Update , but if you have Windows Update turned off you may need to get and apply these updates manually . Windows versions later than Windows 7 are fully supported . <p> If you are on Windows XP or Windows Vista , @ @ @ @ @ @ @ @ @ @ you will need to stay on the 3.3.3 Release version of Rainmeter . <h> New Skin Dialog <p> This new dialog is opened with the Create new skin button in Manage , or by using the context menus on existing folders . This will allow you to add new root-level folders and skin files , or add folders or files to existing skins . See New Skin for details . <h> Inline Shadow <p> Added Shadow InlineSetting type to String meter Inline options . This will allow you to add a drop shadow to all or part of a string . <h> Inline String Case <p> Added Case InlineSetting type to String meter Inline options . This will allow you to set the string case to one of Lower , Upper , Proper , or Sentence for all or part of the displayed text . <h> Domain / Workgroup <p> Added DOMAINWORKGROUP SysInfoType value to the SysInfo plugin . This will return either the " domain " or " workgroup " set for the system . <h> Not Enough Substrings <p> Added LogSubstringErrors WebParser parent measure option . If set @ @ @ @ @ @ @ @ @ @ " Not enough substring " errors . This can be useful when for instance you are using lookahead assertions in a regular expression , and missing ( captures ) should not be treated as an " error " . <h> HTTP Headers <h> Auto Select Screen <h> Network Adapter Type <p> Added a new ADAPTERTYPE SysInfoType option for the SysInfo plugin . This will return the adapter type ( Ethernet or Wireless ) as both string and number values . Details can be found at Change Announcements . <h> Limiting InputText <h> Lua Scripting Changes <p> We corrected an issue where anything defined in the Initialize() function of a Lua script was treated as " global " across all skins using Lua , which could cause " bleeding " of defined variables between skins , or between script measures in a single skin . Each Lua measure will now run in an entirely separate local context . <p> This change to the context of each Lua measure in a skin has allowed for the use of the Lua dofile function in your scripts . <h> Other enhancements and fixes in @ @ @ @ @ @ @ @ @ @ the * ( skip ) parameter in the CharacterSpacing feature of InlineSetting . <p> String meter : Corrected an issue where ClipString=1 was not working correctly if W ( width ) was defined without defining H ( height ) . <p> String meter : Changed the number of degrees of angle in InlineSetting Gradients to allow fractional numbers . ( e.g. 45.5 ) . <p> String meter : Changed the default value for InlinePattern(N) to . * ( the entire string ) when the option is left off or set to " " . This will allow you to set an InlineSetting on the entire string value without needing to define any matching InlinePattern . <p> String meter : Corrected a bug that would not properly adjust a GradientColor InlineSetting when the width or height of the meter was changed but the string value was not . <p> RunCommand plugin : Corrected a rare issue when the command is run by OnCloseAction , where Rainmeter would unexpectedly terminate and the command not execute . <p> About dialog : Corrected an issue where tab characters were not being correctly displayed in @ @ @ @ @ @ @ @ @ @ a rare issue where skins might be loaded with only partial opacity when Windows is first started . <p> Rainmeter : The Rainmeter notification area icon is forced to be visible any time there are no skins loaded in Rainmeter . This will temporarily override any setting for " Show notification area icon " in Manage . This change is to eliminate the possibility that a user could turn off the tray icon and then unload all skins , thus no longer having any way to interact with Rainmeter. 
@@256198 <p> PrimaryColor is the color for the primary histogram . Default is dark green 0,128,0 . <p> SecondaryColor is the color for the secondary histogram . Default is red 255,0,0 . <p> BothColor is the color used where the histogram elements overlap . Default is yellow 255,255,0 . <p> PrimaryImage , SecondaryImage , BothImage <p> Optional images used for the histogram instead of PrimaryColor , SecondaryColor , BothColor . <p> PrimaryImage is the image used for the primary histogram . <p> SecondaryImage is the image used for the secondary histogram . <p> BothImage is the image used where the histogram elements overlap . <p> If SecondaryImage is defined , then BothImage is required . <p> The image is " revealed " both horizontally and vertically , to the percentage defined by the current value of the MeasureName bound to the meter , and as a factor of time . <p> Note : The image size can not be modified with the W or H general meter options , and will be displayed in the original image size . The size of the histogram will be defined by the size of @ @ @ @ @ @ @ @ @ @ , SecondaryImage or BothImage , they must be the same size . <p> PrimaryImagePath , SecondaryImagePath , BothImagePath <p> Path to the location of optional image used as the primary , secondary or both histograms. 
@@256199 <h> More <h> Inline Options <p> Inline options on a String meter are used to add or modify character formatting features to all or part of a string displayed by the meter . <p> This has three primary purposes : <p> Changing the inline format of part of the string . What this means is that you might have two or more FontFace , FontSize or FontColor ( or other ) settings in a string , without needing to use multiple meters and relative positioning . <p> Adding some Direct2D character formatting features to the String meter . These include things like more robust control of the Weight of the font , new style features like Character Spacing , Oblique , Underline and Strikethrough , and control of Stretch and Typography features when used with supporting fonts . <p> Support for a color Gradient on part or all of the string . <p> Inline options are defined by pairs of InlineSetting ... InlineSettingN and InlinePattern ... InlinePatternN options on the meter . InlineSettingN defines the character formatting setting you wish to add or change , and the matching InlinePatternN uses @ @ @ @ @ @ @ @ @ @ wish to change . These must be matching pairs , and there may not be missing N number postfixes in InlineSetting , which start with 2 . <p> The inline formatting is applied to the final string as it will be displayed by the meter , reflecting the value of any measures bound to the meter with MeasureNameN , any Text option on the meter , and any string manipulation applied with other meter options like StringCase , Percentual or NumOfDecimals . <p> While not required , AccurateText=1 should be set in the Rainmeter section of the skin , to ensure that the formatting is done on fonts using proper D2D font spacing and metrics . <h> Options <p> InlineSetting , InlineSetting2 , InlineSetting3 ... <p> This takes the form of the setting name to be added , a ( pipe ) character , and the value for the setting . <p> Example : InlineSetting=Size 12 <p> Supported settings : <p> Facefont family name . This uses the same values as the setting for FontFace on the meter . <p> Sizenumeric point size . This uses the same values as @ @ @ @ @ @ @ @ @ @ , ggg , bbb , aaa or RRGGBBAA color code . This uses the same values as the setting for FontColor on the meter . <p> Weightnumeric value in the range 1-999 .. The following are common values and their meanings . If the value is supported by the font family , it will be used . If not , the closest value that is supported by the font family will be used . <p> If the font does not support any additional weights , then 500 and below will use the font 's normal weight , and 600 and above will simulate a bold effect . <p> CaseOne of the following string case options : <p> Lower - All characters lower caseUpper - All characters upper caseProper - First character of each word upper case , the balance lower caseSentence - First character of each sentence upper case , the balance lower case <p> CharacterSpacingLeading Trailing Minimum Advance Width Defines the inter-character spacing for part or all of the string . Leading and Trailing may be any positive or negative integer or fractional number . The value is based @ @ @ @ @ @ @ @ @ @ to be an integer . Minimum Advance Width must be a positive integer . Any value may be set to an asterisk * to ignore . <p> Example : <p> **30;1751;TOOLONG 2 2 That will increase the leading space before characters and the trailing space after characters by 2 DIP . <p> Italic Uses Italic characters in part or all of the string . No parameter required . This will be simulated by Rainmeter if not supported by the font family . <p> ObliqueUses Oblique characters in part or all of the string . No parameter required . This will be simulated by Rainmeter if not supported by the font family . <p> Underline Used to Underline characters in part or all of the string . No parameter required . <p> Strikethrough Used to Strikethrough characters in part or all of the string . No parameter required . <p> ShadowX Offset Y Offset Blur Amount Color Used to create a Drop Shadow on all or part of the string . <p> X Offset - Number of positive ( right ) or negative ( left ) pixels to offset the shadow @ @ @ @ @ @ @ @ @ @ ) or negative ( above ) pixels to offset the shadow from the string.Blur Amount - Amount of blur transition in pixels . The number of pixels used to transition the shadow from solid to fully transparent . The value is based on DIP ( **25;1783;TOOLONG ) , and does not have to be an integer.Color - rrr , ggg , bbb , aaa or RRGGBBAA color code . The alpha component of the shadow color is multiplied with the alpha component of the string color . <p> Example : <p> InlineSetting=Shadow 2 2 3.5 150,150,150,200 <p> Note : The shadow effect does not change the size or position of the overall meter , and you should ensure that the meter is sized and positioned appropriately to display the shadow without clipping . The overall amount that the shadow effect impacts the desired meter size is a function the font size , the offset amounts and the blur amount . <p> Stretchone of 9 numeric compressed / expanded values if supported by the font . The following values can be set . If the value is supported by the font @ @ @ @ @ @ @ @ @ @ the closest value that is supported by the font family will be used . <p> Note : There are relatively few fonts that support alternative stretch values for glyphs . In many cases the CharacterSpacing setting might be a better choice to get a similar " wide " or " compressed " effect . <p> Typographyone of 80 Typography codes . Used to select alternative glyphs in a font , these must be explicitly supported by the font being used . A few common examples might be : <p> GradientColorAngle Color ; Percentage Color ; Percentage ... Defines a color gradient , at any angle , to be used on the selected text . This can consist of two or more colors as desired , with percentage points being used to define transition points for each color . <p> This takes the form of the Angle for the gradient in degrees , a pipe character , then a series of Color codes , a ; semi-colon , and a Percentage from 0.0 to 1.0 to define the position of the color in the text . Each series of Color ; @ @ @ @ @ @ @ @ @ @ will define a gradient at 180 degrees . It will start with a color of 255,0,0,255 ( red ) at percentage 0.0 ( the start ) , will transition to a color of 0,255,0,255 ( green ) at percentage 0.5 ( 50 percent ) , and to 0,0,255,255 ( blue ) at percentage 1.0 ( 100 percent ) . <p> While you can have as many sets of Color ; Percentage as desired , you must have a minimum of two to create a gradient . The percentage points define the point where the color will be exactly the associated color code . Think of it as the " center " of the color as it transitions toward and away from the defined color code . <p> Alpha transparency can be used to create a gradient fade effect on the text . <p> The Angle is defined as any number of degrees , with 0 or 360 starting directly to the right and rotating clockwise . This results in the following gradient directions on the text : <p> If a string is displayed on more than one line in the @ @ @ @ @ @ @ @ @ @ literal linefeed characters or #CRLF# variables being embedded in the string , any selected text that spans the linefeed will have the GradientColor setting applied to it separately on each line . Gradients will not " wrap " . <p> Most fonts have extra space above or below ( or both ) the actual character " glyph " in the font . This will vary from font to font . The gradient will be applied to the entire font character including the invisible extra space , so particularly when creating gradients that are vertical in direction , some tweaking of the percentage points may be required to have the gradient position as desired on the text . Hint : Nothing says that the first point must be 0.0 and the last point must be 1.0 . <p> Note : An alternative form of GradientColor , GradientColor1 , can be used . This uses the same setting values as GradientColor , but interpolates the gradient using an alternative method of handling gamma correction . In some cases you may find this makes for a smoother or brighter gradient transition . <p> @ @ @ @ @ @ @ @ @ @ This is generally going to be used with the ! SetOption bang , in order to dynamically " turn off " and " turn on " a particular setting . Using a ! SetOption that sets the value to " " will as always " remove " the option entirely , and as there ca n't be " missing " or " skipped " InlineSettingN numbers , all subsequent ones will be ignored . <p> If ( parentheses ) are used to capture parts of the string , then that is what the setting will be applied to . If ( parentheses ) are not used , then the part(s) of the string that match the regular expression will be used . <p> InlinePattern=. * ( default ) is how you would simply add or change a setting on the entire string . <p> The full range of PCRE regular expression functionality is supported , so the pattern can match on all or part of the meter 's string value . Logical OR and AND matching can be done in the regular expression , using the character to support OR @ @ @ @ @ @ @ @ @ @ AND . <p> Reserved characters in regular expression , which are . $*+ ? ( ) must be escaped with the character when used as a literal in the InLinePattern option . If using a measure value as a section variable in the option , the : EscapeRegExp modifier can be used to properly escape reserved characters in the measure . <p> If the ! SetOption bang is being used to dynamically " turn off " and " turn on " an InlinePattern , InlinePattern=$ should be used to indicate " nothing " , as Using a ! SetOption that sets the value to " " will as always " remove " the option entirely , and this will set it to the default of . * , or the entire string . <h> Some Examples @qwx22547 @qwx22570 @qwx22553 @qwx22549 <p> MeasureString <p> Measure=String <p> String=This is an InlinePattern test string. #CRLF#It contains numbers like 123 and 456#CRLF#and colors like red and blue . How#CRLF#about GreenToYellow as well ! <p> Using that string defined in MeasureString , let 's look at each of our InlineSetting / InlinePattern options . <p> @ @ @ @ @ @ @ @ @ @ starting at the beginning of the string , and ( capturing ) all characters until we reach a space and the word " is " . That will change the Weight of the word " This " at the start of the string to Bold . <p> InlineSetting2=Oblique InlinePattern2=test string We are searching for the phrase " test string " , and applying the Oblique style to it . <p> InlineSetting3=Underline InlinePattern3=test string We are searching for the same phrase " test string " , and applying the Underline style to it . So " test string " will be both Oblique and Underline . <p> InlineSetting4=Size 17 InlinePattern4= ( ddd ) We are capturing any parts of the string that are three consecutive numeric digits . This will change the font Size of both " 123 " and " 456 " to 17 . <p> InlineSetting5=Color 255,97,97,255 InlinePattern5=colors like ( . * ) and We are capturing the part of the string that is after " colors like " , and before " and " . This will change the font Color of the word " red " to @ @ @ @ @ @ @ @ @ @ ( . * ) . We are capturing the part of the string that is after " colors like " , Then after " and " . This will change the font Color of the word " blue " to 117,199,235,255 . <p> InlineSetting7=Face Segoe Script InlinePattern7=colors like . * and ( . * ) . We are again capturing the part of the string that is after " colors like " , Then after " and " . This will change the font Face of the word " blue " to Segoe Script . <p> **28;1810;TOOLONG 180 57,204,79,255 ; 0.0 250,247,157,255 ; 1.0 **28;1840;TOOLONG We are defining a GradientColor for the word " GreenToYellow " that will transition from 57,204,79,255 ( green ) to 250,247,157,255 ( yellow ) at an angle of 180 degrees ( left to right ) . 
@@256200 <h> More <h> IfMatchActions <p> IfMatch options are used in any measure , of any type , to evaluate a Perl Compatible Regular Expression . The regular expression will be evaluated as " true " or " false " based on matching with the string value of the measure , and will execute IfMatchAction or IfNotMatchActionaction options , which will contain one or more Bangs or commands . <p> There can be multiple sets of match and action options in the measure , by using IfMatch2 / IfMatchAction2 / IfNotMatchAction2 and so on . <p> The full range of PCRE regular expression functionality is supported , so the match can be made on all or part of the measure 's string value , can test the order of sub-strings within the string , and can test for both the presence or absence of a sub-string within the string . Logical OR and AND testing can be done in the regular expression , using the character to support OR and Lookahead assertions ( ? = .. ) to support AND . <p> Reserved characters in regular expression , which are . @ @ @ @ @ @ @ @ @ @ when used as a literal in the IfMatch option . If using a measure value as a section variable in the IfMatch option , the : EscapeRegExp modifier can be used to properly escape reserved characters in the measure . <p> Capture groups ( ) should not be used in the regular expression , as nothing is being captured and no indexes are being created . The function is simply used to test if the string measure matches some regular expression pattern , and will either be " true " ( IfMatchAction ) or " false " ( IfNotMatchAction ) . <h> Options <p> IfMatch , IfMatch2 , ... , IfMatchN <p> The regular expression matched with the string value of the measure . <p> Examples : Measure value is " Red , Green , Blue " <p> IfMatch=Red , Green , Blue : true <p> IfMatch=. *Green. * : true <p> IfMatch= ( ? i ) . *green. * : true <p> IfMatch=Red. * : true <p> IfMatch=. *Blue$ : true <p> IfMatch=RedBlue : true <p> IfMatch= ( ? =Blue ) ( ? =Red ) : true <p> IfMatchAction @ @ @ @ @ @ @ @ @ @ be executed when the regular expression in IfMatch results in " true " . The action is executed only once when the condition becomes " true " , so it needs to become " false " and again " true " to execute again . <p> IfNotMatchAction , IfNotMatchAction2 , ... , IfNotMatchActionN <p> Optional action to be executed when the regular expression in IfMatch results in " false " . The action is executed only once when the condition becomes " false " , so it needs to become " true " and again " false " to execute again . <p> IfMatchModeDefault : 0 <p> If set to 1 , the evaluation of the match will execute the appropriate actions in IfMatchAction or IfNotMatchAction on every update of the measure . <p> Note : Care should be taken not to create an infinite loop in the actions . In particular , ! Refresh , ! Update and ! UpdateMeasure #CURRENTSECTION# should generally be avoided when IfMatchMode=1 . <h> Example @qwx22547 @qwx22570 @qwx22549 @qwx22553 <p> MeasureDate @qwx22558 <p> Format=%A , %B %#d , %Y <p> IfMatch=SaturdaySunday <p> IfMatchAction= ! @ @ @ @ @ @ @ @ @ @ weekend " <p> IfNotMatchAction= ! SetOption MeterDayofWeek Text " The date is MeasureDate#CRLF#It 's a weekday " 
@@256203 <h> Contents <h> More <h> Launching Windows Special Folders <p> Tip by kenz0 and JSMorley <p> Windows has many " special folders " like " My Computer " and " Recycle Bin " that are not part of the normal folder system you can specify with a " path " on an action in Rainmeter , or launch differently then they appear in Explorer . <p> These folders can be accessed by using the Windows Shell : command and the CLSID identifier codes that Windows assigns to these folders in the Windows Registry . If you know the codes , you can launch these with ease . 
@@256204 <h> The Skins tab <h> The skins list <p> List of currently installed skins . This contains all Skins found when Rainmeter is started or refreshed . <p> The list consists of the config folder for each skin , and the skin . ini files for each config . <p> Clicking on a skin . ini file will make that skin active in the Manage tab . <p> Double-clicking a skin . ini file will unload the skin if it is running , or load it if not . <p> Right clicking on a config folder will allow opening the folder in Windows Explorer . <p> Right clicking on a skin . ini file will allow loading , unloading or editing the skin . <p> The list is updated when Rainmeter is refreshed . <h> Create new skin <p> The " Create new skin " button open a dialog where you can easily add new skin folders and skin . ini files to Rainmeter . <p> New skin . ini files added will use a default or custom template as desired . <p> New items will be added to Rainmeter @ @ @ @ @ @ @ @ @ @ skins will take place . Your new folders and skins will appear in the Skins panel of Manage and are ready to be edited or loaded . <p> Favorite : Adds or removes the current skin in a list of Favorites accessed with the Rainmeter context menu . <p> Display monitor : Settings for the monitor on which the skin is displayed . <p> Use default : Primary monitor : Removes the @N directive from WindowX/WindowY settings. @0 , @1 , @2 , ... , @32 : Adds the specified monitor number to WindowX/WindowY settings . @0 represents " The Virtual Screen " . Auto-select based on window position : If checked , the WindowX/WindowY @N settings are made automatically based on the position of the meter 's window . This setting will be unchecked when a specific monitor is selected . <h> Buttons used to control skins : <p> Unload / Load : Unload ( make inactive ) the selected skin if it is currently active , or load it if not . <p> Refresh : Refresh the selected active skin . <p> Edit : Edit the selected skin @ @ @ @ @ @ @ @ @ @ <h> The Layouts tab <p> Layouts in Rainmeter are a way to save and load the current state of the Rainmeter settings . This saves the positions of currently active and inactive skins , as well as all other settings stored in the current Rainmeter.ini file . The layout can then be loaded to restore any saved state . Layouts are saved in the Rainmeter settings folder . <p> Note : The skin folders and files themselves are not saved with a layout . <p> The current Rainmeter state will be replaced with the named layout . If Rainmeter is not running , it will be started . <h> The Settings tab <p> This tab has some high level settings for the Rainmeter application , as well as controls for Rainmeter 's logging capability . <h> General <p> Language:Use the pull-down menu to select the desired language for all Rainmeter user interfaces . This does not have any effect on languages used in skins . <p> Editor:Enter or browse to the text editor that will be used when " Edit skin " or " Edit settings " is selected . @ @ @ @ @ @ @ @ @ @ when started to see if the running version is the most recent release version , and will prompt the user to upgrade if not . This has no effect on beta versions of Rainmeter . <p> Disable draggingIf selected , automatically sets the draggable state of all active skins to prevent dragging skins with the mouse . <p> Show notification area iconShows or hides the Rainmeter icon in the Windows notification area ( system tray ) . <p> Note : If all skins are unloaded , the notification area icon will appear , regardless of this setting , in order to avoid a situation where you ca n't interact with Rainmeter at all . <p> Reset statisticsWhen clicked , clears all saved network and other statistics from the Rainmeter.stat file in the settings folder . <h> Logging <p> In addition to the real-time logging of errors , warnings and notices in the Log tab of the Rainmeter About window , Rainmeter can log activity to a Rainmeter.log text file , which will be created in the settings folder . <p> Debug modeIf selected , a more detailed logging mode will @ @ @ @ @ @ @ @ @ @ to file is active . This should only be used when debugging a problem , as leaving this level of detailed logging on can impact Rainmeter performance . <p> Log to fileIf selected , Rainmeter will append log entries to the Rainmeter.log file while running . Unchecking this item will turn off logging , but the Rainmeter.log file will be retained . <p> Show log fileIf clicked , the Rainmeter.log file will be loaded in the text editor associated with . log files . <p> Delete log fileIf clicked , the Rainmeter.log file will be deleted . If Log to file is currently active , it will automatically be turned off . <h> Edit NewSkin.template file <p> When the Create new skin button is used to create a new root-level skin , the new skin is initially populated with the contents of a file NewSkin.template which is stored in the settings folder . This link will open this template file in your default or defined text editor , so you can adjust what is in a new skin as desired . 
@@256207 <p> This can be used to display a single frame from the bitmap image , based on the percentage value . This can be used to create animations . <p> If for example the image contains 5 frames , the first frame is displayed when the percentual measure value is between 0% and 19% , the second frame is shown from 20% to 39% , and so on . <p> The measure returns any integer numeric value . This is an int64 numeric type , and can be any value up to **25;1870;TOOLONG . Fractional values will be rounded to whole numbers . <p> This can be used to display a numeric value using multiple frames from the bitmap image . <p> In this case , you will use BitmapExtend with a value of 1 , and set BitmapDigits with a value equal to the greatest number of digits the value can be . This will be used with a BitmapImage that consists of the numbers from 0 to 9 , and a BitmapFrames of 10 . This will then display the entire number using the appropriate numeric ( 0-9 @ @ @ @ @ @ @ @ @ @ Path to the image . The frames in the images can be laid out either horizontally or vertically ( the orientation is determined automatically from the height or the width of the image ) . The size of a single frame is also determined automatically , so no extra space need surround the frames . <p> Some help with creating bitmap images to use in this meter can be found at Button Images , as the Button and Bitmap meters use the same kind of images made of frames combined into a single image file . Think of a filmstrip . <p> BitmapFramesDefault : 1 <p> Number of frames in the image . <p> BitmapTransitionFrames <p> The number of transition frames per each actual frame . The transition frames are frames which are displayed when the measure value changes . The same number of transition frames must be used after each regular frame . The TransitionUpdate option in the Rainmeter section determines the rate at which the transition frames change during the transition . The total duration of the transition is therefore TransitionUpdate multiplied by BitmapTransitionFrames . <p> Note:BitmapFrames always @ @ @ @ @ @ @ @ @ @ including the transition frames . <p> Example : If the bitmap has 10 values and each transition consists of 4 additional frames , then BitmapFrames should be set to 50 and BitmapTransitionFrames to 4 . <p> BitmapZeroFrameDefault : 0 <p> If set to 1 , a measured percentual value of zero is included in the calculation of the first frame . Since there are 100 percentage " points " from 0-99% , and 101 from 0-100% , BitmapZeroFrame should be used when measuring from 0-100% , or the meter will overrun the bitmap when the value is at 100% . <p> BitmapExtendDefault : 0 <p> If set to 1 the bitmap is extended to display the whole measured value . <p> Example : If you define a bitmap that defines frames from 0 to 9 you can use this to display the measured value as the bitmap numbers . <p> BitmapDigitsDefault : 0 <p> Number of digits that are drawn ( for BitmapExtend=1 ) . The first frame is used if the value does n't have as many digits as this defines . 
@@256211 <h> More <h> About <p> The About interface in Rainmeter is much more than the usual version number and link to a website . It is a powerful tool for finding and fixing problems with Rainmeter and skins . It consists of four main tabs : <p> Using the ! About bang as an action in a skin or from the command line as a parameter to Rainmeter.exe . <p> Right-Click any running skin on the desktop and select " Rainmeter / About " . <h> The Log tab <p> When opened , the list displays the last 20 messages logged by Rainmeter . While left open , the log continues to add new messages to the top of the list . <p> The log has three columns of information : <p> Type : The category of message : <p> Error - An error impacting the functionality of Rainmeter or a skin.Warning - An warning that some functionality is outside of normal parameters.Notice - Normal activity logged to provide information about the success of some action.Debug - Messages generated when Rainmeter or a skin is in Debug mode . <p> @ @ @ @ @ @ @ @ @ @ : The text of the log message . Select a line and hit CTRL-C to copy the message to the Windows clipboard . <p> The types of messages that are displayed by the log can be controlled with the checkboxes at the bottom of the list . This can be used to filter the display to only certain kinds of new messages . <h> The Skins tab <p> Extremely powerful tool displaying real-time information about currently active skins . The tab displays a list of currently active skin config names in the panel on the left . Selecting one from the list will update important information about the skin in real time , in the panel on the right . <p> Name - The name of the measure.Range - The current MinValue and MaxValue values for the measure , expressed as a range of values.Value - The current string value of the measure . Select a line and hit CTRL-C to copy the value to the Windows clipboard. 
@@256213 <h> Options <p> Name of the measure whose percentual value controls the amount of rotation . The measure must be able to return percentual values . <p> Note : If MeasureName is not specified , then the value is in effect always 100% , which can be used for instance to draw a circle or other curved solid . <p> StartAngle <p> The starting angle in radians for the line . This defines the starting point on the circle that will be treated as zero percent . The zero angle is to the right of the center . <p> RotationAngle <p> The size of the rotation angle in radians for the line . This defines the distance in radians from StartAngle that the meter will travel around the circle when the measure value is 100% . Use a negative value for counter-clockwise rotation . <p> LineStart <p> Defines the distance in pixels from the center of rotation at which the line starts . <p> LineLength <p> Length in pixels of the line . The length is always measured from the center of rotation , regardless of the LineStart option . @ @ @ @ @ @ @ @ @ @ meter with LineColor from StartAngle to the current MeasureName percentage value . LineWidth is ignored . <p> ControlAngleDefault : 1 <p> If ControlAngle is 1 ( default ) , then the percentage value of the measure that is bound to the meter controls the angle of the line ( or the fill rotation if Solid=1 ) starting at StartAngle for RotationAngle radians . <p> If ControlAngle is set to 0 , then the measure does not control the angle of the line , which will be static at the value in StartAngle . RotationAngle is ignored . <p> ControlStart , StartShiftDefault : 0 <p> If ControlStart is set to 1 , then the percentage value of the measure that is bound to the meter controls the starting position of the line . This is defined by StartShift , and will range from LineStart to ( LineStart + StartShift ) pixels from the center of rotation . <p> ControlLength , LengthShiftDefault : 0 <p> If ControlLength is set to 1 , then the percentage value of the measure that is bound to the meter controls the length of the line . @ @ @ @ @ @ @ @ @ @ LineLength to ( LineLength + LengthShift ) pixels from the center of rotation . <p> ValueRemainder <p> Use a remainder instead of the actual measured value . <p> This is primarily used to draw an analog clock . When used with the value of a Time measure in MeasureName the meter will internally use the % modulo mathematical operator , and calculate the meter based on the remainder when the number of seconds in the Time measure is divided by the following values : <p> Note : If the width and height are not defined , the center point is at the X and Y position of the meter and any part of the meter that intersects with the edges of the skin window will be cut off . If width and height are specified , the center point will be in the middle of the bounding box and the skin window will include the meter . 
@@256214 <h> More <h> Manual <p> Rainmeter displays customizable skins , like memory and battery charge , RSS feeds and weather forecasts , right on your desktop . Many skins are even functional : they can record your notes and to-do lists , launch your favorite applications , and control your media player - all in a clean , unobtrusive interface that you can rearrange and customize to your liking . Rainmeter is at once an application and a toolkit . You are limited only by your imagination and creativity . <h> Getting started with Rainmeter <p> Getting Started is a new user introduction to Rainmeter , covering both how to use the application , and starting guides and tutorials for creating and editing skins . <p> Using the rest of this documentation , and the experience of using and learning Rainmeter , will be much easier and more enjoyable with the overview Getting Started provides . <h> Using the Rainmeter application <p> The User Interface section of the manual describes how to use the application to manage Rainmeter on the desktop . Control things with the Manage interface and context @ @ @ @ @ @ @ @ @ @ It wo n't be long before you want to extend your library of skins beyond the default illustro suite included with Rainmeter , with others downloaded from the internet . The Installing Skins section explains how to install and load the thousands of skins available for Rainmeter . <h> Creating and editing skins <p> Rainmeter can be used as a straightforward skin manager , loading and using skins created by others . However , the real power and fun of Rainmeter can only be unlocked when the transition is made from " user " to " author " . The Reference section of the manual contains everything needed to craft that perfect skin that does exactly what you require , and looks just right on your desktop . <p> Settings contains detailed information about the Rainmeter.ini file , which controls many important aspects of Rainmeter on the desktop . <p> The Skins section describes what a skin 's . ini file contains and does . It also is a reference for several powerful overall skin features . <p> The next sections , Meters , Measures and Plugins , are the @ @ @ @ @ @ @ @ @ @ information from the system or the internet , and meters display things , with many different meter types and practically unlimited control over style . <p> The following sections provide a reference for other powerful skin options and features . Bring skins to life with Bangs and Mouse Actions , and extend Rainmeter 's functionality using the Lua Scripting language . <p> One of the most exciting things about Rainmeter is the free and open sharing of skins in the community . See Publishing Skins for everything needed to package and distribute suites and skins . <h> More information <p> Be sure to check the Tips &amp; Tricks section for a wealth of guides and suggestions from the Rainmeter community . <p> The Snippets section contains a collection of useful " snippets " of Lua script code , from the Rainmeter Team and users . <p> Remember , there is an entire community of people willing and able to help when things get stuck . Be sure to use the Rainmeter Forum or jump on the web-based IRC channel when help is needed . <p> Note : Most option entries @ @ @ @ @ @ @ @ @ @ CTRL-Click to add an #anchor to the URL . This makes it easy to link to a specific part of a page . Try it below . 
@@256218 <h> More <h> PerfMon plugin <p> The Performance Monitor exposes several counters , which track various information . All available counters can be viewed using the Performance Monitor application . To open it , either run PerfMon.msc or type it in the Start menu . <p> Note : The names of the objects , counters and instances must be in English . <p> Name of the counter instance . Can be left unspecified if the counter does not have any instances . <p> Example : Total <p> PerfMonDifferenceDefault : 1 <p> If set to 0 , the current value of the counter is used as the measure value . If set to 1 , the difference between the current and previous counter value is used instead . This is useful as many of the performance values are counters and you usually want to know how much the counter has increased since last update . <h> Example @qwx22547 @qwx22570 <p> BackgroundMode=2 <p> SolidColor=0,0,0,255 <p> MeasureProcessCount <p> ; Measures the number of processes running . @qwx22557 <p> Plugin=PerfMon <p> PerfMonObject=System <p> PerfMonCounter=Processes <p> PerfMonDifference=0 <p> MeasureDiskAccess <p> ; Measures disk access of @ @ @ @ @ @ @ @ @ @ <p> PerfMonCounter=Disk Bytes/sec <p> PerfMonInstance=C : <p> MeterProcessCount @qwx22560 <p> **31;1960;TOOLONG <p> X=5 <p> Y=5 <p> W=200 <p> H=20 @qwx22554 <p> Text=Total processes : %1 <p> MeterDiskAccess @qwx22560 <p> **29;1993;TOOLONG <p> X=5 <p> Y=25 <p> W=200 <p> H=20 @qwx22554 <p> AutoScale=1 <p> Text=Disk access : %1B/sec <p> Note : <p> While rare , it is possible for the database of " counters " that is maintained by Performance Monitor in Windows to become damaged , which will cause the Perfmon plugin to stop functioning correctly . <p> In many cases , this can be corrected by " rebuilding " the database from the Windows command line . <p> Run cmd.exe , being sure to run " As administrator " . At the command line , enter the following commands in order : 
@@256219 <h> Contents <h> More <h> Update with Bangs <p> Normally , Rainmeter skins are driven by the value of the Update option in the Rainmeter section of the skin . On each update , all measures and meters are updated , obtaining current values with measures , then updating and redrawing all meters with the new values . The UpdateDivider option is used to have some measures or meters update less often , if the information being obtained does n't change as often as the Update option in the skin . <p> However , there are times when you might want all or part of a skin to update " on demand " , rather than waiting for the next normal update . This is most often desired when there are mouse actions in a skin , and you want the skin to react to immediately when you hover over or click on the skin or some meter . <p> For example : <p> You have a Quote plugin that is obtaining random images from some folder . You have the Quote measure set with an UpdateDivider of 30 , @ @ @ @ @ @ @ @ @ @ random image is displayed every 30 seconds . However , you might want to have a left-click on the image meter immediately go out and get a new image and display it , but you do n't want to wait up to 30 seconds for the new image to display . <p> There are several bangs that can help make your skins more responsive . <p> You can use ! Update along with the mouse action to force the entire skin to immediately update . <p> LeftMouseUpAction= ! Update <p> This is the " brute force " approach , and may be the most simple and effective if you want the entire skin to update on some action . It should be remembered that the ! Update bang overrides the Update value in Rainmeter , but does not override any UpdateDivider options in measures or meters . The design of the skin should be taken into consideration when deciding if this is best , or a more " targetted " approach with the following bangs . <p> You can use ! UpdateMeasure to force a single measure to immediately update @ @ @ @ @ @ @ @ @ @ and the measure will immediately obtain a new current value . In our example about the Quote plugin above , this would be a good way to have the plugin go get a new image " on demand " . <p> LeftMouseUpAction= ! UpdateMeasure MeasureRandomImage <p> So far so good , however the Image meter dislpaying the result will still wait for the next update to get the new value from the measure . We can address that by adding another bang , ! UpdateMeter . <p> Now the value of both the measure and the meter have been updated . However , the Image meter will not actually be " drawn " again with the new result until the next update . We need one more step , ! Redraw . <p> That will update both the measure and the meter , and will redraw the entire skin . The effect is that when you click on the meter , it will instantly display the new image . The advantage to this " targetted " approach is that you are using the minimum of resources to accomplish what you @ @ @ @ @ @ @ @ @ @ to update normally . <p> Note : Why do n't we just automatically do the " redraw " when we do ! UpdateMeter ? This is because the entire skin must ALWAYS be redrawn due to how Rainmeter displays meters . Keeping them separate allows you to update several meters in one " action " , then at the end redraw the entire skin just one time . <p> ! Update Overrides the setting of the Update option in Rainmeter and immediately updates the entire skin , all measures and meters . This does not override any UpdateDivider options on measures or meters . <p> ! Redraw Overrides the setting of the Update option in Rainmeter and immediately redraws all visible elements of the entire skin . Meters will use the last value obtained for any measures or variables referenced . <p> Measures and meters within a skin : <p> ! UpdateMeasure Overrides the setting of the Update option in Rainmeter or any UpdateDivider on the measure , and immediately updates the measure . <p> ! UpdateMeter Overrides the setting of the Update option in Rainmeter or any UpdateDivider on @ @ @ @ @ @ @ @ @ @ new current values for any measures or variables referenced . Note that the meter is not redrawn with any new values until the next update , or if a ! Redraw bang is used . <p> There are also group versions of these bangs <p> Entire skins : <p> ! UpdateGroup Overrides the setting of the Update option in Rainmeter and immediately updates the skins in the specified group , all measures and meters . This does not override any UpdateDivider options on measures or meters . <p> ! RedrawGroup Overrides the setting of the Update option in Rainmeter and immediately redraws all visible elements of the skins in the specified group . Meters will use the last value obtained for any measures or variables referenced . <p> Measures and meters within a skin : <p> ! UpdateMeasureGroup Overrides the setting of the Update option in Rainmeter or any UpdateDivider on the measures in the specified group , and immediately updates the measures . <p> ! UpdateMeterGroup Overrides the setting of the Update option in Rainmeter or any UpdateDivider on the meters in the specified group , and immediately updates @ @ @ @ @ @ @ @ @ @ or variables referenced . Note that the meters are not redrawn with any new values until the next update , or if a ! RedrawGroup bang is used . 
@@256220 <h> Creating Skins <h> What You Need <p> And that 's all . No extra software or materials of any kind are required . <h> Text Editor <p> That being said : while you can edit skins using Windows ' built-in text editor , Notepad , we strongly recommend downloading an enhanced text editor , such as Notepad++ or Sublime Text . These applications come with powerful features like tabs , auto-completion , embedded file browsers and more . You can even download extensions that add Rainmeter-specific code highlighting , which makes it much faster and easier to read a skin 's code and spot errors . <h> Image Editor <p> Depending on the kind of skin you want to make , you may also want to find a good piece of image editing software . Rainmeter can create text by itself , as well as simple or complex vector shapes , like rectangles and circles . But you will find you often want a separately-created image file . <h> Configs <p> A skin can grow to become an enormously complex project by the time it 's done . It @ @ @ @ @ @ @ @ @ @ , plugins , addons , scripts , and even included code that is strewn across multiple files and shared by other skins . <p> But at the core of every skin is a single . ini file . Named SkinName.iniwhere " SkinName " is the name of the skinthis is a text file that contains the fundamental code that Rainmeter uses to create a working skin . <p> Because a skin may have any number of variants , skins are typically identified not by their file name , but by the folder where they are located . This is known as the skin 's config name . To quickly find out a skin 's config name , just check the context menuthe first item is the config name . For example , the illustro " Clock " skin 's config name is illustroClock . <p> Each skin also has a root config folder . This refers to the one folder that contains all of the skins belonging to a " suite , " such as illustro . When the skins in a suite are organized together in this way , @ @ @ @ @ @ @ @ @ @ installed on another system , as a single collection . They can also share fonts , images and other resources in a way that separate skins can not . For a simple skin that is not part of such a " suite , " the config and root config are the same . <p> Here 's a quick reference chart to help you remember the relationship between skins , configs , variants and roots , using illustro as an example : <p> Root config folders are all organized in Rainmeter 's main Skins folder : <p> C : **36;2024;TOOLONG <p> Accordingly , you can identify any skin by its file path , according to a simple rule : <p> LONG ... <p> The illustro " Clock " skin in the Skins folder . Remember that skins are identified by their config name , e.g. " illustroClock " . <h> Your First Skin <p> Until now , you have been working with the pre-made illustro skins that come with Rainmeter . Now , you 're going to create a new skin from scratch . <p> Creating a new skin is quite @ @ @ @ @ @ @ @ @ @ skin " button . This will create a new config folder in the skins list , offering a default starting name of " NewSkin " . Name this folder " MyFirstSkin " and hit enter . <p> This will do several things . It will create a new root config folder with the name " MyFirstSkin " . In it it will create an empty @Resources folder , will create a new basic MyFirstSkin.ini skin file , and will open this new skin in your default or defined text editor , so you are off and running . <p> Your new skin is created in the proper folder , and ready to work with in Manage and your text editor . <h> The " Hello , World ! " Skin <p> The very first thing you will see in your skin is the Rainmeter section . This is a skin 's " header " property , like the &lt;head&gt; tag in an HTML webpage . In the Rainmeter section , you will see an Update=1000 option . Like this : @qwx22547 @qwx22570 <p> The Update option is what sets the @ @ @ @ @ @ @ @ @ @ is given in milliseconds , or 1/1000ths of a second , so Update=1000 means that the skin will update once per second . Updating is how the skin will react to changes in information . You 'll see how this works in more detail later on . <p> Now that you 've given your skin a " head , " it 's time to give it a " body . " Let 's change that default string meter . This is one of the most common types of meters , and it is used to create text . @qwx22547 @qwx22570 <p> MeterString @qwx22560 <p> Text=Hello , world ! <p> The Meter option is required to tell Rainmeter that this section is , in fact , a meter . All meters have this option . The value of the option determines what type of meter it is . <p> The Text option , on the other hand , is unique to the string meter . As you might have guessed , this is where you provide a string of text for Rainmeter to display . <p> Believe it or not , @ @ @ @ @ @ @ @ @ @ working Rainmeter skin ! Let 's load it to see what it looks like . Load the skin using one of the methods that you learned before . You can either : <p> Open the Manage window by left-clicking the Rainmeter tray icon , find MyFirstSkin in the skins list , then click the Load button in the upper-right . <p> Now , let 's apply these changes by refreshing the skin . Once again , you can either press Refresh in the Manage window , or MyFirstSkin ? Refresh skin in the context menu . <p> Much nicer . <p> Congratulations ! You have just created a new skin . You are now ready to move on to the Basic Tutorials . This series will guide you through the entire process of creating several example skins , while teaching you about the fundamental elements of a Rainmeter skin . 
@@256221 <h> More <h> Option Types <p> In the most basic sense , a skin in Rainmeter is controlled by a . ini file consisting of sections , options , and option values . <p> SectionName <p> OptionName=OptionValue <p> The skin can have various kinds of sections . These include : @qwx22547 <p> Metadata @qwx22548 <p> MeasureName <p> MeterName <p> These sections can have many options and option values . Some of which are general in nature , and some of which are very specific to the type of section , for instance specific options for the various measure , plugin or meter types . <p> While the options used can be general or specific , the options will fall into one of the following broad type categories : <h> Number options <h> Path options <p> Path options specify the relative or absolute path of either a file or a folder ( depending on the option ) . For example , the path and name of an image file is expected with ImageName . <p> There are built-in variables provided that automatically resolve to paths for the Rainmeter application or individual @ @ @ @ @ @ @ @ @ @ Variables . <p> In addition , there is a built-in variable #@# that resolves to the @Resources folder in the root config folder of the current skin . <p> ; Paths relative to the current skin folder : <p> ImageName=lolcat.png <p> ImageName= .. lolcat.png <p> ; Absolute path : <p> ImageName=C : lolcatslolcat.png <p> ; Path to the current skin folder : <p> **33;2062;TOOLONG <p> ; Path to the @ResourcesImages folder under the root config of the current skin : <p> **29;2097;TOOLONG <h> Color options <p> Color options such as SolidColor and FontColor should use the RGBA ( red-green-blue-alpha ) notation in either the hexadecimal or decimal form . The color results from a mixing of the red , green and blue components of the option , with the transparency ( alpha channel ) of the element set by the fourth component . <p> Decimal colors are specified as RRR , GGG , BBB , AAA , where RRR , GGG , BBB , and AAA are decimal numbers from 0 to 255 . Formulas can also be used in place of the numbers . <p> Hexadecimal colors are specified @ @ @ @ @ @ @ @ @ @ and AA are hexadecimal numbers from 00 to FF . <p> Note : The alpha component is optional . As with the other components it is a value from 0 to 255 ( 00 to FF ) , with 0 being completely invisible ( and the meter will not react to the mouse ) to 255 , which is completely opaque . The default is 255 ( or FF ) . To have a element be " invisible " while still reacting to the mouse , use an alpha value of 1 . <p> ; The following lines are equivalent to solid opaque red : <p> SolidColor=255,0,0,255 <p> SolidColor=255,0,0 <p> SolidColor= ( 200 + 55 ) , ( 2 - 2 ) , 0 <p> SolidColor=FF0000FF <p> SolidColor=FF0000 <h> Action options <p> Options in a skin which cause Rainmeter to take some action . Actions may be triggered by user input such as mouse actions or changing values and system events within the skin , such as IfActions or OnUpdateAction . <p> Normally the value of an action option is going to be one or more bangs , or the @ @ @ @ @ @ @ @ @ @ are defined on the same action option , enclose them in square brackets . <p> ; Single bang : <p> LeftMouseUpAction= ! HideMeter SomeMeter <p> LeftMouseUpAction= ! HideMeter SomeMeter <p> ; Multiple bangs : <p> LeftMouseUpAction= ! HideMeter SomeMeter ! HideMeter SomeOtherMeter <p> For bangs that take parameters , the arguments should be separated by a space . Parameters that contain spaces must use quotes around the parameter . <p> ; These two lines are equivalent : <p> LeftMouseUpAction= ! HideMeter SomeMeter <p> LeftMouseUpAction= ! HideMeter " SomeMeter " <p> ; These two are NOT equivalent . The first line will cause an error due to the spaces <p> ; in the parameters while the second will properly set the value of SomeVariable <p> ; These two may or may not be equivalent depending on the value of the #ImageFile# <p> ; variable . If #ImageFile# contains spaces , the first line will fail . In uncertain <p> ; cases , it is always best to use quotes as in the second line . <p> LeftMouseUpAction= ! SetWallpaper #ImageFile# <p> LeftMouseUpAction= ! SetWallpaper " #ImageFile# " <p> External Windows commands @ @ @ @ @ @ @ @ @ @ and any parameters . Enclose the command in square brackets , and enclose any values with spaces in quotes . <p> LeftMouseUpAction= " C : WindowsNotepad.exe " MyFile.txt <p> ; Runs Notepad.exe and loads the file MyFile.txt . <p> LONG ... <p> ; Opens the URL in the default web browser . <h> Magic Quotes <p> A parameter to a bang that contains embedded quotes should be surrounded by a what we call " " " magic quotes " " " . A pair of triple quotes . <p> ; The first line will fail due to extra quotes . The second line will properly log <p> ; Example string : Bob said " hello " to Susan <p> LeftMouseUpAction= ! Log " Bob said " hello " to Susan " <p> LeftMouseUpAction= ! Log " " " Bob said " hello " to Susan " " " <h> Escaping a #Variable# or MeasureName <p> When using #VarName# or MeasureName in an action option , the current value of the variable or measure will be used . To have the literal string " #VarName# " or " MeasureName " used @ @ @ @ @ @ @ @ @ @ the variable or measure name with asterisk * characters . <p> For example , use #*VarName*# or *MeasureName* to tell Rainmeter to " escape " the variable or measure name . You do not want the value resolved , but rather used as a literal string . <p> LeftMouseUpAction= ! SetOption SomeMeter FontSize #VarName# <p> ; The FontSize option for SomeMeter will be set to the current value of the variable . <p> LeftMouseUpAction= ! SetOption SomeMeter FontSize #*VarName*# <p> ; The FontSize option for SomeMeter will be set to the the string " #VarName# " <p> LeftMouseUpAction= ! SetOption SomeMeter FontSize MeasureName <p> ; The FontSize option for SomeMeter will be set to the current value of the measure . <p> LeftMouseUpAction= ! SetOption SomeMeter FontSize *MeasureName* <p> ; The FontSize option for SomeMeter will be set to the string " MeasureName " . <h> Regular expression options <p> These options use Perl Compatible Regular Expressions ( PCRE ) to match specific parts of a text string . Regular expressions are used when the structure of a piece of data is known , but the content is not . @ @ @ @ @ @ @ @ @ @ by the WebParser plugin to interpret ( or " parse " ) web-based or local text file data sources , but they can also be used to modify the string value of a measure using Substitute options , or to test a string in a measure with IfMatch options . 
@@256228 <h> Options <p> Name(s) of the measure(s) bound to the meter . The value of a measure or measures will define the image file to be used in the meter . The value can define a full path and name of any supported image file , or just the name if the ImagePath option is used or the image file is in the current skin folder . <p> ImageNameDefault : %1. png <p> Name of an image file . This can be a full path and name of any supported image file , or just the name of the file if the ImagePath option is used or the image file is in the current skin folder . <p> Note : If a MeasureNameN option is defined , it will override any named file in the ImageName option . Generally , MeasureNameN and ImageName will not be used together in the same meter . <p> The exceptions are when MeasureName returns a file name with no extension , and the default . png is not desired , or when ImageName is being used to define an image based on the combined @ @ @ @ @ @ @ @ @ @ syntax as follows : <p> MeasureName=SomeMeasure <p> **25;2128;TOOLONG <p> ImageName=%1-%2.png <p> ; %1 and %2 will be replaced by the string values of SomeMeasure and <p> ; SomeMeasure2 , respectively . <p> **26;2155;TOOLONG : 0 <p> Controls how W and H scale the image when Tile=0 . Valid values are : <p> 0 : The image is scaled to exactly fit the bounds specified by W and H without regard to aspect ratio . <p> 1 : The image is scaled to fit within the bounds specified by W and/or H while preserving the aspect ratio . <p> 2 : The image is scaled and cropped to fill the bounds specified by W and/or H while preserving the aspect ratio . <p> Note : If only one of either W or H is defined , then PreserveAspectRatio will default to 1 . <p> ScaleMarginsFormat : Left , Top , Right , Bottom <p> Margins of the image to exclude from scaling when Tile=0 and PreserveAspectRatio=0 . <p> Example:ScaleMargins=10 , 50 , 10 , 50 <p> TileDefault : 0 <p> If set to 1 , the image is tiled ( repeated @ @ @ @ @ @ @ @ @ @ Hint : Using the SolidColor option , along with W and H options , an image meter may be used to draw squares , rectangles or lines without needing any ImageName or MeasureName . <p> However , no manipulations can be done to the resulting square , rectangle or line with any general image options . Only actual images loaded from a file can be manipulated . ( e.g. ImageRotate ) <h> Deprecated Features <p> The following options have been deprecated and should not be used . They are still supported , but may be removed in future versions . <h> Mask Image <p> MaskImageNameDefault : None <p> Name of an image file to use as a mask for the primary image defined with MeasureName or ImageName . The size and shape of MaskImageName will be used to mask and define the size and shape of the primary image . <p> MaskImageName can be a full path and name of any supported image file , or just the name of the file if the MaskImagePath option is used , or the image file is in the current skin folder . @ @ @ @ @ @ @ @ @ @ define the size of the mask image , and the size of the meter . Whatever is defined as the primary image with ImageName or MeasureName is then masked into the mask image , displaying in any non-transparent areas of MaskImageName using a " fill " method that sizes and crops the image to fit while preserving the aspect ratio . <p> If either the primary image or mask image has areas of transparency or partial transparency , those " alpha channel " values are applied to the final image . When both images have a shared area with full or partial transparency , the " most transparent " value is applied . <p> Notes : <p> The Mask Image functionality is only available on systems supporting D2D . It will not work on Windows XP , or if D2D is turned off in the Rainmeter settings . <p> MaskImageName can not be bound to the meter from a measure with MeasureNameN and %1 , %2 etc . <p> If MaskImageName is defined , then ScaleMargins and Tile options can not be used on the meter . <p> MaskImagePathDefault : @ @ @ @ @ @ @ @ @ @ ( e.g. MaskImagePath=#@#Images ) . <p> MaskImageFlipDefault : None <p> Flips the image . Valid values are None , Horizontal , Vertical or Both . <p> MaskImageRotateDefault : 0.0 <p> Rotates the image by the specified angle in degrees . Negative angles can be used for counter-clockwise rotation . 
@@256232 <p> Bangs can also be used from the Windows command line as a parameter to the Rainmeter.exe executable . Example : " C : Program **27;2183;TOOLONG " ! RefreshApp . <p> Note : Many bangs have a Config parameter . Unless otherwise specified , valid values are the config name of a currently loaded skin to be acted upon or * ( asterisk ) to act on all currently loaded skins . When optional and not supplied , the parameter defaults to the current config . If executing a bang with a " config " parameter from the Windows command line , the parameter is always required . <h> Operating System bangs <p> ! SetClipParameter : String <p> Copies the specified string to the Windows clipboard . If the string contains spaces , use quotes around the parameter . <p> String ( required ) : The string to be copied to the clipboard . <p> Example : ! SetClip " This is copied to the clipboard ! " <p> ! SetWallpaperParameters : File , Position <p> Sets the Windows desktop background to the specified image file . <p> File ( @ @ @ @ @ @ @ @ @ @ desktop background . The following formats are supported : . bmp , . jpg , . png , . gif , and . tiff . If the filename contains spaces , you must enclose the filename in quotes . <p> Position ( optional ) : Sets the position of the wallpaper . Valid values are : Center , Tile , Stretch . Windows 7 ( and above ) also have the values : Fit and Fill . <p> Does a full refresh of all skins and reloads the list of configs and Rainmeter.ini settings . This is the same as " Refresh All " from the system tray context menu . The main difference from ! Refresh * is that the skins folder is rescanned . <p> ! Quit <p> Quits Rainmeter . <p> PlayParameter : SoundFile <p> Plays the given sound file once . <p> SoundFile ( required ) : Path and file to be played . Must be a . wav file . <p> Note : While listed in this section for simplicity , the Play commands are not bangs , and do not require or allow the @ @ @ @ @ @ @ @ @ @ call to embedded Windows functionality to play the sound , and only one sound at a time can be managed , Rainmeter-wide . Playing a sound in any skin will stop any other currently playing sounds . <p> Example:Play " SomeFile.wav " <p> PlayLoopParameter : SoundFile <p> Plays the given sound file in a loop . <p> SoundFile ( required ) : File to be played . Must be a . wav file . <p> Example:PlayLoop " SomeFile.wav " <p> PlayStop <p> Stops any currently playing sound started by Rainmeter . <h> Option and Variable bangs <p> ! SetOptionParameters : Meter/Measure , Option , Value , Config <p> Sets an option ( ie. FontSize , Text , Formula , etc. ) of a meter or measure . <p> Sets a new value for a variable . The meter or measure where the variable is used must enable DynamicVariables . ! SetVariable can create a new variable in memory , even if it is not pre-defined in the Variables section . <p> Variable ( required ) : Name of the variable . <p> Value ( required ) : New value to @ @ @ @ @ @ @ @ @ @ " New value ! " <p> ! WriteKeyValueParameters : Section , Key , Value , FilePath <p> Permanently writes a Key=Value pair below a section in a INI formatted file ( such as . ini or . inc files ) . A skin must be refreshed for a new value written to the skin 's . ini or . inc files to be re-read and used . <p> Section ( required ) : If the section does not exist in the file , a new section will be written at the end of the file . <p> Key ( required ) : If the key does not exist under the section , a new key will be written at the end of the section . <p> Value ( required ) : Value to be written . Any previous value will be overwritten . <p> FilePath ( optional ) : If not specified , the current skin file is used . The file must exist and must be located under either #SKINSPATH# or #SETTINGSPATH# . <p> Example : ! WriteKeyValue Variables MyFontName Arial " #@#Variables.inc " <h> Option and Variable group @ @ @ @ @ @ @ @ @ @ Value , Config <p> Sets an option ( ie. FontSize , Text , Formula , etc. ) of meters and measures in the specified group . <p> Group ( required ) : Name of the group . <p> Option ( required ) : Name of the option to be changed . <p> Value ( required ) : New value to be set . @qwx22551 <p> Example : ! SetOptionGroup StringGroup Text " New text ! " <p> ! **26;2212;TOOLONG : Variable , Value , Group <p> Changes the value of a variable in the configs of the specified group . <p> File ( optional ) : If not specified , the next . ini file variant in the config folder is activated . <p> Example : ! ActivateConfig " illustroClock " " Clock.ini " <p> ! **25;2240;TOOLONG : Config <p> Deactivates a skin . @qwx22551 <p> Example : ! DeactivateConfig " illustroClock " <p> ! ToggleConfigParameters : Config , File <p> Activates or deactivates a skin . <p> Config ( required ) : The config to be activated or deactivated . <p> File ( required ) : The . ini @ @ @ @ @ @ @ @ @ @ ! ToggleConfig " illustroClock " " Clock.ini " <p> ! UpdateParameter : Config <p> Overrides the setting of the Update option in Rainmeter and immediately updates the entire skin , all measures and meters . This does not override any UpdateDivider options on measures or meters. @qwx22551 <p> ! RedrawParameter : Config <p> Immediately redraws all visible elements of the entire skin , independent of the normal skin update cycle . @qwx22551 <p> Note : This simply redraws the skin . Meters will use the values obtained when they were last updated . Since by itself ! Redraw accomplishes nothing useful , this bang will always be used in conjunction with bangs that update specific things before redrawing the skin . Depending on the case , this might be with ! UpdateMeasure bangs to immediately update measure values , and certainly ! UpdateMeter bangs to update meter values and options . The idea is to update specific meters and redraw the skin before the next normal update cycle . This can allow immediate visible changes , while not having to force an update of the entire skin . <p> Overrides @ @ @ @ @ @ @ @ @ @ updates the skins in the specified group , all measures and meters . This does not override any UpdateDivider options on measures or meters . <p> Group ( required ) : Group to redraw . <p> ! RedrawGroupParameter : Group <p> Overrides the setting of the Update option in Rainmeter and immediately redraws all visible elements of the specified group of skins . Meters will use the last value obtained for any measures or variables referenced . <p> Overrides the setting of the Update option in Rainmeter or any UpdateDivider on the meter , and immediately updates the meter , obtaining new current values for any measures or variables referenced . Note that the meter is not redrawn with any new values until the next update , or if a ! Redraw bang is used . <p> Meter ( required ) : Name of the meter to update . Use * to update all meters. @qwx22551 <p> Example : ! UpdateMeter " MyMeter " <p> ! MoveMeterParameters : X , Y , Meter , Config <p> Moves the given meter ( not the window ) to the specified position . @ @ @ @ @ @ @ @ @ @ of the skin . The size of the skin window is re-evaluated after the meter is moved . This would make the skin window become larger or smaller to incorporate all meters . <p> Overrides the setting of the Update option in Rainmeter or any UpdateDivider on the meters in the specified group , and immediately updates the meters , obtaining new current values for any measures or variables referenced . Note that the meters are not redrawn with any new values until the next update , or if a ! RedrawGroup bang is used . 
@@256233 <h> More <h> Loop measure <p> Measure=Loop Creates a looping counter between two values . <p> The measure will be the value of StartValue for one update , will increment based on the value of Increment on each subsequent update , and will be the value of EndValue for one update . If LoopCount is other than 1 , the loop will then repeat . <p> On each loop , if the value of Increment is such that the final increment would cause the value to overrun the value of EndValue , the final increment will be reduced to the remainder required to have the loop end at EndValue . <p> The measure will have a range that is the difference between StartValue and EndValue for use by meters requiring a percentage . There can not be a negative percentage , so the range will always be lowest value to highest value . <p> Any dynamic change to any of the four measure options , or dynamically changing InvertMeasure on the measure , will cause the loop to be reset and start over with the new values . <p> Note @ @ @ @ @ @ @ @ @ @ , or formulas that resolve to whole numbers . Fractional values will be truncated . <h> Options <p> General measure options <p> All general measure options except AverageSize are valid . MinValue and MaxValue are automatically set based on StartValue and EndValue , and may not be manually set or changed . <p> StartValueDefault : 1 <p> The starting value for the loop . This may be any positive or negative whole number . <p> EndValueDefault : 100 <p> The ending value for the loop . This may be any positive or negative whole number . <p> IncrementDefault : 1 <p> A positive or negative whole number by which the counter will be incremented on each update . <p> LoopCountDefault : 0 <p> The number of times the loop will be executed . The default of 0 will endlessly repeat . When LoopCount is reached , the measure will stop at and maintain the value of the EndValue option . <h> Measure Commands <p> Commands that can be sent to a Loop measure using the ! CommandMeasure bang . <p> Reset <p> This will cause the measure to reset the @ @ @ @ @ @ @ @ @ @ . <p> Example : ! CommandMeasure MeasureName " Reset " <p> Note : Any dynamic change to any of the four measure options , or dynamically changing InvertMeasure on the measure , will automatically perform a reset of the loop . This command would not be required . <h> Examples @qwx22547 @qwx22570 @qwx22553 @qwx22549 <p> MeasureLoop1 <p> Measure=Loop <p> StartValue=37 <p> EndValue=59 <p> Increment=1 <p> LoopCount=0 <p> MeasureLoop2 <p> Measure=Loop <p> StartValue=10 <p> EndValue=0 <p> Increment=-1 <p> LoopCount=1 <p> MeterLoop1 @qwx22560 <p> MeasureName=MeasureLoop1 <p> W=154 <p> H=50 <p> X=77 <p> StringAlign=Center <p> FontSize=35 @qwx22554 @qwx22565 @qwx22561 @qwx22550 <p> LeftMouseUpAction= ! TogglePauseMeasure MeasureLoop1 <p> MiddleMouseUpAction= ! CommandMeasure MeasureLoop1 " Reset " <p> MeterLoop2 @qwx22560 <p> MeasureName=MeasureLoop2 <p> W=154 <p> H=50 <p> X=77 <p> Y=10R <p> StringAlign=Center <p> FontSize=35 @qwx22554 @qwx22565 @qwx22561 @qwx22550 <p> LeftMouseUpAction= ! TogglePauseMeasure MeasureLoop2 <p> MiddleMouseUpAction= ! CommandMeasure MeasureLoop2 " Reset " <p> If InvertMeasure is set to 1 , the opposite of the value generated by the loop will be returned . This can have the effect of reversing the direction of the loop . Toggling InvertMeasure with ! SetOption can create a " ping-pong " effect with the measure . 
@@256236 <p> Notes : The values returned are not the mouse position on the screen , but are pixels or a percentage relative to the meter or skin with the mouse action . They are also not general purpose variables , and when used outside the context of a mouse action on a meter or the skin , will not contain a value . <p> $MouseX$ <p> X position of the mouse cursor as a number of pixels relative to the meter or skin with the mouse action . <p> $MouseY$ <p> Y position of the mouse cursor as a number of pixels relative to the meter or skin with the mouse action . <p> $MouseX : %$ <p> X position of the mouse cursor as a percentage relative to the meter or skin with the mouse action . <p> $MouseY : %$ <p> Y position of the mouse cursor as a percentage relative to the meter or skin with the mouse action . 
@@256237 <h> More <h> RunCommand plugin <p> Executes an external command or program in Windows , allowing the skin to obtain and use any output from the program . <p> There are several important differences between this and just executing a command with something like : <p> LeftMouseUpAction= " SomePathSomeProgram.exe " " SomeParameters " <p> The command can be run with a hidden initial state , to eliminate the cmd.exe ( DOS ) Command Prompt window that is created when an external command-line command or program is executed normally from Rainmeter . <p> Any output of the command to STDOUT ( the " Standard Out " string output of a program in a cmd.exe Command Prompt window ) can be captured , either directly , as the the value of the plugin measure , or piped to a text file for additional processing as needed . <p> The plugin can detect that a command is " finished " , and your skin can in effect wait for the command to be done before taking some action and using any returned value . <p> The plugin can detect that a command caused @ @ @ @ @ @ @ @ @ @ the skin can take some action based on success or failure of the command and the type of error . <p> The plugin can be set with a " timeout " value , which will automatically end the external command or program when the timeout value is reached . <p> Overview <p> What the plugin does when triggered with ! CommandMeasure MeasureName " Run " is to execute what is defined in the measure 's Program option , appending any program parameters defined in the Parameter option . <p> In most cases , the purpose of the plugin is to execute a Command Line Interface ( CLI ) program that takes some action or returns some value . Command-line programs by their nature always run in a cmd.exe Command Prompt window . <p> The plugin will monitor the program defined in the Program option , and when it ends , when the executable terminates , any string output the program did to STDOUT ( Standard Out ) will be captured and set as the string value of the plugin measure . <p> The string value of the measure <p> The @ @ @ @ @ @ @ @ @ @ the program writes to STDOUT . In effect , what you would see if you manually ran the command in a cmd.exe Command Prompt window will become the string value of the measure . <p> The number value of the measure <p> The number value of the measure will indicate if the command finished with or without any errors . You can get the number value of the measure by using Section Variables ( e.g. MeasureName : ) . Before the command has first run , the number value of the measure will be -1 . While the command is running , the number value of the measure will be 0 . If an error occurs , the number value of the measure will indicate the type of error that has occurred . If the program finishes without error , the number value of the measure will be 1 , meaning " success " . These can be used to take different skin actions depending on the numeric return value . <h> Options <p> The program to run . If not specified , the default value is the %ComSpec% environment @ @ @ @ @ @ @ @ @ @ " for Unicode pipe output and " C " to close the Command Prompt window and exit the cmd.exe shell when finished . <p> Generally it is best to leave this undefined and use the Parameter option to define the command and parameters to be executed . Command-line program will simply cause Windows to first execute cmd.exe anyway , to create the Command Prompt environment the program must run in . Basic " DOS " commands like " dir " or " copy " do n't have any . exe " program " to run in any case , and are simply internal functions of cmd.exe . <p> Command-line parameters . If no Program is specified , this option represents the entire command-line , which will be executed in the context of the default cmd.exe Command Prompt window as described above . <p> Note : Care should be taken to properly " quote " commands with a path or parameters having spaces in values . <p> Example:Parameter=wmic os get lastbootuptime . <p> StateDefault : Hide <p> Initial " visible state " of the program . <p> Hide ( default ) @ @ @ @ @ @ @ @ @ @ . This option is not recommended for GUI programs and/or programs that expect any form of input . <p> Show Shows the program 's normal window . <p> Minimized Attempts to start the program minimized . <p> Maximized Attempts to start the program maximized . <p> Notes : If State=Hide , the plugin will automatically " kill " any program it executed , when either the skin is refreshed or unloaded , or Rainmeter is exited . <p> A few programs with a windowed GUI user-interface ( for instance Calc.exe ) explicitly show themselves and will not respond to initial state requests like Hidden or Minimized . This will be a rare problem , as normally there is no useful reason to use this plugin to execute GUI programs from the command line . They will likely take no desirable independent action , and will have no STDOUT " output " in any case . <p> FinishActionDefault : None <p> Bangs or other actions that are executed when the program has finished / exited . <p> OutputFileDefault : None <p> Optional path and file name where the STDOUT output will @ @ @ @ @ @ @ @ @ @ the OutputType option . The default path will be the skin folder . <p> OutputTypeDefault : UTF-16 <p> Type of output to be expected from the program . Any OutputFile will also be encoded with these values . You must be sure that what you tell it here matches what is actually output by the program you run . This option does not " control " what is output by the program . <p> UTF-16 ( default ) <p> UTF-8 <p> ANSI <p> Note : Although by default cmd.exe will be executed with the U ( UTF-16 Unicode ) parameter , that does not mean that any program executed in the Command Prompt window will necessarily produce output in UTF-16 . While most internal Windows commands like " dir " will produce UTF-16 output , a great many command-line programs will produce ANSI output . If you get gibberish characters returned by the measure , setting OutputType=ANSI will often correct the issue . <p> StartInFolderDefault : Skin folder <p> Optional path which will be used as the " Start in " folder for the executed program . The default path @ @ @ @ @ @ @ @ @ @ <p> Timeout value in milliseconds . If positive , RunCommand will either " Close " the program if the State is other than Hide or " Kill " the program if the State is Hide . The default is -1 , which means no timeout . Any FinishAction will run even if the program does not actually terminate ( e.g. if closing " Notepad " and clicking " Cancel " when asked to save the document ) . It should be noted that this value is independent of any Update or UpdateDivider values in the skin . <p> Note : Because Rainmeter strips any quotes from the start and end of an option if both exist , it is important to double double-quote the Program and Parameter options If the overall command or parameter requires both starting and ending quotes . <h> Plugin Commands <p> Runs the program . The plugin will take no action unless triggered with this command . <p> **26;2267;TOOLONG ! CommandMeasure MeasureName " Run " <p> Close <p> Sends a normal " close " message to the program . <p> The program may produce an " @ @ @ @ @ @ @ @ @ @ programs can cancel the closing of the program , in which case the plugin will continue to gather any output . <p> **26;2295;TOOLONG ! CommandMeasure MeasureName " Close " <p> Kill <p> Terminates the program without notice . This should generally be used when ending a program that was run with State=Hide . <p> **26;2323;TOOLONG ! CommandMeasure MeasureName " Kill " <h> Error codes <p> Here is a list of possible error codes returned by the plugin : <p> 100 Unknown command . This happens when an invalid ! CommandMeasure command was sent to the plugin . <p> 101 Program still running . This happens when trying to Run the program again before it has finished running . <p> 102 Program not running . This happens when trying to Close or Kill a program that is not running . <p> 103 Can not start program . This happens when the Program option is invalid . Usually a wrong path or typo in the Program option is the cause . Note that cmd.exe may start perfectly well but be unable to execute a command or program passed as a Parameter option @ @ @ @ @ @ @ @ @ @ 104 Can not save file . This happens when there is an error saving the file . This could happen if writing to a locked location or file . The string value of the plugin will still contain any output of the program . <p> 105 Can not terminate process . There was an error when attempting to close or kill the program . This should rarely happen . If so , it might be necessary to open the Windows Task Manager and manually close the program . <p> 106 Can not create pipe . This happens when the plugin can not create a pipe to the program trying to run . The program will not run if this error happens . This error should rarely happen . <p> Note : These error codes are produced by the plugin , and have nothing to do with any error encountered by the executed program itself . Errors from the program will generally be displayed in the STDOUT output , and can be tested for and reacted to there . <h> Example @qwx22547 @qwx22570 @qwx22553 @qwx22549 <p> MeasureRun @qwx22557 <p> Plugin=RunCommand <p> @ @ @ @ @ @ @ @ @ @ <p> RegExpSubstitute=1 <p> Substitute= " Name. *#CRLF# " : " " , " #CRLF# " : " " <p> MeterRun @qwx22560 @qwx22555 @qwx22554 @qwx22565 @qwx22561 @qwx22550 <p> Text=Click to Run <p> LeftMouseUpAction= ! CommandMeasure MeasureRun " Run " <p> MeterResult @qwx22560 <p> MeasureName=MeasureRun <p> Y=10R <p> FontSize=14 @qwx22554 @qwx22550 <p> This example will run the program wmic.exe , which is in the Windows %PATH% and thus needs no path on the command itself . <p> The wmic.exe program will use the parameters of " cpu get Name " . The program will be run in a " hidden " cmd.exe Command Prompt window , and nothing visible will happen . <p> In effect this is really executing " %windir%system32cmd.exe U C " " wmic cpu get Name " . <p> The output of the wmic.exe program ( the " name " of your CPU in this case ) will be written to STDOUT in the hidden cmd.exe Command Prompt window , which will be captured by the plugin and set as the string value of the MeasureRun measure . <p> The Substitute option is being used to strip off some @ @ @ @ @ @ @ @ @ @ program . <p> Additionally , the file defined in OutputFile will contain the entire output of the wmic command , which in this example might be : <p> Name <p> Intel Core i7 920 @ 3.20GHz <p> Additional parsing of this file could be done with the WebParser plugin or String measures if you wanted for instance to obtain multiple separate values from the single command output . 
@@256239 <h> More <h> Section Variables <p> Measures and meters can be referenced as variables . These are called section variables , and they can provide several kinds of information about the meter or measure . <h> Usage <p> A meter or measure is referenced as a section variable by placing the section name in brackets ( ) . The value provided by a section variable can be changed by adding parameters after a colon ( : ) . Multiple parameters are separated by commas ( , ) . Spaces are allowed after a comma . <p> SectionName:P1 , P2 <p> Normal or built-in variables take priority over section variables , which means they can be used within section variables . For example : #Foo# : #Bar# . ( The reverse , such as #FooBar# , is not valid . ) <h> Dynamic Variables <p> Section variables are always dynamic . DynamicVariables=1 will always be needed on a measure or meter section where the variable is used in an option value . <h> Meter Parameters <p> Note : This provides the " real " X or Y value , which is @ @ @ @ @ @ @ @ @ @ . This is always an integer , even if the meter has no X and Y options set , or if the options use formulas , variables or relative positions . <p> This also means that for a string meter with StringAlign options , the value of MeterName:X and MeterName:Y may not be the same as the option values . <p> This will only return a value when used with a Time measure . The measure 's Windows timestamp value . This will allow you to obtain the numeric value of the Windows timestamp from a Time measure that has a Format option , and wo n't have the timestamp as the normal number value . 
@@256242 <h> More <h> InputText plugin <p> Plugin=InputText executes bangs with user input . <p> InputText works by defining a series of commands , which can be triggered by any " action " string ( this includes mouse actions , conditional actions in a Calc measure , and other commands in an InputText measure , including the same measure ) . When triggered , a free-floating text input box is created to gather user input at the specified points in the command series . When all input has been submitted , the commands are carried out . <p> Note : InputText is incompatible with skins set to Stay Topmost , or AlwaysOnTop=2 , as the conflict between the input field , which requires " focus " , and the constant attempts by the skin to stay on " top " , in front of the input field , will not allow InputText to function correctly . <h> Options <p> Command1 , Command2 , ... , CommandN <p> Actions to execute when the plugin is triggered . The macro string $UserInput$ will be replaced by whatever the user types into it . @ @ @ @ @ @ @ @ @ @ the macro string $UserInput$ is repeated in a command series , multiple input boxes will be created in sequence . However , a single value input by the user can be used multiple times in different bangs in the same command series by using the string value of the InputText MeasureName as a section variable . <p> Note : Any alpha channel setting of FontColor is entirely ignored . The transparency of the input control is set by SolidColor , which will effect both the input box and text transparency . <p> FontFace <p> Family name of the input text font . <p> Note : Only fonts actually installed in Windows can be used . <p> FontSize <p> Size of the input text font . <p> StringStyle <p> Style of the input text . Valid values are Normal , Bold , Italic , and BoldItalic . <p> StringAlignDefault : Left <p> Alignment of the input text . Valid values are Left , Right , Center . <p> Note : With right-aligned text , the cursor will move from left to right as text is typed . This is advised for @ @ @ @ @ @ @ @ @ @ . <p> TopMost <p> Sets the Z-position of the input field . If set to 1 then the input field will stay on top of all windows while active . If set to 0 then other windows can be dragged in front of the input field while it is active . If not set at all ( default ) then the Z-position of the input field will follow the TopMost setting of the overall skin . <p> Note : This option should not be used when FocusDismiss=1 is set . <p> FocusDismissDefault : 1 <p> If set to 1 ( default ) , clicking anywhere other than on the input field will dismiss the input without taking action . If set to 0 , the mouse is disabled until Enter or Escape is pressed . <p> OnDismissActionDefault : 0 <p> A bang or action that is executed when an active InputText field is dismissed without hitting Enter to execute the plugin commands . 
@@256246 <p> The starting angle in radians for the image . This defines the starting point on the circle that will be treated as zero percent . The zero angle is to the right of the center . <p> RotationAngleDefault : ( 2 * pi ) <p> The size of the rotation angle in radians for the image . This defines the distance in radians from StartAngle that the meter will travel around the circle when the measure value is 100% . Use a negative value for counter-clockwise rotation . <p> ValueRemainderDefault : 0 <p> Use a remainder instead of the actual measured value . <p> This is primarily used to draw an analog clock . When used with the value of a Time measure in MeasureName the meter will internally use the % modulo mathematical operator , and calculate the meter based on the remainder when the number of seconds in the Time measure is divided by the following values : <h> Remarks <p> The center of rotation will be located at the center of the height and width specified for the meter . If height and width are not @ @ @ @ @ @ @ @ @ @ the X and Y coordinates provided for the meter . It is also important to remember that if the height and width are not specified , any portion of the meter that lies outside of the skin window will be cut off . 
@@256257 <h> Contents <h> More <h> Rotate an Image Around its Center <p> Tip by Smurfier and JSMorley <p> There may be a time when you want to rotate an image around its own center , as demonstrated below : <p> Probably the easiest approach is to use a Rotator meter . What you will need to do is set the OffsetX and OffsetY to the middle of the image based on the width and height of the original . Then you will need to find the total width and height of the container needed to rotate the image , which will be the length of a line from the upper left to the bottom right corners . These will be used to set the W and H of the Rotator meter . <p> Then you can use any measure that returns a value between 0% and 100% ( with any number of " steps " ) as the MeasureName of the meter , and the image will rotate around its own center based on the current value of that measure . @qwx22547 <p> Update=50 @qwx22553 @qwx22548 <p> ImageW=128 <p> ImageH=64 @ @ @ @ @ @ @ @ @ @ + 1 <p> MaxValue=360 <p> MeterRotate <p> Meter=Rotator <p> **25;2388;TOOLONG <p> ImageName=Rectangle.png <p> OffsetX= ( #ImageW# / 2 ) <p> OffsetY= ( #ImageH# / 2 ) <p> W= ( SQRT ( #ImageW# ** 2 + #ImageH# ** 2 ) ) <p> H= ( SQRT ( #ImageW# ** 2 + #ImageH# ** 2 ) ) <p> The only complicated bit are those formulas to obtain the W and H settings for the meter . The formula ( SQRT ( ImageWidth ** 2 + ImageHeight ** 2 ) ) Reference will measure the length from the top left to bottom right of the image , which is the size the meter will need to be to rotate the image in place without cutting off corners . <p> Note : If the visible part of the image being used is " round " , then you will not need the formula to set the width and height of the meter . In fact , doing so will make the overall size of the meter container unnecessarily large . Simply use the full size of the image when specifying the W and H options in the meter . 
@@256263 <p> The starting angle in radians for the image . This defines the starting point on the circle that will be treated as zero percent . The zero angle is to the right of the center . <p> RotationAngleDefault : ( 2 * pi ) <p> The size of the rotation angle in radians for the image . This defines the distance in radians from StartAngle that the meter will travel around the circle when the measure value is 100% . Use a negative value for counter-clockwise rotation . <p> ValueRemainderDefault : 0 <p> Use a remainder instead of the actual measured value . <p> This is primarily used to draw an analog clock . When used with the value of a Time measure in MeasureName the meter will internally use the % modulo mathematical operator , and calculate the meter based on the remainder when the number of seconds in the Time measure is divided by the following values : <h> Remarks <p> The center of rotation will be located at the center of the height and width specified for the meter . If height and width are not @ @ @ @ @ @ @ @ @ @ the X and Y coordinates provided for the meter . It is also important to remember that if the height and width are not specified , any portion of the meter that lies outside of the skin window will be cut off . 
@@256264 <h> Contents <h> More <h> Counters Guide <p> Tip by smurfier <p> This method of creating individual counters has been around for a bit but I decided that they should be written up as there are a few tricks that I 've figured out . The advantages of using independent counters are numerous and include the ability to increase their amount by any number you want and being able to pause or reset their values . <h> Understanding Modulus <p> Before we take on the task of explaining how to create and use counters we need to understand what the % operator means . What it is called is the Modulo operator . The first form of division most of us were taught in school was long division . This is also known as Remainder Division to some people . <p> The main concept of this type of division is that when you take one number and divide it by another number sometimes there is something left over . For example when you take the number 10 and divide it by 3 you do n't simply have the number 3 @ @ @ @ @ @ @ @ @ @ 1 to deal with . There are two ways this can be dealt with . You can either express it as a decimal which can get a bit messy ( 3.3333 ... ) or you can simply say " 3 with a remainder of 1 " . The second method is what we will be working with . <p> The modulus operator simply returns the remainder of any division you would do . For example if you were to do 10 % 3 the number 1 would be returned . <h> Creating Counters <p> First we 're going to create some variables that we are going to use later on . @qwx22548 <p> MaxNumber=30 <p> Pause=1 <p> Reset=1 <p> Now we need to create the counter . <p> cCounter @qwx22556 <p> Formula=cCounter+1 <p> The reason this works is that when calling a measure the value from the last update cycle is used . With this in mind , by calling the measure inside itself we can easily change it 's value . <p> Note : When naming your counter always remember that there is a built in Variable/Function named Counter @ @ @ @ @ @ @ @ @ @ the counter we just created will continue counting forever just like the built in Counter Variable/Function it does have one advantage . The built in version does not reset unless the skin is unloaded and reloaded . This can sometimes create issues . The counter we just created will always reset when the skin is refreshed . <h> Making the counter reset at a given value <p> Having it reset after a given value is easy and is accomplished the same way as if you were using the Counter variable . <p> cCounter @qwx22556 <p> Formula= ( cCounter+1 ) % ( #MaxNumber#+1 ) <p> This will have the counter reset to zero after it hits 30 , which is what we have MaxNumber set to . We have the measure add 1 to MaxNumber so that it will reset after the value else it will reset at that value . This is due to the fact that including the number 0 counting to 30 is actually 31 numbers . <p> If you want your counter to reset to one instead of zero we just need to move things around a @ @ @ @ @ @ @ @ @ @ method we also do n't need to worry about adding one to the reset value . <h> Resetting a counter via Mouse Actions <p> How about having it reset to zero when we click on the skin . @qwx22547 <p> LeftMouseUpAction= ! SetVariable Reset 0 <p> cCounter @qwx22556 <p> Formula= ( cCounter+1 ) *#Reset# <p> IfBelowValue=1 <p> IfBelowAction= ! SetVariable Reset 1 @qwx22552 <p> Multiplying the counter by zero will easily reset it . Just make sure to set an action to set the Reset variable back to one when you 're done . <p> Or an alternative for resetting the counter with just a MouseOver : @qwx22547 <p> MouseOverAction= ! DisableMeasure cCounter <p> MouseLeaveAction= ! EnableMeasure cCounter <p> cCounter @qwx22556 <p> Formula=cCounter+1 <p> Note : This method only works if the counter is disabled for at least one update cycle . <p> Now we can combine a couple methods of resetting to have the counter count up , reset , and wait for us to tell it restart again . <p> cCounter @qwx22556 <p> Formula=cCounter+1 <p> IfEqualValue=#MaxNumber# <p> IfEqualAction= ! DisableMeasure #CURRENTSECTION# <p> When we want the counter to @ @ @ @ @ @ @ @ @ @ cCounter . <h> Pausing a counter <p> Let 's pause the counter when you mouse-over the skin . @qwx22547 <p> MouseOverAction= ! SetVariable Pause 0 <p> MouseLeaveAction= ! SetVariable Pause 1 <p> cCounter @qwx22556 <p> Formula=cCounter+#Pause# @qwx22552 <p> When the MouseOver action is triggered you stop adding 1 to the counter yet it retains it 's value . When the mouse leaves the skin you start adding 1 to it again . <p> We can also have the counter stop counting at a certain value and stay there . <p> cCounter @qwx22556 <p> Formula=cCounter+ ( cCounter&lt;#MaxNumber# ) <p> What we did was added a conditional statement . Conditional statements without an " if ? then : else " format resolve to either 1 for true or 0 for false . Using this fact we can easily use conditional statements in mathematical formulas . <h> Triggering Actions with a Counter <p> cCounter @qwx22556 <p> Formula=cCounter+1 <p> IfAboveValue=#MaxNumber# <p> IfAboveAction= ! DisableMeasure #CURRENTSECTION# " Some Action " <p> This will count up to the MaxNumber , disable itself so it does n't continue to count , and execute some action such as opening @ @ @ @ @ @ @ @ @ @ some action a certain number of updates after the skin is loaded . <p> We can use the built in Counter function/variable to accomplish the same thing . Please note that Counter returns the number of updates since the skin was initially loaded and only returns to zero when Rainmeter is loaded or a ! RefreshApp bang is used . <p> cCounter @qwx22556 <p> Formula=Counter <p> IfAboveValue=#MaxNumber# <p> IfAboveAction= ! DisableMeasure #CURRENTSECTION# " Some Action " <p> Note : To execute a set of commands when the skin is loaded or refreshed , without using a counter , use OnRefreshAction= ! SomeAction in the Rainmeter section of the skin . <h> Bonus Lesson : Making a counter that counts down , not up <p> cCounter @qwx22556 <p> LONG ... <p> This one is a bit harder to explain . What we are doing is taking the value of the counter and subtracting 1 . Then we have to add the value of our MaxNumber else we 'll just end up with a negative value . Now we have to take the remainder of that value using Modulo to get our final value . 
@@256265 <h> More <h> Version History <p> This page includes a brief description of changes included in each publicly-released version of Rainmeter . For a complete , line-by-line history of Rainmeter 's source code changes since version 0.14 , see the project commit history on GitHub <h> Rainmeter 4.1 <h> July 7 , 2017 - Revision 2824 <p> Added Rainmeter : Drag Groups can now be created by selecting skins while holding CTRL-ALT , and dragging one skin , or nudging with the arrow keys will move all selected skins . See Multiple Skins for details . <p> Fixed Formulas : Corrected a missing BitwiseXOR formula operator . <h> July 1 , 2017 - Revision 2822 <p> Fixed Languages : Corrected an encoding problem with the Russian language . <h> June 29 , 2017 - Revision 2821 <p> Added Bangs : New ! EditSkin bang . Opens the current or a specified skin . ini file in the text editor defined in ConfigEditor in the Rainmeter settings , or associated with . ini files in Windows . The default will be Windows Notepad.exe . <p> Added Built-in variables : New #CONFIGEDITOR# @ @ @ @ @ @ @ @ @ @ defined in ConfigEditor in Rainmeter settings , or the text editor associated with . ini files in Windows . The default will be Windows Notepad.exe . <p> Changed Rainmeter : When dragging skins , temporarily enable the ' Show window contents while dragging ' system option if disabled in Windows , to allow skins to draw during dragging and use the snapping feature . <h> June 24 , 2017 - Revision 2815 <p> Changed NowPlaying : For Spotify , the artist and song text is obtained from the Windows titlebar of the Spotify application . Spotify used to prefix the text with " Spotify - " , but they do n't anymore . The change to NowPlaying for Spotify fixes that . For iTunes , the change allows the album art to be retrieved for streaming songs as well as of local only songs . <p> Changed Languages : Updated Dutch , Russian and Swedish translations . <p> Fixed Shape meter : Corrected a bug introduced in a previous beta that broke some features of the stroke style , like StrokeLineJoin . <h> June 7 , 2017 - Revision 2807 @ @ @ @ @ @ @ @ @ @ r2806 that caused transform modifiers on Path shapes to be invalid . <h> June 1 , 2017 - Revision 2806 <p> Added Bangs : Added new ! FadeDuration and ! FadeDurationGroup bangs to set the FadeDuration in milliseconds when activating/deactivating a skin , using the fade-in / fade-out effects on mouse over , or when the fade bangs are used . <p> Changed NowPlaying : Changed the measure values for Progress and SetPosition to use floating point numbers instead of integers for increased accuracy . <p> Fixed Shape meter : Corrected a possible crash or unexpected behavior when Combined shapes were defined before their component shapes in the meter . The order of the options in the meter are now of no consequence , as it is with all other meter and measure options . <h> April 21 , 2017 - Revision 2787 <p> Added Shape meter : Added Path1 alternative of the Path shape . It will use a different form of the SVG fill-rule when the shape is filled with a color or gradient . This determines what parts of a shape with intersecting segments are " inside @ @ @ @ @ @ @ @ @ @ for purposes of filling the shape with the defined color or gradient . See Path1 shape for details . <p> Added CoreTemp plugin : The author of both the CoreTemp application and Rainmeter plugin , Arthur Liberman , added CPU core-specific values to the data available in the plugin . See CoreTemp plugin for details . <p> Fixed Bangs : Fixed an issue when the config parameter of a bang contained a leading or trailing slash . <p> Fixed InputText plugin : Fixed a possible Rainmeter crash if an input box is open and the skin is deactivated . <p> Fixed Shape meter : Fixed a possible Rainmeter crash if the starting point of a Path shape was invalid . <p> Fixed Bitmap meter : Fixed an issue where BitmapExtend=1 would not increase the meters width and/or height , which would cause the meter to ignore DynamicWindowSize and draw outside its bounds and possibly truncate outside the skin window . <p> Fixed Bitmap meter : Fixed an issue where the Padding height values on the meter would be ignored in some situations . <p> Fixed InlineSetting : Corrected an issue @ @ @ @ @ @ @ @ @ @ empty string was received by a meter using InlineSetting . <p> Fixed Shape meter : Fixed an issue where certain gradients would not display correctly if there were multiple gradients in a shape meter . <h> Rainmeter 4.0 <h> January 1 , 2017 - Revision 2746 <p> 4.0 Release Version <h> December 19 , 2016 - Revision 2731 <p> Added New Skin dialog . This new dialog is opened with the Create new skin button in Manage , or by using the context menus on existing folders . This will allow you to add new root-level folders and skin file , or add folders or files to skins . See New Skin for details . <h> December 4 , 2016 - Revision 2722 <p> Changed InputText plugin : InputNumber option has been changed to support negative and fractional numbers . A single - may be the first character , and a single . character may be entered anywhere in the input . <h> November 27 , 2016 - Revision 2720 <p> Added Manage : Add a Create new skin button to the top of the skins list . This will @ @ @ @ @ @ @ @ @ @ template you can edit . The new skin will be selected in Manage and opened in your text editor . <p> Fixed Shape meter : Corrected an issue where using TransformationMatrix on a Shape meter would cause incorrect mouse detection . <p> Fixed Rainmeter : Corrected an issue parsing options that use the pipe character as a separator , if they also contained a formula that used the Logical OR operator . <h> November 6 , 2016 - Revision 2679 <p> Added Shape meter : Draws shapes using Vector graphics . Rectangle and Combine shapes , as well as all Attribute and Transform modifiers implemented in this first beta . See the documentation at : Shape Meter . <p> Changed String meter : Changed the number of degrees of angle in InlineSetting Gradients to allow fractional numbers . ( e.g. 45.5 ) . <p> Fixed About dialog : Corrected an issue where tabs were not being correctly displayed in the Log and Skins panels . <p> Fixed RunCommand plugin : Corrected a rare issue when the command is run by OnCloseAction , where Rainmeter would unexpectedly terminate and the command @ @ @ @ @ @ @ @ @ @ language . <h> September 12 , 2016 - Revision 2627 <p> Fixed Lua scripting : Corrected an issue in r2620 that could cause Lua to crash Rainmeter in rare cases . <h> September 4 , 2016 - Revision 2620 <p> Fixed Illustro skins : Changed the remote site used to get the user 's WAN IP address in the Network.ini skin . <p> Changed Lua scripting : Corrected an issue where anything defined in the Initialize() function of a Lua script was treated as " global " across all skins using Lua , which could cause " bleeding " of defined variables between skins , or between script measures in a single skin . Each Lua measure will now run in an entirely separate local context . <p> Changed Lua scripting : The above change to the context of each Lua measure in a skin has allowed for the use of the Lua dofile function in your scripts . Some changes were made to the standard Lua dofile functionality to support Unicode characters in a file path , and to improve error logging . <h> July 13 , 2016 - @ @ @ @ @ @ @ @ @ @ where the position of an inline Gradient could be incorrect when an inline Shadow was also used on the meter . <h> July 12 , 2016 - Revision 2617 <p> Added String meter : Added Shadow InlineSetting type to String meter Inline options . This will allow you to add a drop shadow to all or part of a string . <h> June 1 , 2016 - Revision 2613 <p> Fixed String meter : Corrected an issue where ClipString=1 was not working correctly if W ( width ) was defined without defining H ( height ) . <h> March 22 , 2016 - Revision 2607 <p> Fixed Corrected a rare issue where skins might be loaded with only partial opacity when Windows is first started . <p> Changed The Rainmeter notification area icon is forced to be visible any time there are no skins loaded in Rainmeter . This will temporarily override any setting for " Show notification area icon " in Manage . This change is to eliminate the possibility that a user could turn off the tray icon and then unload all skins , thus no longer having @ @ @ @ @ @ @ @ @ @ : Updates to Russian language . <h> March 18 , 2016 - Revision 2601 <p> Fixed Corrected an issue with the Insider Preview builds of Windows 10 that would not display the Rainmeter Notification Area / System Tray icon . <p> Fixed String case : Corrected an issue with non-English characters in the string case functionality of both StringCase and InlineSetting=Case in String meters . <h> March 17 , 2016 - Revision 2599 <p> Added String meter : Added Case InlineSetting type to String meter Inline options . This will allow you to set the string case to one of Lower , Upper , Proper , or Sentence for all or part of the displayed text . <p> Changed Language : Updates to Chinese Traditional language . <h> March 12 , 2016 - Revision 2593 <p> Added SysInfo : Added DOMAINWORKGROUP SysInfoType value to the SysInfo plugin . This will return either the " domain " or " workgroup " set for the system . <p> Added SysInfo : added a new ADAPTERTYPE SysInfoType option for the SysInfo plugin . This will return the adapter type ( Ethernet or Wireless @ @ @ @ @ @ @ @ @ @ be found at Change Announcements . <p> Changed InlineSetting : Changed the default value for InlinePattern(N) to . * ( the entire string ) when the option is left off or set to " " . This will allow you to set an InlineSetting on the entire string value without needing to define any matching InlinePattern . Details can be found at Change Announcements . <p> Fixed GradientColor : Corrected a bug that would not properly adjust a GradientColor InlineSetting when the width or height of the meter was changed but the string value was not . <h> Rainmeter 3.3 <h> July 5 , 2017 - Revision 2744 <p> 3.3.3 Release Version <p> Fixed Corrected a problem with the RunCommand plugin on 32bit Windows XP <h> May 16 , 2016 - Revision 2609 <p> 3.3.2 Release Version <p> Fixed Corrected an issue where Rainmeter could fail with an Error 127 on Windows Vista . <h> March 18 , 2016 - Revision 2602 <p> 3.3.1 Release Version <p> Fixed Corrected an issue with the Insider Preview builds of Windows 10 that would not display the Rainmeter Notification Area / System Tray @ @ @ @ @ @ @ @ @ @ <p> 3.3 Release Version <h> December 28 , 2015 - Revision 2494 <p> Release Candidate 2 <p> Fixed Localization : Fixed an issue with the Russian langauge . <h> December 27 , 2015 - Revision 2493 <p> Release Candidate 1 <p> Added ActionTimer : Added the ActionTimer plugin to the Rainmeter build . This plugin can be used to support animations and meter transitions . Details and examples can be found at ActionTimer Plugin and ActionTimer forum post . <p> Added RunCommand : Added the RunCommand plugin to the Rainmeter build . This plugin can be used to execute and obtain values from external commands and programs . Details and examples can be found at RunCommand Plugin and RunCommand forum post . <p> Changed Time measure : Added some additional Time measure Format Codes , made possible by the upgrade of the Rainmeter project to Visual Studio 2015 . This also corrects some issues with existing codes like %p . <p> Fixed WebParser : Corrected an issue where WebParser could not read a local file if it was locked open by some other process . <p> Changed Rainmeter Project : @ @ @ @ @ @ @ @ @ @ for development . <h> October 4 , 2015 - Revision 2468 <p> Changed Context options : Changed the maximum number of ContextTitleN / ContextActionN pairs from 15 to 25 . <p> Fixed Tooltips : Corrected an issue where a dynamic value for a ToolTipTitle would be one skin update behind . <p> Fixed Tooltips : Corrected an issue where removing a ToolTipTitle with ! SetOption would not work . <h> September 27 , 2015 - Revision 2464 <p> Changed SysInfo plugin : Added support for Windows 10 to SysInfoType=OSVERSION . <p> Fixed Quote plugin : Corrected an issue where some Unicode characters in a text file read by the plugin could be mistaken for an end-of-file control character and truncate the returned string . <h> August 15 , 2015 - Revision 2461 <p> Added Skins : Added new SkinWidth and SkinHeight option to the Rainmeter section of a skin . This will constrain the skin to the dimensions defined , either the width , the height , or both . Any meter or part of a meter positioned outside the defined boundaries will be truncated . DynamicWindowSize will be ignored @ @ @ @ @ @ @ @ @ @ display even " outside " the skin will be truncated by the " fixed " skin dimensions . <p> Fixed IfActions : Corrected an issue with IfMatch where doing a match on a measure that has returned no string value could crash Rainmeter . <p> Fixed Skin Installer : Corrected an issue with the comparison of plugin versions when multiple plugins were included in the . rmskin . <p> Fixed String meter : Corrected an issue with **27;2447;TOOLONG where the gradient did not properly react to relative positioning dynamically changing the meter position . <h> August 11 , 2015 - Revision 2457 <h> August 11 , 2015 - Revision 2455 <p> Fixed String meter : Additional corrections to the Inline Options settings . Fixed an issue when Unicode characters were embedded in the string . <p> Changed PCRE library : Updated the PCRE library to version 8.37 . Also added the UTF-16 version of the library files , and changed all Rainmeter functionality to use the UTF-16 libraries . <h> August 6 , 2015 - Revision 2438 <p> Changed Skin Installer : The Skin Installer application , used to install @ @ @ @ @ @ @ @ @ @ it will by default not replace a newer version of an included 3rd-party plugin with an older version . This is based on the " File version " information in the compiled . dll file(s) . <p> Fixed String meter : Corrected an issue with the Inline Options GradientColor setting , that was causing incorrect percentage placement of the gradient in some cases . <p> Fixed Image meter : Corrected an issue where removing a MaskImageName with ! SetOption was not possible . <h> July 31 , 2015 - Revision 2423 <p> Added String meter : Added new Inline Options features to the String meter . This will allow " inline " formatting of part or all of a string , and adds several new formatting options including a color gradient . <p> Fixed Plugin API : Corrected a bug , introduced in r2416 , which caused some threaded plugins to fail when sending a FinishAction to Rainmeter . <h> May 31 , 2015 - Revision 2416 <p> Fixed RegExpSubstitute : Corrected a bug , introduced in r2414 , where comparisons with an empty string could fail . <p> Fixed @ @ @ @ @ @ @ @ @ @ could crash or hang Rainmeter if Refresh All or Unload Skin was done while the plugin was executing commands to the main Rainmeter process . <h> May 24 , 2015 - Revision 2414 <p> Fixed RegExpSubstitute : Fixed a problem where a ( capture ) that returned an empty string would cause Rainmeter to hang or crash . Care should still be taken when using * ( zero or more ) quantifiers or ( ? ( ? = ( If/Then Lookaround ) constructs in RegExpSubstitute , as any ( capture ) returning an empty string will cause the Substitute to fail . <h> April 30 , 2015 - Revision 2412 <p> Fixed Net measures : Corrected a bug when using Interface with a number , introduced in r2410 . It is important that this new version be used in place of r2410 . <h> April 29 , 2015 - Revision 2410 <p> Changed Net measures : Changed the values accepted for the Interface option to accept new values of " Best " , which will automatically use the active network interface , or a string value of the name of @ @ @ @ @ @ @ @ @ @ Changed SysInfo plugin : Changed the values accepted for the SysInfoData option with network related SysInfoType options to accept new values of " Best " , which will automatically use the active network interface , or a string value of the name of the desired Network Interface Controller ( NIC ) . <p> Changed About / Log : Changed the Time column in the About / Log panel to use the current time in Hours , Minutes , Seconds and Milliseconds rather than elapsed time since Rainmeter was started . <h> April 6 , 2015 - Revision 2402 <p> Added Loop : Added new Loop measure . This will create a looping counter between two numbers . <p> Added NowPlaying : Added a value of Genre to the PlayerType option . This option value is currently supported with the AIMP , CAD , iTunes , WMP and WinAmp PlayerName values . <h> Rainmeter 3.2.1 <h> March 24 , 2015 - Revision 2386 <p> 3.2.1 Release Version <p> Fixed QuotePlugin : Fixed a bug with the random number generation that could potentially crash Rainmeter . <h> March 22 , 2015 - @ @ @ @ @ @ @ @ @ @ Changed the routines used to generate a random number to be more reliable . <h> March 15 , 2015 - Revision 2383 <p> Release Candidate 1 <p> Added WebParser : Added new OnDownloadErrorAction to WebParser measures to allow taking an action when a remote file defined by Download=1 fails to download or ca n't be saved locally . <p> Changed Rainmeter : Added the value 100 to both Manage and the skin context menus to support setting the transparency of a skin to an opacity of 1 , which is invisible but will still react to the mouse . This can be used in conjunction with the fade in / fade out / on hover capabilities . <h> March 9 , 2015 - Revision 2380 <p> Fixed AudioLevel : Fixed a long-standing issue where stopping music or other sounds or exiting an application playing music or other sounds could cause the plugin just keep the last values it received . This resulted in a freezing of meter displays and on some systems a buzzing sound being produced for some number of milliseconds . <h> March 3 , 2015 - Revision @ @ @ @ @ @ @ @ @ @ r2378 that would crash Rainmeter if a malformed option , with a trailing comma , i.e. FontColor=255,255,255 , was used . <h> March 2 , 2015 - Revision 2378 <p> Added WebParser : Added new OnConnectErrorAction to WebParser parent measures to allow taking an action when a site or file resource can not be connected to . <p> Added WebParser : Added new OnRegExpErrorAction to WebParser parent measures to allow taking an action when parsing a site or file resource with RegExp ( regular expression ) fails . <p> Changed WebParser : Changed the FinishAction to not be executed when parsing a site or file resource with RegExp ( regular expression ) fails AND an OnRegExpErrorAction is defined on the measure . <p> Added WebParser : Added a new Reset command , used with the ! CommandMeasure bang , to reset all values in the WebParser parent and related child measures to their initial empty values . <p> Fixed Math : Corrected a problem when a comma-separated , multi-argument math function was used in a formula in a comma-separated , multi-argument option . For instance using Clamp ( x , @ @ @ @ @ @ @ @ @ @ ggg , bbb , aaa . <p> Fixed Skin Installer : Changed the Skin Packager to only allow inclusion of a valid 400x60 . bmp file as a custom header in a . rmskin . Improperly sized custom images were causing visual problems in the Skin Installer user interface . <h> February 22 , 2015 - Revision 2373 <p> Changed Time : Added a Local value to the FormatLocale option , e.g. FormatLocale=Local . This will cause the output format of the measure to automatically use the date / time " locale " language and format set in Windows for the machine the skin is running on , rather than defaulting to a standard platform-agnostic " English " representation . <p> Fixed Time : Accounted for some minor bugs in Microsoft 's implementation of the code to read and parse the TimeStampFormat option . <h> February 18 , 2015 - Revision 2371 <p> Changed Time : Changed the TimeStamp option to allow a formatted date / time string as input . <p> Added Time : Added new FormatLocale option to support formatting a Time measure in any defined language / @ @ @ @ @ @ @ @ @ @ option to allow formatting any defined number of seconds into " days , hours , minutes , seconds " as desired . This will override the default behavior of the UpTime measure . <p> Added Section Variables : Added a new : Timestamp section variable measure modifier . This will return the Windows timestamp value of the named Time measure , and overcomes a limitation with getting and using this number when a Time measure has a Format option . <p> All of the above additions and changes are related to new functionality for getting and using date / time information in skins . As well as support for Language / Locale values in Time measures . Details and examples can be found at Change Announcements . <h> February 8 , 2015 - Revision 2360 <p> Added Time : Added several TimeStamp options to obtain Daylight Savings Time information for the local computer . <h> September 16 , 2014 - Revision 2325 <h> September 9 , 2014 - Revision 2318 <p> Fixed AudioLevel plugin : Added error trapping when the AudioLevel plugin is used on the unsupported Windows XP operating @ @ @ @ @ @ @ @ @ @ <p> Added Plugins : Added new AudioLevel plugin by author dgrace to the Rainmeter build . This will allow for real-time VU-Meter and Spectrum Analyzer visualizations of sound output . See AudioLevel plugin for full documentation and example skins . <p> Fixed AudioLevel plugin : Fixed an issue with the Format child measure option that was not returning a Unicode string value . <h> August 29 , 2014 - Revision 2313 <p> Fixed Formulas : Corrected an error when a negative number was used in combination with the Random function . <h> August 23 , 2014 - Revision 2311 <p> Changed Image : Due to possible conflicts , removed support for ImagePath from MaskImageName functionality . MaskImagePath should be used to define a shared location for mask images , or simply use a full or relative path as part of MaskImageName . ImagePath should only be used to define a location for an Image meter 's primary image . <p> Changed Tooltip : ToolTipIcon option now allows a relative path to the image . <p> Changed Language : Updates to localization language strings . <h> November 10 , 2013 - @ @ @ @ @ @ @ @ @ @ . This is a powerful extension to the concepts provided in IfActions , allowing multiple tests and actions , both " true " and " false " testing , and the ability to use logical AND and OR operators in the conditions . See Change Announcements for details and example skins . <h> Rainmeter 3.0.2 <h> October 29 , 2013 - Revision 2161 <p> 3.0.2 Release <p> Fixed Rainmeter : Fixed an issue where skins would " flicker " when refreshed . <h> Rainmeter 3.0.1 <h> October 20 , 2013 - Revision 2151 <p> 3.0.1 Release <p> Fixed Direct2D : Fixed crash of Rainmeter in D2D when String meters had a negative width or height . <p> Fixed Rainmeter : Fixed an AnchorX/Y issue caused by a change to support D2D . <p> Changed Installer : Removed the need to support / install older versions of . NET and C++ runtimes . <p> Changed Installer : Embed msvcr110.dll and msvcp110.dll C++ 2012 runtime libraries , so if they are not currently installed on the user 's system , Rainmeter will not need to try to download and install them . @ @ @ @ @ @ @ @ @ @ 2113 <p> 3.0 Release <p> Fixed String meter : Corrected an incompatibility between GDI+ and D2D when a string ends with a carriage return . <p> Changed Languages : Updated several language files for changes to the Rainmeter user interface . <h> October 6 , 2013 - Revision 2106 <p> 3.0 Release Candidate 1 <p> Changed Direct2D ( UseD2D ) rendering is now used by default if the system supports it . <h> September 29 , 2013 - Revision 2097 <p> Changed Due to some Direct2D issues with image quality when an image meter is " resized " in Rainmeter with W and H , all image rendering is changed to use the GDI+ engine while a more permanent solution is found . <h> September 22 , 2013 - Revision 2094 <p> Fixed Lua Scripting : Fixed a problem with a defined " default " value not working with SKIN:GetVariable() and meter:GetOption() . <h> September 15 , 2013 - Revision 2090 <p> Added Variables : New #ROOTCONFIG# built-in variable . Name of root config - Highest-level folder under the skins folder for the current skin . <p> Fixed Bangs : @ @ @ @ @ @ @ @ @ @ function without any parameter . " Skins " is the default parameter . <p> Fixed Meters : Fixed a bug where in some cases the width and height of a meter was not dynamically changing correctly when the Padding option was used . <h> August 26 , 2013 - Revision 2085 <p> Added About : Added a " Clear " button to the About / Log panel to remove the current contents of the log displayed in the panel . <p> Changed Bangs : Added " Config " and " File " parameters to the ! Manage bang . This will allow opening the Manage / Skin panel with the desired config and / or skin . ini file automatically selected in the list . <h> August 18 , 2013 - Revision 2081 <p> Added Calc : Added a new UniqueRandom option . If set to 1 , any measure using the random constant and UpdateRandom will not repeat until all values between and including LowBound and HighBound have been used . Note that any dynamic change to LowBound or HighBound will reset the tracking of values . See Change @ @ @ @ @ @ @ @ @ @ 2013 - Revision 2076 <p> Changed Script : We have now added support for Unicode characters in Lua scripting . There are some limitations , see Change Announcements for important details . <p> Changed Direct2D : There have been many fixes and improvements for compatibility with the new UseD2D / Direct2D functionality and older skins . See Change Announcements for details . <h> August 4 , 2013 - Revision 2050 <p> Special bug fix release <p> Fixed Rainmeter : Fixed an issue with Direct2D where a string meter with an empty string would still have a width and height . <p> Fixed About : Fixed a bug in the Log panel that could cause problems with the " Source " column . <h> August 4 , 2013 - Revision 2047 <p> Changed Rainmeter : Important improvements made to the D2D ( Direct2D ) rendering option for Rainmeter . See Change Announcements for important details . <p> Added Manage Dialog : Added " UseD2D " option in the Manage / Settings Tab . If checked , all skins are refreshed using D2D ( Direct2D ) rendering . The option is disabled @ @ @ @ @ @ @ @ @ @ with the latest Platform Update or Windows 8 is required . <p> Added Rainmeter : Added AccurateText option in the Rainmeter section of skins . When AccurateText=0 ( default ) and UseD2D=0 , inaccurate GDI+ measuring of text is used . When AccurateText=1 and UseD2D=0 , Accurate measuring occurs similar to D2D . When AccurateText=0 and UseD2D=1 , D2D adds padding to the text similar to GDI+ . When AccurateText=1 and UseD2D=1 , Accurate measuring occurs using D2D. <h> 21 July , 2013 ( r2022 ) <p> Removed String meter : Due to problems and inconsistent behavior , removed the ability to include trailing spaces on the Text option that was added in previous betas . See the new Padding option for an alternative solution . <p> Added Meters : Added Padding=left , top , right , bottom option to meters . Allows adding pixels around any or all sides a meter . The width and height of the meter will dynamically be adjusted to the new size . <p> Added Measures : Added Paused=0/1 option to measures . This allows setting the " paused " state of a measure @ @ @ @ @ @ @ @ @ @ . <p> Fixed ! SetWallpaper : Improved performance when setting the wallpaper with large images . <p> Changed Button meter : Changed the mouse over behavior to ignore transparent areas of the image , to match the mouse click behavior. <h> 14 July , 2013 ( r2012 ) <p> Changed String meter : Trailing spaces are displayed in the Text option if the value is enclosed in quotes . This was previously changed in D2D , and now has the same behavior in GDI+ . <p> Added ! PauseMeasure : New ! PauseMeasure , ! UnpauseMeasure , and ! TogglePauseMeasure bangs . This is similar to a disabled measure , however the measure retains its current value instead of changing to 0 . Group versions of these bangs also added . <p> Changed ! SetWallpaper : Changed the problem that an image file set with ! SetWallpaper would be locked in Windows . <p> Fixed Rainmeter : Fix for a problem with ! DeactivateConfig in a OnCloseAction that could cause high CPU usage . <h> 30 June , 2013 ( r1995 ) <p> Changed Error Logging : Improved the About/Log @ @ @ @ @ @ @ @ @ @ possible , the configskin.ini and meter or measure section producing the error will be displayed . <p> Fixed String Meter : Corrected a bug where trailing spaces were not displayed when the option value was enclosed in quotes . Text= " Some Trailing spaces " <h> 23 June , 2013 ( r1990 ) <p> Fixed Lua Scripting : Fixed an issue where some meter related bangs ( i.e. ! HideMeterGroup ) were ignored in the Initialize() function of the script . <p> Fixed Meters : Fixed an issue where the hiding of a meter caused the skin to have a width and height of zero would not properly destroy the drawing of the last meter hidden . <p> Changed Languages : User Daniel Peukert made some updates and corrections to the Czech language files . <h> 17 June , 2013 ( r1986 ) <p> Fixed Image meter : Fixed a bug that caused images not be be displayed when both MeasureName and ImageName options were used . <h> 16 June , 2013 ( r1979 ) <p> Fixed String meter : Fixed a small bug with the Angle option . <p> @ @ @ @ @ @ @ @ @ @ <h> 9 June , 2013 ( r1950 ) <p> Added New ImagePath option added to General Image Options . This replaces the Path option on Image meters , and extends the functionality to all other meters that support images . Note that Histogram uses PrimaryImagePath , SecondaryImagePath and BothImagePath due to the fact that the Histogram meter has an optional secondary measure binding . <h> 4 June , 2013 ( r1946 ) <p> Fixed Fixed an issue with the ! Toggle bang that could cause a crash in some instances . <h> 3 June , 2013 ( r1945 ) <p> Fixed Corrected a couple of bugs with group bangs that caused them to fail . One long-standing , and one caused by the most recent r1941 beta . <h> 2 June , 2013 ( r1941 ) <p> Changed Improvements to the level of detail in the Rainmeter log when there are command or bang errors . <p> Changed Major refactoring of the Rainmeter code for efficiency and easier code maintenance . <h> 19 May , 2013 ( r1930 ) <p> Changed Process : Improvements made to the Process plugin to @ @ @ @ @ @ @ @ @ @ processes started with a higher security level than Rainmeter , 64bit processes when Rainmeter is 32bit , and processes run as a Windows " service " . <p> Fixed Roundline : Corrected a rounding error when a large value is used for the StartAngle option . <h> 12 May , 2013 ( r1928 ) <p> Added Image meter : New UseExifOrientation option to automatically correct the orientation of images based on the EXIF data encoded in the image by a camera . <p> Fixed NowPlaying : Corrected an issue that caused the NowPlaying plugin to fail on XP systems in some cases . <h> 7 April , 2013 ( r1879 ) <p> Changed D2D : Made some changes to how font " family " and " subfamily " names are handled , to be more consistent with GDI+. <h> 31 March , 2013 ( r1871 ) <p> Added InputText : Added OnDismissAction to the plugin . <p> Fixed FileView : Fixed an issue with the Open command which in rare instances could crash Rainmeter . <p> Changed Localization : Updated language files . <h> Rainmeter 2.5 <h> 24 March , @ @ @ @ @ @ @ @ @ @ March , 2013 ( r1819 ) <p> Changed InputText : Improved formula and section variables support in measure options and inline CommandN option . X , Y , W , H and FontSize are supported . DynamicVariables is not required on the measure . <p> Changed SkinInstaller : Remove all Rainmeter section options from layouts installed by a . rmskin . Skin authors may not automatically overwrite the user 's settings for these options . <p> Changed SkinInstaller : Add FileView to protected official plugins , FileView.dll may not be distributed with a . rmskin. <h> 5 March , 2013 ( r1808 ) <p> Fixed FileView : Fixed an issue with threading that caused icons to display as the Windows default / unknown image in some cases . <p> Changed FileView : WildcardSearch now works properly with Recursive=2. <h> 3 March , 2013 ( r1806 ) <p> Added Ping : Added FinishAction to plugin . Action to execute as soon as a successful value is returned , or when the number of milliseconds set in the Timeout option is reached . <p> Changed InputText : Updated to current Rainmeter API @ @ @ @ @ @ @ @ @ @ <p> Fixed InputText : Fixed issues with handle leaks caused by threading . <p> Fixed InputText : Fixed an issue that prevented input using a language IME in the field . <p> Added FileView : Added Recursive=2 option . Allows recursive indexing of files in a folder tree . Folders are ignored with this option . Plugin commands FollowPath and PreviousFolder are disabled , and ShowFile , ShowFolder , and ShowDotDot options have no effect . <p> Changed FileView : Drives are now sorted . <p> Changed FileView : Drives are now counted as folders for Type=FolderCount. <h> 3 February , 2013 ( r1786 ) <p> Fixed FileView : The current index number was not being reset on Update command . <p> Fixed Calc : An issue with negative signs being incorrectly parsed was corrected . <h> 27 January , 2013 ( r1781 ) <p> Changed ClipString : Added new ClipString=2 setting and new ClipStringW / ClipStringH options . This will allow for more dynamic clipping and wrapping of a string while sizing the containing meter to accommodate the entire contents . <p> Changed WebParser : Changed the behavior of @ @ @ @ @ @ @ @ @ @ Internet Explorer for proxy management . <p> Fixed FileView : The default icon index was off by 1 when non IconPath was specified . <h> 5 June , 2011 ( r826 ) <p> Fixed an issue with FinishAction on a WebParser measure not working correctly if #CURRENTCONFIG# was not specified . <p> Changes to Uptime measure to work better on Vista/Win7 systems . <h> 29 May , 2011 ( r822 ) <p> Added support for MusicBee and MediaMonkey to NowPlaying plugin . <p> Improved image caching when image scaling is not required , to reduce resource usage . <h> 22 May , 2011 ( r816 ) <p> Added NowPlaying media plugin as noted above . <p> Fix to Rainstaller when a full restore of a . rmskin made with RainBackup is done containing the " Backup " folder from Skins . <h> 15 May , 2011 ( r808 ) <p> Fixed an issue with Rainstaller that was preventing it from restoring full backup . rmskins made with RainBackup . <p> Changes to the Rainmeter source build process to better support those using Visual Studio in both 32 and 64 bit @ @ @ @ @ @ @ @ @ @ Fixed a bug with Measure=Registry returning invalid DWORD values . <p> Improved fix in r800 that correctly handles SkinPath in Rainmeter.ini for portable installations . <h> 17 April , 2011 ( r793 ) <p> Change to how network statistics are stored ( Rainmeter.stats ) . <p> Fixed an issue with the Rainmeter icon on the System Tray/Notification Area disappearing when Explorer was restarted . <p> Fixed an issue that Roundline " Shift " parameters were not working when Solid=0 was set on the meter . <p> Fixed a problem where SkinPath was read from Rainmeter.ini in portable installations . <h> 10 April , 2011 ( r790 ) <p> Added the NowPlaying media player plugin by developer and overall Rainmeter superstar poiru . <p> Added support for Aero Glass " blur " effects on skins . <p> FolderInfo now returns size in bytes . If using InfoType=FolderSizeStr , ( which until now autoscaled the value internally ) AutoScale=1 should be added to the meter(s) . While this does change the behavior , it allows for the use of Scale , NumOfDecimals , etc. that were n't possible prior to this change @ @ @ @ @ @ @ @ @ @ failing if a " config name " folder had a space in it . <p> Fix for the CoreTemp plugin to address a mutex handle leak . <p> Added image caching system to the internal Rainmeter code . <p> New option for Uptime meter : setting added to disable the addition of days to hours when days ( %4 ) is not specified in the Format= setting . Use AddDaysToHours=1/0 to control this option . <p> Some bug fixes and improvements to VirtualDesktops plugin from Patrick at Dexpot . <p> " Silent " installation of Rainmeter now available . <p> Rainmeter development environment updated to Visual C++ 2010 . <p> Rainmeter now requires WinXP SP2 / Win2003 SP1 / WinVista or Win7 . <p> Support for Win2k ( Windows 2000 ) is not provided in the new VC++ 2010 development environment . <h> Rainmeter 2.0 <h> 6 February , 2011 ( r745 ) <p> Rainmeter installer changed to a single . exe which installs both 32bit and 64bit Rainmeter . <p> Fixed an issue with " BevelType " in meters not displaying correctly . <p> Added AutoScale=2 and " k @ @ @ @ @ @ @ @ @ @ skins from the build . Now available as a download after the install . <p> Changed Update= and UpdateDivider to enable a setting of -1 , disabling updates after the initial load/refresh . <h> Rainmeter 1.3 <h> 3 October , 2010 ( r560 ) <p> Fixed a issue that MouseOver/LeaveAction could loop infinitely when used with ! RainmeterMoveMeter . <p> Minor change to RainThemes to make closing Rainmeter more efficient . <p> Changes to many Rainmeter error/prompt dialogs to make them more descriptive . <p> Fixed a issue that Value column is n't updated if value is empty string in the About dialog . <p> Fixed a issue that Download=1 does n't work correctly in some cases in WebParser . <p> Added Measure-name to log messages in WebParser . <p> Rainmeter error messages now display meter/measure in question . <p> Change to detect skins with no meters OR measures to reduce issues with people loading Rainlendar skins and such . <p> Fixed an issue where ToolTips were remaining active on hidden meters . <p> Added the ability to use formulas to define ToolTipWidth . <p> Rainstaller : Added display of @ @ @ @ @ @ @ @ @ @ Fix for long standing issue where numbers were being truncated to zero decimal places in some instances , causing possible incorrect calculated values when the measure 's number was used dynamically later . <p> Fix for a TooTip initialization issue which could cause intermittent Windows Taskbar error message loop when Rainmeter was started . <p> NumOfDecimals is now enabled when Percentual=1 is used in a STRING meter . <p> Fixed a multithreading issue that could cause a crash of Rainmeter in the internal function LSLog() . <p> 1 : Decodes both numeric character references and character entity references . <p> 2 : Decodes only numeric character references . <p> 3 : Decodes only character entity references . <p> Improved the PLAY command so it works more like a ! bang does : <p> ButtonCommand=PLAY **31;2476;TOOLONG <p> ButtonCommand=PLAY " **31;2509;TOOLONG " <p> ButtonCommand= ! execute PLAY **31;2542;TOOLONG <p> ButtonCommand= ! execute PLAY " **31;2575;TOOLONG " <p> Fix an issue with the " ClickThrough " skin setting broken in an earlier beta . <p> Major visual / interface changes to the " About " dialog . Should make this a much more @ @ @ @ @ @ @ @ @ @ updated to version 1.6 . <p> New bangs Mute/Unmute <p> Volume shows -1 when muted <p> Fixed an issue where dynamic variables would be reset to default when Windows " WorkArea " is reset by changing the screen resolution or a screensaver is activated . <p> Minor fixes to WebParser for a memory leak and routines to interact with Rainmeter " window " . <p> Changed to allow substituting quote characters in Substitute= statements . This is done by using single quotes to surround the first part of the " find " : " replace " pair . So Substitute= ' " ' : " " would remove all quotes from the text . <p> Single and double quotes MUST be " mismatched " on the " find:replace " pairs when using single quotes as a delimiter , or the Substitute will fail . Example : Substitute= ' " ' : " None " will replace a quote with the word None . Substitute= " None " : ' " ' will replace the word None with a quote . However , Substitute= ' " ' : ' None ' @ @ @ @ @ @ @ @ @ @ on both sides of the " find:replace " pairs . An easier to read example is Substitute='red ' : ' blue ' , which will fail . <p> Updated the pcre ( Regular Expression ) library from 6.4 to 8.10 . The pcre change log is at Change Log <p> Added new ! bangs to change " settings " in Rainmeter.ini for current / group / all skins at once . <p> ! RainmeterDraggable/ ! RainmeterDraggableGroup <p> LONG ... <p> LONG ... <p> ! RainmeterSnapEdges/ ! RainmeterSnapEdgesGroup <p> ! RainmeterSnapEdges parm1 ( Config * ) <p> ! RainmeterSnapEdgesGroup parm1 GroupName <p> Parm1 : <p> -1 toggles the setting . <p> 0 forces the setting to off . <p> 1 forces to setting to on . <p> WebParser : Fix for issue where StringIndexes from previous call to WebParser would remain even if the item no longer exists . This fixes a long standing problem with uTorrent skins for example , when the last item was removed from uTorrent but remained displayed in the skin until a refresh was done . <p> Added MeasureName2 as an alternative to SecondaryMeasureName in Meter=Histogram @ @ @ @ @ @ @ @ @ @ all restrictions on the string case of function names . Calc measures are now completely case-insensitive , with the exception of the " b/o/x " character when specifying the base of a number , this must be lower case . <p> Added new PluginMediaKey plugin by poiru . <p> Some minor improvements to MouseOver/MouseLeave actions . <p> Change to Rainstaller to close RainBrowser if it is running when a skin is installed , to eliminate a problem with open files . <p> Fix by elestel to iTunes plugin : iTunesPlugin did not handle **28;2608;TOOLONG . <p> Added new #ROOTCONFIGPATH# variable . This will contain the path to the highest level folder under Skins for the current config. **41;2638;TOOLONG can be used to have an @Include work even if you move a skin to another " suite " for instance . <p> Re-design of the layout of the Rainmeter manual . The manual is now exclusively online . The " Help " context menu item will launch the appropriate ( release or beta ) version of the manual in your default web browser . The Rainmeter.chm help file is no longer @ @ @ @ @ @ @ @ @ @ <p> Added new ! RainmeterWriteKeyValue bang . ! RainmeterWriteKeyValue " Section " " Key " " Value " ( " FileSpec " ) , where " FileSpec " is an optional parameter . If FileSpec is not present , the change is automatically done in the currently running skin file . If the bang is executed from the command line , FileSpec is required . FileSpec must be either in the Skins or %APPDATA%Rainmeter paths . This can be used to permanently change any Key=Value setting in any . ini or . inc file ( Including Rainmeter.ini ) . <p> Changes to MouseLeaveAction to make it more reliable and faster . This should eliminate having to put MouseLeaveAction in the Rainmeter section to ensure detection . <p> Made the " About " dialog a bit larger by default . Other cosmetic changes to this dialog . <p> Fixed WifiStatusPlugin so it no longer closes WLAN handle when skin is closed even if another skin is still using it . <p> Fixed an issue where an invalid Format= code in a Time or Uptime measure would crash Rainmeter . Invalid formats @ @ @ @ @ @ @ @ @ @ just gracefully fails . <p> Change to Rainstaller so that a default Rainmeter plugin will not be overwritten if an author includes it by mistake in a . rmskin file . <p> Fixed an issue where Rainmeter was detecting an incorrect value for %APPDATA% in a multi-user environment . <p> Fixed an issue where check marks of context menu items in configs/root/variants menu are cleared if LONG ... is used . <p> Minor fix to new " groups " function for configs . <p> Added root folder of a config on the skin context menu . <p> Fixed an issue where the context menu did not close when focus was given to another windows element . <p> Many additions to the supported Windows Messages that Rainmeter will respond to , allowing 3rd-party applications to query Rainmeter for paths , currently loaded configs , etc . These changes are courtesy of JamesAC and Patrick from Dexpot . <p> Added the Win7AudioPlugin plugin by Reiswaffle . <p> Added the PluginVirtualDesktops plugin from Patrick at Dexpot . This will provide support for Virtual Desktop Management tools like Dexpot and VirtuaWin . <p> Added @ @ @ @ @ @ @ @ @ @ in Rainmeter.ini and on " About " dialog . <p> Re-design of the RainBrowser GUI . <p> Major re-design of the Rainmeter and Skins context menus . <p> Fix to Calc measure to properly allow use of numbering systems other than decimal using a prefix of 0b ( binary ) 0x ( hex ) 0o ( octal ) on the numbers . <p> Added " Group= " to meters and measures in skins , and in Rainmeter.ini to support configs . This allows many ! bangs to operate on multiple entities at once without multiple ! bang statements . <p> Major improvement to " logging " in Rainmeter , including new context menu support . <p> Addition of support for multiple monitors when using DesktopWorkArea . This change is courtesy of user Jott . <p> Addtion of " ToolTip " functionality , so meters can have standard Windows tooltips when hovered over . <p> Improvement to image quality when scaling images . <h> Rainmeter 1.2 <h> 24 June , 2010 ( r440 ) <p> Major improvements to how Rainmeter works with multiple monitors . <p> New WebParser settting " DownloadFile= @ @ @ @ @ @ @ @ @ @ . <p> New ! Bang - ! RainmeterRefreshApp . Allows full Rainmeter refresh from a skin or command line . <p> FIXED : Issue where DynamicVariables=1 disabled UpdateDivider . <p> FIXED : LineColor did not use the values of Dynamic Variables in Meter=Line . <p> FIXED : A numeric value greater than 32bit can be now displayed when NumOfDecimals is 0 in Meter=STRING . <p> FIXED : Compatibility issue in Windows 2000 . ( AboutDialog , SysInfo ) <p> CHANGED : FontSize=0 ( invisible ) is now valid in a STRING meter . <p> CHANGED : The parsing of parameters to use default values for incorrect " typing " . ( ie : FontSize=ABC ) <p> FIXED : An issue with skins not positioning correctly on multiple monitors when KeepOnScreen=1 . <p> Added " Processor=n " parameter to Measure=CPU function so it can be used as well as / instead of PefMon.dll Plugin to measure multiple-core CPU systems . Processor=1 is the first core , etc . Processor=0 or no parameter is still the average of all cores . <p> Changed NetIn and NetOut function to return correct information if @ @ @ @ @ @ @ @ @ @ value by combining the activity of the physical network card with Windows virtual interfaces . <p> Added the statement " Debug=1 / 0 " in the Rainmeter section of Rainmeter.ini . This currently will do some logging of enumerated monitors and network interfaces and may be added to over time . <p> FIXED : Corrected an invalid return value from MainWndProc . <p> Added the parameter " ImageAlpha= " for image meters . This will allow setting the " transparency " of an image from 0 ( invisible ) to 255 ( fully opaque ) . <p> Changed " AntiAlias=1 " to use " default " interpolation instead of " Bicubic " . This should result in better antialiasing of images . <p> RainBrowser : Minor change to a link added by the program to Metadata <p> FIXED : Corrected an issue where a BAR meter did not work correctly with DynamicVariables=1 <p> Change ! RainmeterSetVariable to accept formulas as a parameter . Formulas must be enclosed in parentheses with the entire parameter enclosed in quotes if there are spaces in the formula : ! RainmeterSetVariable VarName " ( #SCREENAREAWIDTH# @ @ @ @ @ @ @ @ @ @ enable the use of " On Desktop " ( AlwaysOnTop=-2 ) Z-Position for skins under Vista and Win7 . <p> Fix to timing issue with Ping Plugin to reduce possibility of Rainmeter crash when pinging an active server not responding to the Ping service . <p> Changed @Include to allow the use of variables in the statement . <p> Updated GUI for EnigmaConfigure . Now also restores saved settings on upgrade of Enigma from Backup . <p> Improvement of functionality when using ! **25;2681;TOOLONG and DynamicVariables=1 . <p> Fixed a bug in SpeedFan that could cause a crash if SpeedFanType was not set to TEMPERATURE . <p> Changed an error in using Dynamic image names to write to the log rather than producing an error dialog . <p> Fixed an issue with loading image names when in a MeterStyle . <p> Fixed a bug in Meter=Histogram . <p> Fixed a bug in the Ping plugin that could cause a crash if the network was not present when the skin was refreshed . <h> Rainmeter 1.1 <h> 1 November , 2009 ( r306 ) <p> The default value for the UpdateRate @ @ @ @ @ @ @ @ @ @ . <p> Fix for the ToggleiTunes command in the iTunesPlugin . <p> The IgnoreRemovable now defaults to true ( 1 ) which should help with the missing disk errors . <p> Added Themes submenu to the Rainmeter 's context and tray menus . <p> Variables can be used under the Variables section ( as long as they have been defined before the current variable is read ) . <p> Changed RainThemes to automatically create a theme called " AutoSave " which will contain your current setup . <p> The windows stay visible with Windows 7 Aero Peek . <p> WebParser reads the resource now only if it has been modified . This can be overridden with ForceReload=1 . <p> ! RainmeterRefresh and ! RainmeterQuit are now handled only during the event loop since they can crash the application if executed during Update() . <p> It 's now possible to use the measures as if they were variables ( use MeasureName instead #VariableName# ) . Set DynamicVariables=1 for all meters and measures which refer to other measures . <p> New bang ! RainmeterSetVariable can be used to change the value of @ @ @ @ @ @ @ @ @ @ the variable is used ) . <p> Skin information and instructions can be added to Metadata section . <p> Aspect ratio of the image is preserved when the image is scaled . <p> New RANDOM function in the CALC measure type . <p> Fonts can now be stored in RainmeterFonts or with the skin and not " installed " in Windows . <p> Added support for style sections . MeterStyle can be used in meters to read the values from the style section . <p> Added support for the middle mouse button ( MiddleMouseDownAction / MiddleMouseUpAction ) . <p> The skin files can read other files with @include statement . <p> If native transparency is enabled the windows are not refreshed anymore when settings change but they are just moved to the correct location . <p> Added a version check for the skins which come with Rainmeter so they can be upgraded . <p> Path and filename of the file created by Debug=2 in WebParser is now configurable with Debug2File= " Pathfilename.ext " . <p> The standard " hand pointer " mouse cursor is shown when you hover over a @ @ @ @ @ @ @ @ @ @ button . <p> Added #CURRENTCONFIG# as a " built-in " variable . <p> Fixed : Measure contained in Action in Measure and Meter are not replaced when reading skins . They are replaced only when executing action . <p> Fixed : When the designation of Drive is wrong , a strange volume label is indicated . <p> The ! bangs can be now used from command line even if there are no active configs . <p> Included RainBrowser to the build . <p> WiFiStatus : Added a variable called WifiListLimit=X that allows you control how many access points to display at a time . <p> WiFiStatus : Removed all popup errors , all debugging messages now sent to Rainmeter log file . <p> WiFiStatus : Fixed some memory leaks 7 and Vista users were facing . <h> Rainmeter 1.0 <h> 7 August , 2009 ( r163 ) <p> Diskspace can be checked from the removable drives too . <p> Time measure did n't show correct week number . Fixed . <p> New plugins : RecycleManager and iTunesPlugin <p> SysInfo plugin updated with 11 new SysInfoTypes . <p> SysInfo IP Address @ @ @ @ @ @ @ @ @ @ n't be opened if Rainmeter was installed to a folder with spaces . Fixed . <p> Added support for transition frames for the bitmap meter . <p> Some Vista specific fixes : Rainmeter.ini and Rainmeter.log are now written to %APPDATA%Rainmeter and editing the skins will ask for admin privileges . <p> When Rainmeter is started the first time the default skin is activated automatically . <p> New build in variables : #WORKAREAX# , #WORKAREAY# , #WORKAREAWIDTH# , #WORKAREAHEIGHT# , #SCREENAREAWIDTH# , #SCREENAREAHEIGHT# , #PROGRAMPATH# , #SETTINGSPATH# , #SKINSPATH# , #PLUGINSPATH# , #ADDONSPATH# and #CURRENTPATH# ( this is the path where the ini file that is currently read is located ) . <p> Math formulas can be used to define the window position and the meter dimensions ( the formula must be surrounded in parenthesis ) . <p> If there is a file called Default.ini in the program folder it will be used as the default settings file for new users . <p> The location of the settings file ( rainmeter.ini ) can be defined as a command line argument . <p> Meters have now support for a transformation matrix . @ @ @ @ @ @ @ @ @ @ . <h> Rainmeter 0.14 <h> 22 January , 2006 <p> Webparser parses the files as UTF8 by default . The codepage can be changed with CodePage . <p> Added proxy support for the webparser . <p> The reference measures in Webparser can use RegExps to parse the substring . <p> Fixed few graphics problems with the images . <p> Fixed the background rendering bug and incompatibility problem with DynamicWindowSize . <p> Some ! bangs did n't work during the first update cycle . Fixed . <p> Fixed SSID and BANDWIDTH in the WirelessPlugin . <p> WindowMessagePlugin uses PostMessage instead of SendMessage so now you can control Rainmeter with it too : - ) . <p> Fixed couple of crashes with ! RainmeterRefresh-bang . <p> The plugin folder can be defined with RainmeterPluginPath in step.rc . <p> The AdvancedCPU can show the process that currently takes the most CPU time . <p> Substitutes are applied in the order they are defined . <p> Fixed a crash with the PingPlugin and added TimeoutValue which defines the value on timeout . <p> QuotePlugin can scan subfolders and it 's possible to filter the @ @ @ @ @ @ @ @ @ @ directly icon files . <p> Fixed hit test in BITMAP measure when alignments are used . <p> Format in TIME measure can show the time and date as locale specific string . <p> Added OnRefreshAction which is executed when the config is refreshed . <p> Fixed uptime in 64-bit build . <h> Rainmeter 0.13 <h> 20 July , 2005 <p> Compiled as Unicode so this is Win2k/WinXP only from now on . <p> Removed wharf interface . Use ! RainmeterLsBoxHook instead . <p> Some code optimizations . <p> Updated the PCRE-library in WebParser . <p> WebParser : Debug=2 Dumps the downloaded data to a file ( C : WebParserDump.txt ) . <p> Fixed crash bug when plugins were used as the tray measure . <p> UpdateDivider did n't work in meters . Fixed . <p> Empty substitutes are now also possible . <p> Added button meter , which should make button creation easier . <p> Removed size limitation from the section names . It should be now possible to have as many meters and measures in the skins as you like . <p> Meter background can be drawn with a @ @ @ @ @ @ @ @ @ @ overuse it ) . <p> R ( i.e capital r ) in the relative position makes the meter relative to the bottom ( or right ) edge of the previous meter . <p> Created a quote plugin for random texts and images . <p> Created a window message plugin that allows to control other applications ( e.g. Winamp ) . <p> Created a ping plugin for network status checking . <p> STRING meter calculates its size automatically . <p> The window size can be recalculated dynamically with DynamicWindowSize. 
@@256268 <h> Bitmap meter <h> Options <p> Note : The size of the meter is automatically determined by the height of the bitmap image and the number of image frames displayed . Care must be taken to ensure the skin is big enough to hold the meter , using SkinWidth / SkinHeight or a background image meter . DynamicWindowSize will not be effective with this meter . <p> This can be used to display a single frame from the bitmap image , based on the percentage value . <p> Example : If the image contains 5 frames , the first frame is displayed when the percentual measure value is between 0% and 19% , the second frame is shown from 20% to 39% , and so on . <p> The measure returns any integer numeric value equal to or less than 999,999,999 . <p> This can be used to display the entire numeric value using multiple frames from the bitmap image . <p> In this case , you will use BitmapExtend with a value of 1 , and set BitmapDigits with a value equal to the greatest number of digits the @ @ @ @ @ @ @ @ @ @ BitmapImage that consists of the numbers from 0 to 9 , and a BitmapFrames of 10 . This will then display the entire number using the appropriate numeric ( 0-9 ) frames from the bitmap image . <p> BitmapImage <p> Path to the image . The frames in the images can be laid out either horizontally or vertically ( the orientation is determined automatically from the height or the width of the image ) . The size of a single frame is also determined automatically , so no extra space should surround the frames . <p> If BitmapExtend is not set to 1 , the measure being used must return values from 0.0 to 1.0 or must have both MaxValue and MinValue set . <p> BitmapFramesDefault : 1 <p> Number of frames in the image . <p> BitmapTransitionFrames <p> The number of transition frames per each actual frame . The transition frames are frames which are displayed when the measure value changes . The same number of transition frames must be used after each regular frame . The TransitionUpdate option in the Rainmeter section determines the rate at which the @ @ @ @ @ @ @ @ @ @ of the transition is therefore TransitionUpdate multiplied by BitmapTransitionFrames . <p> Note:BitmapFrames always defines the total number of frames in the bitmap , including the transition frames . <p> Example : If the bitmap has 10 values and each transition consists of 4 additional frames , then BitmapFrames should be set to 50 and BitmapTransitionFrames to 4 . <p> BitmapZeroFrameDefault : 0 <p> If set to 1 , a measured percentual value of zero is included in the calculation of the first frame . Since there are 100 percentage " points " from 0-99% , and 101 from 0-100% , BitmapZeroFrame should be used when measuring from 0-100% , or the meter will overrun the bitmap when the value is at 100% . <p> BitmapExtendDefault : 0 <p> If set to 1 the bitmap is extended to display the whole value . <p> Example : If you define a bitmap that defines frames from 0 to 9 you can use this to display the measured value as the bitmap numbers . <p> BitmapDigitsDefault : 0 <p> Number of digits that are drawn ( for BitmapExtend=1 ) . The first frame @ @ @ @ @ @ @ @ @ @ digits as this defines . 
@@256287 <h> Rainmeter 4.1 <p> The following are the changes for the 4.1 beta version of Rainmeter . You can safely install the new 4.1 beta version right over top of your existing Rainmeter 4.0 or earlier installation , and nothing you have done will be lost or changed . There is never any need to uninstall any earlier version of Rainmeter to use the newest version . <p> Note : As of Rainmeter 4.0 , Windows XP and Windows Vista are no longer supported by the application . <p> Rainmeter 4.0 and later require at least Windows 7 with Service Pack 1 and the Platform Update applied . These should have been automatically applied several years ago by Windows Update , but if you have Windows Update turned off you may need to get and apply these updates manually . Windows versions later than Windows 7 are fully supported . <p> If you are on Windows XP or Windows Vista , and ca n't or do n't wish to upgrade , you will need to stay on the 3.3 Release version of Rainmeter . <h> Changes in Rainmeter beta 4.1 @ @ @ @ @ @ @ @ @ @ progresses can always be found at Change Announcements . <p> July 7 , 2017 - Revision 2824 <p> Added Rainmeter : Drag Groups can now be created by selecting skins while holding CTRL-ALT , and dragging one skin , or nudging with the arrow keys will move all selected skins . See Multiple Skins for details . <p> Fixed Formulas : Corrected a missing BitwiseXOR formula operator . <p> July 1 , 2017 - Revision 2822 <p> Fixed Languages : Corrected an encoding problem with the Russian language . <p> June 29 , 2017 - Revision 2821 <p> Added Bangs : New ! EditSkin bang . Opens the current or a specified skin . ini file in the text editor defined in ConfigEditor in the Rainmeter settings , or associated with . ini files in Windows . The default will be Windows Notepad.exe . <p> Added Built-in variables : New #CONFIGEDITOR# variable . The path and executable for the text editor defined in ConfigEditor in Rainmeter settings , or the text editor associated with . ini files in Windows . The default will be Windows Notepad.exe . <p> Changed Rainmeter @ @ @ @ @ @ @ @ @ @ window contents while dragging ' system option if disabled in Windows , to allow skins to draw during dragging and use the snapping feature . <p> June 24 , 2017 - Revision 2815 <p> Changed NowPlaying : For Spotify , the artist and song text is obtained from the Windows titlebar of the Spotify application . Spotify used to prefix the text with " Spotify - " , but they do n't anymore . The change to NowPlaying for Spotify fixes that . For iTunes , the change allows the album art to be retrieved for streaming songs as well as of local only songs . <p> Changed Languages : Updated Dutch , Russian and Swedish translations . <p> Fixed Shape meter : Corrected a bug introduced in a previous beta that broke some features of the stroke style , like StrokeLineJoin . <p> June 7 , 2017 - Revision 2807 <p> Fixed Shape meter : Corrected a bug introduced in r2806 that caused transform modifiers on Path shapes to be invalid . <p> June 1 , 2017 - Revision 2806 <p> Added Bangs : Added new ! FadeDuration and @ @ @ @ @ @ @ @ @ @ activating/deactivating a skin , using the fade-in / fade-out effects on mouse over , or when the fade bangs are used . <p> Changed NowPlaying : Changed the measure values for Progress and SetPosition to use floating point numbers instead of integers for increased accuracy . <p> Fixed Shape meter : Corrected a possible crash or unexpected behavior when Combined shapes were defined before their component shapes in the meter . The order of the options in the meter are now of no consequence , as it is with all other meter and measure options . <p> Added Shape meter : Added Path1 alternative of the Path shape . It will use a different form of the SVG fill-rule when the shape is filled with a color or gradient . This determines what parts of a shape with intersecting segments are " inside " the shape and what are " outside " , for purposes of filling the shape with the defined color or gradient . See Path1 shape for details . <p> Added CoreTemp plugin : The author of both the CoreTemp application and Rainmeter plugin , Arthur Liberman @ @ @ @ @ @ @ @ @ @ the plugin . See CoreTemp plugin for details . <p> Fixed Bangs : Fixed an issue when the config parameter of a bang contained a leading or trailing slash . <p> Fixed InputText plugin : Fixed a possible Rainmeter crash if an input box is open and the skin is deactivated . <p> Fixed Shape meter : Fixed a possible Rainmeter crash if the starting point of a Path shape was invalid . <p> Fixed Bitmap meter : Fixed an issue where BitmapExtend=1 would not increase the meters width and/or height , which would cause the meter to ignore DynamicWindowSize and draw outside its bounds and possibly truncate outside the skin window . <p> Fixed Bitmap meter : Fixed an issue where the Padding height values on the meter would be ignored in some situations . <p> Fixed InlineSetting : Corrected an issue where Rainmeter could crash in some cases when an initial empty string was received by a meter using InlineSetting . <p> Fixed Shape meter : Fixed an issue where certain gradients would not display correctly if there were multiple gradients in a shape meter . 
@@256288 <h> Options <p> Format of the measure value . This can be a combination of text and the following codes : <p> %4 : Days . <p> %3 : Hours . <p> %2 : Minutes . <p> %1 : Seconds . <p> The following modify the codes : <p> ! i ! : Putting this after the format code shows the numbers with no leading zeros . <p> ! 02i ! : Putting this after the format code shows the numbers with leading zeros . The number following the 0 , as in ! 02i ! above , defines the total length you want for the value , padded with zeros as needed to achieve the length . <p> AddDaysToHoursDefault : 1 <p> If set to 1 and if %4 ( days ) is not used in the Format option , %3 ( hours ) is incremented by days * 24 . Set to 0 to disable this behaviour . <p> SecondsValue <p> This will override the default behavior of the measure . Instead of measuring the time since the last restart of the system , this option will define @ @ @ @ @ @ @ @ @ @ be used to format that number of seconds to days , hours , minutes and/or seconds as desired . <p> An example might be : <p> MesureFormatSeconds <p> Measure=UpTime <p> **28;2708;TOOLONG <p> Format= " %4 ! i ! d %3 ! i ! h %2 ! i ! m %1 ! i ! s " @qwx22552 <h> Example @qwx22547 @qwx22570 @qwx22553 @qwx22549 <p> MeasureUptime <p> Measure=Uptime <p> Format= " %4 ! i ! days , %3 ! i ! hours , %2 ! i ! minutes %1 ! i ! seconds " <p> MeterUptime @qwx22560 <p> **25;2738;TOOLONG <p> FontSize=12 @qwx22554 @qwx22565 @qwx22561 @qwx22550 <p> Text= " Uptime : %1 " <p> Note for Windows 8 or later : <p> Starting with Windows 8 , the standard " shut down " functionality now does a " hybrid shut down " , in order to make the system start much faster when you start it up again . What this does is " hibernate " the system / kernel part of Windows , and shut down the user part . When Windows restarts , the underlying boot up of the system much @ @ @ @ @ @ @ @ @ @ normally . <p> Windows ( and thus Uptime ) does not see this as a full shutdown of your system . So the system uptime value will not be reset to zero . If you want more control over this , you can create two shortcuts , and use the one you want depending on whether you wish a " full " shut down , or the normal " hybrid " one . 
@@256292 <p> Note : The maximum value of HighBound is a 32bit signed integer , or 2147483647 . <h> Additional Formula Syntax <h> Functions <p> Note : These functions are only available in the context the Formula option of a Calc measure , and not in other ( formulas ) in other measure or meter types . <p> Random : A random number . The number will be between and include the values set in LowBound and HighBound . <p> Counter : The number of update cycles from the time the skin is loaded . This number only resets when the skin is unloaded and then loaded again - not when the skin is refreshed . <h> Other Bases <p> The Calc measure allows numbers to be represented numbering systems other than decimal . To use another base , prefix the number with a zero then the letter representing the system you wish to use . The following are accepted prefixes , which are case ( lower ) sensitive : <p> 0b - Binary number ( base 2 ) ( ex : 0b110110 - returns 54 in decimal ) <p> 0o @ @ @ @ @ @ @ @ @ @ 0o123 - returns 83 in decimal ) <p> 0x - Hexadecimal number ( base 16 ) ( ex : 0xF1 - returns 241 in decimal ) <h> Measure Values <p> The use of measure values in the Formula option of a Calc measure does not require the use of Dynamic Variables . Simply omit the and the number value of the measure will be retrieved . If the measure does not have a number value , 0 will be used . Section Variables , Variables and Built-in Variables follow the normal rules . For more information see the Dynamic Cheat Sheet . 
@@256309 <h> More <h> Publishing Skins ( . rmskin ) <p> Rainmeter includes tools that make it easier to share skins that you have created with other users . This page describes how to use the Skin Packager feature , and offers some guidelines for publishing a new skin in a public gallery , such as deviantArt . <h> Skin Packager <p> The Skin Packager is used to create a " package " file that contains all of the files needed to install a skin in Rainmeter . <p> The package file is created in the " Rainmeter Skin Installer " format , with the extension . rmskin . The file is actually a modified zip file , with the addition of certain metadata that is used to verify the integrity of the package . ( As of version 2.3 , Rainmeter will not install a normal ZIP file changed to the " . rmskin " extension ; the package must be created with the Skin Packager . ) <p> To launch the Skin Packager , open the Manage window and click the button labeled Create . rmskin package ... in @ @ @ @ @ @ @ @ @ @ <p> Start by providing some basic information about the skin : <p> Name : The name of the skin . ( Required . ) <p> Author : The name of the skin 's author . ( Required . ) <p> Version : The current version of the skin . This can be a number ( such as " 1.0 " ) , a date ( " 15 November 2008 " ) , or any other identifying string . ( Optional . ) <p> Next , choose the files that will be added to the package : <p> Add skin ... Choose the root config folder of your skin . This is the folder that will be copied to the user 's Skins directory when the skin is installed . It must be a single folder that contains the entire skin or skins , including any resource files needed , such as addon utilities or fonts . You may choose a folder from your own Skins directory , or somewhere else on your computer . Only one root config folder is allowed in a single package . ( Required . ) @ @ @ @ @ @ @ @ @ @ layouts to be installed along with the skin . <p> Add plugin ... You may choose any number of plugins to be installed along with the skin . Only custom plugins should be distributed in this way . The standard plugins described in this manual are included with all versions of Rainmeter , and never need to be installed separately . To include a custom plugin , you must provide both the 32-bit and 64-bit versions of the plugin to ensure compatibility on all systems . <p> Click Next to continue . <h> Step 2 : Options <p> All of the following fields are optional . The default settings are appropriate for most skins . <p> Save package to : Choose where the new package file will be created . Defaults to the current user 's Desktop folder . <p> After installation You may choose one of two actions for Rainmeter to take after installing the skin . ( Before installing , the user will have the option to skip this action . ) <p> Load skin : You may choose one of the skin " . ini " files @ @ @ @ @ @ @ @ @ @ alongside any other skins that the user is already running . This setting is recommended for most skins . <p> Load layout : If you added any layouts to the package , you may choose one layout to be loaded automatically , replacing the user 's existing layout . <p> Minimum requirements You may set the minimum versions of Rainmeter and/or Windows required for the skin . Rainmeter will not install the skin on a system that does not meet these requirements . <p> Rainmeter version : Defaults to the current version of Rainmeter on your system . If you are sure that the skin will work on an earlier version , you may change the minimum requirement accordingly . Rainmeter version numbers are written in the form **26;2765;TOOLONG . For example , Rainmeter 4.0.0 ( r2551 ) would be written as 4.0.0.2551 . <p> Note That the revision number is just a minimum , intended to allow you to target a specific build of Rainmeter . So to target the . rmskin at any revision of 4.0 or later you can leave off the revision number , and just @ @ @ @ @ @ @ @ @ @ later with 3.3.0 . <p> Windows version : Defaults to Windows 7 , which is the lowest version of Windows supported by Rainmeter 4.0 or later . Some skins may require higher versions of Windows , depending on their plugins , addons , or other factors . You can set this to a lower version of Windows , but should only do so if you are targeting a Rainmeter version less than 4.0 , such as 3.3.0.2519 . <h> Step 3 : Advanced <p> For additional options , click the Advanced tab at the top of the window . <p> Header image : You may choose a custom header image to be displayed in the Skin Installer . The image must be a bitmap image ( . bmp ) that is exactly 400x60 pixels in size . <p> Variables files : Some skins have one or more include files to store variables that can be changed by the user . If a user is reinstalling or upgrading a skin that they already have in their library , they will most likely want to preserve their existing preferences . You may @ @ @ @ @ @ @ @ @ @ the existing variable values are used instead of the defaults in the package . <p> Merge skins If selected , the Skin Installer will not remove any existing files found in the user 's Skins directory . ( Normally , the root config folder is removed and replaced with the version in the skin package . ) This can be used to install an " expansion " or a " patch " to a previously-installed skin , without duplicating unchanged files . <p> Finally , click Create package to complete the process . It may take several seconds to create the package , depending on the size of your skin . The file will be saved in your chosen location as NameVersion.rmskin ( using the " Name " and " Version " fields that you entered in the first step ) . <h> Hidden Files <p> The Skin Packager will ignore any hidden files or folders in your root config folder . You can take advantage of this behavior by storing development files ( such as Photoshop " PSD " files , or backup copies of skin code ) as @ @ @ @ @ @ @ @ @ @ final product . <h> Publishing Guidelines <p> When distributing a skin to a small or private group of users , strict adherence to standards probably is n't too important . However , you may want to publish your finished work in a public repository like the Rainmeter skin galleries on deviantArt for other users to discover , download and share . In this case , taking the time to follow a few simple guidelines will be helpful to you , your users , and the Rainmeter community at large . <h> Use the Skin Packager . <p> Most sites that allow users to publish their Rainmeter skins now require the skins to be uploaded in the official " . rmskin " format created by Rainmeter 's built-in Skin Packager . This is not only more convenient for regular users , since a skin package can be installed automatically in just a few clicksit is also safer . Rainmeter always checks the validity of a skin package before installing it , to ensure that the package was created by the Skin Packager and not modified or tampered with in any way @ @ @ @ @ @ @ @ @ @ disguised as Rainmeter skins has been an occasional concern for the community . By using the official format , you can help us reduce this concern by promoting a more secure method of distribution . <h> Use metadata . <p> Many skin authors tend to ignore the Metadata section in their skins , because it has no effect on a skin 's function or performance . But there are good reasons to make sure your skin is fully-tagged before you release it into the wild . A skin with complete metadata is easier to find in the Manage window , and offers a reliable , built-in way to provide users with setup and usage instructions , or at least direct them to a webpage or readme file with more information . <p> In addition , because a skin 's code is often copied or excerpted in posts and comments across the Internet , good metadata makes it easier to trace the code back to its source . The Version tag is especially helpful to avoid confusing multiple revisions of the same skin that have been released at different times . @ @ @ @ @ @ @ @ @ @ respect others ' ) . <p> The Rainmeter community is built around a free , open exchange of ideas and resources . We wholeheartedly encourage skin authors to release their works under terms that allow other users to borrow their code and concepts , modify them , and release them in a new , unique form . We believe that this kind of frictionless collaboration is a big part of what has made the Rainmeter ecosystem thrive . <p> There are a number of open-source software licenses available , and it could n't be easier to add them to your Rainmeter skin : just paste the name into the License tag in your Metadata section . The following licenses are commonly used for Rainmeter skins , plugins and addons : <p> That said , the same rule applies to Rainmeter skins as it does to any other content on the Internet : if you are not explicitly given permission to use it , you do n't have permission . You really need some indication of consent from the creator - even a quick email is enough . In addition , @ @ @ @ @ @ @ @ @ @ creators when you post your own skin , even if their license does n't require it . This means not only the original author of some code that you have modified , but also any images , addons , plugins and fonts that are not your own . <p> Make sure your license and credits are included both on your download page ( for example , in the deviation comments on deviantArt ) and somewhere in your skin package ( either in your metadata tags , or a separate " readme " file ) . <h> Clean up your layouts . <p> The ability to include a custom layout with your skin can make for a great presentation , especially in a large " suite " , where it is helpful to provide a template or starting point for your users to get started on customizing their desktops instead of loading skins one by one . <p> While arranging a layout on your own desktop , and using the Manage window to save it to a file , there are some steps you can take to make your layout load @ @ @ @ @ @ @ @ @ @ Remove Skin sections that do n't belong to your suite . An easy way to keep only the sections you need is to check the " Exclude unloaded skins " option when saving the layout . <p> Remove options from your skin sections if they are unchanged from Rainmeter 's default settings , such as Draggable or SnapEdges . This will both reduce the size of your layout file , and make it easier to keep track of your code if you need to edit any layout settings by hand . <p> Use the " From right " and " From bottom " options to make sure your skins are loaded in the correct position regardless of the user 's screen resolution . If you need to determine the skin 's position in a more complex way , you can edit the " Rainmeter.ini " settings file for your layout and write your own formulas for the WindowX , WindowY , AnchorX and AnchorY options for each skin section , using built-in variables . Here are some basic formulas you can use : <p> 1 . " Offset " should @ @ @ @ @ @ @ @ @ @ #WORKAREAX# + 75 ) . If you do n't need an offset ( the skin is exactly centered or adjacent to the edge of the screen ) , leave it out . " SkinWidth " and " SkinHeight " should be the probable width and height of the skin . 
@@256310 <h> More <h> ActionTimer plugin <p> Plugin=ActionTimer <p> Executes a series of Rainmeter actions independent of the normal skin Update cycle . This can allow the series of actions to be executed faster ( or slower ) than the rate defined in Update in Rainmeter and can be executed as fast as 1 millisecond apart . <h> Overview <p> To understand the purpose of ActionTimer , it helps to have some understanding of how Rainmeter runs a skin . On each skin Update , the value set in the Rainmeter section of the skin , Rainmeter does the following : <p> Update all measures <p> Execute measure actions <p> Update all meters <p> Redraw the skin <p> Update has a lower limit of 16 , or once every 16 milliseconds . This means that any series of separate actions can only execute every 16 milliseconds . In addition , setting a very low Update rate in Rainmeter can cause the entire skin to use a lot of CPU resources , when you may only need it to be " fast " for a specific purpose , perhaps some animation or @ @ @ @ @ @ @ @ @ @ take in the context of the Update cycle are " blocking " , in the sense that Rainmeter must complete them before it is able to continue with other normal skin processing . <p> Rainmeter will run both of the actions in the same Update cycle , before it updates the meters and redraws the skin , and so in effect they both visibly happen " at once " . The meter wo n't visibly move to " 5 " and then " 10 " , but will just jump straight to " 10 " . The only current solution is to have the two actions take place in two Update cycles , and thus the fastest the series can ever execute is every 16 milliseconds . <p> Now 16 milliseconds seems pretty fast , and it is . However , if you have some animation with 100 " frames " or want to do some " transition " of a meter ; fading the opacity , shifting the color or sliding the position , it is in fact visibly quite slow . <p> Do n't forget as well , @ @ @ @ @ @ @ @ @ @ will have to do everything in the skin . Update all measures , take all actions , update all meters , and redraw the skin . In reality , even a moderately complicated skin is n't really going to update every 16 milliseconds in any case , it will at best " try to " . <p> What ActionTimer does is execute the list of actions defined in ActionListN , one after the other , in a separate thread outside the normal Update cycle , as fast as it possibly can . This is REALLY fast . The Wait N values that you put in between each action in the list is what stops them from appearing to just happen all at once , and allows you to completely control the speed of the series of actions . Wait can be any number , from 1 ( one millisecond ) to whatever you need . <p> Since the actions in ActionListN are executed in a separate thread from the main Rainmeter process , the skin will carry on updating normally , while the ActionTimer plugin will control the actions in @ @ @ @ @ @ @ @ @ @ very CPU efficient , it is not " free " . The actions are executed by the plugin in a separate thread from the rest of the Rainmeter skin , allowing the skin to continue to process normally while the plugin actions are executing , with the plugin communicating with the skin via window " messages " to the Rainmeter message queue . This allows the plugin to instruct the skin to " do this now " , much as a MouseOverAction is recognized and acted upon immediately . <p> Some care must be taken however , not to overwhelm the message queue . Things done with ActionTimer in general should be short targeted actions , like a meter transition or short animation . Ensure that there is at least some " wait " time between actions , so Rainmeter has time to handle other messages in the message queue . In addition , keep in mind that ! Redraw actions can be relatively CPU expensive , particularly if a lot of image resizing is involved . <p> ActionTimer does not support , and should not be used , to @ @ @ @ @ @ @ @ @ @ long duration combined with a very rapid update . If the Rainmeter message queue becomes overwhelmed , the skin can get laggy and unresponsive to mouse actions you might take . <h> Options <p> Each ActionListN will execute one or more Actions separated by the pipe character . In addition there are two list commands , Repeat and Wait , that can be used in the ActionList . In a sense , this option is a " script " of what you want the plugin to do when the ActionList is triggered . In its most simple expression , it is <p> ActionList1=Do this Wait this long Do that <p> ActionList components <p> Action name The plugin will execute what is defined in the named Action option . The action name can be anything . This is simply the name of the Action option , and should never be actual bangs or commands itself . The actual skin bangs or commands to be executed are defined in the Action option . <p> RepeatAction name , Wait time number , Repeat count number This will repeat the named Action option Repeat @ @ @ @ @ @ @ @ @ @ between each . Note that Wait time is not applied after the last execution of Action name , only between each . <p> Waitnumber of milliseconds This is used to create a pause or wait in milliseconds between each named Action or other component in the ActionList . There should always be a Wait of at least 1 millisecond between each ActionList component . <p> The pipe character is used to separate each of the ActionList components . <p> Since the actions are being done independent of the Update cycle of the skin , you must explicitly do any ! UpdateMeter and ! Redraw commands needed to have the skin actually reflect any changes to meters made in the action . <p> If you are using ! SetVariable to change and use any dynamic #Variables# in the action , you will need to ! UpdateMeasure the plugin measure between each execution of the action option , to ensure the measure has the most current value for the #Variable# . <p> This can be simplified by setting and using a #Variable# that will take the appropriate update actions , and then @ @ @ @ @ @ @ @ @ @ option . @qwx22548 <p> U= ! UpdateMeasure MeasureChangeFont ! UpdateMeter * ! Redraw <p> MeasureChangeFont @qwx22557 <p> Plugin=ActionTimer <p> ActionList1=SetFontSmall Wait 1000 SetFontBig <p> SetFontSmall= ! SetOption SomeMeter FontSize " 10 " #U# <p> SetFontBig= ! SetOption SomeMeter FontSize " 15 " #U# <p> IgnoreWarningsDefault : 0 <p> Any ActionListN must completely finish all actions in the list before it can be executed again . Any command to execute the list while it is still performing actions will be ignored , and a warning message will be generated in the log . There may be occasions where this is in fact desired behavior , and the log error messages can be suppressed . <p> 0 - Warnings in the log are produced . ( default ) <p> 1 - Warnings in the log are suppressed . <h> Plugin Commands <p> The plugin will take no action unless triggered with one of these commands . <p> Execute ActionList number <p> Execute the correspondingly numbered ActionListN . <p> Example : <p> LeftMouseUpAction= ! CommandMeasure MeasureName " Execute 1 " <p> Stop ActionList number <p> Stop the correspondingly numbered ActionListN . <p> As @ @ @ @ @ @ @ @ @ @ in the list before it can be executed again . Any command to execute the list while it is still performing actions will be ignored , and a warning message will be generated in the log . <p> The Stop N command will immediately terminate and reset the corresponding running ActionListN , so it may be executed again . 
@@256316 <h> More <h> IfConditions <p> IfCondition options are used in any measure , of any type , to evaluate a mathematical formula . The formula will be evaluated as " true " or " false " , and will execute IfTrueAction or IfFalseActionaction options , which will contain one or more Bangs or commands . <p> Note : IfCondition can only be used to evaluate a numeric mathematical formula . No string values may be used in the condition test . See IfMatchActions to test and take action on string values . <p> The formula uses the same syntax as described on the Formulas page but does not need to be surrounded in parenthesis . Like the Calc measure , measure names do not need brackets and are always dynamic when referenced inside the IfCondition . <p> There can be multiple sets of condition and action options in the measure , by using IfCondition2 / IfTrueAction2 / IfFalseAction2 and so on . <p> IfConditions are similar in functionality to IfActions , with a few important and powerful differences . <p> The formula is not based on the value of the @ @ @ @ @ @ @ @ @ @ measures , variables or section variables . <p> There can be an IfTrueAction , IfFalseAction or both for each IfCondition , so you can take appropriate actions not only when the result is " true " , but also when it is " false " . <p> The syntax allows for a single IfCondition to embed logical AND &amp;&amp; and OR comparisons in the formula . Unlike IfEqualValue for instance , which allows for a single comparison , you could use IfCondition= ( MeasureName = 5 ) ( MeasureName = 10 ) , to check if the value of MeasureName is " 5 " OR " 10 " . You can also use the full range of logical operators , so rather than being limited to " equal " , " above " or " below " , you can use any of **37;2793;TOOLONG . <h> Options <p> IfCondition , IfCondition2 , ... , IfConditionN <p> A mathematical formula , which when evaluated will result in " true " or " false " . <p> Note : The comparison on either side of logical AND &amp;&amp; and OR operators must @ @ @ @ @ @ @ @ @ @ IfTrueAction2 , ... , IfTrueActionN <p> Optional action to be executed when the formula expressed in IfCondition results in " true " . The action is executed only once when the condition becomes " true " , so it needs to become " false " and again " true " to execute again . <p> IfFalseAction , IfFalseAction2 , ... , IfFalseActionN <p> Optional action to be executed when the formula expressed in IfCondition results in " false " . The action is executed only once when the condition becomes " false " , so it needs to become " true " and again " false " to execute again . <p> IfConditionModeDefault : 0 <p> If set to 1 , the evaluation of the condition will execute the appropriate actions in IfTrueAction or IfFalseAction on every update of the measure . <p> Note : Care should be taken not to create an infinite loop in the actions . In particular , ! Refresh , ! Update and ! UpdateMeasure #CURRENTSECTION# should generally be avoided when IfConditionMode=1 . <h> Example @qwx22547 @qwx22570 @qwx22553 @qwx22549 <p> MeasureCPU <p> Measure=CPU <p> IfCondition=MeasureCPU @ @ @ @ @ @ @ @ @ @ usage is less than 10 percent " 
@@256323 <h> About <p> Rainmeter is the best known and most popular desktop customization program for Windows . Enhance your Windows computer at home or work with skins ; handy , compact applets that float freely on your desktop . Rainmeter skins provide you with useful information at a glance . It 's easy to keep an eye on your system resources , like memory and battery power , or your online data streams , including email , RSS feeds , and weather forecasts . <p> Many skins are even functional : they can record your notes and to-do lists , launch your favorite applications , control your media player - all in a clean , unobtrusive interface that you can rearrange and customize to your liking . <p> There are thousands and thousands of skins available , crafted by a large and ever-growing community of Rainmeter users . <p> Rainmeter is not just an application , it is a robust toolkit . Create and modify your own skins in a simple language that 's easy to learn , with the help of our extensive documentation , getting started guide and @ @ @ @ @ @ @ @ @ @ of powerful built-in modules that do all the heavy lifting , and create interactive meters to display that information however you decide . In this way , Rainmeter brings productive innovation together with creative artistry like no other platform of its kind . <p> Rainmeter is a community . People in our forums are always happy to help you get started or answer questions . Over the last few years , a thriving community has built up around Rainmeter , as average users freely contribute their own original skins , their generous knowledge and support , and their inspirational ideas to a project whose scope and capabilities are constantly expanding . <p> Rainmeter is designed for YOUR system . Rainmeter uses very little CPU and RAM resources , has a tiny space footprint , and will run perfectly well on any hardware using Windows 7 through Windows 10 . <p> Rainmeter is free and open source . Rainmeter is open source software distributed free of charge under the terms of the GNU GPL v2 license . If you want to get involved , check the Rainmeter GitHub repository . 
@@256327 <h> Discover <p> Rainmeter comes with a few simple starter skins that provide a good place to start learning how to use and modify Rainmeter . There is also a vast and growing community of Rainmeter users who share the skins they create . Listed below are some of the better places where you can get new skins to use and modify . Download as many different skins as you like , you can always switch between them . 
@@256332 <h> More <h> Basic Tutorials <p> This is the first series of tutorials for Rainmeter . It is meant to follow Getting Started and assumes that you have gone through the steps described there . If you have not been through these steps , you should start here . <p> This series starts by creating a simple first skin , then covers the anatomy of Rainmeter skins , focusing on each of the basic skin properties in turn : <p> Meters A skin 's display elements . How to create objects that can be seen and clicked . <p> Measures A skin 's informational elements . How to pull data from your computer or the Internet . <p> Bangs A skin 's interactive elements . How to send commands to Rainmeter or other applications . <p> Updates A skin 's internal clock . How to control the timing and synchronicity of skin events . <p> Variables A skin 's data elements . How to manipulate independent strings that are used to store many kinds of information . <p> This series is in development . Check back soon for the first installment. 
@@256333 <h> Contents <h> More <h> Button Images <p> This is about how to create the images you use in Rainmeter with a Button meter : <p> MeterSample <p> Meter=Button <p> X=1 <p> Y=1 <p> ButtonImage=MyButton.png <p> ButtonCommand= " SomeCommand " <p> Buttons are a special kind of meter in Rainmeter , and require a special kind of image . Rainmeter , like Windows , wants a button to have three " states " . " UP " , " DOWN " and " OVER " , or " When your mouse is n't on the button " , " When you are clicking on the button " and " When you are hovering over the button " . This is referred to as a " bitmap " image . <h> Alternative 1 - Create the bitmap in your image editing software <p> Create the image in Photoshop , Gimp , Paint.NET , whatever you like . It 's VERY helpful if the tool has the capability to create " layers " however . <p> Create a new image with a transparent background which has the " HEIGHT " of the @ @ @ @ @ @ @ @ @ @ WIDTH " which is three times the width of the image . This is because Rainmeter will want to find three horizontal versions of the image in the file ; one for " UP " , one for " DOWN " and one for " OVER " - in that order . <p> Each of the layers can have a different visual appearance ( and positioning if you want the button to " move " when clicked ) so that when you use the button it is clear what state the button is in . <p> Save the image as a . png ( for a transparent background ) or . jpg ( solid background ) <p> When you use the button in your code , Rainmeter chooses the 1/3 of the overall image to display depending on the state of the button . <h> Alternative 2 - Create the image with three separate image files , and ImageMagick <p> It can be challenging to properly create the bitmap image in a tool like Photoshop or Gimp if you are not used to using them . The important thing is @ @ @ @ @ @ @ @ @ @ file in a way that when the image is divided into three equal pieces by Rainmeter , the different " state " images are positioned correctly so the image does n't appear to " move " when you hover over it or click it . It can take some trial-and-error to get this right using layers in a tool like Photoshop . <p> There is another approach that can take some of the guess-work out of this . What we want to do in this case is have three separate images , one for the " UP " state , one for the " DOWN " state , and one for the " OVER " state . <p> The only requirement is that the three images be exactly the same size in width and height . <p> So you might have three separate image files you downloaded from somewhere , or you might create a single image in your image editing software , and then save that file three times , after making whatever " transition effect " changes you want to reflect the " states " . In either @ @ @ @ @ @ @ @ @ @ " , one for " DOWN " and one for " OVER " . <p> Let 's assume we end up with ComputerUp.png , ComputerDown.png and ComputerOver.png <h> Get ImageMagick <p> This is a free utility you can GET HERE Download and install ImageMagick . It will by default install to C : Program FilesImageMagick , and add itself to the Windows PATH . <p> Start a Command Prompt window . <p> In the Command Prompt window , combine your three files to a single bitmap . <p> Use the ImageMagick tool to combine the three images into the single bitmap image file . Any output image format can be used , but if your three files have transparency , you will need to output to . png. 
@@256338 <p> The Net measures internally measure the traffic across the NIC ( Network Interface Controller ) in bits per second . The measures automatically divide both this internal measurement and any MinValue or MaxValue options by 8 , ( there are 8 bits in a byte ) in order to use and display the values as bytes in measures and meters . <p> Note that this means that any MinValue and MaxValue options on the measures , used to support a percentage in meters , should be set by you in bits , not bytes . Rainmeter itself will do the conversion to bytes automatically when the value(s) are used . <p> Per Second <p> The measured value is the number of bytes per second , factored by the total update rate of the measure , as defined by the Update option for the skin and any UpdateDivider option on the measure . Since the usual display of network traffic is in bytes per second , it is advisable to either set Update=1000 in the Rainmeter section of the skin , or add UpdateDivider options to NetIn / NetOut / @ @ @ @ @ @ @ @ @ @ Updating these measures at a rate other than once a second will return results that are confusing at best . <p> LAN and WAN <p> The measured value is simply the network traffic in and out of the network interface controller ( NIC ) of the computer running the skin . If the computer is on a local network through a router ( LAN ) , the traffic will include all interaction between the computer and both the router and any other devices on the LAN . It will not include traffic directly to and from other devices and the internet ( WAN ) , and so can not be used to determine the amount of internet traffic . <p> You just can not isolate traffic between your computer and another devices on the local network ( LAN ) , from traffic coming from or going to the internet ( WAN ) , nor can you ever know what some other device on your LAN is doing with the internet . If you are on some kind of " metered " connection to the internet , do not try to @ @ @ @ @ @ @ @ @ @ the most " approximate " kind of way . <h> Options <p> The string value Best , which will automatically detect the active interface . <p> The name of the network interface controller . For example , Qualcomm AR938x Wireless Network Adapter . <p> The index number of the network interface controller . If set to 0 , ( default ) all interfaces are measured . <p> Example : Interface=Best <p> Notes : <p> When the option is set to Best , the function will select a " wired " network connection in preference to a " wireless " one , if both are active . <p> When the option is set to Best , DynamicVariables=1 must be set on the measure if you want it to automatically react to changes in the active interface . This should be done if for instance you have a laptop or other computer that you switch between wired and wireless connections . <p> CumulativeDefault : 0 <p> If set to 1 , measures the cumulative network traffic . This can be used to measure the cumulative NetIn , NetOut or NetTotal traffic through @ @ @ @ @ @ @ @ @ @ The network traffic cumulative statistics are persistent and stored when Rainmeter is exited . They can be reset by either using the " Reset statistics " button in the " Settings " tab of the Manage interface , or by using the ! ResetStats bang in a skin . <h> Deprecated Options <p> NetInSpeedNumber of Bytes per second <p> This option replicates the behavior of setting MaxValue on the measure . There is no reason to prefer this over MaxValue . <p> While this option does not automatically divide the value by 8 to convert from bits to bytes , and is just set with bytes to start with , most sites that allow you to measure your total bandwidth , like speedtest.net , will return values in bits per second , and it is easier to just use those values in bits in MaxValue and let Rainmeter do the math . <p> NetOutSpeedNumber of Bytes per second <p> This option replicates the behavior of setting MaxValue on the measure . There is no reason to prefer this over MaxValue . <p> While this option does not automatically divide the @ @ @ @ @ @ @ @ @ @ and is just set with bytes to start with , most sites that allow you to measure your total bandwidth , like speedtest.net , will return values in bits per second , and it is easier to just use those values in bits in MaxValue and let Rainmeter do the math . 
@@256352 <h> Contents <h> More <h> Advanced . rmskin Options <p> There are times that you want to release a new version of a skin or " suite " of skins . This might be to : <p> Completely replace the skin or suite of skins . <p> Simply create a new . rmskin with all files . <p> The installing user may or may not have installed the previous version of your . rmskin . It is just a " new " install if not , and a " replace " if so . <p> Change only some files in a suite of skins while leaving others alone . <p> Create a new . rmskin , with the same root config folder , but only the files you want to replace in the folder tree . You must use Merge skins . ( See below for instructions ) <p> The installing user must have installed the previous version of your . rmskin . <p> Add new skins and / or other files to an existing installation . <p> Create a new . rmskin , with the same root config folder @ @ @ @ @ @ @ @ @ @ the folder tree . You must use Merge skins . ( See below for instructions ) <p> The installing user must have installed the previous version of your . rmskin . <p> With any of these three approaches you use , ( or a combination of the second and third ) one thing that needs to be kept in mind is that a user may have set the variables you put in to have the skin work correctly for that user . This might be variables for cosmetic colors , fonts or sizes , or variables for gmail logins , RSS feed URL 's , weather location codes or other functional settings for the user . <p> Variables are key=value options in a Variables section in a . inc or . ini file . <p> In any case , unless you want to the user to have to " start over " with configuring your skin or suite with their personal information and cosmetic choices , You should consider using one or both of the following advanced options for your new . rmskin . <h> Using Advanced Options <p> Create @ @ @ @ @ @ @ @ @ @ have selected the root config folder for the skin or suite of skin , click Next . Set any options on the Options tab before continuing . <p> Select the Advanced tab on this dialog : <h> Advanced option - Variables files : <p> Specify the file location starting with the root config folder . Multiple files can be added by separating them with the pipe symbol . <p> Any existing variables that are in both the current file(s) and the . rmskin are left unchanged . <p> Any existing lines that are in both the current file(s) and the . rmskin and are not variables are replaced . <p> Any lines of any type that are in the . rmskin and not in the current file(s) are added . <p> Any lines of any type that are in the current file(s) and not in the . rmskin are removed . <h> Advanced option - Merge skins : <p> Result : <p> The root config folder is not removed or backed up . <p> Any new files in the . rmskin are added . <p> Any changed files in the @ @ @ @ @ @ @ @ @ @ are in the root config folder but not in the . rmskin are left unchanged . <p> Merge skins can not be used to remove any files . <h> Both Variables files and Merge skins : <p> One or more . ini ( or . inc ) files are listed in Variables files , and Merge skins is checked . <p> Result : <p> Both actions are done . <p> Can be used used to change a skin . ini file while leaving existing variable values set by the user unchanged . <p> Can be used to add lines to a . inc file , while leaving existing variable values set by the user unchanged . <h> Neither advanced option : <p> Result : <p> The root config folder is backed up and removed . <p> All files are completely replaced . <h> What wo n't work : <p> The installing user ca n't have added any new files that are not in the . rmskin , unless Merge skins was used . <p> The installing user ca n't have added any new lines of any type in any file @ @ @ @ @ @ @ @ @ @ Final note : It would n't do any harm , and might even make you a friend , if you just add files that contains variables to the " Variables files " option in " Advanced " even if it IS N'T a new version of your skin . Just always do it ... Why ? If an end-user installs your suite , does all the setting up of all the variables for his personal information and all that , then screws up one or more skins trying to customize something , they will thank you when you tell them they can just " re-install " your . rsmkin again and get back to square one without losing all the variables they set . 
@@256357 <h> Contents <h> More <h> Dynamic Cheat Sheet <p> When you want to use the current value of a Variable , Built-in Variable , Section Variable , or Measure name anywhere in a Measure or Meter or Bang in Rainmeter , It is important to know when that value is automatically treated as " dynamic " ( always reflects the current value ) or needs to be resolved dynamically when used , with the DynamicVariables=1 option . <p> The following is a " cheat sheet " for the rules that apply in different situations . <p> Dynamic " Variables " : <p> If you want to reference the current value of a Variable in a meter or measure , and that variable is dynamically set or changed with ! SetVariable , you must use DynamicVariables on the meter or measure using it . <p> If you want to reference the value of a measure in a meter or measure , then you must enclose the measure name in and have DyanmicVariables=1 on the meter or measure using it . This uses the string value of the measure as a Section @ @ @ @ @ @ @ @ @ @ binding " a measure to a meter with the MeasureName option , you do n't need either or DynamicVariables . <p> If you are " binding " a parent WebParser measure to a child measure with the URL option , you need the , but not DynamicVariables . <p> If you reference measures other than the parent in the URL option of a WebParser measure , a special &amp;MeasureName Section Variable with and DynamicVariables must be used . <p> The Formula option in a Calc measure and the IfCondition measure option ( Rainmeter 3.1 or later ) do not require either or DynamicVariables when referencing measures . Section Variables , Variables and Built-in Variables follow the normal rules in these options . <p> Dynamic " Bangs " : <p> Measures in a ( formula ) , Section Variables , Variables , or Built-in Variables used in any Bang do not require DynamicVariables . Things in Bangs are just always resolved dynamically . <p> If the ! SetOption bang is used with Any Measure in a ( formula ) , Section Variable , Variable , or Built-in Variable , the meter @ @ @ @ @ @ @ @ @ @ for one update . If the ! SetOption is done on every update , then DynamicVariables is not needed on that target meter or measure . 
@@256366 <h> More <h> Rainmeter section <p> The Rainmeter section of Rainmeter.ini defines global options . <h> Options <p> SkinPath <p> Path to the skins folder . <p> ConfigEditorDefault : Notepad <p> Defines the path to the text editor used to edit Rainmeter 's configuration files when " Edit Skin " or " Edit Settings " is chosen from the context menu or Manage . Relative paths can be used here , which may be useful for portable installs . <p> Note : This should always be a plain text editing application , and should never be any " word processing " program like Word or Wordpad . More fully-featured alternatives to the default Windows Notepad are discussed at Notepad Alternatives . <p> TrayIconDefault : 1 <p> Set to 0 to remove the notification area ( tray ) icon . <p> Note : If all skins are unloaded , the notification area icon will appear , regardless of this setting , in order to avoid a situation where you ca n't interact with Rainmeter at all . <p> TrayExecuteM , TrayExecuteR , TrayExecuteDM , TrayExecuteDR <p> Action to be executed when @ @ @ @ @ @ @ @ @ @ the notification area icon . Left-clicking the icon will always load the Manage dialog . <p> With multiple monitors , use DesktopWorkArea@N ( where N is the number of the monitor ) to set the work area of a specifc monitor . DesktopWorkArea and DesktopWorkArea@0 both represent the primary monitor . <p> Note : Moving the taskbar will reset the workarea to Windows ' default , as will changing screen resolution . <p> **26;2832;TOOLONG : 0 <p> If set to 1 , DesktopWorkArea will be define margins relative to the edges of the screen . <p> Example : With DesktopWorkAreaType=0 and **29;2860;TOOLONG , maximized windows will use an area of 600x500 pixels , which is located 10 pixels from the left and 20 pixels from the top of the screen . With DesktopWorkAreaType=1 and **27;2891;TOOLONG , the area for maximized windows will be 10 pixels from the left , 20 pixels from the top , 30 pixels from the right , and 40 pixels from the bottom of the screen . 
@@256380 <h> Contents <h> More <h> Developers <p> This page is intended for people who want to work with the source code for Rainmeter . This can be to make or suggest changes to the project C++ source code , or to create plugins for Rainmeter in C++ or C# . In addition , there is information on interacting with Rainmeter from external applications . <p> The Rainmeter project is primarily written in C++ using Microsoft Visual Studio 2017 . In addition , custom plugins can be written and distributed separately from the official Rainmeter project using C++ or C# . This page assumes familiarity with Visual Studio and either C++ or C# . <h> Project Source Code <p> If you simply wish to obtain the source code to examine it or make a local change to how something works for your own use , you can simply download a . zip file from Download ZIP . <p> The only software you will need is Microsoft Visual Studio 2017 or the free Microsoft Visual Community which can be obtained at Download Visual Studio . Be sure to download and apply any @ @ @ @ @ @ @ @ @ @ containing the project code from the . zip file , and open Rainmeter.sln in Visual Studio . You can then set the desired Solution Configuration and Solution Platforms fields and build the solution to create Debug or Release versions in x32 or x64 architectures . <h> Creating a Project Repository <p> To do any serious work on the project source code , or to get involved in the development of Rainmeter , you will want to create a local repository and install a couple of tools to help manage your copy of the project . <p> Then , unless you are a fan of the Windows cmd.exe command line , it can be useful to install a Windows front-end client to help manage your Git repositories . There are several options for that , two of the more popular are TortoiseGit for Windows and GitHub for Windows . <p> To create your repository of the project code , first create an account on GitHub.com . Then from the Rainmeter Repository on GitHub you can fork the project to your account . Now you can use either the Git command line @ @ @ @ @ @ @ @ @ @ repository from your personal fork of the project on GitHub to a folder on your PC . <h> Submitting Code Changes <p> If you make changes to the project source code that you would like to suggest as changes to the official build , you can make the changes in your personal GitHub repository , then at the Rainmeter repository , create a pull request with your code changes . It will expedite things if you contact the Rainmeter Team either on the forums at Bugs and Feature Suggestions or on IRC at #Rainmeter on Freenode to discuss the desired changes . <h> Creating a Full Rainmeter Build <p> In order to create a full build of the Rainmeter installer , you will need one additional piece of software . <p> Now you can simply run the Build.bat batch file in the Build folder of your local repository . If there are any " not found " errors when you run the batch file , check the paths in the Set commands at the top of the file . <p> Use Build.bat RELEASE to build a non-beta installer . <p> @ @ @ @ @ @ @ @ @ @ obtain a certificate from a service that provides them , and create a Certificate.bat file alongside Build.bat with the following contents : <p> set **29;2920;TOOLONG <p> set CERTKEY=certpassword <h> Creating Rainmeter Plugins <p> Note : The Rainmeter Skin Installer program , which is used by end-users to install the skins containing your plugin , will not allow the same or older version of the plugin to overwrite a newer version . The means that it is critically important that every release of your plugin must have the " File version " number incremented . If you do n't do this , your plugin will not be distributed . <p> The only software you will need is Microsoft Visual Studio 2017 or the free Microsoft Visual Community which can be obtained at Download Visual Studio . Be sure to download and apply any Visual Studio Updates when prompted . <p> Then you will want to download the Rainmeter Plugin SDK to a folder on your PC . The SDK contains the API code needed to create plugins , as well as some starting and sample plugin code for C++ and C# @ @ @ @ @ @ @ @ @ @ as a starting point for your code . <p> PluginSystemVersion An example plugin that returns the Windows system version to a skin . <p> PluginParentChild An example plugin demonstrating how to do " parent-child " functions in your plugin . <p> To create a plugin , the simplest approach is to make a copy of and rename the PluginEmpty example folder and files . Use GuidGen.exe from Visual Studio with Format 4 to generate a new GUID and add this and other appropriate changes to the . vcxproj or . csproj files . Open either SDK-CPP.sln ( C++ ) or SDK-CS.sln ( C# ) in Visual Studio , add your new plugin project to the solution , develop your code in this template and build your plugin . Be sure that you use the Solution Configuration and Solution Platforms fields and build both x32 and x64 architecture release versions of your plugin . dll before you distribute it . <h> Plugin API Documentation <h> Using SendMessage with External Applications <p> The Rainmeter window message API can be used to query or control Rainmeter from external applications . The examples are @ @ @ @ @ @ @ @ @ @ from any programming platform that can send window messages to running applications . <h> Query <p> The following sample demonstrates how to retrieve a running skin 's window handle based on the skin config name . Note that the returned handle should only be used to check if the skin is active or not -- do not abuse the handle . <p> C/C++ code : <p> // Usage : GetSkinWindow ( L " illustroClock " ) ; <p> // Return value will be NULL if config not found or a valid HWND otherwise <p> **25;2951;TOOLONG <p> HWND GetSkinWindow ( const WCHAR* configName ) <p> <p> HWND trayWnd = FindWindow ( L " RainmeterTrayClass " , NULL ) ; <p> if ( trayWnd ) <p> <p> COPYDATASTRUCT cds ; <p> cds.dwData = 5101 ; <p> cds.cbData = ( DWORD ) ( wcslen(configName) + 1 ) * sizeof(WCHAR) ; <p> cds.lpData = ( void* ) configName ; <p> return ( HWND ) SendMessage ( trayWnd , WMCOPYDATA , 0 , ( LPARAM ) &amp;cds ) ; <p> <p> returnNULL ; <p> <p> AutoIT code : <p> ; Usage : $Return = GetSkinWindow @ @ @ @ @ @ @ @ @ @ be 0 if config not found <p> #include &lt;SendMessage.au3&gt; <p> Func **28;2978;TOOLONG <p> Local Const $hWnd = WinGetHandle ( " CLASS:RainmeterTrayClass " ) <p> If $hWnd &lt;&gt; 0 Then <p> Local Const $iSize = StringLen($szConfigName) + 1 <p> Local Const $pMem = DllStructCreate ( " wchar " &amp; $iSize &amp; " " ) <p> DllStructSetData ( $pMem , 1 , $szConfigName ) <p> Local Const $pCds = DllStructCreate ( " dword ; dword ; ptr " ) <p> DllStructSetData ( $pCds , 1 , 5101 ) <p> DllStructSetData ( $pCds , 2 , ( $iSize * 2 ) ) <p> DllStructSetData ( $pCds , 3 , DllStructGetPtr($pMem) ) <p> Local Const $WMCOPYDATA = 0x004A <p> Return SendMessage ( $hWnd , $WMCOPYDATA , 0 , DllStructGetPtr($pCds) ) <p> EndIf <p> Return 0 <p> EndFunc <p> The following code demonstrates how to retrieve important application path information for Rainmeter from your external application . <p> AutoIT code : <p> **31;3008;TOOLONG <p> **34;3041;TOOLONG <p> **36;3077;TOOLONG <p> **25;3115;TOOLONG <p> $RAINMETERQUERYWINDOW = WinGetHandle ( " CLASS:RainmeterTrayClass " ) <p> $WMQUERYRAINMETER = $WMAPP + 1000 <p> **26;3142;TOOLONG = 4101 <p> **29;3170;TOOLONG = 4102 <p> **28;3201;TOOLONG = @ @ @ @ @ @ @ @ @ @ <p> Dim $PathsArray4 <p> $hGUI = GUICreate ( " " , 1 , 1 , -1 , -1 ) <p> If Not ProcessExists ( " Rainmeter.exe " ) Then <p> MsgBox ( 16 , " GetPath Error " , " Rainmeter must be running to use GetPath. " ) 
@@256413 <h> Contents <h> More <h> Substituted Values in a Calc <p> Calc measures are a useful tool that let you perform any number of operations on the values you get from measures . However , sometimes you need to get the substituted value from that measure . The Calc measure has two ways to get the values of the measure . The first way is to use that measure 's name directly . This use the number value of the measure in your Calc formula . The second way is to use section variables . Here , the other measure 's name is encased in square brackets and the line DynamicVariables=1 is added to the Calc measure . The this will use the string value of the measure , and if the measure has a substitution string , it will perform the substitutions before using it . Here is a quick example demonstrating this effect : <p> InitialValue @qwx22556 <p> Formula=12345 <p> Substitute= " 2 " : " 22 " , " 4 " : " 7 " <p> GetDirectValue @qwx22556 <p> Formula=InitialValue <p> GetSubstitutedValue @qwx22556 <p> Formula=InitialValue @qwx22552 <p> @ @ @ @ @ @ @ @ @ @ " 12345 " , whereas the value of GetSubstitutedValue would have the " 2 " replaced with " 22 " and the " 4 " replaced with " 7 " . As a result , its value would instead be " 122375 " . <p> There are many uses for this , particularly when reading the direct value of the measure is impossible . Let 's say you have a log file somewhere that returns whether or not some system is running . You already know that the only possible values are " Running " and " Offline " and you want to show a green light for " Running " and and red light for " Offline " . The simplest method to check for a specific value is to use the " IfEqualValue " and " IfEqualAction " . Unfortunately , this will not work because they require a number to compare and your results are strings . Instead , we can add a substitute string that will convert these strings into numbers , then use a Calc measure to do the comparison . Here is some example @ @ @ @ @ @ @ @ @ @ @qwx22564 <p> URL=http : **34;3262;TOOLONG <p> LONG ... @qwx22567 <p> Substitute= " Running " : " 1 " , " Offline " : " 0 " <p> MeasureCheckStatus @qwx22556 <p> Formula=MeasureGetStatus <p> IfEqualValue=1 <p> IfEqualAction= ! ShowMeter MeterGreenLight ! HideMeter MeterRedLight <p> IfBelowValue=1 <p> IfBelowAction= ! ShowMeter MeterRedLight ! HideMeter MeterGreenLight @qwx22552 <p> MeterGreenLight @qwx22559 <p> ImageName=GreenLight.png <p> Hidden=1 <p> MeterRedLight @qwx22559 <p> ImageName=RedLight.png <p> Hidden=1 <p> The Calc measure would receive the value as either " 1 " or " 0 " instead of the strings " Running " and " Offline " , which let 's it perform the comparisons to activate the proper lights . 
@@256429 <h> More <h> @Resources folder <p> The @Resources folder in the root folder of a skin is the recommended location to store and access images , fonts , sounds , include files , addons or other additional files used by the skin . The @Resources folder is ignored when scanning for skins , so using it to store images and other resources will improve the initial load time of Rainmeter . <p> The @Resources folder must be created at the root config level of the skin ( e.g. Skinsillustro@Resources ) and the #@#built-in variable can be used as a shortcut to specify it . <p> Note : The #@#built-in variable should always be used to specify the location of the @Resources folder . Since @Resources must be at the root config level of the skin , a relative path like **37;3298;TOOLONG will assume that @Resources is in the same folder as the skin . ini file , and that can be wrong . Using **30;3337;TOOLONG is much more reliable . <h> Fonts <p> TrueType ( . ttf ) or OpenType ( . otf ) fonts in the @ResourcesFonts folder are @ @ @ @ @ @ @ @ @ @ in string meters . <p> For example , to include the font SomeFont.ttf , it should be placed in : **40;3369;TOOLONG , and used with FontFace=SomeFontFamily . <h> Cursors <p> Custom cursors ( . ani or . cur ) in the @ResourcesCursors folder are automatically loaded and can be used with MouseActionCursorName. 
@@256432 <p> What we are going to focus on is the methods you can use to debug your RegExp ( regular expression ) option in Rainmeter , to build , test and find problems when parsing a web site or local file . <h> Overview <p> Just as a quick overview , WebParser is used with a parent measure to connect to a resource , a web site or local file , and parse the text that is returned into StringIndex values that can be used in child measures to extract the individual elements of information you want . You can then display the information in String , Image or other meters . <p> At its simplest , you use WebParser like this : @qwx22547 @qwx22570 @qwx22549 @qwx22553 <p> MeasureSite @qwx22557 @qwx22564 <p> URL=http : **31;3411;TOOLONG <p> RegExp= ( ? siU ) &lt;td. *&gt;Your IP Address. *&lt;td&gt; ( . * ) &lt;/td&gt; <p> MeasureIP @qwx22557 @qwx22564 @qwx22571 @qwx22567 <p> MeterIP @qwx22560 <p> MeasureName=MeasureIP <p> FontSize=12 @qwx22554 @qwx22550 <p> Where you provide a URL to connect to , and a RegExp to parse the text , finding and capturing the information you @ @ @ @ @ @ @ @ @ @ You then use the information in those StringIndexes to display the data . <p> Generally , you are going to be capturing multiple bits of information from the site , so you can use multiple child measures and meters to create your skin . <p> In the above , we have eight captures ( . * ) , creating eight StringIndex numbers . So we would create eight child WebParser measures to pick off each one , and we can then display the data any way we like in meters . Again , refer to WebParser Tutorial for a full explanation of how WebParser works . <h> Starting our RegExp <p> To create that RegExp option , what you will generally want to do is get a copy of the text / HTML that the website is returning to WebParser , and use that as a reference to iteratively build your regular expression . In our example above , this is part of the text that the site returns , which we use to create our RegExp . <h> Getting the HTML / text <p> So what is the best @ @ @ @ @ @ @ @ @ @ is returning to WebParser , so we can use that to create our RegExp ? There are a few options ... <h> View page source <p> If you connect to the site in your web browser , ( Internet Explorer , Google Chrome , Firefox , whatever you use ) you can right click and select " View page source " from the context menu . That will open a tab with the HTML code that the site is sending to the browser displayed as text . You can copy and paste that into a local text file on your PC , to use while you are working on your skin . <p> However ... There is an issue that can cause this approach to give you some problems . Many websites will tailor the code that is output based on detecting the browser you are using . This is generally to ensure compatibility in many different browsers , not all of which support the standards for HTML / CSS / Javascript in quite the same way . The upshot of this is that what is returned to your Google @ @ @ @ @ @ @ @ @ @ the WebParser plugin . This can cause a lot of confusion and frustration . We recommend that you do n't use " View page source " in your browser . There are more reliable methods ... <h> Debug=2 <p> If you set Debug=2 on the parent WebParser measure , ( the one with the RegExp on it ) and load the skin , it will create a text file WebParserDump.txt in the same folder as your skin . ini file . WebParserDump.txt is simply an exact copy of what the site sent to WebParser , and is an excellent resource when building your RegExp option . <p> MeasureSite @qwx22557 @qwx22564 <p> URL=http : **31;3444;TOOLONG <p> RegExp= <p> Debug=2 <p> As you can see , we do n't even have a RegExp option yet , just a WebParser measure that connects to the site and downloads the HTML to our WebParserDump.txt text file . <p> Open that file in your favorite text editor , and it can be used as a reference as you continue . <p> Note : When you are done building and testing your RegExp option , be @ @ @ @ @ @ @ @ @ @ n't constantly downloading and writing that file as you actually use your skin . <p> This is a good approach . It ensures that you have exactly the same output from the site that WebParer gets , and if you " refresh " the skin from time to time you can be sure that it is also the most current version of the information from the site . However there is one more method that can be even more useful ... <h> RainRegExp <p> RainRexExp is an add-on utility you can use with WebParser / Rainmeter to create , test and debug your RegExp regular expression options . The way the tool works is to actually connect to the site you are using in your URL option , download the text exactly as WebParser would see it , ( it basically tells the site it IS WebParser ) and give you a way to build and test your RegExp while seeing exactly what is being set in the StringIndex values . <p> Get the tool here : RainRegExp.zip . Simply unzip the files into any folder you desire , and @ @ @ @ @ @ @ @ @ @ Type or paste in the URL to connect to and press " Connect " . <p> ( 2 ) : The HTML / text returned by the site will be in this panel . You can scroll through it or use the " Search " capability to find the text you want to search for . <p> ( 3 ) : Create your RegExp statement here . Click on " Parse " to test as you go . Once you are happy that your expression is working correctly , click on " Copy " to copy the entire RegExp to the Windows clipboard , so you can paste it in your skin . <p> ( 4 ) : The output of the " Parse " test will be here . It will consist of the StringIndex number that will be assigned in WebParser and the current value based on the text from the site . <p> Hope this helps with creating and debugging those pesky RegExp statements . 
@@256443 <h> Contents <h> More <h> Update Guide <h> Using Update , UpdateDivider and UpdateRate <p> The Update option in the Rainmeter section controls how often in milliseconds a skin should update the measures and meters . The UpdateDivider option on a meter or a measure allows you multiply the update interval for that specific meter or measure . By applying UpdateDivider correctly , it is possible to make your skins more efficient . <p> For example , UpdateDivider=5 on a measure would cause that meter to update only on every 5th update cycle . When Update=1000 , the measure will update every ( 1000 x 5 ) milliseconds , which is equal to every 5 seconds . <p> By default , Update=1000 and UpdateDivider=1 . The general formula for calculating the update interval of a measure or a meter in seconds is as follows : ( Update x UpdateDivider / 1000 ) . <p> In the example below , the skin 's update interval is set to 1000 milliseconds ( 1 second ) . Since MeasureCPU does not have UpdateDivider set , it will default to 1 . As a @ @ @ @ @ @ @ @ @ @ In contrast , MeasureUser has UpdateDivider=3600 , as the user name is unlikely to change that often . As a result , MeasureUser will update once every 3600 seconds ( i.e. once every hour ) . <p> MeasureTotalC has UpdateDivider=-1 set . When UpdateDivider is a negative number , the measure will update only once ( when the skin is loaded or refreshed ) . Because MeasureTotalC measures the total space of the drive ( which will not change ) , the it is safe to measure it only once . @qwx22547 @qwx22570 <p> MeasureCPU <p> Measure=CPU <p> MeasureUser @qwx22557 <p> Plugin=SysInfo <p> SysInfoType=USERNAME <p> UpdateDivider=3600 <p> MeasureTotalC <p> Measure=FreeDiskSpace <p> Drive=C : <p> Total=1 <p> UpdateDivider=-1 <h> What about UpdateRate ? <p> UpdateDivider is an option available to all meters and measures . UpdateRate , on the other hand , is only available with the WebParser and Ping plugins . For the purpose of this example , let us use a plugin measure using WebParser . <p> UpdateRate essentially states how often the WebParser should connect to the internet to download the specified URL . The general formula for @ @ @ @ @ @ @ @ @ @ x UpdateDivider x UpdateRate / 1000 ) . <p> In the example below , MeasureMailCount has no UpdateDivider . As a result , UpdateDivider will default to 1 . <p> Since MeasureMailCount has UpdateRate=1200 set , we can calculate that WebParser will download the page every 1200 seconds ( or every 20 minutes ) . <p> MeasureMailCount @qwx22557 @qwx22564 <p> LONG ... <p> LONG ... @qwx22567 <p> UpdateRate=1200 <p> Generally , you want to use UpdateRate in place of UpdateDivider on a WebParser measure , not in addition to it . In some instances , using both can cause a " lag " between when the plugin is finished getting and parsing the data from the site , and when it is actually used and displayed in the skin . <p> Since WebParser connects to the internet , it is important to have a high enough " download interval " . If you try to download a page too often ( e.g. every second ) , you may end up causing a high load on the target site , which ultimately may cause the site to block all access from @ @ @ @ @ @ @ @ @ @ a default value of 600 , or 10 minutes when Update=1000 and UpdateDivider is not set . 
@@256444 <p> RSS and Atom feeds follow certain patterns that make them fairly easy to parse . While there are differences between the RSS and Atom standards , which we will touch on a bit later , let 's use a simple RSS output to outline how they are laid out . <p> &lt; ? xml version= " 1.0 " encoding= " UTF-8 " ? &gt; <p> &lt;rssversion= " 2.0 " &gt; <p> &lt;channel&gt; <p> &lt;title&gt;RSS Title&lt;/title&gt; <p> &lt;description&gt;This is an example of an RSS feed&lt;/description&gt; <p> LONG ... <p> &lt;lastBuildDate&gt;Mon , 06 Sep 2009 16:45:00 +0000 &lt;/lastBuildDate&gt; <p> &lt;item&gt; <p> &lt;title&gt;Example entry&lt;/title&gt; <p> &lt;description&gt;Here is some text containing an interesting description . &lt;/description&gt; <p> LONG ... <p> &lt;pubDate&gt;Mon , 06 Sep 2009 16:45:00 +0000 &lt;/pubDate&gt; <p> &lt;/item&gt; <p> &lt;/channel&gt; <p> &lt;/rss&gt; <p> As you can see , the pattern is that there is a header section which contains " tags " for the title , description , link and lastBuildDate of the overall feed . This is followed by a series of one or more item entries , each of which has its own set of **30;3477;TOOLONG tags . It @ @ @ @ @ @ @ @ @ @ in a feed . However , in an RSS feed , the ones we are going to look at are the ones that are certain to be there , and will have the information we want for a simple RSS skin . <h> Sample RSS feed <p> What we want to do is take some representative example of an RSS feed , and get that header title , link and last build date information , then a few " items " , with their title , link and publication dates . Then we will build a simple skin to display our results . <p> Since a feed is meant to be read by a computer program that will parse the data from the XML / HTML output , there is often no attempt made to have the text be particularly formatted or easy to read . Sometimes a feed in your browser WILL have some HTML formatting codes to make it easier to view . If it does , you should right click and use " view page source " ( or some variant of that depending on your browser @ @ @ @ @ @ @ @ @ @ output and not formatted data . <p> If we look through this output , we can spot the patterns of XML " tags " that we described above . <p> We have the title of the feed in&lt;title&gt;BBC News - Home&lt;/title&gt; a link to the feed LONG ... and the date the feed was last updated **26;3509;TOOLONG , 13 Nov 2013 14:26:44 **25;3537;TOOLONG . <p> We can then see the first of our &lt;item&gt; tags <p> This is followed by a title of&lt;title&gt;UK recovery takes hold , says Bank&lt;/title&gt; a link LONG ... and a bit later on , a publication date of&lt;pubDate&gt;Wed , 13 Nov 2013 12:46:25 GMT&lt;/pubDate&gt; . <p> We know when we are done with any given item when we see the &lt;/item&gt; tag . <p> This is followed by more &lt;item&gt; tags , each with their own titles , links and publication dates . <h> Building our skin <p> First , let 's get the skin started . @qwx22547 @qwx22570 @qwx22553 <p> Now we will start building our first WebParser measure . <p> MeasureSite @qwx22557 @qwx22564 <p> URL=http : **31;3564;TOOLONG <p> The next thing we will @ @ @ @ @ @ @ @ @ @ guide is not a tutorial for the WebParser measure , nor a tutorial for Regular Expressions . However , at a high level what we want to do is use a regular expression in the " parent measure " to search the feed and capture parts of it into StringIndex numbers that we will use later in " child measures " . <p> We can begin by getting the title of the feed into a StringIndex . <p> MeasureSite @qwx22557 @qwx22564 <p> URL=http : **31;3597;TOOLONG <p> RegExp= ( ? siU ) &lt;title&gt; ( . * ) &lt;/title&gt; <p> So we are searching for &lt;title&gt; , capturing ( ) any number of characters of any kind . * into StringIndex number 1 , and ending the capture when the text &lt;/title&gt; is found . <p> Let 's extend that RegExp option and get the link for the site and the last build date into StringIndex numbers 2 and 3 . <p> Notice that we use . * without parentheses to " skip " any number of any characters , without capturing anything . <p> So now we have those three bits @ @ @ @ @ @ @ @ @ @ and 3 . We can build some child WebParser measures to contain each of those values , that we can then use in meters . <p> The added parsing code will skip to the first &lt;item&gt; , then find the &lt;title&gt; , &lt;link&gt; and &lt;pubDate&gt; . It will put them in StringIndex numbers 4 , 5 and 6 . Just count the instances of ( . * ) in the expression to determine which StringIndex numbers contain each value . <p> Following the same pattern as above , we can add new child measures to reference these StringIndex numbers . <p> MeasureItem1Title @qwx22557 @qwx22564 @qwx22571 <p> StringIndex=4 <p> MeasureItem1Link @qwx22557 @qwx22564 @qwx22571 <p> StringIndex=5 <p> MeasureItem1Date @qwx22557 @qwx22564 @qwx22571 <p> StringIndex=6 <h> Adding more feed items <p> Adding another item is as simple as extending our RegExp option to get the next &lt;item&gt; into the next three StringIndex numbers . <h> That RegExp is getting pretty long ... <p> If you are retrieving a number of items , let 's say five for instance , that RegExp is going to get pretty long and a bit hard to debug . @ @ @ @ @ @ @ @ @ @ simplify it a bit . Go back up to the top of your skin right under the Rainmeter section , and create a new Variables section . <p> Since the variable #Item# is replaced in the RegExp with LONG ... we still get our parse of the site header information into StringIndex numbers 1 , 2 and 3 , and our first &lt;item&gt; into StringIndex numbers 4 , 5 and 6 . However the RegExp is quite a bit shorter and easier to read and debug . Adding more items is as simple as repeating that variable . <p> That will get a total of five items , with the total of StrinIndex numbers at 18 . Now you just create all the child measures you need to pick off those 18 values , and display them as you like in meters . <h> A few more advanced suggestions <p> DecodeCharacterReference <p> An RSS or Atom feed can contain the HTML codes for some characters , ones that you would want to display as the actual character instead of the code . For instance , the raw data might contain @ @ @ @ @ @ @ @ @ @ You do n't want to dislay the code , but the actual &lt; . <p> If you add the option **26;3630;TOOLONG to any or all desired child measures , Rainmeter will translate and display the correct character for the embedded HTML code . <p> MeasureItem1Title @qwx22557 @qwx22564 @qwx22571 <p> StringIndex=4 <p> **26;3658;TOOLONG <p> Generally , you will need this only on the " title " child measures , as the " link " and " pubdate " entries will almost never contain any of these HTML codes . <p> Substitute <p> One of the other things you will run into in feeds , more often in Atom feeds than in RSS , is the &lt; ! CDATA &gt; tag around some data . It will take the form &lt; ! CDATASome Text in here&gt; . This special tag construct in HTML just means that any text inside the opening &lt; ! CDATA and the closing &gt; will be displayed as the characters , without any problems with characters that are illegal in XML data . ( like &amp; , &lt; , &gt; " and others ) <p> While it would @ @ @ @ @ @ @ @ @ @ " parse around " this tag , you certainly do n't want that text displayed as part of your skin output . You can use the Substitute option to find and remove this text on any or all child measures . Note that sometime the feed will start and end the tag with &lt; and &gt; and sometimes not . We should use Substitute to take care of both cases . <p> MeasureItem1Title @qwx22557 @qwx22564 @qwx22571 <p> StringIndex=4 <p> **26;3686;TOOLONG <p> LONG ... <p> Regular Expression Substitute <p> Sometimes a feed will be formatted in such a way that there are leading spaces or tabs in front of a value . An example would be : <p> &lt;item&gt; <p> &lt;title&gt; <p> This is an item title <p> &lt;/title&gt; <p> &lt;/item&gt; <p> We do n't want to capture and display those leading tab characters in this example , so we can use the RegExpSubstitute option instead of the normal Substitute , so we can take advantage of the additional power of regular expressions in our substitution . <p> We are using the regular expression construct at the beginning to say " @ @ @ @ @ @ @ @ @ @ " white space " characters s+ , then change them to empty strings " " . <p> Note that since the and characters are " reserved " in regular expressions , we needed to " escape " them using the character in our Substitute when we use RegExpSubstitute . <p> Lookahead Assertions <p> In our example above , we used our #Item# variable in our RegExp option to retrieve five " items " from the feed . What if there are currently only four items in the feed ? Our regular expression will fail , and no information at all will be obtained . <p> You can protect against this by using what is known in regular expressions as a " lookahead assertion " . What this does is basically say " if the following text exists , then parse it this way . If not , then just skip that part of the regular expression without failing " . The format for using a lookahead assertion in regular expressions looks a bit daunting , but in concept it is not too hard to wrap your head around . I @ @ @ @ @ @ @ @ @ @ Assertions . <p> Then we are saying " look ahead " ( ? for a string that equals ( ? = . *&lt;item&gt; ) " Note the trailing parentheses to end the " look for " part of the expression . If the string . *&lt;item&gt; is found , then execute the the parse LONG ... Note that then we follow the entire thing with another ending parentheses , to end the " look ahead " part of the expression . <p> If the lookahead assertion fails , only that part contained in it will be ignored , and any other parts of the expression will still be evaluated and return data . <h> Putting it all together <p> Here is a full skin , using all we have learned so far , that will parse and display the first five items from our RSS feed site . You can copy this code and paste it into a new skin to test it out , modify the output meters as and if you like , and you are well on your way ! <h> Atom vs . RSS feeds <p> @ @ @ @ @ @ @ @ @ @ RSS feed site . However , if the site you are parsing is based on the Atom feed standard , there are some differences we need to take into account . Here is a sample of an Atom feed : <p> As you can see , there are differences in both the names of the " tags " used to identify data values , and some differences in formatting within the tags themselves . <p> RSS <p> &lt;item&gt; <p> &lt;title&gt; <p> &lt;link&gt; <p> &lt;pubDate&gt; <p> Atom <p> &lt;entry&gt; <p> &lt;titletype= " SomeValue " &gt; <p> &lt;linkhref= " SomeSite.com " /&gt; <p> &lt;updated&gt; <p> Fortunately , we can for the most part just change our RegExp to account for these differences , and the balance of what we learned making our RSS skin works just fine . It should also be noted that the order of the tags in different Atoms feeds can vary , where RSS feeds generally have the tags always in the same order . This may mean some re-ordering of the StringIndex numbers you use with your measures . 
@@256448 <h> Help <p> Help is available on the forum . Members of the development team and the Rainmeter community offer support and advice on a volunteer basis . <p> For shorter questions , join the discussion in our IRC chat room . Click here to chat in your browser , or use your own IRC client to connect to #rainmeter at irc.freenode.net . <h> Contact <p> For press inquiries or technical problems with the site or forums , email the development team at team@rainmeter.net . Please do not send Rainmeter or skin support requests to this address ; use the forum or chat room instead . Support requests sent to this address will not be answered . 
@@256454 <h> Contents <h> More <h> WebParser : Lookahead Assertions in RegExp <p> Many times you need to parse an RSS feed or other web site , and ca n't be sure beforehand how many results for a particular search might be there . You might search for five occurrences of something when there are only four , and the entire regular expression will fail and no results will be returned to the WebParser measure(s) . <p> This can be solved by using what is known in regular expressions as a " Lookahead Assertion " . What this does is evaluate an expression you define that says in effect " do this search if some pattern is found , otherwise continue the regular expression without failing " . <p> The best way to explain this is probably to give an example with an explanation of what it is doing . <p> Let 's start with an HTML file . We will use the " file : // " functionality of WebParser for this test , so we can parse a local file on our hard drive . <p> &lt;HTML&gt; <p> &lt;BODY&gt; @ @ @ @ @ @ @ @ @ @ <p> &lt;/Item&gt; <p> &lt;/BODY&gt; <p> &lt;/HTML&gt; <p> Normally , we might use something like this in a WebParser measure to search for and return three results : <p> The problem is , there are only two instances of " &lt;Item&gt; " in this file at this time , and the regular expression will fail and no results will be returned to the WebParser measure . A feed or web site might have none or twenty " &lt;Item&gt; " occurrences , and you ca n't always know ahead of time . <p> Using a " lookahead assertion " will allow you to solve this . You can use a RegExp of : <p> Now the WebParser measure will return the two StringIndexes for " Larry " and " Curly " , and will just return a null value for the third search item ( the third StringIndex ) without failing . <p> How does this work ? <p> LONG ... <p> The ( ? at the beginning , paired with the ) at the very end , is an IF conditional directive , basically saying " If the following succeeds , @ @ @ @ @ @ @ @ @ @ next is the lookahead assertion . It is asking " If I look ahead from here , does the text . *&lt;Item&gt; exist ? " <p> If " true " , what comes outside the lookahead assertion , . *&lt;Name&gt; ( . * ) &lt;/Name&gt; is searched for and the capture is made . The trailing ) ends that starting ( ? IF conditional . <p> The point of that overall outside ( ? ... ) IF conditional is to keep the RegExp from failing if the lookahead assertion is " false " . If the test in the lookahead is " true " , fine . If not , it just shrugs and continues to the next part of the RegExp or exits gracefully at the end of the expression . <p> Example skin <p> Let 's put it all together . I will use a Variable to define the search pattern , then just repeatedly use the variable in the RegExp= statement to save some typing , and set a Substitute= on the WebParser measures so we get something other than just a null value displayed . @qwx22547 @ @ @ @ @ @ @ @ @ @ URL=file : //#CURRENTPATH#Test.html <p> RegExp= " ( ? siU ) #Get##Get##Get# " <p> MeasureChild1 @qwx22557 @qwx22564 <p> URL=MeasureParent @qwx22567 <p> Substitute= " " : " No Moe ! " <p> MeasureChild2 @qwx22557 @qwx22564 <p> URL=MeasureParent <p> StringIndex=2 <p> Substitute= " " : " No Moe ! " <p> MeasureChild3 @qwx22557 @qwx22564 <p> URL=MeasureParent <p> StringIndex=3 <p> Substitute= " " : " No Moe ! " <p> MeterChild1 @qwx22560 <p> **25;3778;TOOLONG <p> FontSize=10 @qwx22554 @qwx22550 <p> Text=Item 1 : %1 <p> MeterChild2 @qwx22560 <p> **25;3805;TOOLONG <p> Y=2R <p> FontSize=10 @qwx22554 @qwx22550 <p> Text=Item 2 : %1 <p> MeterChild3 @qwx22560 <p> **25;3832;TOOLONG <p> Y=2R <p> FontSize=10 @qwx22554 @qwx22550 <p> Text=Item 3 : %1 <p> This will display : <p> Item 1 : Larry Item 2 : Curly Item 3 : No Moe ! <p> Details on how " Lookaround " functionality works in regular expressions can be found at RegExp Tutorial . 
@@256455 <h> Contents <h> More <h> Notepad Alternatives <p> By default , the Rainmeter skin text files in the . ini format will be associated with Windows Notepad text editing application . While Notepad is a perfectly good little text editor , we really recommend that you look at a couple of alternatives if you are going to be working with Rainmeter skins . A more powerful " programmers text editor " can add a lot of useful functionality for searching and replacing text , finding typos and other problems with your skin files , and working with color coding of the files to make it much easier to follow and edit the code . <h> Notepad <p> Notepad is the built-in text editor included with Windows . It will be the default editor used by Rainmeter unless you specify otherwise . <p> It is a pretty simple and plain text editor , with no line numbers , color coding or other advanced features . <h> Notepad++ <p> We recommend that after you install the latest Notepad++ , you get the RainLexer addon by poiru , which will add custom color @ @ @ @ @ @ @ @ @ @ Text is another full-featured programmer 's text editor available at http : //www.sublimetext.com/ . It is not free , but can be run for an extended length of time in " unregistered " mode to try it out . <p> We recommend that after you install the latest Sublime Text , you get the Rainmeter Package addon by merlinthered , which will add custom color coding for Rainmeter skins and lots of other nice Rainmeter specific functionality . <h> Associating skin files with your desired editor <p> Once you have decided on and installed a better text editor , you will probably want to associate the common Rainmeter file types of . ini , . inc , and . lua with the application . This can be done in Windows Explorer : <p> Open the folder that contains the file you want to change . <p> Right-click the file you want to change and then , depending on the type of file , either click Open with or point to Open with and then click Choose default program . <p> Click the program you want to use to open the @ @ @ @ @ @ @ @ @ @ If you want all files of that type to open in the same software program , select the Always use the selected program to open this kind of file check box , and then click OK . <p> If you want only that file to open in the software program this one time , clear the Always use the selected program to open this kind of file check box , and then click OK . <p> Alternatively , if you do not wish to associate the file types with your editor in Windows , but still want to have Rainmeter use the editor when editing skins , you can add a setting for ConfigEditor to your Rainmeter.ini file . Simply enter the full path to the executable for your text editor . 
@@256464 <h> Contents <h> More <h> @Include Guide <p> Tip by Brian and Smurfier <p> While @include is a simple tool it is powerful as well . It can be used to make skin code shorter by stripping out longer code into shorter files . Repetitive code used in multiple skins can be managed with one file . It can even be used to load different code when you open a skin . <h> Using @include <p> There are several rules to using @include . The first is the @include call . <p> Section <p> @include=SomeFile.inc <p> Note : The @include call must be made within a section . Authors have generally used the Rainmeter or Variables sections when appropriate . <p> The second being the file that you 're including . @qwx22548 <p> SomeVariable=AValue <p> The file being used with @include must be formatted in the INI format , meaning that it has all the appropriate sections followed by Key=Value pairs . This includes using the Variables section . <p> If you want to include more than one file , they need to be listed with unique identifiers . <p> @ @ @ @ @ @ @ @ @ @ extension it is highly recommended . This prevents the file from appearing in Rainmeters list as a skin . <p> We can also use a variable to define an @include . The only caveat is that variable can not be dynamic . @qwx22548 <p> Theme=SomeTheme <p> **29;3859;TOOLONG <h> Understanding @include <p> When Rainmeter reaches an @include line , it reads the given file , placing all unique options into any existing sections , then places the remainder of the included file after the section in which it was called . <p> SomeFile.inc <p> Background @qwx22559 <p> H=30 <p> W=40 <p> String <p> Text=This Wo n't Work <p> YourSkin.ini @qwx22548 <p> @include=SomeFile.inc <p> Foreground @qwx22559 <p> H=20 <p> W=30 <p> X=5r <p> String @qwx22560 <p> Text=This line will remain . <p> This would place the Background section before the Foreground section . Since the String section already exists in the main file , then any existing options wo n't be changed . In this case , the Text line will still read " This line will remain . " <h> Practical Use : Skin Settings <p> The most common use of @ @ @ @ @ @ @ @ @ @ by a skin in a separate file . <p> Settings.inc @qwx22548 <p> **29;3890;TOOLONG <p> HideBackground=0 <p> Skin.ini <p> @include=Settings.inc <p> Background @qwx22559 <p> **27;3921;TOOLONG <p> Hidden=#HideBackground# <h> Practical Use : Pages and Stylesheets <p> Two of the other major uses of @include are easily switching between different pages of a skin and creating Stylesheets for your skins . Both of these uses take advantage of the fact that we can use Variables to define an @include . <p> Creating different pages is as easy as putting each page in it 's own file and naming them in a sequence . Then in the Parent skin we need to define a variable that we will use to change the page . @qwx22548 <p> Page=1 <p> **31;3950;TOOLONG <p> In the parent skin we can change the page using the ! WriteKeyValue bang . Just remember that after changing the Page variable we need to refresh the skin so that the new page will be loaded . <p> ! WriteKeyValue Variables Page 2 ! Refresh <p> The method is exactly the same for using Stylesheets . Instead of containing meters a style sheet @ @ @ @ @ @ @ @ @ @ skin . 
@@256473 <h> Contents <h> More <h> WebParser : Weather Skin Translations <p> One of the things that is often asked is " How can I translate the weather conditions text , returned by WebParser when creating or editing a weather skin , to my own language ? " <p> This actually pretty simple to do . First find the measure or measures ( often in a weather skin there will be 3 - 5 of them ) which are returning the " weather conditions " text . It will look something like this : <p> **31;3983;TOOLONG @qwx22557 @qwx22564 <p> Url=MeasureYahooWeather <p> StringIndex=34 <p> Note that a weather skin normally works by having a first , primary measure that retrieves all the information from the weather RSS feed in one shot . Then there will be subsequent measures which will extract the individual bits of information from the large array of values returned by this first measure . So you will often see something like : <p> As you can see , the measure **31;4016;TOOLONG is using as its " Url= " the result of MeasureYahooWeather ( our first main RSS measure @ @ @ @ @ @ @ @ @ @ in the array of returned values which holds the first of the " Weather Condition " values , in this case the " Current Conditions " . <p> Since Weather.com / Yahoo Weather return these values in English , you may want to translate them to your native language . To do so , add a line at the end of each of the measures that specifically return " Weather Conditions " text . In our current example , after the line " StringIndex=34 " . <p> Substitute= " Thing to replace " : " Thing to replace with " , " Thing to replace " : " Thing to replace with " <p> The punctuation is important . " Thing to replace " and " Thing to replace with " are enclosed in quotes . There is a colon between them . Pairs are separated with commas . <p> We use RegExpSubstitute so a regular expression comparison is used . Then in the Substitute option , we first tell it to be case insensitive ( ? i ) , and look for very specific strings by using start-of-string and @ @ @ @ @ @ @ @ @ @ is to it . In our example above , " Cloudy " will be replaced with " Bew+lkt " when the text is later displayed in a meter . <p> What " Weather Conditions " text codes are returned by Yahoo Weather so I know what to translate ? " 
@@256478 <h> Rainmeter context menus <p> Help : Opens the Rainmeter documentation site in the default web browser . <p> Skins : Displays a list of all skins found when Rainmeter was started or refreshed . The list consists of the config folder for each skin , which expand to the skin . ini files in each . Clicking on a . ini file will load the skin in Rainmeter . <p> Favorites : Displays a list of skins that have been defined as a " Favorite " in either the skin 's settings in Manage or the skin 's context menu under Settings . If you have a large collection of skins in Rainmeter , this can be helpful for quickly finding and loading skins without having to use the entire Skins list . <p> Layouts : Displays a list of saved layouts . Clicking on one will load that layout in Rainmeter . <p> Edit settings : Manually edit the settings in Rainmeter.ini with the text editor associated with . ini files . <p> Refresh all : Refresh the entire Rainmeter application , including all currently active skins . 
@@256480 <p> PrimaryColor is the color for the primary histogram . Default is dark green 0,128,0 . <p> SecondaryColor is the color for the secondary histogram . Default is red 255,0,0 . <p> BothColor is the color used where the histogram elements overlap . Default is yellow 255,255,0 . <p> PrimaryImage , SecondaryImage , BothImage <p> Optional images used for the histogram instead of PrimaryColor , SecondaryColor , BothColor . <p> PrimaryImage is the image used for the primary histogram . <p> SecondaryImage is the image used for the secondary histogram . <p> BothImage is the image used where the histogram elements overlap . <p> If SecondaryImage is defined , then BothImage is required . <p> The image is " revealed " both horizontally and vertically , to the percentage defined by the current value of the MeasureName bound to the meter , and as a factor of time . <p> Note : The image size can not be modified with the W or H general meter options , and will be displayed in the original image size . The size of the histogram will be defined by the size of @ @ @ @ @ @ @ @ @ @ , SecondaryImage or BothImage , they must be the same size . <p> PrimaryImagePath , SecondaryImagePath , BothImagePath <p> Path to the location of optional image used as the primary , secondary or both histograms. 
@@256483 <p> Bangs can also be used from the Windows command line as a parameter to the Rainmeter.exe executable . Example : " C : Program **27;4049;TOOLONG " ! RefreshApp . <p> Note : Many bangs have a Config parameter . Unless otherwise specified , valid values are the config name of a currently loaded skin to be acted upon or * ( asterisk ) to act on all currently loaded skins . When optional and not supplied , the parameter defaults to the current config . If executing a bang with a " config " parameter from the Windows command line , the parameter is always required . <h> Operating System bangs <p> ! SetClipParameter : String <p> Copies the specified string to the Windows clipboard . If the string contains spaces , use quotes around the parameter . <p> String ( required ) : The string to be copied to the clipboard . <p> Example : ! SetClip " This is copied to the clipboard ! " <p> ! SetWallpaperParameters : File , Position <p> Sets the Windows desktop background to the specified image file . <p> File ( @ @ @ @ @ @ @ @ @ @ desktop background . The following formats are supported : . bmp , . jpg , . png , . gif , and . tiff . If the filename contains spaces , you must enclose the filename in quotes . <p> Position ( optional ) : Sets the position of the wallpaper . Valid values are : Center , Tile , Stretch . Windows 7 ( and above ) also have the values : Fit and Fill . <p> Does a full refresh of all skins and reloads the list of configs and Rainmeter.ini settings . This is the same as " Refresh All " from the system tray context menu . The main difference from ! Refresh * is that the skins folder is rescanned . <p> ! Quit <p> Quits Rainmeter . <p> PlayParameter : SoundFile <p> Plays the given sound file once . <p> SoundFile ( required ) : Path and file to be played . Must be a . wav file . <p> Note : While listed in this section for simplicity , the Play commands are not bangs , and do not require or allow the @ @ @ @ @ @ @ @ @ @ call to embedded Windows functionality to play the sound , and only one sound at a time can be managed , Rainmeter-wide . Playing a sound in any skin will stop any other currently playing sounds . <p> Example:Play " SomeFile.wav " <p> PlayLoopParameter : SoundFile <p> Plays the given sound file in a loop . <p> SoundFile ( required ) : File to be played . Must be a . wav file . <p> Example:PlayLoop " SomeFile.wav " <p> PlayStop <p> Stops any currently playing sound started by Rainmeter . <h> Option and Variable bangs <p> ! SetOptionParameters : Meter/Measure , Option , Value , Config <p> Sets an option ( ie. FontSize , Text , Formula , etc. ) of a meter or measure . <p> Sets a new value for a variable . The meter or measure where the variable is used must enable DynamicVariables . ! SetVariable can create a new variable in memory , even if it is not pre-defined in the Variables section . <p> Variable ( required ) : Name of the variable . <p> Value ( required ) : New value to @ @ @ @ @ @ @ @ @ @ " New value ! " <p> ! WriteKeyValueParameters : Section , Key , Value , FilePath <p> Permanently writes a Key=Value pair below a section in a INI formatted file ( such as . ini or . inc files ) . A skin must be refreshed for a new value written to the skin 's . ini or . inc files to be re-read and used . <p> Section ( required ) : If the section does not exist in the file , a new section will be written at the end of the file . <p> Key ( required ) : If the key does not exist under the section , a new key will be written at the end of the section . <p> Value ( required ) : Value to be written . Any previous value will be overwritten . <p> FilePath ( optional ) : If not specified , the current skin file is used . The file must exist and must be located under either #SKINSPATH# or #SETTINGSPATH# . <p> Example : ! WriteKeyValue Variables MyFontName Arial " #@#Variables.inc " <h> Option and Variable group @ @ @ @ @ @ @ @ @ @ Value , Config <p> Sets an option ( ie. FontSize , Text , Formula , etc. ) of meters and measures in the specified group . <p> Group ( required ) : Name of the group . <p> Option ( required ) : Name of the option to be changed . <p> Value ( required ) : New value to be set . @qwx22551 <p> Example : ! SetOptionGroup StringGroup Text " New text ! " <p> ! **26;4078;TOOLONG : Variable , Value , Group <p> Changes the value of a variable in the configs of the specified group . <p> File ( optional ) : If not specified , the next . ini file variant in the config folder is activated . <p> Example : ! ActivateConfig " illustroClock " " Clock.ini " <p> ! **25;4106;TOOLONG : Config <p> Deactivates a skin . @qwx22551 <p> Example : ! DeactivateConfig " illustroClock " <p> ! ToggleConfigParameters : Config , File <p> Activates or deactivates a skin . <p> Config ( required ) : The config to be activated or deactivated . <p> File ( required ) : The . ini @ @ @ @ @ @ @ @ @ @ ! ToggleConfig " illustroClock " " Clock.ini " <p> ! UpdateParameter : Config <p> Overrides the setting of the Update option in Rainmeter and immediately updates the entire skin , all measures and meters . This does not override any UpdateDivider options on measures or meters. @qwx22551 <p> ! RedrawParameter : Config <p> Immediately redraws all visible elements of the entire skin , independent of the normal skin update cycle . @qwx22551 <p> Note : This simply redraws the skin . Meters will use the values obtained when they were last updated . Since by itself ! Redraw accomplishes nothing useful , this bang will always be used in conjunction with bangs that update specific things before redrawing the skin . Depending on the case , this might be with ! UpdateMeasure bangs to immediately update measure values , and certainly ! UpdateMeter bangs to update meter values and options . The idea is to update specific meters and redraw the skin before the next normal update cycle . This can allow immediate visible changes , while not having to force an update of the entire skin . <p> Edits @ @ @ @ @ @ @ @ @ @ in ConfigEditor in Rainmeter settings , or the text editor associated with . ini files in Windows . The default will be Windows Notepad.exe . If no parameters are defined the current skin . ini file will be edited . <p> Overrides the setting of the Update option in Rainmeter and immediately updates the skins in the specified group , all measures and meters . This does not override any UpdateDivider options on measures or meters . <p> Group ( required ) : Group to redraw . <p> ! RedrawGroupParameter : Group <p> Overrides the setting of the Update option in Rainmeter and immediately redraws all visible elements of the specified group of skins . Meters will use the last value obtained for any measures or variables referenced . <p> Overrides the setting of the Update option in Rainmeter or any UpdateDivider on the meter , and immediately updates the meter , obtaining new current values for any measures or variables referenced . Note that the meter is not redrawn with any new values until the next update , or if a ! Redraw bang is used . <p> Meter @ @ @ @ @ @ @ @ @ @ . Use * to update all meters. @qwx22551 <p> Example : ! UpdateMeter " MyMeter " <p> ! MoveMeterParameters : X , Y , Meter , Config <p> Moves the given meter ( not the window ) to the specified position . The new position is relative to the top left corner of the skin . The size of the skin window is re-evaluated after the meter is moved . This would make the skin window become larger or smaller to incorporate all meters . <p> Overrides the setting of the Update option in Rainmeter or any UpdateDivider on the meters in the specified group , and immediately updates the meters , obtaining new current values for any measures or variables referenced . Note that the meters are not redrawn with any new values until the next update , or if a ! RedrawGroup bang is used . 
@@256484 <h> Rainmeter 3.3.2 Release <p> There are a lot of new features and capabilities in the latest Rainmeter 3.3.2 . You can safely install the new 3.3.2 release version right over your existing Rainmeter 3.2 or earlier installation , and nothing you have done will be lost or changed . There is never any need to uninstall any earlier version of Rainmeter to use the newest version . <h> Special Release of Rainmeter 3.3.2 <p> May 16 , 2016 - Revision 2609 <p> Fixed Corrected an issue where Rainmeter could fail with an Error 127 on Windows Vista . <h> Special Release of Rainmeter 3.3.1 <p> March 18 , 2016 - Revision 2601 <p> Fixed Corrected an issue with the Insider Preview builds of Windows 10 that would not display the Rainmeter Notification Area / System Tray icon . <h> Major additions and changes in Rainmeter 3.3 <h> Inline options <p> Added new Inline Options features to the String meter . This will allow " inline " formatting of part or all of a string , and adds several new formatting options including a color gradient . Example skins demonstrating @ @ @ @ @ @ @ @ @ @ Loop measure <p> Added new Loop measure . This will create a looping counter between two numbers . The loop will start at StartValue , end at EndValue , increment by Increment , and will loop LoopCount ( or endless ) times . Details and examples can be found at Change Announcements . <h> " Best " network values <p> Net measures : Changed the values accepted for the Interface option to accept new values of " Best " , which will automatically use the active network interface , or a string value of the name of the desired Network Interface Controller ( NIC ) . <p> SysInfo plugin : Changed the values accepted for the SysInfoData option with network related SysInfoType options to accept new values of " Best " , which will automatically use the active network interface , or a string value of the name of the desired Network Interface Controller ( NIC ) . <h> ActionTimer plugin <p> Added the ActionTimer plugin to the Rainmeter build . This plugin can be used to support animations and meter transitions . Details and examples can be found at @ @ @ @ @ @ @ @ @ @ <p> Added the RunCommand plugin to the Rainmeter build . This plugin can be used to execute and obtain values from external commands and programs . Details and examples can be found at RunCommand Plugin and RunCommand forum post . <h> SkinWidth / SkinHeight <p> Added new SkinWidth and SkinHeight options to the Rainmeter section of a skin . This will constrain the skin to the dimensions defined , either the width , the height , or both . Any meter or part of a meter positioned outside the defined boundaries will be truncated . DynamicWindowSize will be ignored for the defined dimension(s) , and meters that would normally display even " outside " the skin will be truncated by the " fixed " skin dimensions . <p> This can be very useful for having some meter(s) initially defined outside the left/top/right/bottom boundaries of the skin , and then pop or slide into view on mouse or measure actions . An example skin demonstrating how this might be used is at Change Announcements . <h> Skin installer plugin version <p> The Skin Installer application , used to install . rmskin @ @ @ @ @ @ @ @ @ @ by default not replace a newer version of an included 3rd-party plugin with an older version . This is based on the " File version " information in the compiled . dll file(s) , and is to protect users from having an old plugin in a . rmskin replace a newer version . <p> It is very important that all 3rd-party plugin authors keep up-to-date with version information in their plugin releases . Going forward , if an author releases a new version of their plugin , but does n't change the version number information in the . dll , it will not be installed by Rainmeter if the end-user already has the older version of the plugin . <h> Important Note about HWiNFO <p> If you are using the HWiNFO plugin for Rainmeter , you must upgrade to the latest 3.0 version of the plugin and SharedMemoryViewer.exe found in that post . If you have distributed skins using the plugin , you should update them for your users . Skins using older versions of the HWiNFO plugin may fail when users upgrade to Rainmeter 3.3 . <h> Other enhancements @ @ @ @ @ @ @ @ @ @ use the latest Visual Studio 2015 for development . <p> Added some additional Time measure Format Codes , made possible by the upgrade of the Rainmeter project to Visual Studio 2015 . This also corrects some issues with existing codes like %p and a change to %z . <p> Added a value of Genre to the NowPlaying PlayerType option . This option value is currently supported with the AIMP , CAD , iTunes , WMP and WinAmp PlayerName values . <p> Modified the Time column in the About / Log panel to use the current time in Hours , Minutes , Seconds and Milliseconds rather than elapsed time since Rainmeter was started . <p> Corrected an issue in an Image meter where removing a MaskImageName with ! SetOption was not possible . <p> Corrected an issue with IfMatch where doing a match on a measure that has returned no string value could crash Rainmeter . <p> Corrected an issue where some Unicode characters in a text file read by the Quote plugin could be mistaken for an end-of-file control character and truncate the returned string . <p> Added support for @ @ @ @ @ @ @ @ @ @ issue where removing a ToolTipTitle with ! SetOption would not work , and an issue where a dynamic value for a ToolTipTitle would be one skin update behind . <p> Changed the maximum number of ContextTitleN / ContextActionN pairs from 15 to 25 . <p> Corrected an issue where WebParser could not read a local file if it was locked open by some other process . 
@@256485 <p> Note : The maximum value of HighBound is a 32bit signed integer , or 2147483647 . <h> Additional Formula Syntax <h> Functions <p> Note : These functions are only available in the context the Formula option of a Calc measure , and not in other ( formulas ) in other measure or meter types . <p> Random : A random number . The number will be between and include the values set in LowBound and HighBound . <p> Counter : The number of update cycles from the time the skin is loaded . This number only resets when the skin is unloaded and then loaded again - not when the skin is refreshed . <h> Other Bases <p> The Calc measure allows numbers to be represented numbering systems other than decimal . To use another base , prefix the number with a zero then the letter representing the system you wish to use . The following are accepted prefixes , which are case ( lower ) sensitive : <p> 0b - Binary number ( base 2 ) ( ex : 0b110110 - returns 54 in decimal ) <p> 0o @ @ @ @ @ @ @ @ @ @ 0o123 - returns 83 in decimal ) <p> 0x - Hexadecimal number ( base 16 ) ( ex : 0xF1 - returns 241 in decimal ) <h> Measure Values <p> The use of measure values in the Formula option of a Calc measure does not require the use of Dynamic Variables . Simply omit the and the number value of the measure will be retrieved . If the measure does not have a number value , 0 will be used . Section Variables , Variables and Built-in Variables follow the normal rules . For more information see the Dynamic Cheat Sheet . 
@@256499 <h> Overview <p> The meter will consist of one or more Shape ... Shape2 ... ShapeN objects . <p> You first define the type of Shape , the relative starting position in the meter , and required and optional shape definition parameters . <p> MeterShape <p> Meter=Shape <p> Shape=Rectangle 0,0,100,50 <p> In this example we are saying " Create a rectangle , starting at an X of 0 and a Y of 0 relative to the meter , with a width of 100 , and a height of 50 . " This is the most basic example of the meter , and will create a 100 X 50 rectangle with a default white fill color and a default 1 pixel black drawing stroke . <p> You can then add Attribute and Transform modifiers to each shape , which can control things like Fill Color , StrokeWidth , Rotate , Scale , and much more . <p> Modifiers are added on the ShapeN option by defining them separated by the pipe character . All modifiers are optional , and they can be in any order in the option , after the @ @ @ @ @ @ @ @ @ @ black fill color in the shape , change the width of the drawing stroke to 4 pixels , and color the stroke white . " <p> Shapes in a meter can also be Combined , which will allow you to merge two or more separate shapes in a variety of ways . <p> MeterShapes <p> Meter=Shape <p> Shape=Rectangle 4,4,110,110,55 <p> Shape2=Rectangle 54,54,80,80,10 <p> Shape3=Combine Shape Union Shape2 <p> If you have more than one shape defined in the meter , you may want them to share some or all modifiers , rather than repeating them in each ShapeN option . This is done with the Extend modifier . The way this works is that you use the keyword Extend , followed by one or more named identifiers . Then you add that named identifier as a separate option on the meter , and in it put any modifiers you want to share . <h> Options <p> This is the only Shape meter specific option used . It will define the Shape Type and its definition parameters , and any Attribute and Transform modifiers for the shape(s) to be drawn . @ @ @ @ @ @ @ @ @ @ number of shapes in a single Shape meter . Multiple shapes are drawn in the numerical order of the ShapeN , so in the case of overlap , higher numbered shapes will be drawn on top / in front of lower numbered shapes . <p> RadiusX ( required ) : Radius of the ellipse . If used with the optional ' RadiusY ' , this will represent the radius on the X-axis . <p> RadiusY ( optional ) : Radius of the ellipse on the Y-axis . <p> Examples:Shape=Ellipse 50,50,50Shape=Ellipse 50,50,50,25 <p> Note on Ellipse : The shape is drawn centered on the position defined by CenterX and CenterY . In a sense , it draws from the center out . Be sure that CenterX and CenterY , or the X and Y on the meter , leave enough room in the overall skin to not truncate the shape at the left and top . <p> ShapeEnding ( optional ) : Leave the shape open ( 0 - default ) or automatically close ( 1 ) the shape . <p> The first 4 parameters are required . The rest are @ @ @ @ @ @ @ @ @ @ optional parameter later in the order , an asterisk * symbol can be used to indicate " default " in earlier optional parameters . <p> Notes on Arc:SweepDirection : ArcSize : An arc describes two virtual ellipses intersecting the starting and ending points . One Clockwise and one Counter-clockwise . If the radius of the arc is greater than 1/2 distance between the starting and ending points , this actually creates 4 possible arcs : <p> Clockwise small <p> Clockwise large <p> Counter-clockwise small <p> Counter-clockwise large <p> RotationAngle : If the RadiusX and RadiusY of the arc are not the same , then RotationAngle will rotate the two ellipses around a center point defined on and at 1/2 the distance between the starting and ending points . <p> ShapeEnding : An Arc shape can be either be left open , or have a line segment automatically drawn to close the shape . The impact this has on Attribute Modifiers is : <p> Fill attributes default to transparent on an open shape . <p> Fill attributes can be defined for either an open or closed shape . <p> StrokeWidth is @ @ @ @ @ @ @ @ @ @ StrokeWidth is only used on the " drawn " part of the arc on an open shape . <p> Notes on Curve : A Curve shape can be either be left open , or have a line segment automatically drawn to close the shape . The impact this has on Attribute Modifiers is : <p> Fill attributes default to transparent on an open shape . <p> Fill attributes can be defined for either an open or closed shape . <p> StrokeWidth is used on the entirety of a closed shape . <p> StrokeWidth is only used on the " drawn " part of the curve on an open shape . <p> PathParameters : ( See below ) <p> Drawing segments that define the outline of a shape , consisting of a starting point followed by a series of one or more lines , arcs or curves . Each segment will automatically start where the previous one ends . The final result may produce an open or closed shape . <p> Path definitions must be defined in a separate named option , which you then reference immediately following the Path type @ @ @ @ @ @ @ @ @ @ MyPath StrokeColor 0,255,0,255 . <p> Parameters : <p> StartX ( required ) : X coordinate of the starting point of the path . <p> StartY ( required ) : Y coordinate of the starting point of the path . <p> Followed a pipe character , and at least one , up to unlimited , of the following segment types , separated by a pipe character . <p> LineTo ( optional ) : Uses the same parameters as the Line shape , less the X and Y starting coordinates and any ShapeEnding value . Segments will automatically know their starting points , and must always in and of themselves be an open shape . <p> ArcTo ( optional ) : Uses the same parameters as the Arc shape , less the X and Y starting coordinates and any ShapeEnding value . Segments will automatically know their starting points , and must always in and of themselves be an open shape . <p> CurveTo ( optional ) : Uses the same parameters as the Curve shape , less the X and Y starting coordinates and any ShapeEnding value . Segments will automatically @ @ @ @ @ @ @ @ @ @ of themselves be an open shape . <p> In addition , there are two optional segment control commands that can be used at any point in the path definition . These will alter the behavior of the path 's stroke from the default values or any defined in the Shape(N) definition , from the point they are used in the path until they are altered again or the end of the path is reached : <p> SetRoundJoin ( optional ) : Values are 0 or 1 . Use the default or defined value of StrokeLineJoin ( 0 - default ) to join angled segments , or use a Round ( 1 ) line join . <p> SetNoStroke ( optional ) : Values are 0 or 1 . Use the default or defined value of StrokeWidth ( 0 - default ) , or do not draw a stroke ( 1 ) . This does not change the open or closed nature of the shape . <p> Following the final definition of the path segments , a path may or may not create a fully enclosed shape . This can be controlled @ @ @ @ @ @ @ @ @ @ optional ) : Values are 0 or 1 . Leave the shape open ( 0 - default ) or automatically close ( 1 ) the shape by drawing a line segment from the final ending point to the starting point . <p> Notes on Path : All Attribute and Transform modifiers may be used on the shape , but they may only be defined once on the Shape(N) option line . Individual path segments may not be modified , and the named path definition may only contain the starting point , one or more segment definitions , any optional SetLineJoin or SetNoStroke segment commands , and an optional ClosePath value . <p> Closed shapes are automatically filled with the default white fill color . Open shapes are not filled by default , although in both instances this may be changed or forced with a Fill attribute modifier on the shape . <p> CombineParameters : ShapeN ... <p> Combine is a special shape type , that combines or merges two or more existing closed shapes in the meter , replacing them with a new " combined " shape . The first @ @ @ @ @ @ @ @ @ @ " , and any shapes , separated with the pipe character , with which it is combined are " children " . This distinction is important in the context of how modifiers are inherited or not on combined shapes . <p> Notes on Combine : When shapes are combined , the parent shape 's Attribute Modifiers , e.g. Fill and StrokeWidth , are automatically inherited by the new combined shape . Any Attribute modifiers on child shapes or the new combined shape are ignored . <p> When shapes are combined , all Transform Modifiers , e.g. Rotate and Scale , on both the parent and child shapes are performed first , before the combine is done . So for instance , a child shape can be rotated , and them combined with a parent shape . The new combined shape can then also have its own Transform Modifiers , which will be done after the shapes are combined . <p> The order of the front-to-back position of the shapes can be impacted by combining shapes , as the shapes are drawn in the numerical order of their ShapeN option name @ @ @ @ @ @ @ @ @ @ shape option , some thought should be given when numbering combined and uncombined shapes , to get the order you want . <p> A Combined shape is always closed . Any open shapes or paths used as a parent or child will automatically be closed before they are combined . <h> Attribute Modifiers <p> FillDefault : Color 255,255,255,255 <p> Method used to fill a closed shape . This will be a keyword defining the type of fill , followed by any required and optional parameters for the type . <p> Fill Types : <p> Color : Fills the shape with a single required Color . The alpha value of the color code can be used to control the opacity of the **29;4133;TOOLONG 0,0,100,100 Fill Color 255,0,0,255 <p> LinearGradient : Fills the shape with a linear color gradient . This consists of an angle in degrees , followed by a pipe character and two or more sets of color ; percentage defining the gradient " stops " . Example : See Defining Gradients for details and examples . <p> RadialGradient : Fills the shape with a radial color gradient . This @ @ @ @ @ @ @ @ @ @ by a pipe character and two or more sets of color ; percentage defining the gradient " stops " . Example : See Defining Gradients for details and examples . <p> StrokeDefault : Color 0,0,0,255 <p> Method used to draw the stroke on a shape . This will be a keyword defining the type , followed by any required and optional parameters for the type . <p> Stroke Types : <p> Color : Draws the stroke with a single required Color . The alpha value of the color code can be used to control the opacity of the **30;4164;TOOLONG 0,0,100,100 StrokeWidth 4 Stroke Color 255,0,0,255 <p> LinearGradient : Draws the stroke with a linear color gradient . This consists of an angle in degrees , followed by a pipe character and two or more sets of color ; percentage defining the gradient " stops " . Example : See Defining Gradients for details and examples . <p> RadialGradient : Draws the stroke with a radial color gradient . This consists of a definition of the gradient coordinates , followed by a pipe character and two or more sets of color @ @ @ @ @ @ @ @ @ @ : See Defining Gradients for details and examples . <p> StrokeWidthDefault : 1 <p> Size in pixels of the drawing stroke on the shape . <p> Example:Shape=Rectangle 2,2,100,50 StrokeWidth 4 <p> Notes on StrokeWidth : This is not a " border around " the shape . It is the shape 's " drawing stroke " . One half of the stroke will be " inside " the shape , and one half will be " outside " the shape . With an odd-numbered StrokeWidth , which ca n't be divided evenly by two , the very most inside and very most outside pixels will actually be 1/2 pixels in size , with Direct2D " aliasing " the edge of the two pixels , to create " half pixels " and keep the stroke the correct size . <p> If you have a meter at the left or top of the skin , and define a shape with an X or Y of 0 , that is where the shape will be drawn . However , since any StrokeWidth added to the shape will have one half of it outside the @ @ @ @ @ @ @ @ @ @ or the shape right or down to accommodate this , or part of the stroke will be outside the skin and truncated . <p> StrokeStartCapDefault : Flat <p> Defines the shape of a cap used at the start of the drawing stroke on an open shape . This modifier is ignored on closed shapes . <p> Cap Types : <p> Flat : This really no end cap , the same as leaving the modifier off entirely . <p> Defines a repeating dash or dot pattern for the shape 's drawing stroke . <p> This is done with a single or repeating sets of comma-separated pairs of DashSize , GapSize . These are not numbers of pixels , but are a multiplication factor based on the StrokeWidth . So 2 , 1.5 would be a dash twice as long as the StrokeWidth , followed by a gap one and one-half times as long as the StrokeWidth , and this would be repeated for the entire stroke . This can be extended , i.e 2,1,3,1.5,4,2 to create a repeating custom dashed stroke of various sizes and gaps . <p> Notes on StrokeDashes @ @ @ @ @ @ @ @ @ @ the StrokeDashCap option above . If you specify a dash size of 0 , and a StrokeDashCap of Round you will get dots , Triangle you will get diamonds , and so on . So for instance 0,2 with a StrokeDaskCap of Round will create NO " dash " , just the two rounded end caps next to each other followed by a gap , which will create a dotted line . <p> StrokeLineJoinDefault : Miter , 10.0 <p> Defines the type of join used on angled connections of drawing stroke segments in a shape or path . An optional MiterLimit can be used to specify how sharp Miter joins are allowed to be ( default is 10.0 ) . <p> Join Types : <p> Miter : Mitered corners . The corner will be mitered up to the point of MiterLimit , then squared off . <p> Bevel : Beveled or squared corners . <p> Round : Rounded corners . <p> MiterOrBevel : Miter is used unless the default or defined value of MiterLimit would be exceeded , in which case Bevel is used . <p> Miter or MeterOrBevel can @ @ @ @ @ @ @ @ @ @ value for MiterLimit . Think of MiterLimit as controlling the amount of " pointiness " when a very sharp angle join is mitered . MiterLimit is a positive number greater than or equal to 1.0 that describes the limit as a ratio of the miter length to half the stroke 's thickness . <p> Scales the shape in the X and / or Y axis , using multiplication factors . Reducing the scale would be done with a scaling factor less than 1 . The scaling is done either from the center of the shape ( default ) , or optional X , Y anchor points in pixels relative to the top left of the shape . <p> Notes on Scale : The size of any StrokeWidth , the drawing stroke , is not effected by scaling the shape . If you specify a StrokeWidth of 4 , it will remain 4 pixels in size no matter how you scale the shape . <p> A shape may be " flipped " or " mirrored " using Scale , by simply scaling it -1.0 on the axis you wish to flip @ @ @ @ @ @ @ @ @ @ 1.0 , -1.0 , and Both would be -1.0 , -1.0 . <p> SkewDefault : 0.0 , 0.0 , AnchorX , AnchorY <p> Skews the shape in the X and / or Y axis , some number of positive or negative degrees of angle . The skew is done either from the center of the shape ( default ) , or optional X , Y anchor points in pixels relative to the top left of the shape . <p> Offsets ( moves ) the shape in the X and / or Y axis some number of positive or negative pixels . <p> Example:Shape=Rectangle 0,0,100,100 Offset 10,0 <p> TransformOrderDefault : Rotate , Scale , Skew , Offset <p> Allows you to change the default order in which the various Transform modifiers are applied . This can be important when anchor points are used in transforms , as for instance you may want to Scale before you Rotate . Any missing Transform modifier names will be placed to the back of the queue in the default order . <p> Example:Shape=Rectangle 0,0,100,100 TransformOrder Scale , Rotate In this example the resulting order would @ @ @ @ @ @ @ @ @ @ Modifier <p> Extend <p> A special modifier that will allow you to move Attribute and / or Transform modifiers from the ShapeN option to one or more named options in the meter . The intent of this is two-fold . First , to allow different shape to share modifiers without having to specify them repeatedly in each shape option . Second , to provide a way to shorten the overall length of the shape option line , by breaking out modifiers as desired to separate named options . <p> Notes on Extend : The named options can be any names you like , however as with any other option in a . ini file , they must be unique to the Section . <p> This functionality can not " cascade " . You ca n't have a named Extend option use an Extend modifier . <p> The modifiers in the named option are in effect " inserted " in the ShapeN option line where the Extend keyword is located . In the case of any duplication of a modifier this inadvertently causes , the rule is " last wins " @ @ @ @ @ @ @ @ @ @ that end up being defined for a single ShapeN option , the last one that is defined after all Extend named options are " inserted " will be performed . <h> Defining Gradients <p> Gradients must be defined in a separate named option , which you then reference in Fill or Stroke modifiers on the shape . There are two kinds of gradients possible , LinearGradient and RadialGradient . <p> This takes the form of the Angle for the gradient in degrees , a pipe character , then a series of Color codes , a ; semi-colon , and a Percentage from 0.0 to 1.0 to define the position of the color in the gradient . Each series of Color ; Percentage are separated by a pipe character . <p> That will define a gradient at 180 degrees . It will start with a color of 255,0,0,255 ( red ) at percentage 0.0 ( the start ) , will transition to a color of 0,255,0,255 ( green ) at percentage 0.5 ( 50 percent ) , and to 0,0,255,255 ( blue ) at percentage 1.0 ( 100 percent ) . @ @ @ @ @ @ @ @ @ @ , with 0 or 360 starting directly to the right and rotating clockwise . This results in the following gradient directions on the Shape or Stroke : <p> 0 ( 360 ) : Right to Left <p> 90 : Bottom to Top <p> 180 : Left to Right <p> 270 : Top to Bottom <p> Note : Any defined color with a percentage outside the 0.0 to 1.0 range will not directly be displayed , but will still affect the interpolation of the gradient . <p> RadialGradientParameters : ( See below ) <p> This takes the form of the required CenterX , CenterY and any optional coordinate parameters , a pipe character , then a series of Color codes , a ; semi-colon , and a Percentage from 0.0 to 1.0 to define the position of the color in the gradient . Each series of Color ; Percentage are separated by a pipe character . <p> Note : Any defined color with a percentage outside the 0.0 to 1.0 range will not directly be displayed , but will still affect the interpolation of the gradient . <p> Note on Gradients @ @ @ @ @ @ @ @ @ @ used by adding a " 1 " to the end of LinearGradient or RadialGradient These LinearGradient1 and RadialGradient1 forms use all the same setting values , but interpolate the gradient using an alternative method of handling gamma correction . In some cases you may find this makes for a smoother or brighter gradient transition . <h> Mouse Detection on Shapes <p> The behavior of Mouse Actions , for actions like LeftMouseUpAction , MouseOverAction , MouseScrollDownAction and the others is a bit different on a Shape meter than other meters . <p> In a Shape meter , the mouse is detected on any solid part of the drawing created by any and all shapes in the meter . It is not detected on the actual meter container , no matter what value SolidColor is set to , or what other meters may be behind or in front of the Shape meter . <p> In order to have the mouse detected in the non-solid parts of your shape(s) , you will need to create a background Shape as the first shape in the meter . It can simply be a rectangle ( @ @ @ @ @ @ @ @ @ @ size you need , with a Fill Color 0,0,0,1 and a StrokeWidth 0 . Again , simply setting SolidColor on the meter itself will not work . For Shape meters , mouse detection has been entirely moved from the " meter " to the " shape " . <p> The mouse will be detected on any solid part of the shapes even if the shapes extend outside the boundaries of the meter container . This will be common with this meter type and is why we have changed the " target " of the mouse detection from the meter to the shapes . <p> As always , there can only be one of each kind of mouse action in a Section . This means that you ca n't for instance have two ShapeN shapes in the meter , and have a distinct LeftMouseUpAction on each . In order to have distinct mouse actions of the same type on individual shapes , you will need to create the shapes in different Shape meters . <h> Device Independent Pixels <p> The values for pixels that are used in the Shape meter are @ @ @ @ @ @ @ @ @ @ You may use 10.25 pixels or even 0.754 pixels when defining a shape . This is important for precision . However , this is only for the values used in shapes . The values used for meters , the W and H and X and Y of a Rainmeter meter , are still as of this writing in full integer pixels . <h> Examples <p> While the code here is for a simple skin that demonstrates various ways to manipulate the Rectangle shape type , the . rmskin in the Download button is a much more robust suite of skins demonstrating many of the aspects of the Shape meter . 
@@256501 <h> WebParser : Using StringIndex2 <p> StringIndex2 The second string index is used when using a RegExp in a measure that uses data from another WebParser measure ( i.e. the URL points to a parent measure . In this case the StringIndex defines the index of the result of the parent measure 's RegExp and the StringIndex2 defines the index of this measure 's RegExp ( i.e. it defines the string that the measure returns ) . <p> First , here is the entire code of a little skin to demonstrate how to use this feature . Go ahead and create this and run it to see it in action : <p> Notice we are doing something a bit different here . Instead of fully parsing the site into many , many StringIndexes on the main measure , we are just getting the main title and link for the site into StringIndexes 1 and 2 , then getting the entire contents of each &lt;item&gt; into StringIndexes 3 , 4 and 5 . <p> Now let 's skip the measures for the main title and link , they are done the @ @ @ @ @ @ @ @ @ @ : <p> MeasureItem1Title @qwx22557 @qwx22564 @qwx22571 <p> LONG ... <p> StringIndex=3 <p> StringIndex2=1 <p> Substitute=#Sub# <p> What we are doing is using the StringIndex2= feature to get the &lt;title&gt; of the first &lt;item&gt; from the feed . We define StringIndex=3 , which will return the entire first &lt;item&gt; from the main WebParser measure at the top . Then , unlike a normal " child " measure in WebParser , we use a RegExp= to parse the information in that StringIndex=3 and return the single bit of information we want from that &lt;item&gt; in a StringIndex2=1 on this measure . <p> Remember , the way StringIndex2 works is that IF a WebParser measure is using an earlier WebParser measure as the Url= AND the measure has a RegExp= on it , then the RegExp= is applied to the data in StringIndex , and the result is returned in StringIndex2 . <p> The " value " of the measure , when used for instance in a MeasureName= option in a meter , is what is returned in StringIndex2 . <p> We can repeat this process to get the link of the first @ @ @ @ @ @ @ @ @ @ ( ? siU ) &lt;link&gt; ( . * ) &lt;/link&gt; " <p> StringIndex=3 <p> StringIndex2=1 <p> Note that once again we are getting the entire &lt;item&gt; data from StringIndex=3 of the main measure , then using a RegExp= to get just the link from that information into StringIndex2=1 on this measure . <p> It might be obvious by now , but when we want to carry on with the second &lt;item&gt; from the feed , we use : <p> MeasureItem2Title @qwx22557 @qwx22564 @qwx22571 <p> LONG ... <p> StringIndex=4 <p> StringIndex2=1 <p> Substitute=#Sub# <p> So now we are getting the information for the entire second &lt;item&gt; from the main measure , which is in StringIndex=4 on that measure . Then we parse it with a RegExp= and the result is returned in the StringIndex2=1 on this measure . <p> Play with this a bit , and you might find that it can save a lot of extra parsing and creating huge RegExp= options to parse absolutely everything out of a site all at once up front . Get the main site in big chunks , then deal with the chunks as @ @ @ @ @ @ @ @ @ @ Hint : This can be a nice way to get around the limit of 99 StringIndex numbers on any single WebParser measure ... 
@@256520 <h> Rainmeter 3.2 Beta <p> The folowing are the changes for the 3.2 beta version of Rainmeter . You can safely install the new 3.2 beta version right over top of your existing Rainmeter 3.1 or earlier installation , and nothing you have done will be lost or changed . There is never any need to uninstall any earlier version of Rainmeter to use the newest version . <h> Changes in Rainmeter 3.2 <p> March 15 , 2015 - Revision 2383 <p> Release Candidate 1 <p> Added WebParser : Added new OnDownloadErrorAction to WebParser measures to allow taking an action when a remote file defined by Download=1 fails to download or ca n't be saved locally . <p> Changed Rainmeter : Added the value 100 to both Manage and the skin context menus to support setting the transparency of a skin to an opacity of 1 , which is invisible but will still react to the mouse . This can be used in conjunction with the fade in / fade out / on hover capabilities . <p> March 9 , 2015 - Revision 2380 <p> Fixed AudioLevel : Fixed a @ @ @ @ @ @ @ @ @ @ an application playing music or other sounds could cause the plugin just keep the last values it received . This resulted in a freezing of meter displays and on some systems a buzzing sound being produced for some number of milliseconds . <p> March 3 , 2015 - Revision 2379 <p> Fixed Rainmeter : Fixed a bug introduced in r2378 that would crash Rainmeter if a malformed option , with a trailing comma , i.e. FontColor=255,255,255 , was used . <p> March 2 , 2015 - Revision 2378 <p> Added WebParser : Added new OnConnectErrorAction to WebParser parent measures to allow taking an action when a site or file resource can not be connected to . <p> Added WebParser : Added new OnRegExpErrorAction to WebParser parent measures to allow taking an action when parsing a site or file resource with RegExp ( regular expression ) fails . <p> Changed WebParser : Changed FinishAction to not be executed when parsing a site or file resource with RegExp ( regular expression ) fails AND an OnRegExpErrorAction is defined on the measure . <p> Added WebParser : Added a new Reset command , @ @ @ @ @ @ @ @ @ @ values in the WebParser parent and related child measures to their initial empty values . <p> Fixed Math : Corrected a problem when a comma-separated , multi-argument math function was used in a formula in a comma-separated , multi-argument option . For instance using Clamp ( x , low , high ) in the arguments for FontColor=rrr , ggg , bbb , aaa . <p> Fixed Skin Installer : Changed the Skin Packager to only allow inclusion of a valid 400x60 . bmp file as a custom header in a . rmskin . Improperly sized custom images were causing visual problems in the Skin Installer user interface . <p> February 22 , 2015 - Revision 2373 <p> Changed Time : Added a Local value to the FormatLocale option , e.g. FormatLocale=Local . This will cause the output format of the measure to automatically use the date / time " locale " language and format set in Windows for the machine the skin is running on , rather than defaulting to a standard platform-agnostic " English " representation . <p> Fixed Time : Accounted for some minor bugs in Microsoft 's @ @ @ @ @ @ @ @ @ @ option . <p> February 18 , 2015 - Revision 2371 <p> Changed Time : Changed the TimeStamp option to allow a formatted date / time string as input . <p> Added Time : Added new FormatLocale option to support formatting a Time measure in any defined language / locale . <p> Added UpTime : Added a new SecondsValue option to allow formatting any defined number of seconds into " days , hours , minutes , seconds " as desired . This will override the default behavior of the UpTime measure . <p> Added Section Variables : Added a new : Timestamp section variable measure modifier . This will return the Windows timestamp value of the named Time measure , and overcomes a limitation with getting and using this number when a Time measure has a Format option . <p> All of the above additions and changes are related to new functionality for getting and using date / time information in skins , as well as support for Language / Locale values in Time measures . Details and examples can be found at Change Announcements . <p> February 8 , 2015 @ @ @ @ @ @ @ @ @ @ options to obtain Daylight Savings Time information for the local computer . <p> Added Formulas : Added Atan2 - Atan2 ( y , x ) math function . Returns the radians of arc tangent between points Y and X in the Cartesian plane . The sign of the elements determines the quadrant . <p> Code for addition submitted by user dcgrace <p> Added FileView : Added a new PathToFile value for the Type child measure option . This will return just the path the file , including a trailing " " . <p> January 27 , 2015 - Revision 2355 <p> Fixed Context Menu : Corrected some functionality bugs introduced in r2353 with the display and sorting of items on the context menus . <p> January 25 , 2015 - Revision 2353 <p> Added Context Menu : Added Favorites functionality to the Rainmeter and Skins context menus . Also added support for making a skin a " Favorite " in the Manage dialog . More details at Change Announcements . <p> Added WifiStatus : Added support for the 802.11ac protocol . <p> Changed Context Menu : Moved " Open folder @ @ @ @ @ @ @ @ @ @ of the Skins context menu for easier access . <p> Fixed Regular Expressions : Fixed a recursion bug in the PCRE regular expression library that could cause a crash of Rainmeter in rare cases . <p> Changed Time : A running time measure will now automatically update for a change in Daylight Savings Time without requiring a skin refresh . <p> September 17 , 2014 - Revision 2326 <p> Fixed Corrected a bug introduced in r2325 that would cause external applications like AutoIt to be unable to identify and send messages to the Rainmeter window handle . <p> Fixed AudioLevel plugin : Added error trapping when the AudioLevel plugin is used on the unsupported Windows XP operating system . <p> September 9 , 2014 - Revision 2317 <p> Added Plugins : Added new AudioLevel plugin by author dgrace to the Rainmeter build . This will allow for real-time VU-Meter and Spectrum Analyzer visualizations of sound output . See AudioLevel plugin for full documentation and example skins . <p> Fixed AudioLevel plugin : Fixed an issue with the Format child measure option that was not returning a Unicode string value . @ @ @ @ @ @ @ @ @ @ number was used in combination with the Random function . <p> August 23 , 2014 - Revision 2311 <p> Changed Image : Due to possible conflicts , removed support for ImagePath from MaskImageName functionality . MaskImagePath should be used to define a shared location for mask images , or simply use a full or relative path as part of MaskImageName . ImagePath should only be used to define a location for an Image meter 's primary image . 
@@256523 <h> More <h> MeterStyles <p> Meters can use option values from other meters . Using the MeterStyle option , one meter may inherit options from one or more " parent " sections . <h> Usage <p> If an option is given on both the parent meter and the child meter , the child 's setting overrides the parent 's for that meter . If multiple parents are given , separated by pipes ( ) , options on later parents override those on earlier parents . <p> Inherited options are used just as if they were explicitly written in the child meter . For example , if the #CURRENTSECTION# variable is used in an inherited option , it resolves as the name of the child meter , not the parent . Similarly , if a relative position is used , such as X=5R , the meter immediately previous to the child meter is used , not the parent 's . <p> The only options that can not be inherited are : <p> Meter . The meter type must be explicitly set in order to identify a section as a meter . @ @ @ @ @ @ @ @ @ @ be inherited through more than one generation . In other words , meters can not have " grandparents . " <h> MeterStyle Sections <p> Meters may inherit options from sections that are not meters . A skin section of any name1 that does not have the Meter or Measure option is treated as a MeterStyle . A MeterStyle section is completely ignored by Rainmeter unless it is referenced in the MeterStyle option of a meter . Options that are not valid for the child meter are also simply ignored , which means that the parent and child can be different types . <p> MyChild inherits all options from the MyFirstParent meter and the MySecondParent MeterStyle . This means it is displayed with all of the same font , color , size and other options given for those sections . The second parent 's StringStyle option overrides the first parent 's , which means the child meter displays italic text . Likewise , the child meter 's FontColor option overrides both parents ' , so the text displays with a color of 0,0,255 ( blue ) . 
@@256524 <h> Win7Audio plugin <p> String : The name of the current sound device . This will be used when the measure is bound to a String meter , or if the string SectionVariable value of the measure is used . <p> Number : The percentage ( 0-100 ) of current volume level . This will be used when the measure is bound to a meter which requires a percentage . This numeric value can also be used in a String meter , by setting the Text option of the meter to the numeric SectionVariable : value of the measure . 
@@256529 <h> General Options <p> UpdateDefault : 1000 <p> Defines the update interval of the skin in milliseconds . On each update , measures and meters are updated , and the skin is redrawn . <p> The lowest possible effective value for Update is " 16 " . Some care should be taken to only use very low update rates ( less than 100 ) when really needed , and to balance a low Update with DefaultUpdateDivider , or UpdateDivider on individual measures and meters , in order to keep the CPU usage by Rainmeter as low as possible . <p> Using -1 will update the skin only once on load ( or on refresh ) . The skin can then be manually updated using the ! Update bang . <p> Note : While Update=1000 will update the skin " once a second " , Update is not related to the system clock , and if a computer is busy or a complicated skin takes longer than the interval to complete a full update of the skin , updates can be unreliable in relation to elapsed time . Do not use @ @ @ @ @ @ @ @ @ @ functions . <p> **27;4196;TOOLONG : 1 <p> Default number of updates at which skin measure and meter values are updated . The Update option is multiplied by the specified value to determine how often measures and meters are updated . <p> Example : If Update=1000 and DefaultUpdateDivider=30 , then by default all measures and meters are updated every 30 seconds . <p> If DefaultUpdateDivider=-1 or any negative number , then by default all measures and meter are only updated once when the skin is loaded or refreshed . <p> Note : This option is designed to set a default UpdateDivider for all measures and meters in the skin . It can be overridden by setting UpdateDivider on individual measures or meters . This option should be used when a low Update is desired to support animations or other skin elements requiring rapid update , while avoiding having to manually set an UpdateDivider on a great many other measures and meters that do not need to be updated as quickly . <p> AccurateTextDefault : 0 <p> If set to 1 , String meters are measured and rendered using improved padding and @ @ @ @ @ @ @ @ @ @ DynamicWindowSizeDefault : 0 <p> If set to 1 , the window size is adjusted on each update to fit the meters . <p> SkinWidth , SkinHeightDefault : None <p> Either or both may be set . This will set and constrain the skin to the fixed dimensions defined , either the width , the height , or both . Any meter or part of a meter positioned outside the defined boundaries will be truncated . DynamicWindowSize will be ignored for the defined dimension(s) , and meters that would normally display even " outside " the skin will be truncated by the fixed skin dimension(s) . <p> DragMarginsDefault : 0,0,0,0 <p> Uses 4 values separated by commas to define the area from where the window can be dragged . The values define a margin of non-draggable area . It 's also possible to use negative numbers in which case the margin is calculated from the opposite side . E.g. DragMargins=0 , -100,0,0 . <p> Note : The action(s) defined will take place at the redraw the skin . <p> OnCloseAction <p> Action to execute when the skin is unloaded or when Rainmeter is closed . <p> OnFocusAction <p> Action to execute when the skin receives focus in Windows ( focus is given when the mouse is clicked on the skin ) . <p> Note : The action(s) defined will take place at redraw the skin . <p> OnUnfocusAction <p> Action to execute when the skin loses focus in Windows ( focus is lost when the mouse is clicked outside the skin ) . <p> Note : The action(s) defined will take place at redraw the skin . <p> OnWakeAction <p> Action to execute when Windows returns from the sleep or hibernate states . <p> Note : The action(s) defined will take place at the redraw the skin . <p> TransitionUpdateDefault : 100 <p> Defines the update time in milliseconds for meter transitions . While a transition is active the meter will update at this rate . Currently , only the Bitmap meter supports meter transitions . <p> ToolTipHiddenDefault : 0 <p> If set to 1 , all tooltips in the skin will be hidden . More information on tooltips . <p> Group <p> Defines a group or series of groups that the skin belongs to . For more information please see the Groups page . <p> SelectedColorDefault : ( see below ) <p> A color code used to define the color and transparency of the overlay when a skin is selected in @ @ @ @ @ @ @ @ @ @ , the default setting SelectedColor option is used . <p> If BackgroundMode=3 , defines margins of the Background image that are not scaled . The parameters are left , top , right , bottom . <p> **35;4225;TOOLONG 10 pixels from the top and 20 pixels from the bottom of the image are not scaled . <p> SolidColor , SolidColor2Default : 0,0,0,0 <p> This option will specify the background color when BackgroundMode=2 . If SolidColor2 is also specified , the background is a gradient composed of SolidColor and SolidColor2 . <p> Hint:SolidColor=0,0,0,1 can be used to make transparent areas of the background clickable . <p> GradientAngle <p> Angle of the gradient in degrees ( for SolidColor and SolidColor2 ) when BackgroundMode=2 . <p> BevelTypeDefault : 0 <p> If enabled , draws a bevel around the edges of the entire skin when BackgroundMode=2 . Valid values are : <p> 0 : No bevel <p> 1 : Raised <p> 2 : Sunken <h> Context options <p> ContextTitle , ContextTitle2 , ContextTitle3 ... <p> If not blank , adds an item to the skin 's context menu under " Custom skin actions " . @ @ @ @ @ @ @ @ @ @ to 30 characters per option . Additional characters are truncated with an ellipsis ( ... ) . If more than 3 ContextTitleN options are given , " Custom skin actions " becomes a submenu . If a ContextTitleN option is not valid , all subsequent ContextTitleN options are ignored . In addition , if more than 3 options are given , and the value of ContextTitleN includes only dashes ( - ) , the item is displayed as a separator . <p> Note : Variables in ContextTitleN are always dynamic . Variable values are read at the time the context menu is opened . This means that the ! SetOption bang can be used to change these values . <p> ContextAction , ContextAction2 , ContextAction3 ... <p> Action triggered by clicking the corresponding ContextTitleN item . ContextActionN is required for ContextTitleN to be valid , unless the item is a separator . <p> Note : Variables in ContextTitleN are always dynamic . Variable values are read at the time the context menu is opened . This means that the ! SetOption bang can be used to change these values . @ @ @ @ @ @ @ @ @ @ to 1 to enable Aero Blur on the Windows Windows 7 operating system . If no BlurRegions are specified , the entire skin background is blurred . <p> Note : The function will not work on Window 8.1 or Windows 10 . <p> BlurRegion , BlurRegion2 , ... , BlurRegionN <p> Defines areas and shapes of the one or more regions of the skin to be blurred . The format of the option is : BlurRegion=Type , TopX , TopY , BottomX , BottomY , Radius . <p> Valid values for Type are : <p> 0 : Region is disabled <p> 1 : Rectangular region <p> 2 : Rectangular region with rounded corners ( requires Radius ) <p> 3 : Elliptical region <p> The parameters following Type define the size and shape of the region . They are , in order : <p> TopX : Top left horizontal point in the skin <p> TopY : Top left vertical point in the skin <p> BottomX : Bottom right horizontal point in the skin <p> BottomY : Bottom right vertical point in the skin <p> Radius : Radius of the corners of @ @ @ @ @ @ @ @ @ @ Aero Blur options can be dynamically controlled with several bangs . <h> Example @qwx22547 @qwx22570 <p> Blur=1 <p> **25;4262;TOOLONG <p> ; BlurRegion creates a rectangle starting at 10 pixels from the left , 10 pixels down from the top , and ending at 190 pixels to the right , 50 pixels from the top . <p> **26;4289;TOOLONG <p> **31;4317;TOOLONG <p> Background @qwx22559 <p> W=200 <p> H=180 <p> SolidColor=0,0,0,50 <p> LeftMouseUpAction= ! AddBlur " 1,0,0,200,80 " <h> Deprecated options <p> Author <p> The author of the skin . <p> Note : This option is deprecated . Author should be defined in the Metadata section of the skin . <p> AppVersion <p> Defines the minimum version of Rainmeter required to use the skin . The formula to calculate the value is : major * 1000000 + minor1 * 1000 + minor2 . <p> Note : This option is deprecated . Use the version capabilities in Skin Packager . <p> LocalFont , LocalFont2 , ... <p> Loads the specified TTF font files for use with FontFace in String meters. 
@@256542 <h> Contents <h> More <h> Network Skin <p> One of the things folks like to have on their desktop is a skin to monitor the behavior and traffic of their network . <p> The NetIn / NetOut / NetTotal measures in Rainmeter can be used to monitor all traffic in and out of the NIC ( Network Interface Card ) on your computer . <p> However , there are a few considerations you should keep in mind to have a skin that is useful , accurate and informative . <h> The Interface option <p> One of the options that can be set on the Net measures is Interface . It will almost always be correct to set this to Interface=Best . <h> Smoothing out the traffic values <p> The network measures in Rainmeter measure the average number of Bytes sent through the interface every second . However , the nature of network traffic is that it can be very " spiky " . Many people find that a network skin has a more useful behavior if we " smooth out " these spikes a bit . So the traffic values @ @ @ @ @ @ @ @ @ @ the values change , rather than having a very jerky behavior . <p> This can be done by using the AverageSize option on the measure(s) . This will cause the measure(s) to average the returned values over the number of skin updates specified in the AverageSize option . <p> As discussed in the percentage manual entry , these meters will require that a " range " of values is provided , so the meter knows where in the scale of 0% to 100% the current value of the measure lies . <p> Some measures , like FreeDiskSpace for instance , automatically set this " range " , based on examining the resource being measured . The Network measures also attempt to do this , but with some serious limitations . What the measures do is dynamically set the maximum value for the range to the highest value the measure has been since the skin was loaded or refreshed . This can cause really undesirable behavior on these " percentage " meters until your skin has been running for a while and you have done things to use a large percentage @ @ @ @ @ @ @ @ @ @ measures internally measure the traffic data in bits per second . The measures automatically divide both this internal measurement , and any MinValue / MaxValue options by 8 , in order to use and display the values as bytes in meters . This means that any MinValue and MaxValue options should be set in bits , not bytes . Rainmeter will do the conversion to bytes automatically when the value(s) are used . <h> Setting the MinValue / MaxValue options : <p> The way to correct this behavior is to manually set the MinValue and MaxValue options on the network measure(s) . This will explicitly set the possible " range " of values for the measure so that meters requiring a percentage will immediately and correctly know where in the range of 0% to 100% the current value lies . <h> Finding your maximum download and upload bandwidth : <p> What we want to do is find and enter the maximum bandwidth your network connection supports . There are a couple of things to keep in mind : <p> The maximum bandwidth your ISP told you is a baldfaced lie @ @ @ @ @ @ @ @ @ @ , while most descriptions of network traffic in other contexts ( Wikipedia articles about network traffic , the amount your ISP advertises , many online testing sites , etc. ) describe network traffic in bits , or generally Megabits / Mbps per second . A byte is 8 bits . The good news is that Rainmeter will handle this conversion for you . <h> speedtest.net <p> One of the better places to get a reasonably accurate measurement of your maximum download and upload bandwidth is the SpeedTest site . Simply go to this site , click on Begin Test , and wait . In less than a minute , you will be given the maximum speeds the site sees for your computer . <p> An alternative , so you can test at more than one place and compare is speedof.me . <p> As you can see from the image , the values returned by SpeedTest are in Mbps or Megabits per second . This is just what we need for Rainmeter . <p> So to use these values in your skin , you simply need to plug them into the @ @ @ @ @ @ @ @ @ @ more little calculation you need to do though . Remember that Rainmeter measures network traffic in bytes , and although it will handle any conversion from bits ( the Mbps from SpeedTest ) to bytes , we are talking about Mega or million bits/bytes . Simple enough , a Megabyte is 1048576 bytes . <h> Let 's put it together : <p> I set my Interface to " Best " , my maximum download speed from SpeedTest is " 33.12 " and my maximum upload speed is " 11.71 " I want to smooth out the traffic by averaging the results every " 5 " skin updates : <p> MeasureNetIn <p> Measure=NetIn <p> Interface=Best <p> MinValue=0 <p> MaxValue= ( 33.12 * 1048576 ) <p> AverageSize=5 <p> MeasureNetOut <p> Measure=NetOut <p> Interface=Best <p> MinValue=0 <p> MaxValue= ( 11.71 * 1048576 ) <p> AverageSize=5 <h> Sample Skin : <p> I have put all this together in a reasonably simple little skin that : <p> Tests your network connection to be sure it is active . <p> Gets and displays both your LAN ( local ) IP address and WAN ( Internet ) @ @ @ @ @ @ @ @ @ @ to toggle the value between them . Click the skin to copy your WAN IP address to the Windows clipboard . <p> Displays an image that dynamically indicates **40;4350;TOOLONG as appropriate . <p> Displays the current download and upload traffic in bytes/kbytes/Mbytes , scaling automatically . <p> Displays a Bar meter for download and upload values , as a percentage of the total bandwidth your connection supports . <p> I have put some things in Variables to make them easy to change . Be SURE to change the values for your maximum download and upload bandwidth . Feel free to either use this skin as is , or tear it apart to make it your own . 
@@256548 <h> Contents <h> More <h> WebParser : Relative Paths <p> There is an issue with retrieving and displaying images from web sites when the source HTML has them referred to as a " relative path " to the image . <p> WebParser can download and display images by doing a WebParser Measure which gets the full URL and name of the image , and setting " Download=1 " on the Measure . Then a Meter using Meter=Image with a MeasureName=xxxx referring to the Measure which downloaded the image will display the downloaded image . <p> Problem <p> The problem came in when the image was referred to in the web site HTML using a relative path to the image . An example is the logo at the top of the Rainmeter forums : <p> As you can see , the full URL is not included in anything that WebParser can search for , so Download=1 fails ... <p> Solution <p> A WebParser Measure can append the RESULTS of another WebParser Measure in the " URL " line by referencing the Measure in square brackets . This means you can use @ @ @ @ @ @ @ @ @ @ the image you want , and use this information in a second Measure where you hard code the URL and then pass the result of the search for the image to the second Measure . <p> In order to have the two measures work in the correct " order " , so the second one is n't looking for the relative URL before the first one is done getting it , you should make the second measure " dynamic " , and use ! CommandMeasure SecondMeasure " Update " as a FinishAction on the first measure . That way the first measure will " drive " the second one . @qwx22547 @qwx22570 @qwx22553 @qwx22549 <p> MeasureImageLocation @qwx22557 @qwx22564 <p> UpdateRate=1800 <p> Url=http : //forum.rainmeter.net/ <p> RegExp= ( ? siU ) &amp;lt ; img src= " ( . * ) " @qwx22567 <p> FinishAction= ! CommandMeasure MeasureImageDownload " Update " <p> MeasureImageDownload @qwx22557 @qwx22564 <p> UpdateRate=1800 <p> LONG ... @qwx22567 @qwx22552 <p> Download=1 <p> MeterDisplayImage @qwx22559 <p> **32;4392;TOOLONG <p> W=200 <p> PreserveAspectRatio=1 <p> Here we are using the first Measure MeasureImageLocation to get the relative path and filename of the image @ @ @ @ @ @ @ @ @ @ combine the known URL and the information in a dynamic way **25;4426;TOOLONG to create a fully loaded Measure which will succeed in downloading the image ... Then we just display it . 
@@256565 <h> More <h> FileView plugin <p> Plugin=FileView retrieves information about folders and files . <p> The plugin gathers all the folder and file names , sizes , dates and icons in the selected folder . It counts the number of files and folders and obtains the combined size . It can also search recursively through all the subfolders of the selected folder to obtain the totals for count and size . <p> FileView operates with a " parent / child " approach . A main " parent " FileView measure is used to obtain all the information for a selected folder , and then " child " measures are used to read individual entries from the parent using the Path= option . <h> Usage <p> FileView measures take the form : @qwx22547 @qwx22570 @qwx22553 <p> MeasureFolder @qwx22557 @qwx22563 <p> Path= " C : Program FilesRainmeter " <p> ShowDotDot=0 <p> ShowFolder=0 <p> Count=3 <p> In this example , this " parent " measure will obtain name , size , date and icon information about all files in the selected folder , then create three Index values for the first three files @ @ @ @ @ @ @ @ @ @ FileView measures : <p> MeasureChild1 @qwx22557 @qwx22563 @qwx22562 @qwx22569 <p> Index=1 <p> MeasureChild2 @qwx22557 @qwx22563 @qwx22562 @qwx22569 <p> Index=2 <p> MeasureChild3 @qwx22557 @qwx22563 @qwx22562 @qwx22569 <p> Index=3 <p> The values of the three child measures are now the FileName information parsed into Indexes 1 through 3 by the parent measure . These can then be used with MeasureName and other options in meters . <p> Another way to use the information in child measures is : <p> MeasureChild1 @qwx22557 @qwx22563 @qwx22562 @qwx22569 <p> Index=1 <p> MeasureChild2 @qwx22557 @qwx22563 @qwx22562 <p> Type=FileSize <p> Index=1 <p> MeasureChild3 @qwx22557 @qwx22563 @qwx22562 <p> Type=FileDate <p> Index=1 <p> The values of the three child measures are now the FileName , FileSize and FileDate information from the first file ( Index 1 ) of the parent measure . <p> In these examples , three indexes are created due to the Count=3 option on the parent measure . However , the information for all files and / or folders are obtained by the plugin , and subsequent or previous entries can be assigned to the three indexes by using ! CommandMeasure statements described below . This will @ @ @ @ @ @ @ @ @ @ and / or folders in a dynamic way . <p> If it is desired that a folder be monitored for new or changed files , the Update plugin command should be used in conjunction with an OnUpdateAction statement to keep the measure current with changing disk information . Be aware that having the plugin physically access the disk has a performance cost , and care should be taken to use an appropriate UpdateDivider . <p> If set to 1 , the entries are sorted in ascending order . Otherwise a descending order is used . <p> WildcardSearchDefault : * <p> Wildcards used to filter included files and/or folders . Standard * and ? characters can be used . <h> Child measure options <p> IndexDefault : 1 <p> Index of the file or folder from the parent measure . This should not exceed the Count number in the parent measure . If it does , the items will wrap around . For example , if Count=8 , Index=9 will be treated as Index=1 . <p> IgnoreCountDefault : 0 <p> If set to 1 , the Index will represent the actual index @ @ @ @ @ @ @ @ @ @ is useful to display a particular file or folder at all times ( like the .. folder ) . <p> TypeDefault : FolderPath <p> Type of information to obtain from the parent measure . <p> Information for path returned by the parent measure <p> FolderPath : Path of folder returned in parent Path , with trailing " " <p> FolderSize : Size in bytes of folder returned in parent Path <p> FileCount : Count of files in folder returned in parent Path <p> FolderCount : Count of folders in folder returned in parent Path <p> Information for object returned by the child Index number <p> FileName : Name of indexed object , folder or file <p> FileType : Extension only with no " . " for indexed file . Empty with folder <p> Path and filename of the location ( relative to the skin folder ) to save icons when Type=Icon . If no path is given , the icons are saved in the skin folder and are named " iconX.ico " , where " X " is the index number . <p> For example , if Count=8 , and @ @ @ @ @ @ @ @ @ @ a total of 4 pages . If items 8-15 ( page 2 ) are being displayed , the PageUp will decrease the page count by one changing the displayed items to items 0-7 ( page 1 ) . <p> This will change the path to the folder one higher in the folder structure . Behaves like clicking on the .. folder . <h> Child measure commands <p> FollowPath <p> If the index referenced in the child measure is currently a folder , then the parent measure 's Path is updated to the new path . If it is a file , then it is opened with the default Windows associated application . In order to better simulate Windows behavior , it is recommended that this command be used with a double-click action . <p> This will open the file or folder that the index represents . If it is a folder , the folder is opened in Windows Explorer . If it is a file , then it is opened with the default Windows associated application . In order to better simulate Windows behavior , it is recommended that this @ @ @ @ @ @ @ @ @ @ commands <p> ContextMenu <p> Opens the context menu for the item represented by the measure . The context menu will appear at the current mouse location if the mouse is hovering over the skin , otherwise it will appear at the top left corner of the skin . This command can be used on a parent or child measure . <p> Example : ! CommandMeasure " MeasureName " " ContextMenu " <p> Parent measures have the extra ability to open the context menu for a manually defined file/folder . See the example below . 
@@256570 <h> More <h> Win7Audio plugin <p> String : The name of the current sound device . This will be used when the measure is bound to a String meter , or if the string SectionVariable value of the measure is used . <p> Number : The percentage ( 0-100 ) of current volume level . This will be used when the measure is bound to a meter which requires a percentage . This numeric value can also be used in a String meter , by setting the Text option of the meter to the numeric SectionVariable : value of the measure . 
@@256583 <h> More <h> Setting Up <h> System Requirements <p> Rainmeter will run on Windows 7 ( Service Pack 1 and Platform Update required ) and above . The same installer may be used on either 32-bit or 64-bit systems , and all skins and features are compatible with both architectures . <p> Rainmeter is not available for non-Windows systems , including Mac OS and Linux , and there are no plans to support these operating systems . <h> Download <p> There are two versions of Rainmeter available : the final release of the current version , and the beta release of the next version . Betas are often released weekly , and final versions are released every few months . Despite the " beta " label , every release of Rainmeter is stable and backwards-compatible with previous versions . The only difference is that beta features may ( rarely ) be changed or removed before the next version becomes final . <p> We recommend the beta version for most users who want to get the latest features and bug fixes . However , if you do not want to risk @ @ @ @ @ @ @ @ @ @ in a future release , use the final version instead . <p> Installing Rainmeter is mostly automatic . <h> Install <p> To install Rainmeter , run the installer program that you downloaded , and follow the instructions . ( See Installing Rainmeter if you need more detailed instructions , including steps for installing Rainmeter as a portable application. ) 
@@256593 <h> Contents <h> More <h> NetIn/NetOut Alternative <p> Tip by TitaniumDust <p> Depending on your configuration , sometimes Windows ( and thus Rainmeter ) seems to get confused about the Interface= number required for the Measure=NetIn and Measure=NetOut built-in measures for retrieving the amount of data being sent and received over your NIC . ( Network Interface Card ) <p> An alternative is to use the Perfmon Plugin . This uses the actual text name of your NIC instead of the number assigned by Windows , and seems to be more reliable for some users . <p> Using Measure=Plugin with the " Perfmon " plugin as in the examples below , set " PerfMonInstance " to the name of your NIC . To find the name , you can run Perfmon.exe in Windows and press the " Add " button . ( the green plus sign above the graph on the right ) Select " Network Interface " under " Available Counters " and find your NIC under " Instances of selected objects " . Then use the name of your NIC card , EXACTLY as it appears in Perfmon.exe @ @ @ @ @ @ @ @ @ @ plugin in your measure . 
@@256600 <h> Contents <h> More <h> Animated . GIF Files <p> Rainmeter will not display animated . gif files by just using a Meter=Image meter . It will treat the animated gif as just a regular . gif file and display only the first " frame " of the image . <p> There are ways to use your animated . gif files in Rainmeter however . It requires using a tool to do some conversions on your original image , and a couple of ways to display the result so it is animated and looks just like your original in all its glory . <p> Let 's use this animated . gif image for our example : <h> Get ImageMagick <p> This is a free utility you can GET HERE Download and install ImageMagick . It will by default install to C : Program FilesImageMagick , and add itself to the Windows PATH . <h> Method One : Using individual frame images ( preferred ) <p> Advantages : You can define the size and other attributes of the image(s) when they are displayed . This may include options to size with @ @ @ @ @ @ @ @ @ @ others . Disadvantages : A bit more hard drive space , and a bit more CPU usage . <p> This method involves " deconstructing " your . gif image into separate . jpg or . png files , then displaying them one after the other in a way that creates an animation effect . <p> Start a Command Prompt window . <p> In the Command Prompt window , deconstruct your . gif file . <p> Use the ImageMagick tool to extract the " frames " from the . gif image into separate image files . Any output image format can be used , but if your . gif has transparency , you will need to output to . png . <p> This will create separate . png images for each of the " frames " in the . gif file in the current folder . The images in this example will be named Loading-0.png , Loading-1.png ... Loading-7.png . You can exit the Command Prompt window . <p> Create a skin like this to display the images one after the other to display the animation : <p> ; Note - @ @ @ @ @ @ @ @ @ @ <p> ; LONG ... <p> ; Convert your . gif image to a " Bitmap " with the following in a cmd.exe command prompt window : <p> Information=Displays a deconstructed . gif file ( individual frames ) as if it was a . gif file Instructions : See . ini file for how to get and use ImageMagick <p> Version=Jan 16 , 2016 <p> License=Creative Commons **32;4453;TOOLONG Alike 3.0 <p> ImageNumberCalc @qwx22556 <p> Formula=Counter % 8 <p> ImageMeter @qwx22559 <p> LONG ... @qwx22550 @qwx22552 <h> Method Two : Converting a . gif to a multiple frame " Bitmap " image <p> Advantages : A bit less hard drive space , and a bit less CPU usage . Disadvantages : You can not define the size and other attributes of the image(s) when they are displayed . This may include options to size with W and H , AntiAlias , Rotate , TransformationMatrix and others . <p> This method involves " converting " the frames of your . gif image into a single " bitmap " file , which is then displayed with a Bitmap Meter . <p> Start a Command @ @ @ @ @ @ @ @ @ @ convert your . gif file to a bitmap . <p> Use the ImageMagick tool to extract and combine the " frames " from the . gif image into the single image file . Any output image format can be used , but if your . gif has transparency , you will need to output to . png. 
@@256614 <h> Contents <h> More <h> ! SetOption Guide <p> The ! SetOption bang allows you to set many options/settings for meters and measures . This does not require that the meter or measure have " DynamicVariables " set on it , and will remain in effect until the skin is refreshed or the option is changed by some other action . The option does not already have to exist on the meter or measure , as ! SetOption will replace any existing option or add it if needed . <h> Changing or adding an option <p> Change the color of the string meter from red to green and the style to bold when you hover over the meter . <h> Removing or restoring an option <p> You can remove a change you made using ! SetOption by using the bang again , with " " ( an empty string ) as the value you set the option to . It should be noted that this removes the entire option from the meter or measure . <p> This will remove the options FontColor and StringStyle from the meter . For the @ @ @ @ @ @ @ @ @ @ . Now the meter has no FontColor settting at all , and will default to 0,0,0,255 ( black ) instead of changing back to 255,0,0,255 ( red ) as you might want . <h> Variables and ! SetOption <p> ! SetOption , like any other bang , will resolve any #Variables# before setting the option . @qwx22548 <p> MyColor=255,255,255,255 <p> MeterOne @qwx22560 <p> Text= " Hello World " <p> MouseOverAction= ! SetOption MeterOne FontColor #MyColor# @qwx22552 <p> This sets the meter with **25;4487;TOOLONG , not FontColor=#MyColor# . You can however set the option with the literal " #MyColor# " if you wish . You will need to " escape " the variable , with the " * " character . <p> MeterOne @qwx22560 <p> Text= " Hello World " <p> MouseOverAction= ! SetOption MeterOne FontColor #*MyColor*# @qwx22552 <p> Now the meter will be set to FontColor=#MyColor# and will obey any changes made to that variable elsewhere in the skin , due to DynamicVariables=1 being set . <h> Measures and ! SetOption <p> ! SetOption will use the current value of a Measure if it is used in the option . @ @ @ @ @ @ @ @ @ @ <p> MeterOne @qwx22560 <p> Text=MeasureTime1 @qwx22552 <p> LeftMouseUpAction= ! SetOption MeterOne Text MeasureTime2 <p> This sets the meter with the Text= as the current number of minutes , not Text=MeasureTime2 . You can however set the option with the literal " MeasureTime2 " if you wish . You will need to " escape " the measure , with the " * " character . <p> MeasureTime1 @qwx22558 <p> Format=%S <p> MeasureTime2 @qwx22558 <p> Format=%M <p> MeterOne @qwx22560 <p> Text=MeasureTime1 @qwx22552 <p> LeftMouseUpAction= ! SetOption MeterOne Text *MeasureTime2* <p> Now the meter will be set to Text=MeasureTime2 and will stay current with the value of that measure , due to DynamicVariables=1 being set . <h> What ! SetOption can change and what it ca n't <p> In general , ! SetOption can be used to change the value of just about any option/setting on any meter or measure . Almost any setting on a meter or measure that is specific to that type , like FontColor or ImageName or Formula is allowed . Also other settings common to all meters or measures , like Group or MeterStyle or UpdateDivider are allowed @ @ @ @ @ @ @ @ @ @ However there are some broad categories and specific things that ! SetOption can and ca n't be used for . <p> You may only use ! SetOption on Meters and Measures . This means that you may not change any settings in Rainmeter or Variables , and may not change a setting in a section used as a MeterStyle , unless that section is ALSO a valid meter or measure type itself . <p> You may not use ! SetOption to change the SectionName of a meter or measure , nor the " type " of meter or measure that it is. ( ie : Meter=String ) <p> You may not use ! SetOption to change any setting on a plugin measure that is specific to that kind of plugin if the plugin does not currently support DynamicVariables=1. 
@@256616 <h> Options <p> URL to the site or file to be downloaded and parsed . If the name of another WebParser measure is used , e.g. URL=SomeMeasure , then the value of the parent measure is used , generally by referring to a specific StringIndex number . <p> WebParser can not use cookies or other session-based authentication , so it can not be used to retrieve information from web sites requiring a login . However , Webparser can be used on sites which support HTTP authentication . E.g. http : **32;4514;TOOLONG . <p> WebParser can read and parse local files on your computer by using the file : //URI scheme . E.g. URL=file : **27;4548;TOOLONG . Note that this must be a fully qualified path to the file . <p> If you want to use the current value of a measure in a dynamic way as a Section Variable , rather than as a reference to a " parent " WebParser measure , you must prefix the name of the measure with the &amp; character . <p> Defines which captured string from the RegExp this measure returns . This option @ @ @ @ @ @ @ @ @ @ of the caputured values in a parent measure to use . <p> Note : There is a limit of 99 StringIndex values allowed on a single WebParser measure . <p> StringIndex2 <p> The second string index is used when using a RegExp in a measure that uses data from another WebParser measure ( i.e. the URL points to a parent measure . In this case the StringIndex defines the index of the result of the parent measure 's RegExp and the StringIndex2 defines the index of this measure 's RegExp ( i.e. it defines the string that the measure returns ) . <p> Note : If the RegExp is not defined in this measure , the StringIndex2 has no effect . <p> UpdateRateDefault : 600 <p> The rate in milliseconds determining how often the webpage is downloaded . This is relative to the config 's main Update rate and any UpdateDivider on the measure . So the formula would be Update X UpdateDivider X UpdateRate = " how often the measure connects to the site " . <p> Notes : Some caution should be used in determining how often to @ @ @ @ @ @ @ @ @ @ site can cause your computer to be seen as an " attack " and result in being blocked . The UpdateRate option defaults to 600 as a safety measure . This should not be changed unless there is some reason to connect more or less often to the site . <p> In order to override the UpdateRate set on a WebParser measure , to have it connect to the site and download the data " right now " , the ! CommandMeasure bang must be used , with the name of the " parent " measure as the first parameter , and " Update " as the second . <p> Automatically decodes HTML Character References . This will eliminate the need to use a Substitute statement to translate character references like &amp;quot ; , &amp;amp ; , &amp;lt ; , and &amp;gt ; to the actual character . Valid values are : <p> 0 : Does nothing ( default ) . <p> 1 : Decodes both numeric character references and character entity references . <p> 2 : Decodes only numeric character references . <p> 3 : Decodes only character entity @ @ @ @ @ @ @ @ @ @ the child measures actually returning the value of a StringIndex . <p> DebugDefault : 0 <p> Logs DEBUG messages to the Rainmeter log or to a file . Valid values are : <p> 0 : Does not log DEBUG messages from WebParser . <p> 1 : Logs DEBUG message to the log . Rainmeter must also be in Debug mode . <p> 2 : Saves the downloaded webpage to WebParserDump.txt in the current skin folder . This can be useful since some web servers send different information depending which client requests it . Remember to remove this from your config once you have it working correctly . <p> Hint : Determining StringIndex values to use in a child measure can be done by setting Debug=1 on a measure having the RegExp option , which will display matched strings and StringIndex numbers in the Rainmeter log <p> Debug2File <p> If the Debug option is set to 2 , this option can be set to the path and name of the file to use for the downloaded webpage instead of WebParserDump.txt in the current skin folder . <p> Note : The folder @ @ @ @ @ @ @ @ @ @ 0 <p> If Download=1 , the URL is downloaded to Window 's TEMP folder and the name to the file is returned as string value . The measure can then be used with MeasureName on an Image meter to download images from a site and display them . <p> Note : When used on a child measure , the download itself is treated as a parent function , and any FinishAction on the measure will be executed if the download succeeds , and any OnDownloadErrorAction on the measure will be executed if the download fails . <p> DownloadFile <p> If the Download option is set to 1 , this option defines a relative path and file name where the downloaded file will be saved instead of in Windows TEMP . <p> A folder DownloadFile will be created in the current folder , and the defined relative path and file name will be created under that . It is not possible to specify an absolute path . <p> Note : This file is not a temporary file so it is not deleted after unloading a skin or exiting Rainmeter . <p> @ @ @ @ @ @ @ @ @ @ to the string defined in this option if the RegExp results in a regular expression parsing error . <p> Note : While there might be cases where this option is desirable , the OnRegExpErrorAction option might be a more flexible and robust way to deal with regular expression errors . <p> **25;4577;TOOLONG : 1 <p> If set to " 0 " , this will suppress logging of " Not enough substring " errors . This can be useful when for instance you are using lookahead assertions in a regular expression , and missing ( captures ) should not be treated as an " error " . <p> WebParser reads the resource only if it has been modified since last read . This can be overridden with ForceReload=1 . <p> CodePageDefault : 0 <p> Specifies the code page of the downloaded URL=http : // web page or external file read with URL=file : // . <p> Most web sites on the web today are encoded with the Unicode UTF-8 standard . This is the default for WebParser , and it will seamlessly handle the site . No CodePage option is needed @ @ @ @ @ @ @ @ @ @ sites that are encoded in a language / character set specific way . On a web site , the encoding used can generally be determined by viewing the raw HTML source and checking the " charset " meta value in the " head " section of the page . ( i.e. meta charset= " UTF-8 " ) <p> Some Examples are : <p> CodePage=1200 : Unicode UTF-16 LE ( Little Endian ) <p> CodePage=1251 : ANSI Cyrillic ; Cyrillic ( Windows ) <p> CodePage=1252 : ANSI Latin 1 ; Western European ( Windows ) <p> CodePage=28605 : ISO 8859-15 Latin 9 <p> CodePage=65001 : Unicode UTF-8 <p> In addition , there are times when an external local file to be parsed with URL=file : // will be encoded in other than the ANSI ( really ASCII plus " extended ASCII " specific to the locale of the computer ) encoding used as the default in most Windows-based text editors . Primarily this will be in Unicode UFT-16 LE . In this case , the CodePage=1200 option must be used to tell WebParer how to interpret the resource being read . @ @ @ @ @ @ @ @ @ @ when the parent WebParser measure connects to a remote resource using HTTP(S) . <p> If you want to find out what the User Agent String is for the browser you use , you can connect to WhatIsMyBrowser in your browser and copy the string it returns . Other common User Agent String values can be found at UserAgentString . <p> This option can also be set in the Rainmeter.data file . If set there , it will be used as the global setting for all WebParser measures unless overridden in an individual measure(s) . <p> This setting is applied when the measure is initialized on skin load / refresh , and can not be changed dynamically . <p> Header , Header2 , Header3 ... <p> Specifies one or more custom HTTP Header Fields to be sent when the parent WebParser measure connects to a remote resource using HTTP(S) . <p> **28;4604;TOOLONG : no-cache <h> Action Options <p> These options are only valid on parent measures that connect to a site or file with URL , and / or have a RegExp or Download option . They are not valid on @ @ @ @ @ @ @ @ @ @ that are executed when the resource has been downloaded and the regular expression ( PCRE ) parsing is done . <p> Since WebParser is a " threaded " plugin , and Rainmeter does not " wait " for it to return information from the resource , FinishAction can be used to ensure that things in the skin that are dependent on the values from the measure do n't generate errors or undesirable visual displays while the WebParser measure has n't finished getting and parsing the information , or that they are immediately updated as soon as WebParser is done . <p> Note : FinishAction will be executed when the resource is connected to and the regular expression parsing is complete . It will be executed whether the parsing of the information by RegExp succeeds or fails . It will not be executed if the resource can not be connected to , or if the regular expression parsing fails , AND an OnRegExpErrorAction option is set on the measure . <p> OnConnectErrorAction <p> Bangs or other actions that are executed if WebParser is unable to connect to the hostname or file @ @ @ @ @ @ @ @ @ @ network unavailability on the local computer , or network or server problems at the remote resource . In the case of the file : // protocol , this would be triggered by not finding the defined local file . <p> Note : It will take some time , perhaps as long as 10-20 seconds , for WebParser to " time out " and execute this action if the resource can not be connected to over the network . <p> OnRegExpErrorAction <p> Bangs or other actions that are executed if the resource is connected to , but the regular expression defined in RegExp is unable to successfully parse the information . It will not be executed if the resource can not be connected to . <p> This might be due to an incorrectly defined RegExp option , a change to a web site that causes the parsing to fail , or a remote server problem where the site is accessible , but the specific page defined on the URL ca n't be found or causes a redirect to an HTTP error condition . <p> Note : If this option is defined @ @ @ @ @ @ @ @ @ @ . <p> OnDownloadErrorAction <p> Bangs or other actions that are executed if a measure has a Download option set to 1 , and the download of the resource fails . <p> This may be due to a missing file on the remote host , or the inability of Windows to save the file locally in either the Windows TEMP location or the location specified in a DownloadFile option . <p> The action will not be executed if the connection to or parsing of the resource in the parentURL option fails . It is executed if all else succeeds , but the specific download process fails . <p> Note : When Download is used on a child measure , the download itself is treated as a parent function , and any FinishAction on the measure will be executed if the download succeeds , and any OnDownloadErrorAction on the measure will be executed if the download fails . <p> Note : If some condition causes the error actions to be executed , care should be taken not to create an endless loop or cause the skin to repeatedly try to access a @ @ @ @ @ @ @ @ @ @ , it would not be wise to have these actions automatically update the measure they are on , or refresh the skin . <h> Measure Commands <p> Commands that can be sent to a parent WebParser measure using the ! CommandMeasure bang . <p> These are only valid with a target parent measure that connects to a site or file with URL , and / or has a RegExp option . They are not valid with a child measure as the target . <p> Update <p> This will cause a WebParser parent measure to override any current UpdateRate setting , and immediately access and parse the resource defined in URL . <p> Example : ! CommandMeasure MeasureName " Update " <p> Reset <p> This will cause a WebParser parent measure to reset all values for the parent and any related child measures to their initial empty values . <p> If a WebParser measure is able to connect and parse information from a web site or file , then that information is " remembered " , and is only replaced when new information is successfully received on subsequent connections to the @ @ @ @ @ @ @ @ @ @ from the old data to the new , and to allow a skin to continue displaying information if it is temporarily unable to connect or parse the resource . <p> Generally , the above behavior works best . However , this command might be used in conjunction with the OnConnectErrorAction and / or OnRegExpErrorAction actions if the skin design makes it desirable that WebParser " forget " old information when some error condition is triggered on subsequent connections to the resource . <p> Example : ! CommandMeasure MeasureName " Reset " <h> WebParser and Dynamic Variables <p> Dynamic variables can be used with the WebParser plugin . There are some things specific to WebParser that should be kept in mind when doing things in a dynamic way in WebParser measures : <p> WebParser uses UpdateRate to determine how often the plugin should actually access the site or file . While you can dynamically change any option on a WebParser measure , the plugin will not use the changes and access the site again until the next UpdateRate is reached . Just using ! Update or ! UpdateMeasure will NOT override @ @ @ @ @ @ @ @ @ @ change make WebParser parse the site " right now " , you will use the ! CommandMeasure bang with the " parent " WebParser measure as the first parameter , and " Update " as the second . <p> If you dynamically change an option on a " child " WebParser measure that depends on a " parent " measure , ( like StringIndex for instance ) you MUST use ! CommandMeasure with " Update " , targeting the " parent " WebParser measure . The values of child WebParser measures are a function of the parent measure , and are only updated when the parent is . You should never use ! CommandMeasure on a " child " measure . <p> If you want to use the current value of a measure in a dynamic way as a Section Variable , rather than as a reference to a " parent " WebParser measure , you must prefix the name of the measure with the &amp; character . <p> URL=http : **29;4634;TOOLONG <h> Examples <p> Retrieve the site title , first item and link from Slashdot 's RSS feed . 
@@256620 <h> More <h> IfActions <p> IFActions are action options you add to a measure to execute one or more Bangs or commands when a defined numerical threshold value is returned by the measure . IfActions are done by using pairs of Above , Equal , and Below Value and Action statements . You may have one of each kind of IfAction in a single measure . <h> Options <p> IfAboveValue <p> The value used by IfAboveAction . <p> IfAboveAction <p> Action to be executed when the measure goes above the value defined in IfAboveValue . The action is executed only at the moment when the measure exceeds the value , so it needs to go below the defined value before the action is executed again . <p> IfBelowValue <p> The value used by IfBelowAction . <p> IfBelowAction <p> Action to be executed when the measure goes below the value defined in IfBelowValue . The action is executed only at the moment when the measure falls below the value , so it needs to go above the defined value before the action is executed again . <p> IfEqualValue <p> The value @ @ @ @ @ @ @ @ @ @ executed when the measure is equal with the value defined in IfEqualValue . The action is executed only once when the measure is equal to the value , so it needs to go above or below the defined value before the action is executed again . The compared value is rounded to an integer . 
@@256637 <h> Contents <h> More <h> Font Typography Features <p> One of the supported features in the Inline Options for a String meter is the Typography setting . <p> If explicitly supported by the font you are using , these Typography settings can be used in all or part of the String meter when it is displayed . <p> It can be challenging to know what Typography features are supported by a given font . There is a free tool that can help with this at dp4 Font Viewer . If you load a font in this tool , then on the panel on the lower-right , select the " Info " tab and " Glyph Substitution " to see a list of all Typography features supported by the font . <h> Supported codes <p> c2pc - Petite Capitals From Capitals Turns capital characters into petite capitals . It is generally used for words which would otherwise be set in all caps , such as acronyms , but which are desired in petite-cap form to avoid disrupting the flow of text . See the pcap feature description for notes on the @ @ @ @ @ @ @ @ @ @ c2sc - Small Capitals From Capitals Turns capital characters into small capitals . It is generally used for words which would otherwise be set in all caps , such as acronyms , but which are desired in small-cap form to avoid disrupting the flow of text . <p> calt - Contextual Alternates In specified situations , replaces default glyphs with alternate forms which provide better joining behavior . Used in script typefaces which are designed to have some or all of their glyphs join . <p> case - Case Sensitive Forms Shifts various punctuation marks up to a position that works better with all-capital sequences or sets of lining figures ; also changes oldstyle figures to lining figures . By default , glyphs in a text face are designed to work with lowercase characters . Some characters should be shifted vertically to fit the higher visual center of all-capital or lining text . Also , lining figures are the same height ( or close to it ) as capitals , and fit much better with all-capital text . <p> ccmp - Glyph Composition Decomposition To minimize the number of glyph @ @ @ @ @ @ @ @ @ @ into two glyphs . Additionally , it may be preferable to compose two characters into a single glyph for better glyph processing . This feature permits such **25;4665;TOOLONG . The feature should be processed as the first feature processed , and should be processed only when it is called . <p> clig - Contextual Ligatures Replaces a sequence of glyphs with a single glyph which is preferred for typographic purposes . Unlike other ligature features , clig specifies the context in which the ligature is recommended . This capability is important in some script designs and for swash ligatures . between them for legibility and aesthetics . This feature would not apply to mono-spaced designs . Of course the user may want to override this behavior in order to do more pronounced letter spacing for aesthetic reasons . <p> cswh - Contextual Swash Replaces default character glyphs @ @ @ @ @ @ @ @ @ @ that there may be more than one swash alternate for a given character , which are accessed by specifying an index number to the alternative . <p> dlig - Discretionary Ligatures Replaces a sequence of glyphs with a single glyph which is preferred for typographic purposes . This feature covers those ligatures which may be used for special effect , at the user 's preference . <p> expt - Expert Forms Replaces standard forms in Japanese fonts with corresponding forms preferred by typographers . For example , a user would invoke this feature to replace kanji character U+5516 with U+555E . <p> fwid - Full Width Replaces glyphs set on other widths with glyphs set on full ( usually em ) widths . In a CJKV font , this may include " lower ASCII " Latin characters and various symbols . In a European font , this feature replaces proportionally-spaced glyphs with mono-spaced glyphs , which are generally set on widths of 0.6 em . For example , a user may invoke this feature in a Japanese font to get full mono-spaced Latin glyphs instead of the corresponding proportionally-spaced versions @ @ @ @ @ @ @ @ @ @ of consonants in Indic scripts . For example , in Hindi ( Devanagari script ) , the conjunct KKa , obtained by doubling the Ka , is denoted with a half form of Ka followed by the full form . <p> haln - Halant Forms Produces the halant forms of consonants in Indic scripts . For example , in Sanskrit ( Devanagari script ) , syllable final consonants are frequently required in their halant form . <p> halt - Alternate Half Width Re-spaces glyphs designed to be set on full-em widths , fitting them onto half-em widths . This differs from hwid in that it does not substitute new glyphs . <p> hist - Historical Forms Replaces the default ( current ) forms with the historical alternates . While some ligatures are also used for historical effect , this feature ' period ' effect . <p> hkna - Horizontal Kana Alternates Replaces standard kana with forms that have been specially designed for only horizontal writing . This is @ @ @ @ @ @ @ @ @ @ . <p> hlig - Historical Ligatures Replaces the default ( current ) forms with the historical alternates . Some ligatures were in common use in the past ' period ' effect . <p> hwid - Half Width Replaces glyphs on proportional widths , or fixed widths other than half an em , with glyphs on half-em ( en ) widths . Many CJKV fonts have glyphs which are set on multiple widths ; this feature selects the half-em version . There are various contexts in which this is the preferred behavior , including compatibility with older desktop documents . <p> hojo - Hojo Kanji Forms Used to access the JIS X 0212-1990 glyphs for the cases when the JIS X 0213:2004 form is encoded . The JIS X 0212-1990 ( aka , " Hojo Kanji " ) and JIS X 0213:2004 character sets overlap significantly . In some cases their prototypical glyphs differ . When building fonts that support both JIS X 0212-1990 and JIS X 0213:2004 ( @ @ @ @ @ @ @ @ @ @ , it is recommended that JIS X 0213:2004 forms be the preferred encoded form . <p> jp04 - JIS04 Forms The National Language Council ( NLC ) of Japan has defined new glyph shapes for a number of JIS characters , which were incorporated into JIS X 0213:2004 as new prototypical forms . The ' jp04 ' feature is A subset of the ' nlck ' feature , and is used to access these prototypical glyphs in a manner that maintains the integrity of JIS X 0213:2004 . <p> jp90 - JIS90 Forms Replaces Japanese glyphs from the JIS78 or JIS83 specifications with the corresponding forms from the JIS X 0208-1990 ( JIS90 ) specification . <p> kern - Kerning Adjusts amount of space between glyphs , generally to provide optically consistent spacing between glyphs . Although a well-designed typeface has consistent inter-glyph spacing overall , some glyph combinations require adjustment for improved legibility . Besides standard adjustment in the horizontal direction , this feature can supply size-dependent kerning data via device tables , " cross-stream " kerning in the Y text direction , and adjustment of glyph placement independent @ @ @ @ @ @ @ @ @ @ apply to runs of more than two glyphs , and would not be used in mono-spaced fonts . Also note that this feature does not apply to text set vertically . <p> liga - Standard Ligatures Replaces a sequence of glyphs with a single glyph which is preferred for typographic purposes . This feature covers the ligatures which the designer/manufacturer judges should be used in normal conditions . <p> lnum - Lining Figures Changes selected figures from oldstyle to the default lining form . For example , a user may invoke this feature in order to get lining figures , which fit better with all-capital text . This feature overrides results of the Oldstyle Figures feature ( onum ) . <p> locl - Localized Forms Enables localized forms of glyphs to be substituted for default forms . Many scripts used to write multiple languages over wide geographical areas have developed localized variant forms of specific letters , which are used by individual literary communities . For example , a number of letters in the Bulgarian and Serbian alphabets have forms distinct from their Russian counterparts and from each other . @ @ @ @ @ @ @ @ @ @ the script ' norm ' , in others the forms are radically distinct . <p> mkmk - Mark To Mark Positioning Positions marks with respect to other marks . Required in various non-Latin scripts like Arabic . For example , in Arabic , the ligatured mark Ha with Hamza above it can also be obtained by positioning these marks relative to one another . <p> nalt - Alternate Annotation Forms Replaces default glyphs with various notational forms ( such as glyphs placed in open or solid circles , squares , parentheses , diamonds or rounded boxes ) . In some cases an annotation form may already be present , but the user may want a different one . <p> nlck - NLC Kanji Forms Used to access glyphs made from glyph shapes defined by the National Language Council ( NLC ) of Japan for a number of JIS characters in 2000 . <p> onum - Old Style Figures Changes selected figures from the default lining style to oldstyle form . For example , a user may invoke this feature to get oldstyle figures , which fit better into the flow @ @ @ @ @ @ @ @ @ @ results of the Lining Figures feature ( lnum ) . <p> ordn - Ordinals Replaces default alphabetic glyphs with the corresponding ordinal forms for use after figures . One exception to the follows-a-figure rule is the numero character ( U+2116 ) , which is actually a ligature substitution , but is best accessed through this feature . <p> palt - Proportional Alternate Width Respaces glyphs designed to be set on full-em widths , fitting them onto individual ( more or less proportional ) horizontal widths . This differs from pwid in that it does not substitute new glyphs ( GPOS , not GSUB feature ) . The user may prefer the mono-spaced form , or may simply want to ensure that the glyph is well-fit and not rotated in vertical setting ( Latin forms designed for proportional spacing would be rotated ) . <p> pcap - Petite Capitals Turns lowercase characters into petite capitals . Forms related to petite capitals , such as specially designed figures , may be included . Some fonts contain an additional size of capital letters , shorter than the regular smallcaps and it is referred @ @ @ @ @ @ @ @ @ @ to be found in designs with a small lowercase x-height , where they better harmonize with lowercase text than the taller smallcaps . <p> pnum - Proportional Figures Replaces figure glyphs set on uniform ( tabular ) widths with corresponding glyphs set on glyph-specific ( proportional ) widths . Tabular widths will generally be the default , but this can not be safely assumed . Of course this feature would not be present in mono-spaced designs . <p> pwid - Proportional Widths Replaces glyphs set on uniform widths ( typically full or half-em ) with proportionally spaced glyphs . The proportional variants are often used for the Latin characters in CJKV fonts , but may also be used for Kana in Japanese fonts . <p> qwid - Quarter Widths Replaces glyphs on other widths with glyphs set on widths of one quarter of an em ( half an en ) . The characters involved are normally figures and some forms of punctuation . <p> rlig - Required Ligatures Replaces a sequence of glyphs with a single glyph which is preferred for typographic purposes . This feature covers those ligatures , @ @ @ @ @ @ @ @ @ @ normal conditions . This feature is important for some scripts to ensure correct glyph formation . <p> ruby - Ruby Notation Forms Identifies glyphs in the font which have been designed for " ruby " , from the old typesetting term for four-point-sized type . Japanese typesetting often uses smaller kana glyphs , generally in superscripted form , to clarify the meaning of kanji which may be unfamiliar to the reader . <p> salt - Stylistic Alternates Replaces the default forms with the stylistic alternates . Many fonts contain alternate glyph designs for a purely aesthetic effect ; these do n't always fit into a clear category like swash or historical . As in the case of swash glyphs , there may be more than one alternate form , which are accessed by specifying an index number to the alternative . <p> smcp - Small Capitals Turns lowercase characters into small capitals . This corresponds to the common SC font layout . It is generally used for display lines set in Large &amp; small caps , such as titles . Forms related to small capitals , such as oldstyle figures @ @ @ @ @ @ @ @ @ @ 1 ( ss01 ... ss20 ) In addition to , or instead of , stylistic alternatives of individual glyphs ( see ' salt ' feature ) , some fonts may contain sets of stylistic variant glyphs corresponding to portions of the character set , such as multiple variants for lowercase letters in a Latin font . Glyphs in Stylistic Sets may be designed to harmonize visually , interact in particular ways , or otherwise work together . Individual features numbered sequentially with the tag name convention ' ss01 ' ' ss02 ' ' ss03 ' ... ' ss20 ' provide a mechanism for glyphs in these sets to be associated to default forms and to each other , and for users to select from available Stylistic Sets <p> subs - Subscript May replace a default glyph with a subscript glyph , or it may combine a glyph substitution with positioning adjustments for proper placement . Many fonts will only support numeric digits . <p> swsh - Swash Replaces default character glyphs with corresponding swash glyphs . Note that there may be more than one swash alternate for a given character @ @ @ @ @ @ @ @ @ @ the alternative . <p> titl - Titling Replaces the default glyphs with corresponding forms designed specifically for titling . These may be all-capital and/or larger on the body , and adjusted for viewing at larger sizes . <p> tnam - Traditional Name Forms Replaces ' simplified ' Japanese kanji forms with the corresponding ' traditional ' forms . This is equivalent to the Traditional Forms feature , but explicitly limited to the traditional forms considered proper for use in personal names ( as many as 205 glyphs in some fonts ) . <p> tnum - Tabular Figures Replaces figure glyphs set on proportional widths with corresponding glyphs set on uniform ( tabular ) widths . Tabular widths will generally be the default , but this can not be safely assumed . Of course this feature would not be present in mono-spaced designs . <p> twid - Third Widths Replaces glyphs on other widths with glyphs set on widths of one third of an em . The characters involved are normally figures and some forms of punctuation . <p> unic - Unicase Maps upper- and lowercase letters to a mixed set @ @ @ @ @ @ @ @ @ @ single case alphabet . The letters substituted may vary from font to font , as appropriate to the design . If aligning to the x-height , smallcap glyphs may be substituted , or specially designed unicase forms might be used . Substitutions might also include specially designed figures . <p> zero - Slashed Zero Allows the user to change from the default 0 to a slashed form . Some fonts contain both a default form of zero , and an alternative form which uses a diagonal slash through the counter . Especially in condensed designs , it can be difficult to distinguish between 0 and O ( zero and capital O ) in any situation where capitals and lining figures may be arbitrarily mixed . 
@@256646 <p> There are no text formatting options possible with ToolTipText . The font , colors and sizes are the ones built into the standard tooltip behavior in the Windows operating system . <p> On a String meter , numeric formatting options are forced to AutoScale=1 , Scale=1 , NumOfDecimals=0 , Percentual=0 on the tooltip when values from the meter are used with %1 , %2 etc . To have more control over numeric formatting , SectionVariables should be used instead . Be sure to use DynamicVariables=1 on the meter when section variables are used . <p> ToolTipTitle <p> Title of the tooltip . Only one line of text can be used . <p> ToolTipIcon <p> Specifies the icon to use for the tooltip . This can be the path to an . ico file , or one of the following preset icons : <p> Info <p> Warning <p> Error <p> Question <p> Shield <p> Note:ToolTipTitle must be specified to use ToolTipIcon . <p> ToolTipTypeDefault : 0 <p> If set to 1 , a balloon tooltip is displayed . Otherwise a normal tooltip is displayed . <p> ToolTipWidthDefault : 1000 <p> @ @ @ @ @ @ @ @ @ @ reached , the text will automatically wrap . <p> Note : As a ToolTipTitle can not be wrapped , do not set this width less than the length of the title , or there could be unexpected results . <p> ToolTipHiddenDefault : 0 <p> If set to 1 , the tooltip is not displayed . <p> Note : This option can also be used in the Rainmeter section to hide all tooltips in the skin . 
@@256652 <h> More <h> System <h> Introduction <p> With this tutorial , we are going to cover several things . First , we are going to introduce two new measure and two new meter types , as well as some new options for controlling how they work . We will also touch on the use of UpdateDivider on measures to control the performance of a skin , and will explore using Variables to set , use and change values shared by measures and meters . <p> There is a lot going on in this skin , so let 's explore the end-result a bit so you can get a sense of where we are going as we work through it . First , let 's take a look at the final skin . <p> What we are going to do is measure the percent usage of the CPU , and the space on a couple of hard drives . Then we are going to create some circular meters showing the usage with Roundline meters . We are going to monitor the CPU with a Line meter , and display some information @ @ @ @ @ @ @ @ @ @ see one hard drive in that image ? We will get to that ... <h> Building the System skin <p> First , as we did in our earlier tutorial , let 's add the Rainmeter section to control the Update speed of the skin . @qwx22547 @qwx22570 <p> The next thing we are going to do is define some variables for the skin . Variables are used to create a value , which can be used repeatedly in the skin by enclosing the variable name in ## ( example : #VarName# ) . In order to change the value in all places it is used , you only need to change it one time in the Variables section of the skin . @qwx22548 <p> DarkBlue=27,63,107,255 <p> **25;4692;TOOLONG <p> **25;4719;TOOLONG <p> LightRed=250,148,135,255 <p> AlmostBlack=40,40,40,255 <p> CurrentDrive=C : <p> Drive1=C : <p> Drive2=D : <p> Now we will cheat a bit . In earlier tutorials , we waited until the end and put a solid background on the skin using an Image meter . Let 's go ahead and add that now , so we can demonstrate the first use of one @ @ @ @ @ @ @ @ @ @ <p> X=0 <p> Y=0 <p> W=185 <p> H=110 <p> SolidColor=#AlmostBlack# <p> Note that we have used the variable #AlmostBlack# in the SolidColor option for this meter . The meter will then use the value we defined as AlmostBlack=40,40,40,255 in the Variables section earlier . Remember that if you define SolidColor on an image meter with no MeasureName option , it simply draws a square or rectangle based on the W and H ( width and height ) options . <p> So let 's load our new skin and take a look at where we stand . From the Manage dialog , find the System.ini entry in the list and click on the Load button on the upper right . <p> Not much to look at just yet ... <p> Next , let 's create a measure to get the current amount of CPU usage , as a percentage , on each update . <p> MeasureCPU <p> Measure=CPU <p> Now it is time to introduce a new meter type . We are going to display the value of that MeasureCPU measure as filling a cirle on the screen using a Roundline @ @ @ @ @ @ @ @ @ @ <p> MeterCPUCircle <p> Meter=Roundline <p> MeasureName=MeasureCPU <p> X=5 <p> Y=8 <p> W=40 <p> H=40 @qwx22566 <p> RotationAngle= ( Rad(360) ) <p> LineStart=15 <p> LineLength=20 <p> Solid=1 <p> LineColor=#LightBlue# @qwx22550 <p> Refresh the skin so we can see what it is doing as we walk through the options . <p> What the Roundline meter does is draw a line that rotates around the center of a circle defined by the W and H options of the meter . In this case , we have defined the size of the meter ( and thus the circle ) as 40x40 pixels . Keep in mind that this defines a circle that has a total width of 40 pixels , and a width from the center to the edge as 20 pixels . <h> Roundline - Working with angles <p> We first needed to define two options to control how the meter works . We need to tell the Roundline where the line should point when the value is 0% ( the starting point ) . This is done with the StartAngle option . We also need to tell the Roundline how much of @ @ @ @ @ @ @ @ @ @ travel when the value is 100% ) . This is done with the RotationAngle option . As you can see , we have set the value of StartAngle to StartAngle= ( Rad(270) ) , and the value of RotationAngle to RotationAngle= ( Rad(360) ) . Let 's talk about that for a minute . <p> The angles in a Roundline meter are defined in Radians . Radians are a unit of measure used to define degrees of distance around a circle , starting with 0 , which is the point directly to the right of the center of the circle . This is important ! Do not picture a compass in your head , which has 0 ( North ) pointing " up " . Radians are defined with 0 pointing to the right . <p> I highly recommend taking a minute and reading through the explanation at Radians Guide . <p> So beginning with StartAngle , we are telling the Roundline that the starting point of the meter is a distance of 270 degrees in radians from the 0 position of directly right . That will move the starting @ @ @ @ @ @ @ @ @ @ meter , which is what we want . <p> Next , we are setting the RotationAngle option to 360 degrees in radians , which tells the Roundline that the distance to travel around the circle from the starting point defined in StartAngle will be the full circle ( a circle has 360 degrees ) . We want the entire circle to fill when the value of the measure is 100% . <p> Note that we are using the Rad(x) function to make it easier to convert degrees ( which are easy to picture in our heads ) into radians ( which are mathematically useful , but stupidly complicated ) . <h> Roundline - The line options <p> By default , the Roundline meter will draw a single line from the center of the meter to the outside edge , pointing to the position represented by the value of the measure . We do n't want a " pointer " in this case , but want to draw and fill a circle . There are few options we have used to control this . <p> LineStart=15 This tells the Roundline that @ @ @ @ @ @ @ @ @ @ center of the meter . <p> LineLength=20 This sets the overall length of the line to 20 pixels . Remember that our meter is 40 pixels wide in total , but only 20 pixels wide from the center to the outside edge . <p> The result of these two options is a line that starts 15 pixels from the center , and extends to the full 20 pixels defined as the length from the center to the edge . So in effect , a 5 pixel line at the outside edge . <p> Solid=1 This option tells the Roundline that instead of a single line , we want the meter to " fill " from the position defined as 0% to the current value represented by the measure . So instead of a " pointer " , we get a circle being filled as the value changes . <p> Then we are using one of the variables we defined in the Variables section at the beginning . We want to set the color of the circle to a nice light blue , which we defined as **25;4746;TOOLONG . So we @ @ @ @ @ @ @ @ @ @ <p> Good job ! Roundline is a very useful and flexible meter type in Rainmeter , and once you play with the options and different behaviors you will find lots of creative ways to use it . Take a breather ... <h> Continuing the skin <p> That Roundline meter looks a little funny by itself , so let 's add another Roundline meter to serve as a " background " for it . In your code , move up above the MeterCPUCircle section we added before , and insert a new meter section . Remember , we want this meter to be " behind " MeterCPUCircle , so it needs to be " before " it in the actual . ini skin code . <p> MeterCPUCircleBack <p> Meter=Roundline <p> X=5 <p> Y=8 <p> W=40 <p> H=40 @qwx22566 <p> RotationAngle= ( Rad(360) ) <p> LineStart=15 <p> LineLength=20 <p> Solid=1 <p> LineColor=#MediumBlue# @qwx22550 <p> What we are doing here is creating another Roundline meter , at the same X and Y position as the one that comes after , but behind it . All of the options in MeterCPUCircleBack are the same @ @ @ @ @ @ @ @ @ @ is no MeasureName option to " bind " a measure to the meter . Roundline will by default use a value of 100% in this case , in effect allowing us to draw a full circle that we can use as a background . Oh , we also used a different variable for the color of the line . Refresh the skin to see the change . <p> Your entire skin code should now look like this : @qwx22547 @qwx22570 @qwx22548 <p> DarkBlue=27,63,107,255 <p> **25;4773;TOOLONG <p> **25;4800;TOOLONG <p> LightRed=250,148,135,255 <p> AlmostBlack=40,40,40,255 <p> CurrentDrive=C : <p> Drive1=C : <p> Drive2=D : <p> MeasureCPU <p> Measure=CPU <p> MeterBackground @qwx22559 <p> X=0 <p> Y=0 <p> W=185 <p> H=110 <p> SolidColor=#AlmostBlack# <p> MeterCPUCircleBack <p> Meter=Roundline <p> X=5 <p> Y=8 <p> W=40 <p> H=40 @qwx22566 <p> RotationAngle= ( Rad(360) ) <p> LineStart=15 <p> LineLength=20 <p> Solid=1 <p> LineColor=#MediumBlue# @qwx22550 <p> MeterCPUCircle <p> Meter=Roundline <p> MeasureName=MeasureCPU <p> X=5 <p> Y=8 <p> W=40 <p> H=40 @qwx22566 <p> RotationAngle= ( Rad(360) ) <p> LineStart=15 <p> LineLength=20 <p> Solid=1 <p> LineColor=#LightBlue# @qwx22550 <p> Next we want to create a String meter showing the actual value we are getting in @ @ @ @ @ @ @ @ @ @ . We have talked about string meters and positioning in earlier tutorials , so let 's just add the following as a new section at the end of your skin code . <p> MeterCPUPercent @qwx22560 <p> MeasureName=MeasureCPU <p> FontFace=Segoe UI <p> FontSize=8 <p> FontColor=#LightBlue# <p> X=26 <p> Y=28 <p> StringAlign=CenterCenter @qwx22568 @qwx22550 <p> Text=%1% <p> Save and refresh the skin to see your new meter . <p> You know , it would be nice if the color of that text changed when the CPU usage hits some value we define . What we can do is change the color to " red " if the value is at or above 25% , and back to " blue " if it is below that value . <p> Go back near the top of the code and find the the MeasureCPU measure . Let 's add a few lines to it . <p> If the value of the measure moves above 24 , use the ! SetOption bang to change the FontColor option on the MeterCPUPercent meter to the value of the variable #LightRed# we defined earlier in Variables . <p> If @ @ @ @ @ @ @ @ @ @ the ! SetOption bang to change the FontColor option on the meter to the value of the variable #LightBlue# we defined earlier in Variables , in effect changing it back to the original color . <h> Line meter <p> Next we are going to touch on another meter type in Rainmeter . The Line meter displays the percentage value of a measure ( or more than one measure ) as a series of points over time , connected to create lines on a graph . <p> Add a new section to the skin . <p> MeterCPULine <p> Meter=Line <p> MeasureName=MeasureCPU <p> X=49 <p> Y=8 <p> W=130 <p> H=38 <p> LineCount=1 <p> LineColor=#LightBlue# <p> LineWidth=1 <p> HorizontalLines=1 <p> **33;4827;TOOLONG <p> SolidColor=#DarkBlue# <p> The Line meter is pretty self-explanatory , you " bind " one or more measures to the meter with MeasureName , and then use options like LineWidth and LineColor to control how the meter looks . The line is plotted over time on a graph that is defined by the W and H options of the meter . The additional HorizontalLines and HorizontalLineColor options draw the background lines on @ @ @ @ @ @ @ @ @ @ we set a SolidColor option on the meter to define a overall background color . Refresh the skin and have a look . Let it run for a while so you can see the movement of the line . <p> We should put a label on the Line meter , so it is clear what it is measuring . We have looked at the String meter previously , so let 's just add one and take a look at the result . <p> MeterCPUText @qwx22560 <p> FontFace=Segoe UI <p> FontSize=15 <p> FontColor=#LightBlue# <p> X=48 <p> Y=4 @qwx22568 @qwx22550 <p> Text=CPU <h> Measuring a hard drive <p> It is time to introduce a new measure type to our skin . We are going to be measuring the total , used , and free space on one of your hard drives . We will display the used space on a circular Roundline meter almost exactly as we did with the CPU measurement , then display the other information , total and free space , in string meters next to it . <p> First , let 's set up the measures you will @ @ @ @ @ @ @ @ @ @ under the MeasureCPU we created in the beginning , and add some new measures . <p> MeasureDriveTotal <p> Measure=FreeDiskSpace <p> Drive=#CurrentDrive# <p> Total=1 <p> IgnoreRemovable=0 @qwx22552 <p> UpdateDivider=-1 <p> MeasureDriveFree <p> Measure=FreeDiskSpace <p> Drive=#CurrentDrive# <p> IgnoreRemovable=0 @qwx22552 <p> UpdateDivider=5 <p> MeasureDriveUsed <p> Measure=FreeDiskSpace <p> Drive=#CurrentDrive# <p> InvertMeasure=1 <p> IgnoreRemovable=0 @qwx22552 <p> UpdateDivider=5 <p> The FreeDiskSpace measure obtains space information about a drive . There are several options we are using that should be explained . <p> Drive=#CurrentDrive# This option tells the measure which drive to examine . In this case , we are using one of the variables we defined earlier , to set the value to C : . <p> IgnoreRemovable=0 By default , FreeDiskSpace will ignore all removable drives like USB or optical drives . Set IgnoreRemovable=0 to enable measuring these kinds of drives . <p> InvertMeasure=1 By default , FreeDiskSpace will measure the free space on a drive . To measure the used space , you use the General Measure OptionInvertMeasure=1 to reverse what is measured . <p> In addition , we are using two other options on the measures we have not looked at before . @ @ @ @ @ @ @ @ @ @ that any variables used in the section should be re-evaluated on each update of the section . In order to have Rainmeter use as few resources as possible , variables are only evaluated when the measure or meter is created , and will not detect any dynamic changes to variables it uses , if this option is not set . It will become clear in a little bit why we want this option on our FreeDiskSpace measures . <p> UpdateDivider is used to control how often a measure or meter is updated . The overall Update of the skin is set in the Rainmeter section at the top of the skin , and defines how often in milliseconds the skin is updated . In our case , and by default , this is Update=1000 or once a second . <p> The UpdateDivider=5 option we are setting on these FreeDiskSpace measures tells Rainmeter to update these measures every 5 updates of the skin , or in our case every 5 seconds . UpdateDivider should be considered for any measures that do n't need to be updated as often as the Update @ @ @ @ @ @ @ @ @ @ Rainmeter has to do . In the case of FreeDiskSpace , this is particularly useful as actually reading the drives once every second would be more resource hungry than is really needed . <p> Ok , our measures are all set up , and providing the various kinds of space measurements for our drive in bytes . One thing that should be noted is that the FreeDiskSpace measure also automatically sets the MinValue and MaxValue of the measure , so the value can be used in meters that require a Percentage , like the Roundline meter we are about to create . <p> Add the following new meters to the skin . <p> MeterDriveCircleBack <p> Meter=Roundline <p> X=5 <p> Y=63 <p> W=40 <p> H=40 @qwx22566 <p> RotationAngle= ( Rad(360) ) <p> LineStart=15 <p> LineLength=20 <p> Solid=1 <p> LineColor=#MediumBlue# @qwx22550 <p> MeterDriveCircle <p> Meter=Roundline <p> **28;4862;TOOLONG <p> X=5 <p> Y=63 <p> W=40 <p> H=40 @qwx22566 <p> RotationAngle= ( Rad(360) ) <p> LineStart=15 <p> LineLength=20 <p> Solid=1 <p> LineColor=#LightBlue# @qwx22550 <p> MeterDriveCircleLabel @qwx22560 <p> FontFace=Segoe UI <p> FontSize=10 <p> FontColor=#LightBlue# <p> X=26 <p> Y=83 <p> StringAlign=CenterCenter @qwx22568 <p> Percentual=1 @qwx22550 @qwx22552 <p> @ @ @ @ @ @ @ @ @ @ the meters we created earlier to show the CPU usage as a circular Roundline meter . We bind the active Roundline meter MeterDriveCircle to the measure MeasureDriveUsed to display the amount of " used " space , and instead of showing any measured value inside the circle in MeterDriveCircleLabel , we simply create a label with the value of the current drive letter we created in the variable #CurrentDrive# . We again set DynamicVariables=1 on this label meter . We will see why shortly . Save and refresh the skin to see how we are doing . <p> Finally , we can create a nice background to match the one behind the Line meter we created in MeterCPULine , by simply creating an Image meter with a SolidColor and no MeasureName option , then some String meters to display the other drive space information , total and free . Add the following meters to the bottom of the skin . Save and refresh . <p> MeterDriveBack @qwx22559 <p> X=49 <p> Y=63 <p> W=130 <p> H=38 <p> SolidColor=#DarkBlue# <p> MeterDriveTotalLabel @qwx22560 <p> FontFace=Segoe UI @qwx22555 <p> FontColor=#LightBlue# <p> X=50 <p> Y=64 @ @ @ @ @ @ @ @ @ @ MeterDriveTotal @qwx22560 <p> **29;4892;TOOLONG <p> FontFace=Segoe UI @qwx22555 <p> FontColor=#LightBlue# <p> X=180 <p> Y=64 @qwx22568 <p> StringAlign=Right <p> AutoScale=1 @qwx22550 <p> Text=%1B <p> MeterDriveFreeLabel @qwx22560 <p> FontFace=Segoe UI @qwx22555 <p> FontColor=#LightBlue# <p> X=50 <p> Y=81 <p> W=130 <p> H=18 <p> ClipString=1 @qwx22568 <p> AutoScale=1 @qwx22550 <p> Text=Free : <p> MeterDriveFree @qwx22560 <p> **28;4923;TOOLONG <p> FontFace=Segoe UI @qwx22555 <p> FontColor=#LightBlue# <p> X=180 <p> Y=81 @qwx22568 <p> StringAlign=Right <p> AutoScale=1 @qwx22550 <p> Text=%1B <p> One new option we have used in two of these meters should be explained . The FreeDiskSpace measure obtains the space values from the drive in bytes . For most of us , that is going to be a really huge and long number , ( my one-terabyte C : drive has a total of 1000097181696 bytes for instance ) and probably not one we want to display on a skin . The AutoScale option on the string meter will automatically scale the number to megabytes , gigabytes , terabytes etc. and append the appropriate M / G / T label to the end . We have added an extra hard-coded B at the end of the text @ @ @ @ @ @ @ @ @ @ GB . Let 's take a look . <h> What about those dynamic variables ? <p> I promised we would get back to the reason why we added DynamicVariables=1 to a few measures and meters . Our last goal is to have the skin dynamically change the Drive that we measure and display when we move the mouse over the skin . <p> If you look back to the Variables section , you will see that we set the following : <p> CurrentDrive=C : <p> Drive1=C : <p> Drive2=D : <p> Then in our FreeDiskSpace measures MeasureDriveTotal , MeasureDriveFree , and MeasureDriveUsed , we set the Drive option to that variable #CurrentDrive# . So to start with , the measures are looking at the C : drive . What we want to do is set the value of #CurrentDrive# to be equal to the value of the variable #Drive2# when we move the mouse over the skin , and back to #Drive1# when we move the mouse away . <p> To accomplish this , we need to add new Mouse actions to the skin , and some Bangs that are @ @ @ @ @ @ @ @ @ @ back up to our MeterBackground meter , the first one after the measures in the skin . Change it by adding our mouse action lines . <p> If the mouse moves over the background meter , use the ! SetVariable bang to change the value of the variable CurrentDrive to the value of the variable Drive2 . <p> If the mouse moves away from the background meter , use the ! SetVariable bang to change the value of the variable CurrentDrive to the value of the variable Drive1 , or in effect back to the original value . <p> Then we are using the ! UpdateMeasure , ! UpdateMeter , and ! Redraw bangs to have the change take place as soon as we move the mouse over or away , and not wait for the next update of the skin . <p> This functionality is why we added DynamicVariables=1 to the measures and meters which are using the #CurrentDrive# variable . That option allows the measures and meters to re-evaluate the variable on each update of the section , so when we change it with ! SetVariable they react @ @ @ @ @ @ @ @ @ @ ... Great job ! Here are two shots of your final skin , the first with the mouse away from the skin and the second with the mouse over the skin . 
@@256667 <h> More <h> User Interface <p> Rainmeter can be controlled using several user interface windows built into the application . Choose one of the items to see details on how they are used to operate the application , install , load and manage skins , monitor and debug during skin editing , and save and load the current skin layout and settings . <p> Much more than the usual simple About dialog in applications , the About window in Rainmeter provides powerful tools for monitoring the current status of the application and skins . Monitor the log file for information and errors , watch current values of variables and measures for running skins , and view the status and version of the application and plugins . <p> In addition to the Manage window , Rainmeter can be completely controlled from context menu items available by right-clicking the application 's notification area ( system tray ) icon or an individual skin on the screen . 
@@256670 <h> More <h> FileView plugin <p> Plugin=FileView retrieves information about folders and files . <p> The plugin gathers all the folder and file names , sizes , dates and icons in the selected folder . It counts the number of files and folders and obtains the combined size . It can also search recursively through all the subfolders of the selected folder to obtain the totals for count and size . <p> FileView operates with a " parent / child " approach . A main " parent " FileView measure is used to obtain all the information for a selected folder , and then " child " measures are used to read individual entries from the parent using the Path= option . <h> Usage <p> FileView measures take the form : @qwx22547 @qwx22570 @qwx22553 <p> MeasureFolder @qwx22557 @qwx22563 <p> Path= " C : Program FilesRainmeter " <p> ShowDotDot=0 <p> ShowFolder=0 <p> Count=3 <p> In this example , this " parent " measure will obtain name , size , date and icon information about all files in the selected folder , then create three Index values for the first three files @ @ @ @ @ @ @ @ @ @ FileView measures : <p> MeasureChild1 @qwx22557 @qwx22563 @qwx22562 @qwx22569 <p> Index=1 <p> MeasureChild2 @qwx22557 @qwx22563 @qwx22562 @qwx22569 <p> Index=2 <p> MeasureChild3 @qwx22557 @qwx22563 @qwx22562 @qwx22569 <p> Index=3 <p> The values of the three child measures are now the FileName information parsed into Indexes 1 through 3 by the parent measure . These can then be used with MeasureName and other options in meters . <p> Another way to use the information in child measures is : <p> MeasureChild1 @qwx22557 @qwx22563 @qwx22562 @qwx22569 <p> Index=1 <p> MeasureChild2 @qwx22557 @qwx22563 @qwx22562 <p> Type=FileSize <p> Index=1 <p> MeasureChild3 @qwx22557 @qwx22563 @qwx22562 <p> Type=FileDate <p> Index=1 <p> The values of the three child measures are now the FileName , FileSize and FileDate information from the first file ( Index 1 ) of the parent measure . <p> In these examples , three indexes are created due to the Count=3 option on the parent measure . However , the information for all files and / or folders are obtained by the plugin , and subsequent or previous entries can be assigned to the three indexes by using ! CommandMeasure statements described below . This will @ @ @ @ @ @ @ @ @ @ and / or folders in a dynamic way . <p> If it is desired that a folder be monitored for new or changed files , the Update plugin command should be used in conjunction with an OnUpdateAction statement to keep the measure current with changing disk information . Be aware that having the plugin physically access the disk has a performance cost , and care should be taken to use an appropriate UpdateDivider . <p> If set to 1 , the entries are sorted in ascending order . Otherwise a descending order is used . <p> WildcardSearchDefault : * <p> Wildcards used to filter included files and/or folders . Standard * and ? characters can be used . <h> Child measure options <p> IndexDefault : 1 <p> Index of the file or folder from the parent measure . This should not exceed the Count number in the parent measure . If it does , the items will wrap around . For example , if Count=8 , Index=9 will be treated as Index=1 . <p> IgnoreCountDefault : 0 <p> If set to 1 , the Index will represent the actual index @ @ @ @ @ @ @ @ @ @ is useful to display a particular file or folder at all times ( like the .. folder ) . <p> TypeDefault : FolderPath <p> Type of information to obtain from the parent measure . <p> Information for path returned by the parent measure <p> FolderPath : Path of folder returned in parent Path , with trailing " " <p> FolderSize : Size in bytes of folder returned in parent Path <p> FileCount : Count of files in folder returned in parent Path <p> FolderCount : Count of folders in folder returned in parent Path <p> Information for object returned by the child Index number <p> FileName : Name of indexed object , folder or file <p> FileType : Extension only with no " . " for indexed file . Empty with folder <p> Path and filename of the location ( relative to the skin folder ) to save icons when Type=Icon . If no path is given , the icons are saved in the skin folder and are named " iconX.ico " , where " X " is the index number . <p> For example , if Count=8 , and @ @ @ @ @ @ @ @ @ @ a total of 4 pages . If items 8-15 ( page 2 ) are being displayed , the PageUp will decrease the page count by one changing the displayed items to items 0-7 ( page 1 ) . <p> This will change the path to the folder one higher in the folder structure . Behaves like clicking on the .. folder . <h> Child measure commands <p> FollowPath <p> If the index referenced in the child measure is currently a folder , then the parent measure 's Path is updated to the new path . If it is a file , then it is opened with the default Windows associated application . In order to better simulate Windows behavior , it is recommended that this command be used with a double-click action . <p> This will open the file or folder that the index represents . If it is a folder , the folder is opened in Windows Explorer . If it is a file , then it is opened with the default Windows associated application . In order to better simulate Windows behavior , it is recommended that this @ @ @ @ @ @ @ @ @ @ commands <p> ContextMenu <p> Opens the context menu for the item represented by the measure . The context menu will appear at the current mouse location if the mouse is hovering over the skin , otherwise it will appear at the top left corner of the skin . This command can be used on a parent or child measure . <p> Example : ! CommandMeasure " MeasureName " " ContextMenu " <p> Parent measures have the extra ability to open the context menu for a manually defined file/folder . See the example below . 
@@256671 <h> Rainmeter 3.2.1 Release <p> There are a lot of new features and capabilities in the latest Rainmeter 3.2.1 . You can safely install the new 3.2.1 release version right over your existing Rainmeter 3.1 or earlier installation , and nothing you have done will be lost or changed . There is never any need to uninstall any earlier version of Rainmeter to use the newest version . <h> Major additions in Rainmeter 3.2.1 <h> AudioLevel plugin <p> Added a new AudioLevel plugin . This will allow for real-time VU-Meter and Spectrum Analyzer visualizations of sound output . <h> Mask Image functionality <h> Formatted date / time options <p> Added several new options to allow using a formatted date / time string in the TimeStamp option of a Time measure . This can for instance allow the measure to parse and use a date / time string which might come from an RSS feed or other WebParser measure . <p> Time Measure : TimeStampFormat to define a " mask " for the date / time string . <p> Time Measure : TimeStampLocale to define the input " language / locale @ @ @ @ @ @ @ @ @ @ . <p> Added the value 100 to both Manage and the skin context menus to support setting the transparency of a skin to an opacity of 1 , which is invisible but will still react to the mouse . This can be used in conjunction with the fade in / fade out / on hover capabilities . <p> Added a new PathToFile value for the FileView plugin Type child measure option . This will return just the path the file , including a trailing " " . 
@@256672 <p> There was a problem displaying an ad here , most likely because of an ad blocker.Ads help fund the development of Core Temp , please consider adding the website toyour whitelist or making a donation via PayPal . <p> Core Temp is a compact , no fuss , small footprint , yet powerful program to monitor processor temperature and other vital information . <p> What makes Core Temp unique is the way it works . It is capable of displaying a temperature of each individual core of every processor in your system ! You can see temperature fluctuations in real time with varying workloads . Core Temp is also motherboard agnostic . <p> Ads could n't be displayed.Please consider making a donation via PayPal . <p> All major processor manufacturers have implemented a " DTS " ( Digital Thermal Sensor ) in their products . The DTS provides more accurate and higher resolution temperature readings than conventional onboard thermal sensors . ( How does it work ? ) . This feature is supported by all recent x86 processors . Processors by Intel , AMD and VIA are supported . @ @ @ @ @ @ @ @ @ @ Core Temp is easy to use , while also enabling a high level of customization and expandability . Core Temp provides a platform for plug-ins , which allows developers to add new features and extend its functionality . You can find our plug-ins and add-ons here . If you are a developer and you are interested in creating your own addition , please see the developer 's page . <p> Core Temp goes mobile ! Have you ever wished that you could keep an eye on your systems while you were out of home or the office ? If you have an Android or Windows Phone device , now you can ! Click here for more information . <p> Core Temp Gadget and Windows Media Center addon for Windows 7 and Vista . Recently I 've released a new version of the Core Temp Gadget , completely overhauled . The new version includes a graph view , listing processor load or temperature as well as memory utilization . The readings are now color coded and they are user adjustable from the Options screen . Among these improvements the gadget can @ @ @ @ @ @ @ @ @ @ be hidden if so desired . You can download Core Temp Gadget and CoreTempMC from the Add Ons page . <p> CoreTempMC is a Windows Media Center add-on for Windows 7 and Vista . It allows you to view information from Core Temp right from the Media Center interface using your remote . In addition it also displays the memory utilization . 
@@256673 <h> See Also <h> Description <p> NirCmd is a small command-line utility that allows you to do some useful tasks without displaying any user interface . By running NirCmd with simple command-line option , you can write and delete values and keys in the Registry , write values into INI file , dial to your internet account or connect to a VPN network , restart windows or shut down the computer , create shortcut to a file , change the created/modified date of a file , change your display settings , turn off your monitor , open the door of your CD-ROM drive , and more ... <h> Examples of what you can do with NirCmd <p> Open the door of J : CD-ROM drive <p> nircmd.exe cdrom open j : <p> Close the door of Y : CD-ROM drive <p> nircmd.exe cdrom close y : <p> Speaks the text currently in the clipboard ( For Windows XP/Vista/7/8 ) . <p> Added mediaplay command for playing audio file ( . mp3 , . wav , and so on ) for the specified number of milliseconds . <p> Added changebrightness and @ @ @ @ @ @ @ @ @ @ netbook computers . <p> 08/06/2011 <p> 2.55 <p> On savescreenshot , savescreenshotfull , and savescreenshotwin commands , you can now specify *clipboard* as a filename , in order to save the screenshow into the clipboard <p> On savescreenshot command , you can now specify a rectangle to capture as x , y , width , and height instead of capturing the entire screen . <p> Fixed savescreenshotfull command to work properly on multiple screen system with negative coordinates . <p> 27/03/2011 <p> 2.52 <p> Added ' runas ' command , which allows you to run a new process with the specified user name/password . <p> Added ' Flash ' action to the win command , with allows you to flash the specified window . <p> 13/03/2011 <p> 2.51 <p> Added ' focused ' option for setappvolume , changeappvolume , and muteappvolume commands , which allow you to easily change the volume of the application that is currently in focus , on Windows 7/Vista/2008 . <p> Added ' defaultrecord ' option for setsysvolume , changesysvolume , setsysvolume2 , changesysvolume2 , and mutesysvolume commands , which allows you set easily change the @ @ @ @ @ @ @ @ @ @ <p> New action in clipboard command : copyimage ( Copy image file to the clipboard ) <p> 25/06/2008 <p> 2.15 <p> New commands : setcursorwin , savescreenshotwin , filldelete <p> 12/04/2008 <p> 2.10 <p> New commands : shellcopy , savescreenshot <p> 09/02/2008 <p> 2.05 <p> New commands : shellrefresh , convertimage , convertimages <p> New option in clipboard command - saveimage <p> 16/06/2007 <p> 2.00 <p> All sound volume commands and monitor command now works under Vista . <p> New commands : dlg , dlgany , sendkey , sendmouse , returnval <p> New actions in win command - dlgclick , dlgsettext , dlgsetfocus <p> 24/07/2006 <p> 1.85 <p> New command : cmdshortcutkey <p> 15/07/2006 <p> 1.84 <p> Starting from this version , if you do n't specify a sound device index in setsysvolume , changesysvolume , setsysvolume2 , changesysvolume2 and mutesysvolume commands , the default sound device in control panel ( " preferred device " ) is used . <p> New command : setfilefoldertime - allows you to change the date/time of folders , under Windows 2000/XP only . <p> 10/06/2005 <p> 1.62 <p> New actions in win command : @ @ @ @ @ @ @ @ @ @ new command : sysrefresh - make a general system refresh after modifying your system settings in the Registry . <p> 07/05/2005 <p> 1.60 <p> New paramsfile command : Allows you to execute a command multiple times by loading the parameters from a text file . <p> New actions in win command : move , center , settext . <p> New ' child ' action in win command : Allows you to move/hide child windows ( For example : the start button in the system tray ) <p> New clipboard command : Allows you to put a string in the clipboard , and clear the clipboard . <p> New gac command : Allows you to install assemblies in Global Assembly Cache . <p> 28/12/2004 <p> 1.56 <p> New variable : $clipboard$ - paste the text that you copied to the clipboard into the command-line . <p> Parameter variables : $param.ParamName$ - Display an input window for typing the text that you want insert into the command-line . <p> 07/12/2004 <p> 1.55 <p> Added RegEdit command . <p> 18/11/2004 <p> 1.54 <p> On reg commands ( regsetval , regdelval , regdelkey ) @ @ @ @ @ @ @ @ @ @ name : HKCU for HKEYCURRENTUSER , HKLM for HKEYLOCALMACHINE , HKCR for HKEYCLASSESROOT , HKU for HKEYUSERS , HKCC for HKEYCURRENTCONFIG . <p> redraw action for win command . <p> 03/11/2004 <p> 1.53 <p> Fixed ' monitor off ' problem in XP SP2 . <p> 09/10/2004 <p> 1.52 <p> rasapi32.dll is now loaded only when using the dial commands ( rasdial , rasdialdlg , rashangup ) . In previous versions , NirCmd was statically linked to rasapi32.dll , and that caused problems in old NT systems . <p> 29/09/2004 <p> 1.51 <p> Variable names are now enclosed with ' $ ' char instead of ' % ' char . I made this change because the ' % ' char causes problems when running NirCmd from cmd/bat file . using the ' % ' char for variable names is still supported for backward compatibility . <p> Special string sequences ( q , t , n and so on ) to allow you to embed quotes and new line characters into the parameters of any command . <p> 19/11/2003 <p> 1.11 <p> New options in shortcut command <p> 10/10/2003 <p> 1.10 <p> @ @ @ @ @ @ @ @ @ @ , lockws . <p> 09/09/2003 <p> 1.00 <p> First release . <h> License <p> This utility is released as freeware . You are allowed to freely distribute this utility via floppy disk , CD-ROM , Internet , or in any other way , as long as you do n't charge anything for this . If you distribute this utility , you must include all files in the distribution package , without any modification ! 
@@6350857 <h> String meter <h> Options <p> Name(s) of the measure(s) bound to the meter . The meter will display the current value of the measure defined in MeasureName , with values for additional measures bound to the meter available using the %N syntax in the Text option . <p> The meter does not require a MeasureNameN option if the Text option alone will be used to define the string to display . <p> TextDefault : %1 <p> Text to display . If MeasureName is specified , Text will default to the value of the measure . <p> The values of the measure(s) specified with MeasureName can be used with the %N syntax as follows : <p> MeasureName=SomeMeasure <p> **25;4953;TOOLONG <p> Text=This is text containing %1 and %2 . <p> ; %1 and %2 will be replaced by the string values of SomeMeasure and <p> ; SomeMeasure2 , respectively . <p> The Text option can take any combination of the following forms : <p> Display the value of a measure bound with MeasureName <p> Display the values of multiple measures bound with MeasureNameN , and formatted with the %N syntax . @ @ @ @ @ @ @ @ @ @ meter . Valid values are : <p> Left , Right , Center ( or LeftTop , RightTop , CenterTop ) <p> LeftBottom , RightBottom , CenterBottom <p> LeftCenter , RightCenter , CenterCenter <p> The string will be aligned using the values of the X and or Y settings as the anchor point . So to CenterCenter align a string within a meter with a width and height of 100 , set X=50 , Y=50 and StringAlign=CenterCenter . <p> StringStyleDefault : Normal <p> Style of the string . Valid values are Normal , Bold , Italic , and BoldItalic . <p> StringCaseDefault : None <p> Converts the string to a case . Valid values are None , Upper , Lower , and Proper . <p> StringEffectDefault : None <p> Effect applied to a string . Valid values are None , Shadow , and Border . <p> Shadow makes a background copy of the string , offset 1px " right " and 1px " down " , in the color defined in FontEffectColor . <p> Border makes a background copy of the string , 2px " larger " , and offset 1px @ @ @ @ @ @ @ @ @ @ the color defined in FontEffectColor . <p> The size of the font used in the string has no effect on the fixed 1px size of the Shadow or Border effect . <p> Due to how these effects are created , transparent colors on the string may have undesirable results . <p> Controls how strings are truncated ( clipped ) or wrapped to fit in or expand the containing meter . Valid values are : <p> 0 : Disabled . The string will not be clipped or wrapped . ( default ) <p> 1 : Enabled . The string will be clipped with an added ellipsis ... when it exceeds the specified W ( width ) option on the meter . If the H ( height ) option is large enough to allow multiple lines , the text is wrapped until the value of H is reached , then clipped . <p> 2 : Auto . The string will be clipped or wrapped based on the value of W and/or H. If the width or height are not specified , the meter itself will change size to accommodate the string . @ @ @ @ @ @ @ @ @ @ options below , to set a " maximum " size that the meter should expand to accommodate the string before clipping . <p> Notes : The changing size of meters when ClipString=2 can cause truncation issues with the overall window size of the skin , unless DynamicWindowSize=1 is set in the Rainmeter section of the skin . <p> ClipString=2 will always wrap on word boundaries ( spaces or tabs ) . Any single word that is longer than the defined or maximum width will clip that line , rather than breaking the word in two . <p> When ClipString=2 is used with bound measures that have an initial value of " " , ( WebParser and QuotePlugin for example ) DynamicVariables=1 must be set on the meter . <p> ClipStringW <p> Sets a maximum width that the meter will expand to accommodate the string when ClipString=2 . This setting is ignored if the W option is set . <p> ClipStringH <p> Sets a maximum height that the meter will expand to accommodate the string when ClipString=2 . This setting is ignored if the H option is set . <p> AngleDefault @ @ @ @ @ @ @ @ @ @ radians . <p> Note : The size and position of the text are always calculated as if the text is horizontal . This also means that the click-able field used for Mouse Actions does not change . It remains where the text would be with no Angle . <p> If set to 1 , the value of bound measures are converted to a percentage . This is useful if a measure does not return a percentage value , but either automatically defines a valid " range " of values ( e.g. FreeDiskSpace ) or when the MinValue and/or MaxValue options are manually set on the measure . <p> NumOfDecimalsDefault : 0 <p> Number of decimals to display with numerical measure values . <p> ScaleDefault : 1 <p> Scaling factor used for the measure values . The measure value is divided by the specified value . If the specified value has a decimal point ( e.g. 1000.0 ) , the result will also display decimals . <p> Note : If AutoScale is enabled , this option is ignored . <p> AutoScaleDefault : 0 <p> Automatically scales the measure values . The @ @ @ @ @ @ @ @ @ @ , etc. as appropriate . Valid values are : <p> 0 : Disabled . <p> 1 : Scales by 1024 . <p> 1k : Scales by 1024 with kilo as the lowest unit . <p> 2 : Scales by 1000 . <p> 2k : Scales by 1000 with kilo as the lowest unit . <p> Note : The value returned by AutoScale adds a space between the scaled number and the scale unit abbreviation . To remove this space simply add Substitute= " " : " " to the Measure that the AutoScale is being applied to . <p> Note : Using the SolidColor option , with a value of SolidColor=0,0,0,1 , will give a string meter a solid but virtually transparent background . This can make executing mouse actions on the text easier and more reliable . 
@@6350859 <h> What 's on your desktop ? <p> Rainmeter displays customizable skins , like memory and battery power , RSS feeds and weather forecasts , right on your desktop . Many skins are even functional : they can record your notes and to-do lists , launch your favorite applications , and control your media player - all in a clean , unobtrusive interface that you can rearrange and customize to your liking . Rainmeter is at once an application and a toolkit . You are only limited by your imagination and creativity . <p> Rainmeter is open source software distributed free of charge under the terms of the GNU GPL v2 license . 
@@6350860 <h> More <h> Substitute <p> Substitute replaces some or all of a string value returned by a measure with another string . <h> Options <p> Substitute <p> A list of comma delimited " pattern " : " replacement " pairs . All occurrences of pattern in the measure string value are replaced with replacement . For example , " This " : " That " substitutes all occurrences of This with That . <p> If multiple " pattern " : " replacement " pairs are specified , each substitution is attempted in the specified order . For example , " This " : " That " , " Here " : " There " first replaces all occurrences of This with That and then replaces all occurrences of Here with There . <p> Each of the " pattern " : " replacement " pairs are a separate action , and act on the results of the previous substitute pairs . For example , with " 1 " : " One " , " 10 " : " Ten " , all occurrences of 1 are replaced with One , but @ @ @ @ @ @ @ @ @ @ because the first substitution already changed all 1 characters to One . For the desired behavior , the order can be reversed as " 10 " : " Ten " , " 1 " : " One " . <p> Instead of " pattern " : " replacement " , single quotes can be used either around the pattern or the replacement . ( i.e. ' pattern ' : " replacement " or " pattern " : ' replacement ' , but not ' pattern ' : ' replacement ' ) This can be useful when either the pattern or the replacement contains double quotes . For example , ' " ' : " double quote " replaces all occurrences of " with double quote . <p> If captures are used in the pattern , ( e.g. ( . + ) ) they can be referenced in the replacement part using 1 , ( first capture ) 2 , ( second capture ) etc . The entire match can also be referenced with 0 . <p> Note : With RegExpSubstitute , a ( capture ) may not return an empty @ @ @ @ @ @ @ @ @ @ zero or more ) quantifiers or ( ? ( ? = ( If/Then ) lookahead tests , as a capture must either cause the entire regular expression to " fail " , or return a value of some kind . <h> Examples <p> Normal substitution : <p> MeasureYear @qwx22558 <p> Format=%Y <p> Substitute= " 2012 " : " Twenty Twelve " , " 2013 " : " Twenty Thirteen " <p> ; Assuming that the current year is 2012 , the string value of MeasureYear will <p> ; be " Twenty Twelve " ( without quotes ) . Since Substitute only affects the string <p> ; value , the number value of MeasureYear will continue to be 2012 . <p> MeasureCalc1 @qwx22556 <p> Formula=MeasureYear <p> ; Since the number value of MeasureYear is used above , the value of MeasureCalc1 <p> ; will also be 2012 . <p> MeasureCalc2 @qwx22556 <p> Formula=MeasureYear @qwx22552 <p> ; Since the string value of MeasureYear is used above , a syntax error will occur 
@@6350862 <h> More <h> Settings <p> This page details the files and folders in which Rainmeter-wide and skin-specific settings are saved . These include each skin 's position , transparency , draggability , active or inactive state , " snapping " behavior , and other general options . Normally , the user does not need to edit these files directly . Most settings can be changed using the Manager , the context menu , or bangs . <p> Note : Many skins include features that are described as " settings , " " options , " " preferences , " etc. that allow the user to customize the appearance and behavior of the skin . However , these features are different from the " settings " described on this page . They are handled entirely by the skin , usually as variables , and are not managed by Rainmeter at all . Options such as fonts , colors , passwords , RSS feeds and " weather codes " are in this category . These are not " standard " features , and are not supported in any formal way . <h> @ @ @ @ @ @ @ @ @ @ in Rainmeter 's application data folder . If Rainmeter has been installed normally , the default location of the folder is : <p> C : **37;5037;TOOLONG <p> If Rainmeter is installed as a portable application , settings files are found in the installation folder . <p> 1 . " YourName " is an example . <h> Rainmeter.ini <p> Most settings are saved in a file called Rainmeter.ini . The file is written as a standard INI file , which uses the following1 format : <p> Section <p> Key=Value <p> Each key is an option that modifies the property identified in the section name . The following sections are used in Rainmeter.ini : <p> When settings are changed in Rainmeter , they are saved to Rainmeter.ini automatically . If settings are changed in Rainmeter.ini , a refresh application command is needed to apply the new settings . <p> 1 . " Section , " " Key " and " Value " are examples . <h> Other Files <h> Rainmeter.data <p> This file is used by Rainmeter 's program and some plugins to store " global " settings that are not related @ @ @ @ @ @ @ @ @ @ that are not saved with layouts . <h> Rainmeter.stats <p> This file records Windows ' network usage statistics over time . These statistics are used by the Net measures to display " cumulative " network usage data . The contents of Rainmeter.stats may be cleared using the ! ResetStats bang . <h> NewSkin.template <p> This file contains a template for a new skin used by the Create new skin button in Manage . This can be edited as desired . 
@@6350864 <h> More <h> General Meter Options <h> Options <p> Type of the meter ( e.g. Bar or String ) . This option is required and may not be changed dynamically . <p> MeterStyle <p> Specifies one or more sections as MeterStyles from which option values are inherited . Multiple MeterStyles are delimited with pipes ( ) . <p> MeasureName , MeasureName2 , MeasureName3 ... <p> " Binds " the meter to one or more measures . This means that the meter displays the values of these measures in some way . The exact form of the display depends on the type of meter . See each meter type 's page for details about what kind of values are valid for that type , and how the values are displayed . <p> X , YDefault : 0 <p> Specifies the x ( horizontal ) and y ( vertical ) position of the meter in pixels relative to the top-left edge of the skin . <p> Relative positioning : If the value is appended with r , the position is relative to the top/left edge of the previous meter . If the @ @ @ @ @ @ @ @ @ @ to the bottom/right edge of the previous meter . <p> Examples:X=150 : Meter begins 150 horizontal pixels from the left edge of the skin window.Y=75 : Meter begins 75 vertical pixels from the top edge of the skin window . <p> X=10R : Meter begins 10 horizontal pixels to the right of the previous meter.Y=0r : Meter begins at the same vertical position as the previous meter . <p> W , H <p> Specifies the width and height of the meter in pixels . String meters and meters which display an image file can automatically determine the width and height . For all other cases , W and H must be defined . <p> PaddingFormat : Left , Top , Right , Bottom <p> Adds padding in pixels around any or all sides of a meter . The width and height of the meter will dynamically be adjusted to the new size . The padding will be drawn using the Color defined with SolidColor / SolidColor2 . <p> Note : This is done by setting the width and height of the meter to zero , so some care should be @ @ @ @ @ @ @ @ @ @ or Y on any following meters . While in effect a " singularity " , the hidden meter still exists and occupies a position in space . <p> UpdateDividerDefault : 1 <p> Frequency at which the meter is updated . The Update option in the Rainmeter section of the skin is multiplied by the specified value to determine how often the meter is updated . <p> Example : If Update=1000 ( in the Rainmeter section ) and UpdateDivider=30 , the meter is updated every 30 seconds . <p> If UpdateDivider=-1 or any negative number , then the meter is only updated once when the skin is loaded or refreshed . <p> Note : All transformations are relative to the top left corner of the window and not to the meter itself . So if you want to rotate the meter by its center the translation component in the matrix must be relative to the top left corner of the window . <p> Also note that the even if the meter 's visual location and orientation is changed by the transformation the place where it would be located without the transformation @ @ @ @ @ @ @ @ @ @ register the mouse clicks . This might change in the future though . <p> Group <p> Defines a group or series of groups that the meter belongs to . For more information please see the Groups page . 
@@6350865 <p> Bangs can also be used from the Windows command line as a parameter to the Rainmeter.exe executable . Example : " C : Program **27;5163;TOOLONG " ! RefreshApp . <p> Note : Many bangs have a Config parameter . Unless otherwise specified , valid values are the config name of a currently loaded skin to be acted upon or * ( asterisk ) to act on all currently loaded skins . When optional and not supplied , the parameter defaults to the current config . If executing a bang with a " config " parameter from the Windows command line , the parameter is always required . <h> Operating System bangs <p> ! SetClipParameter : String <p> Copies the specified string to the Windows clipboard . If the string contains spaces , use quotes around the parameter . <p> String ( required ) : The string to be copied to the clipboard . <p> Example : ! SetClip " This is copied to the clipboard ! " <p> ! SetWallpaperParameters : File , Position <p> Sets the Windows desktop background to the specified image file . <p> File ( @ @ @ @ @ @ @ @ @ @ desktop background . The following formats are supported : . bmp , . jpg , . png , . gif , and . tiff . If the filename contains spaces , you must enclose the filename in quotes . <p> Position ( optional ) : Sets the position of the wallpaper . Valid values are : Center , Tile , Stretch . Windows 7 ( and above ) also have the values : Fit and Fill . <p> Does a full refresh of all skins and reloads the list of configs and Rainmeter.ini settings . This is the same as " Refresh All " from the system tray context menu . The main difference from ! Refresh * is that the skins folder is rescanned . <p> ! Quit <p> Quits Rainmeter . <p> PlayParameter : SoundFile <p> Plays the given sound file once . <p> SoundFile ( required ) : Path and file to be played . Must be a . wav file . <p> Note : While listed in this section for simplicity , the Play commands are not bangs , and do not require or allow the @ @ @ @ @ @ @ @ @ @ call to embedded Windows functionality to play the sound , and only one sound at a time can be managed , Rainmeter-wide . Playing a sound in any skin will stop any other currently playing sounds . <p> Example:Play " SomeFile.wav " <p> PlayLoopParameter : SoundFile <p> Plays the given sound file in a loop . <p> SoundFile ( required ) : File to be played . Must be a . wav file . <p> Example:PlayLoop " SomeFile.wav " <p> PlayStop <p> Stops any currently playing sound started by Rainmeter . <h> Option and Variable bangs <p> ! SetOptionParameters : Meter/Measure , Option , Value , Config <p> Sets an option ( ie. FontSize , Text , Formula , etc. ) of a meter or measure . <p> Sets a new value for a variable . The meter or measure where the variable is used must enable DynamicVariables . ! SetVariable can create a new variable in memory , even if it is not pre-defined in the Variables section . <p> Variable ( required ) : Name of the variable . <p> Value ( required ) : New value to @ @ @ @ @ @ @ @ @ @ " New value ! " <p> ! WriteKeyValueParameters : Section , Key , Value , FilePath <p> Permanently writes a Key=Value pair below a section in a INI formatted file ( such as . ini or . inc files ) . A skin must be refreshed for a new value written to the skin 's . ini or . inc files to be re-read and used . <p> Section ( required ) : If the section does not exist in the file , a new section will be written at the end of the file . <p> Key ( required ) : If the key does not exist under the section , a new key will be written at the end of the section . <p> Value ( required ) : Value to be written . Any previous value will be overwritten . <p> FilePath ( optional ) : If not specified , the current skin file is used . The file must exist and must be located under either #SKINSPATH# or #SETTINGSPATH# . <p> Example : ! WriteKeyValue Variables MyFontName Arial " #@#Variables.inc " <h> Option and Variable group @ @ @ @ @ @ @ @ @ @ Value , Config <p> Sets an option ( ie. FontSize , Text , Formula , etc. ) of meters and measures in the specified group . <p> Group ( required ) : Name of the group . <p> Option ( required ) : Name of the option to be changed . <p> Value ( required ) : New value to be set . @qwx22551 <p> Example : ! SetOptionGroup StringGroup Text " New text ! " <p> ! **26;5192;TOOLONG : Variable , Value , Group <p> Changes the value of a variable in the configs of the specified group . <p> File ( optional ) : If not specified , the next . ini file variant in the config folder is activated . <p> Example : ! ActivateConfig " illustroClock " " Clock.ini " <p> ! **25;5220;TOOLONG : Config <p> Deactivates a skin . @qwx22551 <p> Example : ! DeactivateConfig " illustroClock " <p> ! ToggleConfigParameters : Config , File <p> Activates or deactivates a skin . <p> Config ( required ) : The config to be activated or deactivated . <p> File ( required ) : The . ini @ @ @ @ @ @ @ @ @ @ ! ToggleConfig " illustroClock " " Clock.ini " <p> ! UpdateParameter : Config <p> Overrides the setting of the Update option in Rainmeter and immediately updates the entire skin , all measures and meters . This does not override any UpdateDivider options on measures or meters. @qwx22551 <p> ! RedrawParameter : Config <p> Immediately redraws all visible elements of the entire skin , independent of the normal skin update cycle . @qwx22551 <p> Note : This simply redraws the skin . Meters will use the values obtained when they were last updated . Since by itself ! Redraw accomplishes nothing useful , this bang will always be used in conjunction with bangs that update specific things before redrawing the skin . Depending on the case , this might be with ! UpdateMeasure bangs to immediately update measure values , and certainly ! UpdateMeter bangs to update meter values and options . The idea is to update specific meters and redraw the skin before the next normal update cycle . This can allow immediate visible changes , while not having to force an update of the entire skin . <p> Overrides @ @ @ @ @ @ @ @ @ @ updates the skins in the specified group , all measures and meters . This does not override any UpdateDivider options on measures or meters . <p> Group ( required ) : Group to redraw . <p> ! RedrawGroupParameter : Group <p> Overrides the setting of the Update option in Rainmeter and immediately redraws all visible elements of the specified group of skins . Meters will use the last value obtained for any measures or variables referenced . <p> Overrides the setting of the Update option in Rainmeter or any UpdateDivider on the meter , and immediately updates the meter , obtaining new current values for any measures or variables referenced . Note that the meter is not redrawn with any new values until the next update , or if a ! Redraw bang is used . <p> Meter ( required ) : Name of the meter to update . Use * to update all meters. @qwx22551 <p> Example : ! UpdateMeter " MyMeter " <p> ! MoveMeterParameters : X , Y , Meter , Config <p> Moves the given meter ( not the window ) to the specified position . @ @ @ @ @ @ @ @ @ @ of the skin . The size of the skin window is re-evaluated after the meter is moved . This would make the skin window become larger or smaller to incorporate all meters . <p> Overrides the setting of the Update option in Rainmeter or any UpdateDivider on the meters in the specified group , and immediately updates the meters , obtaining new current values for any measures or variables referenced . Note that the meters are not redrawn with any new values until the next update , or if a ! RedrawGroup bang is used . 
@@6350868 <h> Contents <h> More <h> Using a Measure as a Variable <p> In Rainmeter , dynamic variables ( DVs ) let you use measure values almost anywhere you want . When you use a measure value in a Calc formula , there are special rules to consider . A Calc formula is the only place where you do not need DVs to use another measure 's value . For example : <p> MeasureA <p> Measure= ... <p> MeasureB @qwx22556 <p> Formula=MeasureA+3 <p> Sometimes , however , you may still want to use DVs to get a measure value into a Calc formula . Why ? Because in fact , every measure has two values : a number value and a string value . Normally , Calc formulas use the number value . But using DVs ( with brackets around the measure name ) forces Rainmeter to use the string value . Which means that this ... <p> MeasureB @qwx22556 <p> Formula=MeasureA+3 <p> ... does not always mean the same thing as this : <p> MeasureB @qwx22556 <p> Formula=MeasureA+3 @qwx22552 <h> When should I use brackets ? <p> In general , @ @ @ @ @ @ @ @ @ @ without brackets ) . This is the " safe " approach , because : <p> If a measure 's string and number values are the same , then dynamic variables are unnecessary . Calc measures without DVs are a tiny bit faster , and your formula will behave consistently whether or not DVs are enabled . <p> If the string and number values are different , then the string value may be inappropriate for mathematical calculations . <p> The common exception to this rule is when a substitute has been applied . ( See below . ) <h> When are the string and number values different ? <p> No math . If the original measure value contains any non-numeric characters , aside from valid operators , the number value is zero . This includes letters , punctuation and special characters . <p> You 'll probably never use a measure like this in a Calc formula to begin with . <p> Rounding . Even when a measure gives you an actual number , Rainmeter may round the string value to a certain decimal place . The number value preserves the " @ @ @ @ @ @ @ @ @ @ . <p> Even if you want a rounded number , the ROUND ( x , precision ) calculator function will give you much finer control over the result . <p> Formatting . Some measures return a formatted string value that is meant for display , but not for calculations . For example , the Time measure gives a string value with hours , minutes and seconds ( " HH:MM:SS " ) , which is how a real person would want to see the time , but which makes no sense in a math equation . The number value gives the raw Windows timestamp , which can be used by a Calc measure , e.g. to calculate the difference between two dates . <p> There may be cases in which you would want to use a formatted string value in a Calc formula , but these would likely be rare and unorthodox . <p> Substitution . Measure substitution is applied only to the string value , not the number value . For example : <p> MeasureA @qwx22556 <p> Formula=1 <p> Substitute= " 1 " : " 2 " <p> MeasureB @qwx22556 @ @ @ @ @ @ @ @ @ @ uses the number value of MeasureA . It ignores the Substitute string on Measure A. Therefore , MeasureB returns a value of 4 . In MeasureC , we use DVs to get the string value of MeasureA . This value has substituted the original value , " 1 " , with " 2 " . So MeasureC returns a value of 5 . <p> This means that if you need the substituted value of a measure , you will need to use DVs and brackets . This can be useful when the original value of a measure is not a number at all ( as in case #1 ) , but a Substitute is used to change it into one : <p> MeasureGetStatus @qwx22557 <p> **27;5274;TOOLONG <p> URL=http : **34;5303;TOOLONG <p> LONG ... @qwx22567 <p> Substitute= " Running " : " 1 " , " Offline " : " 0 " <p> MeasureCheckStatus @qwx22556 <p> Formula=MeasureGetStatus <p> IfEqualValue=1 <p> IfEqualAction= ! SetOption Light MeterStyle " Green " <p> IfBelowValue=1 <p> IfBelowAction= ! SetOption Light MeterStyle " Red " @qwx22552 <p> In this case , we have a web feed that @ @ @ @ @ @ @ @ @ @ But we ca n't do math on a wordsince neither of those values is a number or mathematical formula , the number value for both would be zero . Instead , we use a Substitute to transform the string value into " 1 " or " 0 " , respectively . That way , our Calc measure can compare it to our IfEqualValue and IfBelowValue , and take the right action . If 1 ( " Running " ) , then the light turns green ; if 0 ( " Offline " ) , the light turns red . <p> Substitution is virtually the only case in which you would want to use a string value in a Calc formula . <h> Other Notes <p> You can use measures as number values if you are using DVs elsewhere in the Calc measure . You can even mix types of measure values within the same formula : <p> MeasureD @qwx22556 <p> **36;5339;TOOLONG <p> IfAboveValue=MeasureC <p> IfAboveAction= ! HideMeter MeterE @qwx22552 <h> A quick reference to using measure values <p> All measures that return numbers create them as both a " number @ @ @ @ @ @ @ @ @ @ return a number and a string that are the same . Some measures ( Win7Audio , Time , NowPlaying for instance ) can return a " number " and a " string " that are different . <p> Substitute acts only on the string value of a measure . <p> The About window in the Rainmeter context menu displays the string value of measures . <p> When you use the name of a measure in MeasureName= on a meter , the type of meter determines which is used . For instance , Bar meters use the number value , and String meters use the string value . Again , in most cases this is not important , as they are for practical purposes the same thing . <p> When you use the name of a measure in a Calc measure in a formula ( without square brackets ) , such as Formula= ( 200 * MeasureName ) , the number value is used . <p> When you use the name of a measure in a Calc measure or other formula ( with square brackets and DynamicVariables=1 ) , then the @ @ @ @ @ @ @ @ @ @ functionality offers some additional control . Used with DynamicVariables=1 , it uses the number value of the measure . This is particularly useful where you want to use the value of a measure dynamically in a formula on a meter or measure , while not getting the string or Substituted value . 
@@6350869 <h> More <h> General Image Options <p> Options available for use with all images . These options are to modify the display of an image file , and do not work with square/rectangle Image meters created entirely with SolidColor / SolidColor2 , or with any shape created by a Shape meter . <h> Options <p> Crops out and uses a defined part of the image . The option value should be in the form : X , Y , W , H , Origin . <p> Origin is optional and can be set to one of the following : <p> 1 : Top left ( default ) <p> 2 : Top right <p> 3 : Bottom right <p> 4 : Bottom left <p> 5 : Center <p> A way to envision what ImageCrop is doing is : <p> ImageCrop=-50 , -30,100,60,5 <p> Start at the Origin of 5 or " Center " . Then move -50 pixels left ( negative number is left , positive number is right ) and -30 pixels up ( negative number is up , positive number is down ) . Then capture 100 pixels of @ @ @ @ @ @ @ @ @ @ is the new image . This will crop and use 100 X 60 pixels of the center of the image . <p> Notes : <p> ImageCrop is done before any resizing of the image with the W and H general meter options . If W and H are set , the new " cropped " image will be resized to fit . <p> If W and H are not defined , ImageCrop will change the size of the entire meter container to the size of the " cropped " image . <p> GreyscaleDefault : 0 <p> If set to 1 , the image is greyscaled. ( color desaturated ) <p> ImageTintDefault : 255,255,255,255 <p> Color to tint the image with . If the alpha value is specified , the image can be made semi-transparent ( 0 means invisible , 255 mean fully opaque ) . The default value ( 255,255,255,255 for opaque white ) leaves the image unaltered . <p> Note : Combining Greyscale and ImageTint recolors the image to the specified color . Without Greyscale , the specified color is added to the image ( i.e. the original image @ @ @ @ @ @ @ @ @ @ Opacity of the image ranging from 0 ( invisible ) to 255 ( opaque ) . If set , this overrides the alpha component specified in ImageTint . <p> ImageFlipDefault : None <p> Flips the image . Valid values are None , Horizontal , Vertical or Both . <p> ImageRotateDefault : 0.0 <p> Rotates the image by the specified angle in degrees . Negative angles can be used for counter-clockwise rotation . <p> **25;5377;TOOLONG : 0 <p> If set to 1 , the image is rotated based on the EXIF data encoded in the image by a camera . <p> ColorMatrixN <p> Defines a 5x5 matrix used to manipulate the color values of the image . It is divided into five separate options , one for each row , each numbered . The default matrix is as follows : <p> ColorMatrix1=1 ; 0 ; 0 ; 0 ; 0 <p> ColorMatrix2=0 ; 1 ; 0 ; 0 ; 0 <p> ColorMatrix3=0 ; 0 ; 1 ; 0 ; 0 <p> ColorMatrix4=0 ; 0 ; 0 ; 1 ; 0 <p> ColorMatrix5=0 ; 0 ; 0 ; 0 ; 1 <p> @ @ @ @ @ @ @ @ @ @ to bottom-right : Red , Green , Blue , Alpha and a placeholder . The values represent the percentage of the particular value present in the image , where 0.0 is none and 1.0 is normal . The remaining entries in the matrix allow a color to have its value modified in terms of another color ( e.g. the value of Red might have half of the Blue value added ) , with the entries in the final row ( ColorMatrix5 ) determining offset values that are added directly to the color ( e.g. ColorMatrix5=0.5 ; 0 ; 0 ; 0 ; 1 adds 50% to the red value ) . 
@@6350872 <h> Contents <h> More <h> ColorMatrix Guide <p> Tip by kenz0 <p> The ColorMatrix option represents a 5x5 matrix used to manipulate the color values of an image in an Image meter . It is divided into five separate parameters , one for each row , each numbered . The default matrix is as follows : <p> The values on the main diagonal are , from top-left to bottom-right : Red , Green , Blue , Alpha and a placeholder . The values represent the percentage of of the particular value present in the image , where 0.0 is none and 1.0 is normal . The remaining entries in the matrix allow a color to have its value modified in terms of another color ( ex : the value of Red might have half of the Blue value added ) , with the entries in the final row ( ColorMatrix5 ) determining offset values that are added directly to the color . ( ex : ColorMatrix5=0.5 ; 0 ; 0 ; 0 ; 1 will add 50% to the red value ) <p> The following shows the actual matrix values @ @ @ @ @ @ @ @ @ @ From the above information , we can calculate the proper color matrix to transform a given image . To use all three matrices , we need to multiply them together into one single transformation matrix ( using matrix multiplication ) . The result of multiplication is as follows : 
@@6350877 <h> More <h> Installing Skins <p> There are two ways of installing Rainmeter skins downloaded from the internet : <p> Automatically : If the skin is in the . rmskin format.In short : Double-click the . rmskin file , click Install . <p> Manually : If the file is a . zip/.rar/.7z archive.In short : Unzip the archive to the Rainmeter Skins folder . Refresh Rainmeter . <h> Installing Automatically <p> Skins in the Rainmeter Skin Packager ( . rmskin ) format can be easily and automatically installed with the Rainmeter Skin Installer . During a normal Rainmeter installation , the . rmskin extension is associated in Windows with the Skin Installer program , and simply double-clicking the file will install it in Rainmeter . <p> This dialog lists each component that will be installed . These may include : <p> Skins : At least one skin will always be included and installed in the RainmeterSkins folder . The author of the package may indicate that one or more skins will automatically be loaded when the installation is complete . <p> Layouts : If the author has added a layout @ @ @ @ @ @ @ @ @ @ folder . If Apply included layout is selected , the layout will be applied to Rainmeter following installation . <p> Plugins : If the author has added custom plugins to the package the appropriate 32bit/64bit architecture version of the plugin . dll files will be installed to the RainmeterPlugins folder . <p> Fonts : If an author has included font files with the package , they will be installed in the WindowsFonts folder . This may be disabled by unchecking Install fonts to system in the Advanced pull-down menu . <p> Addons : If an author has included addon executable files with the package , they will be installed in the RainmeterAddons folder . <p> If any of the skins to be installed already exist , they will be moved to a Backup folder before installation . This may be disabled by unchecking Backup skins in the Advanced pull-down menu . <p> Click Install to complete the installation of the package . <p> Note : If Rainmeter is being run as a portable installation , start SkinInstaller.exe from the Rainmeter program folder , and browse to the . rmskin file @ @ @ @ @ @ @ @ @ @ 1.3 , most skins had to be unzipped and moved to the Skins folder by hand . All versions of Rainmeter are 100% backwards-compatible , so these older skins will still work just fine . Here is how to install them : <p> First of all , if a skin comes in an archive , such as a ZIP , RAR or 7Z file , software is needed to " extract " them . 7-Zip is one of the popular choices , since it can handle almost any archive type . After installing the software , right-click the archive in Explorer to extract it . <p> The archive may include a readme.txt file with further instructions . If not , look for a folder with the same name as the skin - it might be inside another folder that is actually called " Skins " . Move the folder to the Rainmeter " Skins " folder : <p> C : **37;5721;TOOLONG <p> 1 . " YourName " is an example . <p> Finally , right-click the Rainmeter Windows Notification area icon and select Refresh all . The new skins will @ @ @ @ @ @ @ @ @ @ context menus . 
@@6350878 <h> Obtaining fonts <p> Do pay attention to the license for fonts you download and use . If a font is commercial , or licensed for personal use only , it may be technically illegal for you to distribute them with your skins . <h> No need to install 3rd-party fonts in Windows <p> Fonts installed in Windows ( they will be in the WindowsFonts folder ) will automatically be available for use in Rainmeter. 3rd-party fonts , which you might obtain from one of those sites listed above , can easily be used in and distributed with your skins , without any need for you or your users to install them in Windows . It 's really just a small waste of memory to install fonts that you are only using in Rainmeter . <h> Using Fonts <p> 3rd-party font files can be used by creating a folder @ResourcesFonts in the root level folder of the skin , and putting the font . ttf or . otf files there . Rainmeter will automatically load any fonts found in that folder , and they will be available to use as @ @ @ @ @ @ @ @ @ @ font is done with the FontFace option in a String meter . The font is identified by specifying the family name of the font ( e.g. FontFace=Trebuchet MS ) . The family name can be found by double clicking the font . ttf/.otf file and at the very top left in the Windows font viewer using the Font Name there . <p> MeterString @qwx22560 <p> FontFace=Trebuchet MS <p> Text=Hello World <h> Font Attributes <p> Additional attributes for the font can then be specified with other options available on the String meter . <p> FontWeight : A number between 0-999 specifying the weight of the font . Details on this option can be found at FontWeight . <p> MeterString @qwx22560 <p> FontFace=Trebuchet MS <p> FontSize=12 @qwx22554 <p> FontWeight=400 <p> Text=Hello World <p> In addition , there are other attributes that can be set using the InlineSetting option on a String meter . Some of the features that can be set are Italic , Oblique , Unlderline , StrikeThrough and Shadow , as well as adding gradients to the text . <h> Advanced <p> Many fonts will come in a . zip @ @ @ @ @ @ @ @ @ @ , with each being a different weight or style . Generally these are all fonts that share the same font family name , but the font viewer program in Windows may show the font name including sub-family names , like " Fira Sans Bold " or " Roboto Italic " . If you use those full family / sub-family names , that is almost always going to be fine . Rainmeter will figure out the actual family name when the font is loaded , and will use the correct font file when attributes like weight or italic are used . <p> However , there is a really nice tool that can give you a lot more information about your fonts . This can be useful when specifying the family name in FontFace , as well as when using Typography ( See the " Glyph substitution " tab ) options . This can also provide copyright and license information . <p> Get the dp4 Font Viewer free utility from http : //us.fontviewer.de/ . It is a portable application that you can just run from any folder . When you run it @ @ @ @ @ @ @ @ @ @ lot of useful information is available . <p> In this example , I would simply use FontFace=Fira Sans , and all those weights will be available to me using FontWeight. 
@@6350879 <h> Contents <h> More <h> Clean Rainmeter Uninstall <p> If Rainmeter is misbehaving for you , which might be due to some file corruption on your system , or a file " ownership " issue if you have restored Rainmeter from a backup of a different OS or computer , you might want to do a " clean " installation of Rainmeter . <p> Note : If you want to save any skins you have created or installed , first copy somewhere else the files in : <p> Be sure Rainmeter is working correctly and loading the default illustro suite of skins . If it is , then you can carefully copy back skins and plugins , testing between to make sure that a misbehaving skin or plugin was n't the cause of the issue in the first place . 
@@6350880 <h> Contents <h> More <h> Wrapping Text <p> You wrap text on a String meter by using the W and H options along with the ClipString option . <p> ClipString controls how strings are truncated ( clipped ) or wrapped to fit in or expand the containing meter . If ClipString is set to 0 or not used ( default ) , then the String meter will just expand in width to contain the entire string on one line . <p> Example : @qwx22547 @qwx22570 @qwx22549 @qwx22553 <p> MeasureSomeString @qwx22558 <p> Format=This is a long line of text used to demonstrate wrapping in a string meter . <p> UpdateDivider=-1 <p> MeterString1 @qwx22560 <p> **29;5760;TOOLONG <p> W=160 <p> H=18 <p> X=0 <p> Y=0 @qwx22555 <p> FontFace=Tahoma <p> FontColor=255,255,255 @qwx22565 @qwx22561 @qwx22550 <p> ClipString=1 <p> MeterString2 @qwx22560 <p> **29;5791;TOOLONG <p> W=160 <p> H=70 <p> X=0 <p> Y=5R @qwx22555 <p> FontFace=Tahoma <p> FontColor=255,255,255 @qwx22565 @qwx22561 @qwx22550 <p> ClipString=1 <p> MeterString3 @qwx22560 <p> **29;5822;TOOLONG <p> W=160 <p> H=35 <p> X=0 <p> Y=5R @qwx22555 <p> FontFace=Tahoma <p> FontColor=255,255,255 @qwx22565 @qwx22561 @qwx22550 <p> ClipString=1 <p> MeterString4 @qwx22560 <p> **29;5853;TOOLONG <p> W=160 <p> X=0 <p> Y=5R @qwx22555 @ @ @ @ @ @ @ @ @ @ MeterString1 : If ClipString=1 is used , then the W ( width ) setting is followed , and the string will be truncated or " clipped " at the width defined in W. An ellipse , or ... will be added to the end of the string to indicate clipping has taken place . <p> MeterString2 : If ClipString=1 is used , wrapping will take place if the H ( height ) setting is large enough to hold more than one line of text at your current FontSize setting . The string will wrap on as many lines as the H setting allows , in this example the entire string will fit in the width and height defined . <p> MeterString3 : If ClipString=1 is used and the H setting is not large enough to contain the entire string , the text will wrap on as many lines as he H supports , and then will clip with the ... ellipse . <p> MeterString4 : If ClipString=2 is used and W is defined , then the meter will expand in height automatically , to allow the entire string to display @ @ @ @ @ @ @ @ @ @ ClipString=2 is used and H is defined , then the meter will expand in width automatically , to allow the entire string to display while wrapping to follow the defined height . <p> ClipStringW and ClipStringH can be used to define maximum values for width or height . If it exceeds this boundary , the string will be clipped with the ... ellipse . <p> Both W and H are required when ClipString=1 is used . At least one of eitherW/ClipStringW or H/ClipStringH is required when ClipString=2 is used . <p> Note : The Padding option used to format the display of the backgrounds for the meters in the example above is added after all clipping or wrapping is determined , and has no impact on ClipString functionality , which is based on the original W and H settings on the meter . 
@@6350882 <h> Contents <h> More <h> Launching Windows Special Folders <p> Tip by kenz0 and JSMorley <p> Windows has many " special folders " like " My Computer " and " Recycle Bin " that are not part of the normal folder system you can specify with a " path " on an action in Rainmeter , or launch differently then they appear in Explorer . <p> These folders can be accessed by using the Windows Shell : command and the CLSID identifier codes that Windows assigns to these folders in the Windows Registry . If you know the codes , you can launch these with ease . 
@@6350890 <h> More <h> Built-In Variables <p> Rainmeter automatically creates a number of helpful variables for each skin . These variables do not need to be defined in the Variables section and can not be directly modified by actions in a skin . Some built-in variables are dynamic . <h> Miscellaneous variables <p> The name of the section in which the variable is used . Provides a blank string if used in another context , such as GetVariable in a Lua script . <h> Monitor variables <p> Notes : <p> Monitor variables are dynamic , and DynamicVariables=1 will be required to detect changes when used in a skin . The values will be static when used in the Rainmeter section of a skin . <p> When the variables are used without specifying an @N monitor number , by default the values will be based on the primary monitor , where Rainmeter is started . In order to have the values reflect the monitor the skin is currently on , set AutoSelectScreen to " 1 " in Manage . or alternately , use the ! AutoSelectScreen bang in the skin . 
@@6350892 <p> If set to 1 , the measure value is never updated . A disabled measure always returns 0 as its value in numerical contexts ( e.g. when used in a Calc formula or with IfActions ) , but may still return a previously obtained string value ( e.g. when used in String meters ) . <p> PausedDefault : 0 <p> If set to 1 , the measure value is never updated . A paused measure will return its most recent number and/or string value . <p> Group <p> Defines a group or series of groups that the measure belongs to . For more information please see the Groups page . 
@@6350894 <p> Note : This will generally be the desired option for a left mouse click . LeftMouseDownAction should be avoided unless there is a specific need to trap the downward press , as it will disable the ability to drag the skin . <p> Note : Some manufacturers and/or software have the ability to change what each extra button can do , therefore these actions may not work for everyone . It is not recommended to distribute skins that rely on these actions . <p> Action to execute when the mouse wheel is tilted or rotated to the left . Not all mice have this capability . <p> MouseScrollRightAction <p> Action to execute when the mouse wheel is tilted or rotated to the right . Not all mice have this capability . <h> Mouse Cursor Options <p> MouseActionCursorDefault : 1 <p> When set to 1 ( default ) on a meter with a mouse action , a pointer cursor will be shown when hovering the mouse over the meter . <p> The default for the entire skin can be set to 0 by putting MouseActionCursor=0 in the Rainmeter section of @ @ @ @ @ @ @ @ @ @ meter-by-meter basis with MouseActionCursor=1 . <p> Note : If you have a meter with a mouse action , and there is a meter on top of it , you will need to set MouseActionCursor=0 on the foreground meter ( even if it does not have a mouse action ) . <p> MouseActionCursorName <p> If a custom cursor file ( i.e. . cur or . ani ) is found in @ResourcesCursors in the root config folder of a skin , it will be automatically loaded and available as an alternative for the standard " hand " pointer for meters or skins with a mouse action . <p> The option can be used with **40;5884;TOOLONG in any meter or the Rainmeter section . No path is used in the option . In addition , several built-in Windows cursors may be used without needing any file name or extension . Hand , Text , Help , Busy , Cross , Pen 
@@6350898 <h> More <h> Skins <p> Rainmeter 's basic purpose is to run skins . A skin is a movable , dynamic , sometimes-interactive window that appears over the Windows desktop , and usually gathers and displays information of some kind . <p> Skins come with many different sizes , styles , user interfaces , and levels of complexity . Rainmeter includes utilities for publishing and installing 3rd-party skins . Each skin is generally stored and loaded as an independent , self-contained module . <h> Files and Folders <p> All skins are stored in Rainmeter 's " Skins " folder . If Rainmeter has been installed normally , the default location of the Skins folder is : <p> C : **37;5926;TOOLONG <p> If Rainmeter is installed as a portable application , the Skins folder is found in the installation folder . The Skins folder can also be changed in Rainmeter 's settings . <p> A skin is stored as a file called " SkinName.ini " in its own folder within Skins , as in : **36;5965;TOOLONG ( The file and folder names do not need to match . ) <h> Variants @ @ @ @ @ @ @ @ @ @ are each considered variants of the same skin . This means that only one variant can be active at a time , and all variants use the same settings . Separate skins must be stored in separate folders . <p> 1 . " YourName " and " SkinName " are examples . <h> @Resources <p> Any supporting files used by the skin , such as images , addon executables , sounds , or Lua scripts , should also be stored in the skin folder . Complex skins are recommended to store supporting files in a folder called @Resources inside the root config folder . The @Resources folder is ignored by Rainmeter , except to load custom fonts and custom cursors . <h> Config <p> Each skin is identified with a certain config name . The config name is based on the path from the main Skins folder to the skin file . For example , if a skin is located at ... <p> LONG ... <p> ... then the config name would be : <p> FooBar <p> Because skins may have any number of variants , many Rainmeter featuresespecially bangsrefer @ @ @ @ @ @ @ @ @ @ than the skin 's filename . <h> Root config <p> Skins may also be stored in subfolders within the same root config folder . They share the same @Resources folder , and are packaged and installed together . Otherwise , Rainmeter treats each subfolder as a separate config . <p> This means that they are both located in the same root config folder , " illustro , " in the main Skins directory . <p> LONG ... <p> Each skin has a unique config name : <p> **28;6003;TOOLONG <p> But since they belong to the same root config , they share the same @Resources folder : <p> LONG ... <p> A suite is an informal term for skins that are organized together in this manner . Suites are often used by skin authors to make a set of skins that share a common style , or complement each other in some way . If a root config folder contains only one SkinName.ini file , then the config and root config are the same , and the skin can be stored , packaged and installed by itself . <h> Format <p> @ @ @ @ @ @ @ @ @ @ , which uses the following1 format : <p> Section <p> Key=Value <p> Each property of the skin is defined by a section . Each key is an option that modifies that property . The following sections may be used in skins : <p> Metadata Defines the name , version , license , and other non-functional information about the skin . <p> A skin must have at least one meter . All other properties are optional , and may not even be present , depending on what is needed for the skin . For skins that are publicly distributed , the Metadata section is strongly recommended . <p> There are only a few rules about using the INI format : <p> All section names in a skin must be unique . <p> All option names within a section must be unique . <p> Section and option names should include alphanumeric characters only ( no spaces or punctuation ) . <p> Option values may be contained by quotes ( " ) . If so , Rainmeter will ignore the containing quotes . <p> Option values must be kept on a single line @ @ @ @ @ @ @ @ @ @ " and " Value " are examples . <h> Update <p> When a skin is loaded , it updates on a regular cycle . The length of time between updates is defined by the Update option in the Rainmeter section , and defaults to 1 second ( or 1000 milliseconds ) . The update determines when the skin reacts to changes in the values of variables , measures and options . <p> Individual meters and measures can be made to update more slowly by " skipping " cycles , using the UpdateDivider option . In addition , the ! Update bang forces the skin to update immediately , resetting the timed cycle . <h> Refresh <p> When a skin refreshes , all values are reset , and the skin starts over as if it had just been loaded for the first time . Refreshing also applies any changes that have been made to the code in SkinName.ini. 
@@6350902 <h> More <h> Inline Options <p> Inline options on a String meter are used to add or modify character formatting features to all or part of a string displayed by the meter . <p> This has three primary purposes : <p> Changing the inline format of part of the string . What this means is that you might have two or more FontFace , FontSize or FontColor ( or other ) settings in a string , without needing to use multiple meters and relative positioning . <p> Adding some Direct2D character formatting features to the String meter . These include things like more robust control of the Weight of the font , new style features like Character Spacing , Oblique , Underline and Strikethrough , and control of Stretch and Typography features when used with supporting fonts . <p> Support for a color Gradient on part or all of the string . <p> Inline options are defined by pairs of InlineSetting ... InlineSettingN and InlinePattern ... InlinePatternN options on the meter . InlineSettingN defines the character formatting setting you wish to add or change , and the matching InlinePatternN uses @ @ @ @ @ @ @ @ @ @ wish to change . These must be matching pairs , and there may not be missing N number postfixes in InlineSetting , which start with 2 . <p> The inline formatting is applied to the final string as it will be displayed by the meter , reflecting the value of any measures bound to the meter with MeasureNameN , any Text option on the meter , and any string manipulation applied with other meter options like StringCase , Percentual or NumOfDecimals . <p> While not required , AccurateText=1 should be set in the Rainmeter section of the skin , to ensure that the formatting is done on fonts using proper D2D font spacing and metrics . <h> Options <p> InlineSetting , InlineSetting2 , InlineSetting3 ... <p> This takes the form of the setting name to be added , a ( pipe ) character , and the value for the setting . <p> Example : InlineSetting=Size 12 <p> Supported settings : <p> Facefont family name . This uses the same values as the setting for FontFace on the meter . <p> Sizenumeric point size . This uses the same values as @ @ @ @ @ @ @ @ @ @ , ggg , bbb , aaa or RRGGBBAA color code . This uses the same values as the setting for FontColor on the meter . <p> Weightnumeric value in the range 1-999 .. The following are common values and their meanings . If the value is supported by the font family , it will be used . If not , the closest value that is supported by the font family will be used . <p> If the font does not support any additional weights , then 500 and below will use the font 's normal weight , and 600 and above will simulate a bold effect . <p> CaseOne of the following string case options : <p> Lower - All characters lower caseUpper - All characters upper caseProper - First character of each word upper case , the balance lower caseSentence - First character of each sentence upper case , the balance lower case <p> CharacterSpacingLeading Trailing Minimum Advance Width Defines the inter-character spacing for part or all of the string . Leading and Trailing may be any positive or negative integer or fractional number . The value is based @ @ @ @ @ @ @ @ @ @ to be an integer . Minimum Advance Width must be a positive integer . Any value may be set to an asterisk * to ignore . <p> Example : <p> **30;6060;TOOLONG 2 2 That will increase the leading space before characters and the trailing space after characters by 2 DIP . <p> Italic Uses Italic characters in part or all of the string . No parameter required . This will be simulated by Rainmeter if not supported by the font family . <p> ObliqueUses Oblique characters in part or all of the string . No parameter required . This will be simulated by Rainmeter if not supported by the font family . <p> Underline Used to Underline characters in part or all of the string . No parameter required . <p> Strikethrough Used to Strikethrough characters in part or all of the string . No parameter required . <p> ShadowX Offset Y Offset Blur Amount Color Used to create a Drop Shadow on all or part of the string . <p> X Offset - Number of positive ( right ) or negative ( left ) pixels to offset the shadow @ @ @ @ @ @ @ @ @ @ ) or negative ( above ) pixels to offset the shadow from the string.Blur Amount - Amount of blur transition in pixels . The number of pixels used to transition the shadow from solid to fully transparent . The value is based on DIP ( **25;6092;TOOLONG ) , and does not have to be an integer.Color - rrr , ggg , bbb , aaa or RRGGBBAA color code . The alpha component of the shadow color is multiplied with the alpha component of the string color . <p> Example : <p> InlineSetting=Shadow 2 2 3.5 150,150,150,200 <p> Note : The shadow effect does not change the size or position of the overall meter , and you should ensure that the meter is sized and positioned appropriately to display the shadow without clipping . The overall amount that the shadow effect impacts the desired meter size is a function the font size , the offset amounts and the blur amount . <p> Stretchone of 9 numeric compressed / expanded values if supported by the font . The following values can be set . If the value is supported by the font @ @ @ @ @ @ @ @ @ @ the closest value that is supported by the font family will be used . <p> Note : There are relatively few fonts that support alternative stretch values for glyphs . In many cases the CharacterSpacing setting might be a better choice to get a similar " wide " or " compressed " effect . <p> Typographyone of 80 Typography codes . Used to select alternative glyphs in a font , these must be explicitly supported by the font being used . A few common examples might be : <p> GradientColorAngle Color ; Percentage Color ; Percentage ... Defines a color gradient , at any angle , to be used on the selected text . This can consist of two or more colors as desired , with percentage points being used to define transition points for each color . <p> This takes the form of the Angle for the gradient in degrees , a pipe character , then a series of Color codes , a ; semi-colon , and a Percentage from 0.0 to 1.0 to define the position of the color in the text . Each series of Color ; @ @ @ @ @ @ @ @ @ @ will define a gradient at 180 degrees . It will start with a color of 255,0,0,255 ( red ) at percentage 0.0 ( the start ) , will transition to a color of 0,255,0,255 ( green ) at percentage 0.5 ( 50 percent ) , and to 0,0,255,255 ( blue ) at percentage 1.0 ( 100 percent ) . <p> While you can have as many sets of Color ; Percentage as desired , you must have a minimum of two to create a gradient . The percentage points define the point where the color will be exactly the associated color code . Think of it as the " center " of the color as it transitions toward and away from the defined color code . <p> Alpha transparency can be used to create a gradient fade effect on the text . <p> The Angle is defined as any number of degrees , with 0 or 360 starting directly to the right and rotating clockwise . This results in the following gradient directions on the text : <p> If a string is displayed on more than one line in the @ @ @ @ @ @ @ @ @ @ literal linefeed characters or #CRLF# variables being embedded in the string , any selected text that spans the linefeed will have the GradientColor setting applied to it separately on each line . Gradients will not " wrap " . <p> Most fonts have extra space above or below ( or both ) the actual character " glyph " in the font . This will vary from font to font . The gradient will be applied to the entire font character including the invisible extra space , so particularly when creating gradients that are vertical in direction , some tweaking of the percentage points may be required to have the gradient position as desired on the text . Hint : Nothing says that the first point must be 0.0 and the last point must be 1.0 . <p> Note : An alternative form of GradientColor , GradientColor1 , can be used . This uses the same setting values as GradientColor , but interpolates the gradient using an alternative method of handling gamma correction . In some cases you may find this makes for a smoother or brighter gradient transition . <p> @ @ @ @ @ @ @ @ @ @ This is generally going to be used with the ! SetOption bang , in order to dynamically " turn off " and " turn on " a particular setting . Using a ! SetOption that sets the value to " " will as always " remove " the option entirely , and as there ca n't be " missing " or " skipped " InlineSettingN numbers , all subsequent ones will be ignored . <p> If ( parentheses ) are used to capture parts of the string , then that is what the setting will be applied to . If ( parentheses ) are not used , then the part(s) of the string that match the regular expression will be used . <p> InlinePattern=. * ( default ) is how you would simply add or change a setting on the entire string . <p> The full range of PCRE regular expression functionality is supported , so the pattern can match on all or part of the meter 's string value . Logical OR and AND matching can be done in the regular expression , using the character to support OR @ @ @ @ @ @ @ @ @ @ AND . <p> Reserved characters in regular expression , which are . $*+ ? ( ) must be escaped with the character when used as a literal in the InLinePattern option . If using a measure value as a section variable in the option , the : EscapeRegExp modifier can be used to properly escape reserved characters in the measure . <p> If the ! SetOption bang is being used to dynamically " turn off " and " turn on " an InlinePattern , InlinePattern=$ should be used to indicate " nothing " , as Using a ! SetOption that sets the value to " " will as always " remove " the option entirely , and this will set it to the default of . * , or the entire string . <h> Some Examples @qwx22547 @qwx22570 @qwx22553 @qwx22549 <p> MeasureString <p> Measure=String <p> String=This is an InlinePattern test string. #CRLF#It contains numbers like 123 and 456#CRLF#and colors like red and blue . How#CRLF#about GreenToYellow as well ! <p> Using that string defined in MeasureString , let 's look at each of our InlineSetting / InlinePattern options . <p> @ @ @ @ @ @ @ @ @ @ starting at the beginning of the string , and ( capturing ) all characters until we reach a space and the word " is " . That will change the Weight of the word " This " at the start of the string to Bold . <p> InlineSetting2=Oblique InlinePattern2=test string We are searching for the phrase " test string " , and applying the Oblique style to it . <p> InlineSetting3=Underline InlinePattern3=test string We are searching for the same phrase " test string " , and applying the Underline style to it . So " test string " will be both Oblique and Underline . <p> InlineSetting4=Size 17 InlinePattern4= ( ddd ) We are capturing any parts of the string that are three consecutive numeric digits . This will change the font Size of both " 123 " and " 456 " to 17 . <p> InlineSetting5=Color 255,97,97,255 InlinePattern5=colors like ( . * ) and We are capturing the part of the string that is after " colors like " , and before " and " . This will change the font Color of the word " red " to @ @ @ @ @ @ @ @ @ @ ( . * ) . We are capturing the part of the string that is after " colors like " , Then after " and " . This will change the font Color of the word " blue " to 117,199,235,255 . <p> InlineSetting7=Face Segoe Script InlinePattern7=colors like . * and ( . * ) . We are again capturing the part of the string that is after " colors like " , Then after " and " . This will change the font Face of the word " blue " to Segoe Script . <p> **28;6119;TOOLONG 180 57,204,79,255 ; 0.0 250,247,157,255 ; 1.0 **28;6149;TOOLONG We are defining a GradientColor for the word " GreenToYellow " that will transition from 57,204,79,255 ( green ) to 250,247,157,255 ( yellow ) at an angle of 180 degrees ( left to right ) . 
@@6350905 <p> PrimaryColor is the color for the primary histogram . Default is dark green 0,128,0 . <p> SecondaryColor is the color for the secondary histogram . Default is red 255,0,0 . <p> BothColor is the color used where the histogram elements overlap . Default is yellow 255,255,0 . <p> PrimaryImage , SecondaryImage , BothImage <p> Optional images used for the histogram instead of PrimaryColor , SecondaryColor , BothColor . <p> PrimaryImage is the image used for the primary histogram . <p> SecondaryImage is the image used for the secondary histogram . <p> BothImage is the image used where the histogram elements overlap . <p> If SecondaryImage is defined , then BothImage is required . <p> The image is " revealed " both horizontally and vertically , to the percentage defined by the current value of the MeasureName bound to the meter , and as a factor of time . <p> Note : The image size can not be modified with the W or H general meter options , and will be displayed in the original image size . The size of the histogram will be defined by the size of @ @ @ @ @ @ @ @ @ @ , SecondaryImage or BothImage , they must be the same size . <p> PrimaryImagePath , SecondaryImagePath , BothImagePath <p> Path to the location of optional image used as the primary , secondary or both histograms. 
@@6350907 <h> String meter <h> Options <p> Name(s) of the measure(s) bound to the meter . The meter will display the current value of the measure defined in MeasureName , with values for additional measures bound to the meter available using the %N syntax in the Text option . <p> The meter does not require a MeasureNameN option if the Text option alone will be used to define the string to display . <p> TextDefault : %1 <p> Text to display . If MeasureName is specified , Text will default to the value of the measure . <p> The values of the measure(s) specified with MeasureName can be used with the %N syntax as follows : <p> MeasureName=SomeMeasure <p> **25;6179;TOOLONG <p> Text=This is text containing %1 and %2 . <p> ; %1 and %2 will be replaced by the string values of SomeMeasure and <p> ; SomeMeasure2 , respectively . <p> The Text option can take any combination of the following forms : <p> Display the value of a measure bound with MeasureName <p> Display the values of multiple measures bound with MeasureNameN , and formatted with the %N syntax . @ @ @ @ @ @ @ @ @ @ , then 500 and below will use the font 's normal weight , and 600 and above will simulate a bold effect . <p> StringAlignDefault : Left <p> Horizontal and vertical alignment of the string within the meter . Valid values are : <p> Left , Right , Center ( or LeftTop , RightTop , CenterTop ) <p> LeftBottom , RightBottom , CenterBottom <p> LeftCenter , RightCenter , CenterCenter <p> The string will be aligned using the values of the X and or Y settings as the anchor point . So to CenterCenter align a string within a meter with a width and height of 100 , set X=50 , Y=50 and StringAlign=CenterCenter . <p> StringStyleDefault : Normal <p> Style of the string . Valid values are Normal , Bold , Italic , and BoldItalic . <p> Note : This option is for the most part deprecated and replaced by the far more powerful functionality in the FontWeight option above . It should only be used in new skins to obtain the Italic effect , and should not be used to control the weight attributes . <p> StringCaseDefault : None @ @ @ @ @ @ @ @ @ @ are None , Upper , Lower , and Proper . <p> StringEffectDefault : None <p> Effect applied to a string . Valid values are None , Shadow , and Border . <p> Shadow makes a background copy of the string , offset 1px " right " and 1px " down " , in the color defined in FontEffectColor . <p> Border makes a background copy of the string , 2px " larger " , and offset 1px " left " and 1px " up " , in the color defined in FontEffectColor . <p> The size of the font used in the string has no effect on the fixed 1px size of the Shadow or Border effect . <p> Due to how these effects are created , transparent colors on the string may have undesirable results . <p> Controls how strings are truncated ( clipped ) or wrapped to fit in or expand the containing meter . Valid values are : <p> 0 : Disabled . The string will not be clipped or wrapped . ( default ) <p> 1 : Enabled . The string will be clipped with an @ @ @ @ @ @ @ @ @ @ width ) option on the meter . If the H ( height ) option is large enough to allow multiple lines , the text is wrapped until the value of H is reached , then clipped . <p> 2 : Auto . The string will be clipped or wrapped based on the value of W and/or H. If the width or height are not specified , the meter itself will change size to accommodate the string . This setting works in conjunction with the ClipStringW and ClipStringH options below , to set a " maximum " size that the meter should expand to accommodate the string before clipping . <p> Notes : The changing size of meters when ClipString=2 can cause truncation issues with the overall window size of the skin , unless DynamicWindowSize=1 is set in the Rainmeter section of the skin . <p> ClipString=2 will always wrap on word boundaries ( spaces or tabs ) . Any single word that is longer than the defined or maximum width will clip that line , rather than breaking the word in two . <p> When ClipString=2 is used with bound @ @ @ @ @ @ @ @ @ @ ( WebParser and QuotePlugin for example ) DynamicVariables=1 must be set on the meter . <p> ClipStringW <p> Sets a maximum width that the meter will expand to accommodate the string when ClipString=2 . This setting is ignored if the W option is set . <p> ClipStringH <p> Sets a maximum height that the meter will expand to accommodate the string when ClipString=2 . This setting is ignored if the H option is set . <p> AngleDefault : 0.0 <p> Defines the angle of the text in radians . <p> Note : The size and position of the text are always calculated as if the text is horizontal . This also means that the click-able field used for Mouse Actions does not change . It remains where the text would be with no Angle . <p> If set to 1 , the value of bound measures are converted to a percentage . This is useful if a measure does not return a percentage value , but either automatically defines a valid " range " of values ( e.g. FreeDiskSpace ) or when the MinValue and/or MaxValue options are manually set @ @ @ @ @ @ @ @ @ @ of decimals to display with numerical measure values . <p> ScaleDefault : 1 <p> Scaling factor used for the measure values . The measure value is divided by the specified value . If the specified value has a decimal point ( e.g. 1000.0 ) , the result will also display decimals . <p> Note : If AutoScale is enabled , this option is ignored . <p> AutoScaleDefault : 0 <p> Automatically scales the measure values . The scaled result is appended with k , M , G , etc. as appropriate . Valid values are : <p> 0 : Disabled . <p> 1 : Scales by 1024 . <p> 1k : Scales by 1024 with kilo as the lowest unit . <p> 2 : Scales by 1000 . <p> 2k : Scales by 1000 with kilo as the lowest unit . <p> Note : The value returned by AutoScale adds a space between the scaled number and the scale unit abbreviation . To remove this space simply add Substitute= " " : " " to the Measure that the AutoScale is being applied to . <p> Note : Using the @ @ @ @ @ @ @ @ @ @ give a string meter a solid but virtually transparent background . This can make executing mouse actions on the text easier and more reliable . 
@@6350911 <h> More <h> Meters <p> A meter is an object that defines a visual element that is displayed in a skin . Meters are one of the two major kinds of objects in a skin , along with measures . <h> Usage <p> A meter does not have a " value " in the way that measures do . Some meters are used to display or respond to informational values in two ways : <p> A meter can be bound to a measure . In this way , the meter will automatically display the value in a way that is appropriate for the type of meter . For example , a string meter would display the string value of a measure as a block of text , while a bar meter would display the same measure 's number value as a percentage of its maximum value . Some meter types must be bound to a specific measure ; on others , binding is optional . <p> A meter can use variables in any option . This includes section variables , which provide an alternative way of using measure values . @ @ @ @ @ @ @ @ @ @ ( other than the Meter option ) . <p> Not all meters are used to display information . Some are used to create static elements , such as background images , frames and labels . Specific options and requirements for each meter type are detailed in their individual articles . <h> Format <p> A meter is written as a section in the skin . All meters use the Meter option to define the section as a specific type of meter . Most other meter options depend on the type , but there are some general options that are valid in many or all meters . <p> Below is an example of a complete working meter : <p> MyMeter @qwx22560 <p> Text=Hello , world ! <h> Positions <p> A meter has a certain position , which is given by its X and Y options , and dimensions , which are given by its W and H options . This means that every meter is actually bounded by a rectangular block of pixels , even though it may have a transparent background and therefore appear to be " free-floating . " <p> @ @ @ @ @ @ @ @ @ @ that when the skin is moved , its meters move with it . It also means that meter positions are given relative to the top-left corner of the skin , rather than the desktop . For example , a meter with the option X=15 starts 15 pixels from the left edge of the skin . <p> The dimensions of the skin window are determined by the positions and dimensions of all meters when the skin is loaded . If the skin has DynamicWindowSize enabled , the window will be " pushed " outward if meters are moved rightward or downward or expand in width or height . However , meters that move leftward beyond X=0 , or upward beyond Y=0 , will appear either " cut off " or completely invisible . There is no technical limit to the size of the skin window , but , practically speaking , skins should be made to fit within the current desktop work area . <p> Left : a skin with a single meter that appears to be " free-floating . " Right : the same skin with colored backgrounds added , @ @ @ @ @ @ @ @ @ @ inside the skin window ( green ) and " pushes " the window boundaries to the lower-right . <h> Order <p> The order of meters in the skin code is important in two ways : <p> " Z " position . Meters are drawn in order . Later meters appear " on top of " or " in front of " earlier meters . This means that , for example , a background image that appears behind all other meters must be the first meter that appears in the skin code . <p> Relative positions . A meter 's X or Y position may be set " relative " to the position of the previous meter . This is useful for groups of meters that follow a common pattern , such as lists , tabs or menu items . <h> MeterStyles <p> Meters can use option values from other meters . Using the MeterStyle option , one meter may inherit all options from one or more " parent " sections . 
@@6350913 <h> More <h> PerfMon plugin <p> The Performance Monitor exposes several counters , which track various information . All available counters can be viewed using the Performance Monitor application . To open it , either run PerfMon.msc or type it in the Start menu . <p> Note : The names of the objects , counters and instances must be in English . <p> Name of the counter instance . Can be left unspecified if the counter does not have any instances . <p> Example : Total <p> PerfMonDifferenceDefault : 1 <p> If set to 0 , the current value of the counter is used as the measure value . If set to 1 , the difference between the current and previous counter value is used instead . This is useful as many of the performance values are counters and you usually want to know how much the counter has increased since last update . <h> Example @qwx22547 @qwx22570 <p> BackgroundMode=2 <p> SolidColor=0,0,0,255 <p> MeasureProcessCount <p> ; Measures the number of processes running . @qwx22557 <p> Plugin=PerfMon <p> PerfMonObject=System <p> PerfMonCounter=Processes <p> PerfMonDifference=0 <p> MeasureDiskAccess <p> ; Measures disk access of @ @ @ @ @ @ @ @ @ @ <p> PerfMonCounter=Disk Bytes/sec <p> PerfMonInstance=C : <p> MeterProcessCount @qwx22560 <p> **31;6233;TOOLONG <p> X=5 <p> Y=5 <p> W=200 <p> H=20 @qwx22554 <p> Text=Total processes : %1 <p> MeterDiskAccess @qwx22560 <p> **29;6266;TOOLONG <p> X=5 <p> Y=25 <p> W=200 <p> H=20 @qwx22554 <p> AutoScale=1 <p> Text=Disk access : %1B/sec <p> Note : <p> While rare , it is possible for the database of " counters " that is maintained by Performance Monitor in Windows to become damaged , which will cause the Perfmon plugin to stop functioning correctly . <p> In many cases , this can be corrected by " rebuilding " the database from the Windows command line . <p> Run cmd.exe , being sure to run " As administrator " . At the command line , enter the following commands in order : 
@@6350919 <h> Contents <h> More <h> WebParser Tutorial <p> This tutorial is meant to she 'd some light on using the WebParser plugin in Rainmeter to retrieve information from a website for use in your skins . A lot of us have used WebParser to get RSS feeds or other data from websites , but often by using or tweaking existing code , and without really understanding how it works . <h> WebParser overview <p> WebParser is a plugin measure type in Rainmeter , that is used to connect to some resource , normally a web site on the internet , read the raw HTML output that the site returns , and parse information from that output to use in meters in your skin . <p> When we say parse in this context , what we mean is to search the output for some text strings . Finding those strings will position you in the output at a point where you want some information . Then you capture that information , and display the results in meters . <p> The basic format of a WebParser skin is : <p> MeasureParent @qwx22557 @qwx22564 @ @ @ @ @ @ @ @ @ @ @qwx22564 <p> URL=MeasureParent @qwx22567 <p> MeasureChild2 @qwx22557 @qwx22564 <p> URL=MeasureParent <p> StringIndex=2 <p> MeterChild1 @qwx22560 <p> **25;6297;TOOLONG <p> MeterChild2 @qwx22560 <p> **25;6324;TOOLONG <p> It is important right off to understand that WebParser works with a " parent / child " approach . What happens is that the parent measure connects to the site with the URL , and uses the RegExp option to capture some information with one or more instances of ( . * ) . The captured information is held by WebParser , and is individually referenced by child measures with the StringIndex numbers . Each ( . * ) captures some information and creates a StringIndex . <h> The RegExp option <p> Now let 's spend a minute talking about the key part of the code , that RegExp option . As we saw above , WebParser uses a regular expression to search for the bits of information you want to retrieve , and return them in one or more StringIndex values on the measure . <p> So how do we build one of these mysterious RegExp statements in Rainmeter ? Let me use a template showing @ @ @ @ @ @ @ @ @ @ siU ) Search1 ( . * ) Search2. * <p> So enclosed in quotes , you have : <p> ( ? siU ) - Which is an " options modifier " for the regular expression , telling it how you want it to behave . <p> Search1 - Which will be some text you will search on to get you right up to the data you want . <p> ( . * ) - The data you want returned in the array to use in your skin . The parentheses tell it to " capture " everything between " Search1 " and " Search2 " . In our examples we are using the string " . * " in our captures , which simply means " . " ( any character ) and " * " ( zero or more of them ) . <p> Search2 - Use this to tell RegExp what to look for to know it 's time to " stop " capturing information . <p> . * - This will contain data from the website which is between this set of search/return parameters and the next @ @ @ @ @ @ @ @ @ @ not enclose the . * in parentheses , and will not use a StringIndex number . This is used to " skip " to the next search you want to do . <p> What is this ( ? siU ) stuff ? <p> The ( ? siU ) starts with the ? character to tell the regular expression that what follows inside the parentheses are directives for the overall expression . <p> the " s " tells RegExp to ignore line breaks and tabs when doing a search . For example , if you search for " Every good boy deserves favor " and it is split on two lines in the output , it will still match . <p> The " i " tells the search to be " case insensitive " . Matches will work on both upper and lower case . <p> The " U " tells RegExp to be " ungreedy " , meaning that it will return only the first instance of the match on the search string . <p> These directives are not required , but you will find that they are generally the @ @ @ @ @ @ @ @ @ @ and you will want to use " ( ? siU ) " to start your RegExp most of the time . <h> A quick example : <p> You have a web page you want to get the " title " tag from . Here is the RegExp you would use : <p> RegExp= ( ? siU ) &lt;title&gt; ( . * ) &lt;/title&gt; <p> So we have told RegExp to search for the text " &lt;title&gt; " then capture ( . * ) everything after it in StringIndex 1 of the measure until it sees " &lt;/title&gt; " , where it will stop capturing . <p> This guide is meant to be simple and very " WebParser " focused . It is NOT a full-blown guide to regular expressions . I would encourage you to either now or later open up a browser tab/window here : Regular expression options and check out the various references and guides available . <h> Our tutorial skin <p> So what we are going to do today is parse a website http : **31;6351;TOOLONG to get our IP and location information to use in a @ @ @ @ @ @ @ @ @ @ open the page in a new tab/window . <p> Here is what the web page we are going to parse looks like , with the information we are going to extract numbered : <p> Here is the final skin we will create : <h> Let 's Build It <p> First , let 's get our skin started , and use an option on our first parent WebParser measure to get the raw HTML output from the site into a text file we can use for reference . @qwx22547 @qwx22570 @qwx22549 @qwx22553 <p> MeasureSite @qwx22557 @qwx22564 <p> URL=http : **31;6384;TOOLONG <p> RegExp= <p> Debug=2 <p> MeterDummy @qwx22560 <p> As you can see , we do n't even have a RegExp option filled in yet , and only one dummy meter . We just want to use that Debug=2 option on the measure , then save and load the skin . <p> When Debug=2 is used , WebParser will connect to the site , and download the HTML that is returned into a text file . That file will be called WebParserDump.txt and will be in the same folder with the skin @ @ @ @ @ @ @ @ @ @ editor , so you have it to work with as we create our measures . <p> Once you have a copy of the site output in WebParserDump.txt , you should remove that Debug=2 option and save your skin . <p> Now let 's look at the first bit of information we want to retrieve . <p> We want to start by getting our IP address . On the web page , it is near the top of the area with all the information we want , with a label " Your IP Address : " <p> Open up WebParserDump.txt ( the saved output from the website ) and search for that label . You will find a section of the html which looks like this : <p> &lt;tbody&gt; <p> &lt;tr&gt;&lt;tdwidth= " 100 " &gt;Your IP LONG ... <p> LONG ... United **28;6417;TOOLONG <p> Use the ( ? siU ) expression directives , ( described earlier ) search for &lt;td. *&gt;Your IP Address : &lt;/td&gt;&lt;td&gt; and capture everything to a StringIndex ( . * ) until it sees &lt;/td&gt; , where it will stop . <p> So if we look again @ @ @ @ @ @ @ @ @ @ &gt;Your IP LONG ... <p> <p> &lt;p&gt;You can see that we will return 72.205.25.80 in StringIndex 1&lt;/p&gt; <p> **43;6447;TOOLONG - We want to check the website at a rate 3600 times the value in the " Update= " parameter in the " Rainmeter " section . As this defaults to " 1000 " or once every 1000 milliseconds ( 1 second ) we will be running WebParser every 3600 seconds or 60 minutes . This is plenty often , as your IP information does n't change much and you do n't want to " spam " the website with requests . You may well find yourself blocked ... &lt;/p&gt; <p> &lt;h2&gt;The first child measure&lt;/h2&gt; <p> &lt;p&gt;Then , we build a " child " measure , to grab that information from StringIndex 1 of the " parent " measure . &lt;/p&gt; <p> txt <p> MeasureIP @qwx22557 @qwx22564 @qwx22571 @qwx22567 <p> We are using the values returned by our parent measure MeasureSite as the URL for this measure , and setting the value contained in StringIndex=1 . So the value of this child measure will be " 72.205.25.80 " . <h> Testing @ @ @ @ @ @ @ @ @ @ much leave open while building your skin ) the About / Skins dialog . In this panel you can see the values of your measures as you save and refresh your skin . You will be able to tell at a glance whether you are getting the values you expect from your RegExp . If there are problems , be sure to check the About / Log panel for any error messages . <h> The rest of our child measures <p> Now let 's get the next bit of information we want from the website . ( Remember , the RegExp reads the website in order from top to bottom , so you need to use the correct order in the " RegExp= " statement . You can display the information in any order you want on your skin however . ) <p> The next information in the WebParserDump file that we want is the local path and name of the country flag image . <p> LONG ... United **28;6492;TOOLONG <p> So we want to add to our " RegExp= " statement , search for the flag image name , @ @ @ @ @ @ @ @ @ @ parent measure : <p> So after the first pair of start/stop searches we already did , we are adding : <p> . *&lt;td&gt;Country : &lt;/td&gt;. *&lt;img src= " ( . * ) " &gt; <p> This will tell RegExp to skip everything until it finds &lt;td&gt;Country : &lt;/td&gt;. *&lt;img src= " and then capture everything until it sees " &gt; and put it in StringIndex=2 . The result in my example will be " flags/us.png " . <h> Downloading an image <p> What we really want is not the file name of the flag image , but the image itself . WebParser can easily do this . <p> As long as the value from the parent measure that is returned in the StringIndex number is the URL to an image file , you can simply add the Download=1 option to the child measure , and the image will be downloaded . The value of the child measure will then be the full local path to the file in the Windows TEMP folder Rainmeter will create . <p> However , wait .. that value " flags/us.png " is not a full @ @ @ @ @ @ @ @ @ @ path " to the image on the remote server . That 's ok , we can still get it . <p> MeasureFlagImage @qwx22557 @qwx22564 <p> URL=http : **32;6522;TOOLONG <p> StringIndex=2 <p> Download=1 <p> What we are doing is appending the first part of the URL , the one we used on the parent measure to the beginning of the URL option , followed by the reference to MeasureSite and the StringIndex=2 option . Then we add Download=1 and that full URL of http : **33;6556;TOOLONG will be used to retrieve the image file . <p> The value of the child measure will in my case be : <p> LONG ... <p> Which we can use in an Image meter later to display it . <h> Our next child measure <p> Now we want to get the " Country Code " that the flag image represents . It just so happens that the file name of the image IS the Country Code , in this case " us " <p> To get that , we will use a child measure like this : <p> MeasureCountryCode @qwx22557 @qwx22564 @qwx22571 <p> StringIndex=2 <p> @ @ @ @ @ @ @ @ @ @ . png " : " 1 " <p> Note that the StringIndex number that we use is the same StringIndex=2 as our child measure that got the flag image . That is because we are just using the same capture from the RegExp , that returned " flags/us.png " . We are just using the value a little differently this time . <p> We are using RegExpSubstitute to allow a regular expression in a Substitute option . What Substitute= " . */ ( . * ) . png " : " 1 " does is extract and capture just the file name of the image , with no extension . It then replaces the entire string value of the measure with this . The measure ends up with a string value of " us " . We will capitalize and use that in a String meter later . 
@@6350920 <h> Skin sections <h> Options <p> The current active state of the config . If Active is 0 , the config is inactive . If a number other than 0 , the active skin . ini or variant is the file in alphabetical order in the config folder . <p> WindowX , WindowY <p> The X and Y position of the skin . A trailing % sign indicates that the value is a percentage of the screen width . A trailing R will make the position relative to the right edge of the screen instead of the left . A trailing B will make the position relative to the bottom edge of the screen instead of the top . <p> The % and R / B modifiers can be used together . <p> By default the position is relative to the primary screen . You can override this with @N where N is 0 to 32 and denotes which screen to position the skin on ( 1-32 ) or the virtual desktop ( 0 ) . The screen selection will apply to both WindowX and WindowY if the value is @ @ @ @ @ @ @ @ @ @ AnchorY <p> By default WindowX and WindowY control the position of the upper left corner of the config window . AnchorX and AnchorY allow that anchor position to be changed . The Anchor can be defined in pixels from the upper left corner of the window or as a percentage of the config if % is used . If a letter R or B is added to AnchorX or AnchorY , then the position is relative to the right or bottom edge of the window . <p> As an example , by setting WindowX , WindowY , AnchorX and AnchorY all to 50% the config will be truly centered in the primary monitor regardless of screen resolution or aspect ratio . <p> SavePositionDefault : 1 <p> If set to 1 , changes to the window position will be saved to Rainmeter.ini . <p> AlwaysOnTopDefault : 0 <p> Defines the Z-position of the skin . Valid values are : <p> 2 : Always on top . The skin will be on top of all ( including topmost ) windows . <p> 1 : On top . The skin will be on @ @ @ @ @ @ @ @ @ @ The skin will stay visible when showing the desktop and will be brought to the foreground on click . <p> -1 : Bottom . The skin will stay behind other windows . <p> -2 : On desktop . Similar to 0 except that the skin will stick to the desktop and can not be brought to the foreground . <p> DraggableDefault : 1 <p> If set to 1 , the skin can be dragged around with the mouse . <p> SnapEdgesDefault : 1 <p> If set to 1 , the skin will snap onto screen edges and other skins when moved . To disable snapping temporarily , hold the CTRL key down while moving the skin . <p> StartHiddenDefault : 0 <p> If set to 1 , the skin will start hidden . The ! Show bang must be used to show the skin . <p> Note : A setting of 0 ( fully transparent ) will not allow detection of the mouse on the skin , and the HideOnMouseOver option will have no effect . To have a skin be invisible but react to the mouse , a minimum @ @ @ @ @ @ @ @ @ @ using the Transparency setting in the Manage interface , a range of percentages is offered , but corresponding numeric values are stored . <p> HideOnMouseOverDefault : 0 <p> Controls the transparency of the skin when the mouse is moved on and off of it . This works in conjunction with the setting in AlphaValue . This can be also be set with the On hover setting in the Manage interface . To temporarily disable this behavior , hold CTRL down when moving the cursor . <p> 0 ( Do Nothing - default ) : No action is taken . <p> 1 ( Hide ) : Skin will fade between the value in AlphaValue and hidden . If no AlphaValue is defined , it will simply fade between fully visible and hidden . <p> 2 ( Fade in ) : Skin will fade between the value in AlphaValue and fully visible . <p> 3 ( Fade out ) : Skin will fade between the value in AlphaValue and hidden . <p> FadeDurationDefault : 250 <p> Defines the length of the fade duration in milliseconds when HideOnMouseOver is used , activating/deactivating the @ @ @ @ @ @ @ @ @ @ <p> ClickThroughDefault : 0 <p> If set to 1 , mouse clicks will pass through the skin . To temporary disable this , hold the CTRL key when clicking . <p> KeepOnScreenDefault : 1 <p> If set to 1 , the skin will be kept within the bounds of the screen . <p> LoadOrderDefault : 0 <p> Determines the order in which the skins are loaded . The value can be any number ( even negative ) . Skins with the lowest load order are loaded first . <p> Example : Three skins having LoadOrder=-1 , LoadOrder=2 and LoadOrder=5 would load the configs in that order , with the config with LoadOrder=-1 appearing beneath the one with LoadOrder=2 which is in turn beneath the config containing LoadOrder=5 . If two configs have the same value for LoadOrder , they are then loaded in the order they are in Rainmeter.ini . <p> Note : The value of LoadOrder has no bearing on the Z-position of the skin . LoadOrder only affects how skins in the same Z-position interact with each other . That is to say , configs set to " @ @ @ @ @ @ @ @ @ @ Normal " , but two configs in " Topmost " will layer themselves according to their LoadOrder value . <p> AutoSelectScreenDefault : 0 <p> If set to 1 , the WindowX/WindowY " @N " settings are dynamically set based on the position of the meter 's window . This setting will reset to 0 when a monitor is selected in the Manage window or on the skins context menu . <p> Group <p> Defines a group or series of groups that the skin belongs to . For more information please see the Groups page . <p> DragGroup <p> A group or series of Drag Groups that the skin belongs to . So if any skin is selected , any skins in the same DragGroup will automatically be selected as well . 
@@6350924 <p> There are a few place where formulas are not allowed . These are primarily places where the option value is assumed to be a string and only a string . In those cases , the characters used in a formula are treated as any other string character . A few examples are : <p> The Text option of a String meter . <p> The String option of a String measure . <p> The RegExp option of a WebParser measure . <p> IfMatch options . <p> TootipText or TooltipTitle options . <p> While formulas can be used in the Variables section of a skin , be aware that the Variables section itself does not resolve the formula . If you have a variable MyVar= ( 5 * 2 ) , then the value of #MyVar# is not " 10 " , but literally " ( 5 * 2 ) " . However , if you then use the variable in an option that does allow formulas , that option itself will do the math , as in X=#MyVar# in a meter . <p> Mathematical formulas must be entirely enclosed in @ @ @ @ @ @ @ @ @ @ formula , unless they are being used in the Formula option of a Calc measure or in a IfCondition option , where the function is always assumed to be a formula , and the enclosing parentheses are optional . <p> Note : While Measures , SectionVariables : and #Variables# can be used in a formula , all the components of a formula must be numeric , using only numbers , operators , functions and constants . Using .5 or .25 in a formula will cause an error . It must be 0.5 or 0.25 . <p> Round ( x , precision ) : Rounds x to an integer , or to a specified number of decimal places . precision is optional . <h> Constants <p> PI : Mathematical constant Pi ( 3.14159265 ... ) . <p> E : Mathematical constant e ( 2.71828182 ... ) . <h> Conditional Operations <p> &lt;condition&gt; ? &lt;expr. if true . &gt; : &lt;expr. if false . &gt; <p> This will evaluate condition as being either true or false . If it is true , the expression to the left of the colon ( : @ @ @ @ @ @ @ @ @ @ expression to the right is evaluated . This is equivalent to the following if-then-else statement : <p> if ( condition ) then expr. if true else expr. if false end if <p> Measure @qwx22556 <p> Formula=5 <p> Meter @qwx22560 <p> X= ( Measure &lt; 6 ? 0 : 10 ) @qwx22552 <p> The meter would be positioned at X=0 since the condition Measure &lt; 6 evaluates to true . <p> Conditional operators can be nested . It should be noted that there is a maximum of 30 nested operators . <p> The meter would be positioned at X=97 . Since the first statement of Measure &lt; 1 is false , the formula begins testing the nested formulas in order until the condition becomes true . If none of the conditions are met , the final false value of 96 would be set . 
@@6350925 <h> More <h> Section Variables <p> Measures and meters can be referenced as variables . These are called section variables , and they can provide several kinds of information about the meter or measure . <h> Usage <p> A meter or measure is referenced as a section variable by placing the section name in brackets ( ) . The value provided by a section variable can be changed by adding parameters after a colon ( : ) . Multiple parameters are separated by commas ( , ) . Spaces are allowed after a comma . <p> SectionName:P1 , P2 <p> Normal or built-in variables take priority over section variables , which means they can be used within section variables . For example : #Foo# : #Bar# . ( The reverse , such as #FooBar# , is not valid . ) <h> Dynamic Variables <p> Section variables are always dynamic . DynamicVariables=1 will always be needed on a measure or meter section where the variable is used in an option value . <h> Meter Parameters <p> Note : This provides the " real " X or Y value , which is @ @ @ @ @ @ @ @ @ @ . This is always an integer , even if the meter has no X and Y options set , or if the options use formulas , variables or relative positions . <p> This also means that for a string meter with StringAlign options , the value of MeterName:X and MeterName:Y may not be the same as the option values . <p> This will only return a value when used with a Time measure . The measure 's Windows timestamp value . This will allow you to obtain the numeric value of the Windows timestamp from a Time measure that has a Format option , and wo n't have the timestamp as the normal number value . 
@@6350928 <h> More <h> IfMatchActions <p> IfMatch options are used in any measure , of any type , to evaluate a Perl Compatible Regular Expression . The regular expression will be evaluated as " true " or " false " based on matching with the string value of the measure , and will execute IfMatchAction or IfNotMatchActionaction options , which will contain one or more Bangs or commands . <p> There can be multiple sets of match and action options in the measure , by using IfMatch2 / IfMatchAction2 / IfNotMatchAction2 and so on . <p> The full range of PCRE regular expression functionality is supported , so the match can be made on all or part of the measure 's string value , can test the order of sub-strings within the string , and can test for both the presence or absence of a sub-string within the string . Logical OR and AND testing can be done in the regular expression , using the character to support OR and Lookahead assertions ( ? = .. ) to support AND . <p> Reserved characters in regular expression , which are . @ @ @ @ @ @ @ @ @ @ when used as a literal in the IfMatch option . If using a measure value as a section variable in the IfMatch option , the : EscapeRegExp modifier can be used to properly escape reserved characters in the measure . <p> Capture groups ( ) should not be used in the regular expression , as nothing is being captured and no indexes are being created . The function is simply used to test if the string measure matches some regular expression pattern , and will either be " true " ( IfMatchAction ) or " false " ( IfNotMatchAction ) . <h> Options <p> IfMatch , IfMatch2 , ... , IfMatchN <p> The regular expression matched with the string value of the measure . <p> Examples : Measure value is " Red , Green , Blue " <p> IfMatch=Red , Green , Blue : true <p> IfMatch=. *Green. * : true <p> IfMatch= ( ? i ) . *green. * : true <p> IfMatch=Red. * : true <p> IfMatch=. *Blue$ : true <p> IfMatch=RedBlue : true <p> IfMatch= ( ? =Blue ) ( ? =Red ) : true <p> IfMatchAction @ @ @ @ @ @ @ @ @ @ be executed when the regular expression in IfMatch results in " true " . The action is executed only once when the condition becomes " true " , so it needs to become " false " and again " true " to execute again . <p> IfNotMatchAction , IfNotMatchAction2 , ... , IfNotMatchActionN <p> Optional action to be executed when the regular expression in IfMatch results in " false " . The action is executed only once when the condition becomes " false " , so it needs to become " true " and again " false " to execute again . <p> IfMatchModeDefault : 0 <p> If set to 1 , the evaluation of the match will execute the appropriate actions in IfMatchAction or IfNotMatchAction on every update of the measure . <p> Note : Care should be taken not to create an infinite loop in the actions . In particular , ! Refresh , ! Update and ! UpdateMeasure #CURRENTSECTION# should generally be avoided when IfMatchMode=1 . <h> Example @qwx22547 @qwx22570 @qwx22549 @qwx22553 <p> MeasureDate @qwx22558 <p> Format=%A , %B %#d , %Y <p> IfMatch=SaturdaySunday <p> IfMatchAction= ! @ @ @ @ @ @ @ @ @ @ weekend " <p> IfNotMatchAction= ! SetOption MeterDayofWeek Text " The date is MeasureDate#CRLF#It 's a weekday " 
@@6350930 <p> There are a few place where formulas are not allowed . These are primarily places where the option value is assumed to be a string and only a string . In those cases , the characters used in a formula are treated as any other string character . A few examples are : <p> The Text option of a String meter . <p> The String option of a String measure . <p> The RegExp option of a WebParser measure . <p> IfMatch options . <p> TootipText or TooltipTitle options . <p> While formulas can be used in the Variables section of a skin , be aware that the Variables section itself does not resolve the formula . If you have a variable MyVar= ( 5 * 2 ) , then the value of #MyVar# is not " 10 " , but literally " ( 5 * 2 ) " . However , if you then use the variable in an option that does allow formulas , that option itself will do the math , as in X=#MyVar# in a meter . <p> Mathematical formulas must be entirely enclosed in @ @ @ @ @ @ @ @ @ @ formula , unless they are being used in the Formula option of a Calc measure or in a IfCondition option , where the function is always assumed to be a formula , and the enclosing parentheses are optional . <p> Note : While Measures , SectionVariables : and #Variables# can be used in a formula , all the components of a formula must be numeric , using only numbers , operators , functions and constants . Using .5 or .25 in a formula will cause an error . It must be 0.5 or 0.25 . <p> Round ( x , precision ) : Rounds x to an integer , or to a specified number of decimal places . precision is optional . <h> Constants <p> PI : Mathematical constant Pi ( 3.14159265 ... ) . <p> E : Mathematical constant e ( 2.71828182 ... ) . <h> Conditional Operations <p> &lt;condition&gt; ? &lt;expr. if true . &gt; : &lt;expr. if false . &gt; <p> This will evaluate condition as being either true or false . If it is true , the expression to the left of the colon ( : @ @ @ @ @ @ @ @ @ @ expression to the right is evaluated . This is equivalent to the following if-then-else statement : <p> if ( condition ) then expr. if true else expr. if false end if <p> Measure @qwx22556 <p> Formula=5 <p> Meter @qwx22560 <p> X= ( Measure &lt; 6 ? 0 : 10 ) @qwx22552 <p> The meter would be positioned at X=0 since the condition Measure &lt; 6 evaluates to true . <p> Conditional operators can be nested . It should be noted that there is a maximum of 30 nested operators . <p> The meter would be positioned at X=97 . Since the first statement of Measure &lt; 1 is false , the formula begins testing the nested formulas in order until the condition becomes true . If none of the conditions are met , the final false value of 96 would be set . 
@@6350931 <p> ADAPTERDESCRIPTION : String The description of the network adapter specified by SysInfoData . <p> ADAPTERTYPE : String and Number The type of network adapter specified by SysInfoData . <p> The string value will be one of Ethernet , Wireless or Other . The number value will be one of 6 ( Ethernet ) , 71 ( Wireless ) , or some other number in the range 0-280 ( Other ) . The meaning of numeric codes other than 6 and 71 can be found at : MSDN Adapter Info . <p> NETMASK : String The subnet mask of the network adapter specified by SysInfoData . <p> LANCONNECTIVITY : Number Returns 1 if your computer is connected to a LAN , -1 if not . <p> INTERNETCONNECTIVITY : Number Returns 1 if your computer is connected to the Internet , -1 if not . <h> Monitor and screen values <p> NUMMONITORS : Number The number of display monitors currently active . <p> SCREENSIZE : String The resolution of the primary display monitor in the form " width x height " . <p> SCREENWIDTH : Number The width , in pixels @ @ @ @ @ @ @ @ @ @ there are multiple . <p> SCREENHEIGHT : Number The height , in pixels , of the monitor specified by SysInfoData . <p> VIRTUALSCREENTOP : Number Y-Coordinate of the upper left corner of the virtual screen . Use SysInfoData to specify a monitor . These coordinates are relative to the primary monitor and can be negative . <p> VIRTUALSCREENLEFT : Number X-Coordinate of the upper left corner of the virtual screen . Use SysInfoData to specify a monitor . These coordinates are relative to the primary monitor and can be negative . <p> VIRTUALSCREENWIDTH : Number Width of the virtual screen which encompasses all display monitors . <p> VIRTUALSCREENHEIGHT : Number Height of the virtual screen which encompasses all display monitors . <p> WORKAREA : String The size of the client area of the primary display monitor in the form " width x height " . <p> WORKAREATOP : Number Y-Coordinate of the upper left corner of the client area . Use SysInfoData to specify a monitor . These coordinates are relative to the primary monitor and can be negative . <p> WORKAREALEFT : Number X-Coordinate of the upper left corner @ @ @ @ @ @ @ @ @ @ monitor . These coordinates are relative to the primary monitor and can be negative . <p> WORKAREAWIDTH : Number Width of the client area of the primary display monitor . Use SysInfoData to specify a different monitor . <p> WORKAREAHEIGHT : Number Height of the client area of the primary display monitor . Use SysInfoData to specify a different monitor . <h> Time Zone values <p> TIMEZONEISDST Number A flag indicating the current state of Daylight Savings Time for the local computer . Possible return values are:1 : Daylight Savings Time is currently in effect0 : Daylight Savings Time is currently not in effect-1 : The local region does not use Daylight Savings Time , or the functionality is disabled in Windows . <p> TIMEZONEBIAS Number The difference , in minutes , between standard local time and Coordinated Universal Time ( UTC ) . This is the difference from the standard local time to UTC , or UTC = standard local time + time zone bias . <p> TIMEZONESTANDARDNAME String The full name of the local computer 's Time Zone when Daylight Savings Time is not in effect . For @ @ @ @ @ @ @ @ @ @ Number The difference in minutes between standard local time and the local time when Daylight Savings Time is not in effect . For most areas , this will always be zero . Adding this to the value of TIMEZONEBIAS will produce the total actual difference in minutes between the local computer and UTC when Daylight Savings Time is not in effect , or UTC = standard local time + time zone bias + standard bias . <p> TIMEZONEDAYLIGHTNAME String The full name of the local computer 's Time Zone when Daylight Savings Time is in effect . For example , " Eastern Daylight Time " . <p> TIMEZONEDAYLIGHTBIAS Number The difference in minutes between standard local time and the local time when Daylight Savings Time is in effect . For most areas , this will always be -60 . Adding this to the value of TIMEZONEBIAS will produce the total actual difference in minutes between the local computer and UTC when Daylight Savings Time is in effect , or UTC = standard local time + time zone bias + daylight bias . <p> An additional selector option that can be @ @ @ @ @ @ @ @ @ @ <p> Network Interface Controller <p> For SysInfoType values related to network information , this will identify the network interface controller ( NIC ) to use . <p> This can be defined in one of several ways : <p> The string value Best , which will automatically detect the active interface . <p> The name of the network interface controller . For example , Qualcomm AR938x Wireless Network Adapter . <p> The index number of the network interface controller . <p> Example : SysInfoData=Best <p> Note : When the option is set to Best , the function will select a " wired " network connection in preference to a " wireless " one , if both are active . <p> When the option is set to Best , DyanmicVariables=1 must be set on the measure if you want it to automatically react to changes in the active interface . This should be done if for instance you have a laptop or other computer that you switch between wired and wireless connections . <p> Monitor number <p> For SysInfoType values related to monitor information , this will identify the monitor number to @ @ @ @ @ @ @ @ @ @ can be found by opening the Windows Display Properties dialog . It is important to note that " 1 " is not always the primary display monitor . 
@@6350934 <p> This can be used to display a single frame from the bitmap image , based on the percentage value . This can be used to create animations . <p> If for example the image contains 5 frames , the first frame is displayed when the percentual measure value is between 0% and 19% , the second frame is shown from 20% to 39% , and so on . <p> The measure returns any integer numeric value . This is an int64 numeric type , and can be any value up to **25;6618;TOOLONG . Fractional values will be rounded to whole numbers . <p> This can be used to display a numeric value using multiple frames from the bitmap image . <p> In this case , you will use BitmapExtend with a value of 1 , and set BitmapDigits with a value equal to the greatest number of digits the value can be . This will be used with a BitmapImage that consists of the numbers from 0 to 9 , and a BitmapFrames of 10 . This will then display the entire number using the appropriate numeric ( 0-9 @ @ @ @ @ @ @ @ @ @ Path to the image . The frames in the images can be laid out either horizontally or vertically ( the orientation is determined automatically from the height or the width of the image ) . The size of a single frame is also determined automatically , so no extra space need surround the frames . <p> Some help with creating bitmap images to use in this meter can be found at Button Images , as the Button and Bitmap meters use the same kind of images made of frames combined into a single image file . Think of a filmstrip . <p> BitmapFramesDefault : 1 <p> Number of frames in the image . <p> BitmapTransitionFrames <p> The number of transition frames per each actual frame . The transition frames are frames which are displayed when the measure value changes . The same number of transition frames must be used after each regular frame . The TransitionUpdate option in the Rainmeter section determines the rate at which the transition frames change during the transition . The total duration of the transition is therefore TransitionUpdate multiplied by BitmapTransitionFrames . <p> Note:BitmapFrames always @ @ @ @ @ @ @ @ @ @ including the transition frames . <p> Example : If the bitmap has 10 values and each transition consists of 4 additional frames , then BitmapFrames should be set to 50 and BitmapTransitionFrames to 4 . <p> BitmapZeroFrameDefault : 0 <p> If set to 1 , a measured percentual value of zero is included in the calculation of the first frame . Since there are 100 percentage " points " from 0-99% , and 101 from 0-100% , BitmapZeroFrame should be used when measuring from 0-100% , or the meter will overrun the bitmap when the value is at 100% . <p> BitmapExtendDefault : 0 <p> If set to 1 the bitmap is extended to display the whole measured value . <p> Example : If you define a bitmap that defines frames from 0 to 9 you can use this to display the measured value as the bitmap numbers . <p> BitmapDigitsDefault : 0 <p> Number of digits that are drawn ( for BitmapExtend=1 ) . The first frame is used if the value does n't have as many digits as this defines . 
@@6350936 <h> Contents <h> More <h> Screen Position Variables <p> The following built-in variables in Rainmeter can help you position things on the screen even on different screen resolutions . <p> **35;6645;TOOLONG The total dimensions of the user 's screen resolution . <p> **31;6682;TOOLONG The dimensions of the " work area " - the desktop as constrained by the taskbar and any " docking " or " ranging " software . <p> #WORKAREAX##WORKAREAY# The absolute X and Y position of the work area 's top-left corner . <p> In the past , if your users wanted to change the width of something , they had to open a window full of scary code and find the appropriate line . We shall hereafter refer to these as the Dark Ages of Rainmeter . Now my Taskbar skin , for example , is nothing more than this : <p> Taskbar @qwx22559 <p> ImageName=Taskbar.jpg <p> W=#WORKAREAWIDTH# <p> H=33 <p> These variables support mathematical transformations , too . If I wanted a bar that filled up a third of the screen , for instance , I 'd write : <p> W= ( #WORKAREAWIDTH# / 3 @ @ @ @ @ @ @ @ @ @ you can use these variables to set the initial positions of whole skins in a . thm file for RainThemes . <p> Placing a skin relative to the top or left sides of the desktop area is effortless - ( #WORKAREAX# + X ) or ( #WORKAREAY# + Y ) . The right or bottom sides are a bit tricker , but just as effective . For example , if I want the Taskbar to be 33 pixels from the bottom - since it 's 33 pixels high - I 'd type : <p> WindowY= ( #WORKAREAY# + ( #WORKAREAHEIGHT# - 33 ) ) <p> In other words , you 're telling Rainmeter to start at the top of the work area , go all the way down , then back up by 33 . <p> Centering a skin is just as easy . It 's a tad more complicated in that you ca n't just make X and Y the center of the screen - the skin has its own height and width , remember . With Enigma , I 've kept a consistent format for all of my @ @ @ @ @ @ @ @ @ @ center-aligned at X=60 . So if I wanted to center the whole skin as part of a theme , I 'd use this format : <p> WindowX= ( ( #SCREENAREAWIDTH# / 2 ) - 60 ) <p> It depends on the number of skins you 've got , but in general , it 's pretty easy to construct an entire theme that automatically adjusts to the user 's resolution when it loads . As an example , I 've copied the whole of Enigma 's new default state below . It 's easy for me to imagine most skins being packaged with themes like this , now that you can guarantee a proper and instantaneous presentation on any screen , large or small . 
@@6350937 <h> More <h> Option Types <p> In the most basic sense , a skin in Rainmeter is controlled by a . ini file consisting of sections , options , and option values . <p> SectionName <p> OptionName=OptionValue <p> The skin can have various kinds of sections . These include : @qwx22547 <p> Metadata @qwx22548 <p> MeasureName <p> MeterName <p> These sections can have many options and option values . Some of which are general in nature , and some of which are very specific to the type of section , for instance specific options for the various measure , plugin or meter types . <p> While the options used can be general or specific , the options will fall into one of the following broad type categories : <h> Number options <h> Path options <p> Path options specify the relative or absolute path of either a file or a folder ( depending on the option ) . For example , the path and name of an image file is expected with ImageName . <p> There are built-in variables provided that automatically resolve to paths for the Rainmeter application or individual @ @ @ @ @ @ @ @ @ @ Variables . <p> In addition , there is a built-in variable #@# that resolves to the @Resources folder in the root config folder of the current skin . <p> ; Paths relative to the current skin folder : <p> ImageName=lolcat.png <p> ImageName= .. lolcat.png <p> ; Absolute path : <p> ImageName=C : lolcatslolcat.png <p> ; Path to the current skin folder : <p> **33;6715;TOOLONG <p> ; Path to the @ResourcesImages folder under the root config of the current skin : <p> **29;6750;TOOLONG <h> Color options <p> Color options such as SolidColor and FontColor should use the RGBA ( red-green-blue-alpha ) notation in either the hexadecimal or decimal form . The color results from a mixing of the red , green and blue components of the option , with the transparency ( alpha channel ) of the element set by the fourth component . <p> Decimal colors are specified as RRR , GGG , BBB , AAA , where RRR , GGG , BBB , and AAA are decimal numbers from 0 to 255 . Formulas can also be used in place of the numbers . <p> Hexadecimal colors are specified @ @ @ @ @ @ @ @ @ @ and AA are hexadecimal numbers from 00 to FF . <p> Note : The alpha component is optional . As with the other components it is a value from 0 to 255 ( 00 to FF ) , with 0 being completely invisible ( and the meter will not react to the mouse ) to 255 , which is completely opaque . The default is 255 ( or FF ) . To have a element be " invisible " while still reacting to the mouse , use an alpha value of 1 . <p> ; The following lines are equivalent to solid opaque red : <p> SolidColor=255,0,0,255 <p> SolidColor=255,0,0 <p> SolidColor= ( 200 + 55 ) , ( 2 - 2 ) , 0 <p> SolidColor=FF0000FF <p> SolidColor=FF0000 <h> Action options <p> Options in a skin which cause Rainmeter to take some action . Actions may be triggered by user input such as mouse actions or changing values and system events within the skin , such as IfActions or OnUpdateAction . <p> Normally the value of an action option is going to be one or more bangs , or the @ @ @ @ @ @ @ @ @ @ are defined on the same action option , enclose them in square brackets . <p> ; Single bang : <p> LeftMouseUpAction= ! HideMeter SomeMeter <p> LeftMouseUpAction= ! HideMeter SomeMeter <p> ; Multiple bangs : <p> LeftMouseUpAction= ! HideMeter SomeMeter ! HideMeter SomeOtherMeter <p> For bangs that take parameters , the arguments should be separated by a space . Parameters that contain spaces must use quotes around the parameter . <p> ; These two lines are equivalent : <p> LeftMouseUpAction= ! HideMeter SomeMeter <p> LeftMouseUpAction= ! HideMeter " SomeMeter " <p> ; These two are NOT equivalent . The first line will cause an error due to the spaces <p> ; in the parameters while the second will properly set the value of SomeVariable <p> ; These two may or may not be equivalent depending on the value of the #ImageFile# <p> ; variable . If #ImageFile# contains spaces , the first line will fail . In uncertain <p> ; cases , it is always best to use quotes as in the second line . <p> LeftMouseUpAction= ! SetWallpaper #ImageFile# <p> LeftMouseUpAction= ! SetWallpaper " #ImageFile# " <p> External Windows commands @ @ @ @ @ @ @ @ @ @ and any parameters . Enclose the command in square brackets , and enclose any values with spaces in quotes . <p> LeftMouseUpAction= " C : WindowsNotepad.exe " MyFile.txt <p> ; Runs Notepad.exe and loads the file MyFile.txt . <p> LONG ... <p> ; Opens the URL in the default web browser . <h> Magic Quotes <p> A parameter to a bang that contains embedded quotes should be surrounded by a what we call " " " magic quotes " " " . A pair of triple quotes . <p> ; The first line will fail due to extra quotes . The second line will properly log <p> ; Example string : Bob said " hello " to Susan <p> LeftMouseUpAction= ! Log " Bob said " hello " to Susan " <p> LeftMouseUpAction= ! Log " " " Bob said " hello " to Susan " " " <h> Escaping a #Variable# or MeasureName <p> When using #VarName# or MeasureName in an action option , the current value of the variable or measure will be used . To have the literal string " #VarName# " or " MeasureName " used @ @ @ @ @ @ @ @ @ @ the variable or measure name with asterisk * characters . <p> For example , use #*VarName*# or *MeasureName* to tell Rainmeter to " escape " the variable or measure name . You do not want the value resolved , but rather used as a literal string . <p> LeftMouseUpAction= ! SetOption SomeMeter FontSize #VarName# <p> ; The FontSize option for SomeMeter will be set to the current value of the variable . <p> LeftMouseUpAction= ! SetOption SomeMeter FontSize #*VarName*# <p> ; The FontSize option for SomeMeter will be set to the the string " #VarName# " <p> LeftMouseUpAction= ! SetOption SomeMeter FontSize MeasureName <p> ; The FontSize option for SomeMeter will be set to the current value of the measure . <p> LeftMouseUpAction= ! SetOption SomeMeter FontSize *MeasureName* <p> ; The FontSize option for SomeMeter will be set to the string " MeasureName " . <h> Regular expression options <p> These options use Perl Compatible Regular Expressions ( PCRE ) to match specific parts of a text string . Regular expressions are used when the structure of a piece of data is known , but the content is not . @ @ @ @ @ @ @ @ @ @ by the WebParser plugin to interpret ( or " parse " ) web-based or local text file data sources , but they can also be used to modify the string value of a measure using Substitute options , or to test a string in a measure with IfMatch options . 
@@6350940 <h> Skin sections <h> Options <p> The current active state of the config . If Active is 0 , the config is inactive . If a number other than 0 , the active skin . ini or variant is the file in alphabetical order in the config folder . <p> WindowX , WindowY <p> The X and Y position of the skin . A trailing % sign indicates that the value is a percentage of the screen width . A trailing R will make the position relative to the right edge of the screen instead of the left . A trailing B will make the position relative to the bottom edge of the screen instead of the top . <p> The % and R / B modifiers can be used together . <p> By default the position is relative to the primary screen . You can override this with @N where N is 0 to 32 and denotes which screen to position the skin on ( 1-32 ) or the virtual desktop ( 0 ) . The screen selection will apply to both WindowX and WindowY if the value is @ @ @ @ @ @ @ @ @ @ AnchorY <p> By default WindowX and WindowY control the position of the upper left corner of the config window . AnchorX and AnchorY allow that anchor position to be changed . The Anchor can be defined in pixels from the upper left corner of the window or as a percentage of the config if % is used . If a letter R or B is added to AnchorX or AnchorY , then the position is relative to the right or bottom edge of the window . <p> As an example , by setting WindowX , WindowY , AnchorX and AnchorY all to 50% the config will be truly centered in the primary monitor regardless of screen resolution or aspect ratio . <p> SavePositionDefault : 1 <p> If set to 1 , changes to the window position will be saved to Rainmeter.ini . <p> AlwaysOnTopDefault : 0 <p> Defines the Z-position of the skin . Valid values are : <p> 2 : Always on top . The skin will be on top of all ( including topmost ) windows . <p> 1 : On top . The skin will be on @ @ @ @ @ @ @ @ @ @ The skin will stay visible when showing the desktop and will be brought to the foreground on click . <p> -1 : Bottom . The skin will stay behind other windows . <p> -2 : On desktop . Similar to 0 except that the skin will stick to the desktop and can not be brought to the foreground . <p> DraggableDefault : 1 <p> If set to 1 , the skin can be dragged around with the mouse . <p> SnapEdgesDefault : 1 <p> If set to 1 , the skin will snap onto screen edges and other skins when moved . To disable snapping temporarily , hold the CTRL key down while moving the skin . <p> StartHiddenDefault : 0 <p> If set to 1 , the skin will start hidden . The ! Show bang must be used to show the skin . <p> Note : A setting of 0 ( fully transparent ) will not allow detection of the mouse on the skin , and the HideOnMouseOver option will have no effect . To have a skin be invisible but react to the mouse , a minimum @ @ @ @ @ @ @ @ @ @ using the Transparency setting in the Manage interface , a range of percentages is offered , but corresponding numeric values are stored . <p> HideOnMouseOverDefault : 0 <p> Controls the transparency of the skin when the mouse is moved on and off of it . This works in conjunction with the setting in AlphaValue . This can be also be set with the On hover setting in the Manage interface . To temporarily disable this behavior , hold CTRL down when moving the cursor . <p> 0 ( Do Nothing - default ) : No action is taken . <p> 1 ( Hide ) : Skin will fade between the value in AlphaValue and hidden . If no AlphaValue is defined , it will simply fade between fully visible and hidden . <p> 2 ( Fade in ) : Skin will fade between the value in AlphaValue and fully visible . <p> 3 ( Fade out ) : Skin will fade between the value in AlphaValue and hidden . <p> FadeDurationDefault : 250 <p> Defines the length of the fade duration in milliseconds when HideOnMouseOver is used , activating/deactivating the @ @ @ @ @ @ @ @ @ @ <p> ClickThroughDefault : 0 <p> If set to 1 , mouse clicks will pass through the skin . To temporary disable this , hold the CTRL key when clicking . <p> KeepOnScreenDefault : 1 <p> If set to 1 , the skin will be kept within the bounds of the screen . <p> LoadOrderDefault : 0 <p> Determines the order in which the skins are loaded . The value can be any number ( even negative ) . Skins with the lowest load order are loaded first . <p> Example : Three skins having LoadOrder=-1 , LoadOrder=2 and LoadOrder=5 would load the configs in that order , with the config with LoadOrder=-1 appearing beneath the one with LoadOrder=2 which is in turn beneath the config containing LoadOrder=5 . If two configs have the same value for LoadOrder , they are then loaded in the order they are in Rainmeter.ini . <p> Note : The value of LoadOrder has no bearing on the Z-position of the skin . LoadOrder only affects how skins in the same Z-position interact with each other . That is to say , configs set to " @ @ @ @ @ @ @ @ @ @ Normal " , but two configs in " Topmost " will layer themselves according to their LoadOrder value . <p> AutoSelectScreenDefault : 0 <p> If set to 1 , the WindowX/WindowY " @N " settings are dynamically set based on the position of the meter 's window . This setting will reset to 0 when a monitor is selected in the Manage window or on the skins context menu . <p> Group <p> Defines a group or series of groups that the skin belongs to . For more information please see the Groups page . 
@@6350941 <h> More <h> Manual <p> Rainmeter displays customizable skins , like memory and battery charge , RSS feeds and weather forecasts , right on your desktop . Many skins are even functional : they can record your notes and to-do lists , launch your favorite applications , and control your media player - all in a clean , unobtrusive interface that you can rearrange and customize to your liking . Rainmeter is at once an application and a toolkit . You are limited only by your imagination and creativity . <h> Getting started with Rainmeter <p> Getting Started is a new user introduction to Rainmeter , covering both how to use the application , and starting guides and tutorials for creating and editing skins . <p> Using the rest of this documentation , and the experience of using and learning Rainmeter , will be much easier and more enjoyable with the overview Getting Started provides . <h> Using the Rainmeter application <p> The User Interface section of the manual describes how to use the application to manage Rainmeter on the desktop . Control things with the Manage interface and context @ @ @ @ @ @ @ @ @ @ It wo n't be long before you want to extend your library of skins beyond the default illustro suite included with Rainmeter , with others downloaded from the internet . The Installing Skins section explains how to install and load the thousands of skins available for Rainmeter . <h> Creating and editing skins <p> Rainmeter can be used as a straightforward skin manager , loading and using skins created by others . However , the real power and fun of Rainmeter can only be unlocked when the transition is made from " user " to " author " . The Reference section of the manual contains everything needed to craft that perfect skin that does exactly what you require , and looks just right on your desktop . <p> Settings contains detailed information about the Rainmeter.ini file , which controls many important aspects of Rainmeter on the desktop . <p> The Skins section describes what a skin 's . ini file contains and does . It also is a reference for several powerful overall skin features . <p> The next sections , Meters , Measures and Plugins , are the @ @ @ @ @ @ @ @ @ @ information from the system or the internet , and meters display things , with many different meter types and practically unlimited control over style . <p> The following sections provide a reference for other powerful skin options and features . Bring skins to life with Bangs and Mouse Actions , and extend Rainmeter 's functionality using the Lua Scripting language . <p> One of the most exciting things about Rainmeter is the free and open sharing of skins in the community . See Publishing Skins for everything needed to package and distribute suites and skins . <h> More information <p> Be sure to check the Tips &amp; Tricks section for a wealth of guides and suggestions from the Rainmeter community . <p> The Snippets section contains a collection of useful " snippets " of Lua script code , from the Rainmeter Team and users . <p> Remember , there is an entire community of people willing and able to help when things get stuck . Be sure to use the Rainmeter Forum or jump on the web-based IRC channel when help is needed . <p> Note : Most option entries @ @ @ @ @ @ @ @ @ @ CTRL-Click to add an #anchor to the URL . This makes it easy to link to a specific part of a page . Try it below . 
@@6350942 <h> More <h> InputText plugin <p> Plugin=InputText executes bangs with user input . <p> InputText works by defining a series of commands , which can be triggered by any " action " string ( this includes mouse actions , conditional actions in a Calc measure , and other commands in an InputText measure , including the same measure ) . When triggered , a free-floating text input box is created to gather user input at the specified points in the command series . When all input has been submitted , the commands are carried out . <p> Note : InputText is incompatible with skins set to Stay Topmost , or AlwaysOnTop=2 , as the conflict between the input field , which requires " focus " , and the constant attempts by the skin to stay on " top " , in front of the input field , will not allow InputText to function correctly . <h> Options <p> Command1 , Command2 , ... , CommandN <p> Actions to execute when the plugin is triggered . The macro string $UserInput$ will be replaced by whatever the user types into it . @ @ @ @ @ @ @ @ @ @ the macro string $UserInput$ is repeated in a command series , multiple input boxes will be created in sequence . However , a single value input by the user can be used multiple times in different bangs in the same command series by using the string value of the InputText MeasureName as a section variable . <p> Note : Any alpha channel setting of FontColor is entirely ignored . The transparency of the input control is set by SolidColor , which will effect both the input box and text transparency . <p> FontFace <p> Family name of the input text font . <p> Note : Only fonts actually installed in Windows can be used . <p> FontSize <p> Size of the input text font . <p> StringStyle <p> Style of the input text . Valid values are Normal , Bold , Italic , and BoldItalic . <p> StringAlignDefault : Left <p> Alignment of the input text . Valid values are Left , Right , Center . <p> Note : With right-aligned text , the cursor will move from left to right as text is typed . This is advised for @ @ @ @ @ @ @ @ @ @ . <p> TopMost <p> Sets the Z-position of the input field . If set to 1 then the input field will stay on top of all windows while active . If set to 0 then other windows can be dragged in front of the input field while it is active . If not set at all ( default ) then the Z-position of the input field will follow the TopMost setting of the overall skin . <p> Note : This option should not be used when FocusDismiss=1 is set . <p> FocusDismissDefault : 1 <p> If set to 1 ( default ) , clicking anywhere other than on the input field will dismiss the input without taking action . If set to 0 , the mouse is disabled until Enter or Escape is pressed . <p> OnDismissActionDefault : 0 <p> A bang or action that is executed when an active InputText field is dismissed without hitting Enter to execute the plugin commands . 
@@6350945 <h> Discover <p> Rainmeter comes with a few simple starter skins that provide a good place to start learning how to use and modify Rainmeter . There is also a vast and growing community of Rainmeter users who share the skins they create . Listed below are some of the better places where you can get new skins to use and modify . Download as many different skins as you like , you can always switch between them . 
@@6350950 <h> More <h> Loop measure <p> Measure=Loop Creates a looping counter between two values . <p> The measure will be the value of StartValue for one update , will increment based on the value of Increment on each subsequent update , and will be the value of EndValue for one update . If LoopCount is other than 1 , the loop will then repeat . <p> On each loop , if the value of Increment is such that the final increment would cause the value to overrun the value of EndValue , the final increment will be reduced to the remainder required to have the loop end at EndValue . <p> The measure will have a range that is the difference between StartValue and EndValue for use by meters requiring a percentage . There can not be a negative percentage , so the range will always be lowest value to highest value . <p> Any dynamic change to any of the four measure options , or dynamically changing InvertMeasure on the measure , will cause the loop to be reset and start over with the new values . <p> Note @ @ @ @ @ @ @ @ @ @ , or formulas that resolve to whole numbers . Fractional values will be truncated . <h> Options <p> General measure options <p> All general measure options except AverageSize are valid . MinValue and MaxValue are automatically set based on StartValue and EndValue , and may not be manually set or changed . <p> StartValueDefault : 1 <p> The starting value for the loop . This may be any positive or negative whole number . <p> EndValueDefault : 100 <p> The ending value for the loop . This may be any positive or negative whole number . <p> IncrementDefault : 1 <p> A positive or negative whole number by which the counter will be incremented on each update . <p> LoopCountDefault : 0 <p> The number of times the loop will be executed . The default of 0 will endlessly repeat . When LoopCount is reached , the measure will stop at and maintain the value of the EndValue option . <h> Measure Commands <p> Commands that can be sent to a Loop measure using the ! CommandMeasure bang . <p> Reset <p> This will cause the measure to reset the @ @ @ @ @ @ @ @ @ @ . <p> Example : ! CommandMeasure MeasureName " Reset " <p> Note : Any dynamic change to any of the four measure options , or dynamically changing InvertMeasure on the measure , will automatically perform a reset of the loop . This command would not be required . <h> Examples @qwx22547 @qwx22570 @qwx22553 @qwx22549 <p> MeasureLoop1 <p> Measure=Loop <p> StartValue=37 <p> EndValue=59 <p> Increment=1 <p> LoopCount=0 <p> MeasureLoop2 <p> Measure=Loop <p> StartValue=10 <p> EndValue=0 <p> Increment=-1 <p> LoopCount=1 <p> MeterLoop1 @qwx22560 <p> MeasureName=MeasureLoop1 <p> W=154 <p> H=50 <p> X=77 <p> StringAlign=Center <p> FontSize=35 @qwx22554 @qwx22565 @qwx22561 @qwx22550 <p> LeftMouseUpAction= ! TogglePauseMeasure MeasureLoop1 <p> MiddleMouseUpAction= ! CommandMeasure MeasureLoop1 " Reset " <p> MeterLoop2 @qwx22560 <p> MeasureName=MeasureLoop2 <p> W=154 <p> H=50 <p> X=77 <p> Y=10R <p> StringAlign=Center <p> FontSize=35 @qwx22554 @qwx22565 @qwx22561 @qwx22550 <p> LeftMouseUpAction= ! TogglePauseMeasure MeasureLoop2 <p> MiddleMouseUpAction= ! CommandMeasure MeasureLoop2 " Reset " <p> If InvertMeasure is set to 1 , the opposite of the value generated by the loop will be returned . This can have the effect of reversing the direction of the loop . Toggling InvertMeasure with ! SetOption can create a " ping-pong " effect with the measure . 
@@6350952 <h> More <h> Option Types <p> In the most basic sense , a skin in Rainmeter is controlled by a . ini file consisting of sections , options , and option values . <p> SectionName <p> OptionName=OptionValue <p> The skin can have various kinds of sections . These include : @qwx22547 <p> Metadata @qwx22548 <p> MeasureName <p> MeterName <p> These sections can have many options and option values . Some of which are general in nature , and some of which are very specific to the type of section , for instance specific options for the various measure , plugin or meter types . <p> While the options used can be general or specific , the options will fall into one of the following broad type categories : <h> Number options <h> Path options <p> Path options specify the relative or absolute path of either a file or a folder ( depending on the option ) . For example , the path and name of an image file is expected with ImageName . <p> There are built-in variables provided that automatically resolve to paths for the Rainmeter application or individual @ @ @ @ @ @ @ @ @ @ Variables . <p> In addition , there is a built-in variable #@# that resolves to the @Resources folder in the root config folder of the current skin . <p> ; Paths relative to the current skin folder : <p> ImageName=lolcat.png <p> ImageName= .. lolcat.png <p> ; Absolute path : <p> ImageName=C : lolcatslolcat.png <p> ; Path to the current skin folder : <p> **33;6871;TOOLONG <p> ; Path to the @ResourcesImages folder under the root config of the current skin : <p> **29;6906;TOOLONG <h> Color options <p> Color options such as SolidColor and FontColor should use the RGBA ( red-green-blue-alpha ) notation in either the hexadecimal or decimal form . The color results from a mixing of the red , green and blue components of the option , with the transparency ( alpha channel ) of the element set by the fourth component . <p> Decimal colors are specified as RRR , GGG , BBB , AAA , where RRR , GGG , BBB , and AAA are decimal numbers from 0 to 255 . Formulas can also be used in place of the numbers . <p> Hexadecimal colors are specified @ @ @ @ @ @ @ @ @ @ and AA are hexadecimal numbers from 00 to FF . <p> Note : The alpha component is optional . As with the other components it is a value from 0 to 255 ( 00 to FF ) , with 0 being completely invisible ( and the meter will not react to the mouse ) to 255 , which is completely opaque . The default is 255 ( or FF ) . To have a element be " invisible " while still reacting to the mouse , use an alpha value of 1 . <p> ; The following lines are equivalent to solid opaque red : <p> SolidColor=255,0,0,255 <p> SolidColor=255,0,0 <p> SolidColor= ( 200 + 55 ) , ( 2 - 2 ) , 0 <p> SolidColor=FF0000FF <p> SolidColor=FF0000 <h> Action options <p> Options in a skin which cause Rainmeter to take some action . Actions may be triggered by user input such as mouse actions or changing values and system events within the skin , such as IfActions or OnUpdateAction . <p> Normally the value of an action option is going to be one or more bangs , or the @ @ @ @ @ @ @ @ @ @ are defined on the same action option , enclose them in square brackets . <p> ; Single bang : <p> LeftMouseUpAction= ! HideMeter SomeMeter <p> LeftMouseUpAction= ! HideMeter SomeMeter <p> ; Multiple bangs : <p> LeftMouseUpAction= ! HideMeter SomeMeter ! HideMeter SomeOtherMeter <p> For bangs that take parameters , the arguments should be separated by a space . Parameters that contain spaces must use quotes around the parameter . <p> ; These two lines are equivalent : <p> LeftMouseUpAction= ! HideMeter SomeMeter <p> LeftMouseUpAction= ! HideMeter " SomeMeter " <p> ; These two are NOT equivalent . The first line will cause an error due to the spaces <p> ; in the parameters while the second will properly set the value of SomeVariable <p> ; These two may or may not be equivalent depending on the value of the #ImageFile# <p> ; variable . If #ImageFile# contains spaces , the first line will fail . In uncertain <p> ; cases , it is always best to use quotes as in the second line . <p> LeftMouseUpAction= ! SetWallpaper #ImageFile# <p> LeftMouseUpAction= ! SetWallpaper " #ImageFile# " <p> External Windows commands @ @ @ @ @ @ @ @ @ @ and any parameters . Enclose the command in square brackets , and enclose any values with spaces in quotes . <p> LeftMouseUpAction= " C : WindowsNotepad.exe " MyFile.txt <p> ; Runs Notepad.exe and loads the file MyFile.txt . <p> LONG ... <p> ; Opens the URL in the default web browser . <h> Magic Quotes <p> A parameter to a bang that contains embedded quotes should be surrounded by a what we call " " " magic quotes " " " . A pair of triple quotes . <p> ; The first line will fail due to extra quotes . The second line will properly log <p> ; Example string : Bob said " hello " to Susan <p> LeftMouseUpAction= ! Log " Bob said " hello " to Susan " <p> LeftMouseUpAction= ! Log " " " Bob said " hello " to Susan " " " <h> Escaping a #Variable# or MeasureName <p> When using #VarName# or MeasureName in an action option , the current value of the variable or measure will be used . To have the literal string " #VarName# " or " MeasureName " used @ @ @ @ @ @ @ @ @ @ the variable or measure name with asterisk * characters . <p> For example , use #*VarName*# or *MeasureName* to tell Rainmeter to " escape " the variable or measure name . You do not want the value resolved , but rather used as a literal string . <p> LeftMouseUpAction= ! SetOption SomeMeter FontSize #VarName# <p> ; The FontSize option for SomeMeter will be set to the current value of the variable . <p> LeftMouseUpAction= ! SetOption SomeMeter FontSize #*VarName*# <p> ; The FontSize option for SomeMeter will be set to the the string " #VarName# " <p> LeftMouseUpAction= ! SetOption SomeMeter FontSize MeasureName <p> ; The FontSize option for SomeMeter will be set to the current value of the measure . <p> LeftMouseUpAction= ! SetOption SomeMeter FontSize *MeasureName* <p> ; The FontSize option for SomeMeter will be set to the string " MeasureName " . <h> Regular expression options <p> These options use Perl Compatible Regular Expressions ( PCRE ) to match specific parts of a text string . Regular expressions are used when the structure of a piece of data is known , but the content is not . @ @ @ @ @ @ @ @ @ @ by the WebParser plugin to interpret ( or " parse " ) web-based or local text file data sources , but they can also be used to modify the string value of a measure using Substitute options , or to test a string in a measure with IfMatch options . 
@@6350954 <h> Overview <p> The meter will consist of one or more Shape ... Shape2 ... ShapeN objects . <p> You first define the type of Shape , the relative starting position in the meter , and required and optional shape definition parameters . <p> MeterShape <p> Meter=Shape <p> Shape=Rectangle 0,0,100,50 <p> In this example we are saying " Create a rectangle , starting at an X of 0 and a Y of 0 relative to the meter , with a width of 100 , and a height of 50 . " This is the most basic example of the meter , and will create a 100 X 50 rectangle with a default white fill color and a default 1 pixel black drawing stroke . <p> You can then add Attribute and Transform modifiers to each shape , which can control things like Fill Color , StrokeWidth , Rotate , Scale , and much more . <p> Modifiers are added on the ShapeN option by defining them separated by the pipe character . All modifiers are optional , and they can be in any order in the option , after the @ @ @ @ @ @ @ @ @ @ black fill color in the shape , change the width of the drawing stroke to 4 pixels , and color the stroke white . " <p> Shapes in a meter can also be Combined , which will allow you to merge two or more separate shapes in a variety of ways . <p> MeterShapes <p> Meter=Shape <p> Shape=Rectangle 4,4,110,110,55 <p> Shape2=Rectangle 54,54,80,80,10 <p> Shape3=Combine Shape Union Shape2 <p> If you have more than one shape defined in the meter , you may want them to share some or all modifiers , rather than repeating them in each ShapeN option . This is done with the Extend modifier . The way this works is that you use the keyword Extend , followed by one or more named identifiers . Then you add that named identifier as a separate option on the meter , and in it put any modifiers you want to share . <h> Options <p> This is the only Shape meter specific option used . It will define the Shape Type and its definition parameters , and any Attribute and Transform modifiers for the shape(s) to be drawn . @ @ @ @ @ @ @ @ @ @ number of shapes in a single Shape meter . Multiple shapes are drawn in the numerical order of the ShapeN , so in the case of overlap , higher numbered shapes will be drawn on top / in front of lower numbered shapes . <p> RadiusX ( required ) : Radius of the ellipse . If used with the optional ' RadiusY ' , this will represent the radius on the X-axis . <p> RadiusY ( optional ) : Radius of the ellipse on the Y-axis . <p> Examples:Shape=Ellipse 50,50,50Shape=Ellipse 50,50,50,25 <p> Note on Ellipse : The shape is drawn centered on the position defined by CenterX and CenterY . In a sense , it draws from the center out . Be sure that CenterX and CenterY , or the X and Y on the meter , leave enough room in the overall skin to not truncate the shape at the left and top . <p> ShapeEnding ( optional ) : Leave the shape open ( 0 - default ) or automatically close ( 1 ) the shape . <p> The first 4 parameters are required . The rest are @ @ @ @ @ @ @ @ @ @ optional parameter later in the order , an asterisk * symbol can be used to indicate " default " in earlier optional parameters . <p> Notes on Arc:SweepDirection : ArcSize : An arc describes two virtual ellipses intersecting the starting and ending points . One Clockwise and one Counter-clockwise . If the radius of the arc is greater than 1/2 distance between the starting and ending points , this actually creates 4 possible arcs : <p> Clockwise small <p> Clockwise large <p> Counter-clockwise small <p> Counter-clockwise large <p> RotationAngle : If the RadiusX and RadiusY of the arc are not the same , then RotationAngle will rotate the two ellipses around a center point defined on and at 1/2 the distance between the starting and ending points . <p> ShapeEnding : An Arc shape can be either be left open , or have a line segment automatically drawn to close the shape . The impact this has on Attribute Modifiers is : <p> Fill attributes default to transparent on an open shape . <p> Fill attributes can be defined for either an open or closed shape . <p> StrokeWidth is @ @ @ @ @ @ @ @ @ @ StrokeWidth is only used on the " drawn " part of the arc on an open shape . <p> Notes on Curve : A Curve shape can be either be left open , or have a line segment automatically drawn to close the shape . The impact this has on Attribute Modifiers is : <p> Fill attributes default to transparent on an open shape . <p> Fill attributes can be defined for either an open or closed shape . <p> StrokeWidth is used on the entirety of a closed shape . <p> StrokeWidth is only used on the " drawn " part of the curve on an open shape . <p> PathParameters : ( See below ) <p> Drawing segments that define the outline of a shape , consisting of a starting point followed by a series of one or more lines , arcs or curves . Each segment will automatically start where the previous one ends . The final result may produce an open or closed shape . <p> Path definitions must be defined in a separate named option , which you then reference immediately following the Path type @ @ @ @ @ @ @ @ @ @ MyPath StrokeColor 0,255,0,255 . <p> Parameters : <p> StartX ( required ) : X coordinate of the starting point of the path . <p> StartY ( required ) : Y coordinate of the starting point of the path . <p> Followed a pipe character , and at least one , up to unlimited , of the following segment types , separated by a pipe character . <p> LineTo ( optional ) : Uses the same parameters as the Line shape , less the X and Y starting coordinates and any ShapeEnding value . Segments will automatically know their starting points , and must always in and of themselves be an open shape . <p> ArcTo ( optional ) : Uses the same parameters as the Arc shape , less the X and Y starting coordinates and any ShapeEnding value . Segments will automatically know their starting points , and must always in and of themselves be an open shape . <p> CurveTo ( optional ) : Uses the same parameters as the Curve shape , less the X and Y starting coordinates and any ShapeEnding value . Segments will automatically @ @ @ @ @ @ @ @ @ @ of themselves be an open shape . <p> In addition , there are two optional segment control commands that can be used at any point in the path definition . These will alter the behavior of the path 's stroke from the default values or any defined in the Shape(N) definition , from the point they are used in the path until they are altered again or the end of the path is reached : <p> SetRoundJoin ( optional ) : Values are 0 or 1 . Use the default or defined value of StrokeLineJoin ( 0 - default ) to join angled segments , or use a Round ( 1 ) line join . <p> SetNoStroke ( optional ) : Values are 0 or 1 . Use the default or defined value of StrokeWidth ( 0 - default ) , or do not draw a stroke ( 1 ) . This does not change the open or closed nature of the shape . <p> Following the final definition of the path segments , a path may or may not create a fully enclosed shape . This can be controlled @ @ @ @ @ @ @ @ @ @ optional ) : Values are 0 or 1 . Leave the shape open ( 0 - default ) or automatically close ( 1 ) the shape by drawing a line segment from the final ending point to the starting point . <p> Notes on Path : All Attribute and Transform modifiers may be used on the shape , but they may only be defined once on the Shape(N) option line . Individual path segments may not be modified , and the named path definition may only contain the starting point , one or more segment definitions , any optional SetLineJoin or SetNoStroke segment commands , and an optional ClosePath value . <p> Closed shapes are automatically filled with the default white fill color . Open shapes are not filled by default , although in both instances this may be changed or forced with a Fill attribute modifier on the shape . <p> CombineParameters : ShapeN ... <p> Combine is a special shape type , that combines or merges two or more existing closed shapes in the meter , replacing them with a new " combined " shape . The first @ @ @ @ @ @ @ @ @ @ " , and any shapes , separated with the pipe character , with which it is combined are " children " . This distinction is important in the context of how modifiers are inherited or not on combined shapes . <p> Notes on Combine : When shapes are combined , the parent shape 's Attribute Modifiers , e.g. Fill and StrokeWidth , are automatically inherited by the new combined shape . Any Attribute modifiers on child shapes or the new combined shape are ignored . <p> When shapes are combined , all Transform Modifiers , e.g. Rotate and Scale , on both the parent and child shapes are performed first , before the combine is done . So for instance , a child shape can be rotated , and them combined with a parent shape . The new combined shape can then also have its own Transform Modifiers , which will be done after the shapes are combined . <p> The order of the front-to-back position of the shapes can be impacted by combining shapes , as the shapes are drawn in the numerical order of their ShapeN option name @ @ @ @ @ @ @ @ @ @ shape option , some thought should be given when numbering combined and uncombined shapes , to get the order you want . <p> A Combined shape is always closed . Any open shapes or paths used as a parent or child will automatically be closed before they are combined . <h> Attribute Modifiers <p> FillDefault : Color 255,255,255,255 <p> Method used to fill a closed shape . This will be a keyword defining the type of fill , followed by any required and optional parameters for the type . <p> Fill Types : <p> Color : Fills the shape with a single required Color . The alpha value of the color code can be used to control the opacity of the **29;6937;TOOLONG 0,0,100,100 Fill Color 255,0,0,255 <p> LinearGradient : Fills the shape with a linear color gradient . This consists of an angle in degrees , followed by a pipe character and two or more sets of color ; percentage defining the gradient " stops " . Example : See Defining Gradients for details and examples . <p> RadialGradient : Fills the shape with a radial color gradient . This @ @ @ @ @ @ @ @ @ @ by a pipe character and two or more sets of color ; percentage defining the gradient " stops " . Example : See Defining Gradients for details and examples . <p> StrokeDefault : Color 0,0,0,255 <p> Method used to draw the stroke on a shape . This will be a keyword defining the type , followed by any required and optional parameters for the type . <p> Stroke Types : <p> Color : Draws the stroke with a single required Color . The alpha value of the color code can be used to control the opacity of the **30;6968;TOOLONG 0,0,100,100 StrokeWidth 4 Stroke Color 255,0,0,255 <p> LinearGradient : Draws the stroke with a linear color gradient . This consists of an angle in degrees , followed by a pipe character and two or more sets of color ; percentage defining the gradient " stops " . Example : See Defining Gradients for details and examples . <p> RadialGradient : Draws the stroke with a radial color gradient . This consists of a definition of the gradient coordinates , followed by a pipe character and two or more sets of color @ @ @ @ @ @ @ @ @ @ : See Defining Gradients for details and examples . <p> StrokeWidthDefault : 1 <p> Size in pixels of the drawing stroke on the shape . <p> Example:Shape=Rectangle 2,2,100,50 StrokeWidth 4 <p> Notes on StrokeWidth : This is not a " border around " the shape . It is the shape 's " drawing stroke " . One half of the stroke will be " inside " the shape , and one half will be " outside " the shape . With an odd-numbered StrokeWidth , which ca n't be divided evenly by two , the very most inside and very most outside pixels will actually be 1/2 pixels in size , with Direct2D " aliasing " the edge of the two pixels , to create " half pixels " and keep the stroke the correct size . <p> If you have a meter at the left or top of the skin , and define a shape with an X or Y of 0 , that is where the shape will be drawn . However , since any StrokeWidth added to the shape will have one half of it outside the @ @ @ @ @ @ @ @ @ @ or the shape right or down to accommodate this , or part of the stroke will be outside the skin and truncated . <p> StrokeStartCapDefault : Flat <p> Defines the shape of a cap used at the start of the drawing stroke on an open shape . This modifier is ignored on closed shapes . <p> Cap Types : <p> Flat : This really no end cap , the same as leaving the modifier off entirely . <p> Defines a repeating dash or dot pattern for the shape 's drawing stroke . <p> This is done with a single or repeating sets of comma-separated pairs of DashSize , GapSize . These are not numbers of pixels , but are a multiplication factor based on the StrokeWidth . So 2 , 1.5 would be a dash twice as long as the StrokeWidth , followed by a gap one and one-half times as long as the StrokeWidth , and this would be repeated for the entire stroke . This can be extended , i.e 2,1,3,1.5,4,2 to create a repeating custom dashed stroke of various sizes and gaps . <p> Notes on StrokeDashes @ @ @ @ @ @ @ @ @ @ the StrokeDashCap option above . If you specify a dash size of 0 , and a StrokeDashCap of Round you will get dots , Triangle you will get diamonds , and so on . So for instance 0,2 with a StrokeDaskCap of Round will create NO " dash " , just the two rounded end caps next to each other followed by a gap , which will create a dotted line . <p> StrokeLineJoinDefault : Miter , 10.0 <p> Defines the type of join used on angled connections of drawing stroke segments in a shape or path . An optional MiterLimit can be used to specify how sharp Miter joins are allowed to be ( default is 10.0 ) . <p> Join Types : <p> Miter : Mitered corners . The corner will be mitered up to the point of MiterLimit , then squared off . <p> Bevel : Beveled or squared corners . <p> Round : Rounded corners . <p> MiterOrBevel : Miter is used unless the default or defined value of MiterLimit would be exceeded , in which case Bevel is used . <p> Miter or MeterOrBevel can @ @ @ @ @ @ @ @ @ @ value for MiterLimit . Think of MiterLimit as controlling the amount of " pointiness " when a very sharp angle join is mitered . MiterLimit is a positive number greater than or equal to 1.0 that describes the limit as a ratio of the miter length to half the stroke 's thickness . <p> Scales the shape in the X and / or Y axis , using multiplication factors . Reducing the scale would be done with a scaling factor less than 1 . The scaling is done either from the center of the shape ( default ) , or optional X , Y anchor points in pixels relative to the top left of the shape . <p> Notes on Scale : The size of any StrokeWidth , the drawing stroke , is not effected by scaling the shape . If you specify a StrokeWidth of 4 , it will remain 4 pixels in size no matter how you scale the shape . <p> A shape may be " flipped " or " mirrored " using Scale , by simply scaling it -1.0 on the axis you wish to flip @ @ @ @ @ @ @ @ @ @ 1.0 , -1.0 , and Both would be -1.0 , -1.0 . <p> SkewDefault : 0.0 , 0.0 , AnchorX , AnchorY <p> Skews the shape in the X and / or Y axis , some number of positive or negative degrees of angle . The skew is done either from the center of the shape ( default ) , or optional X , Y anchor points in pixels relative to the top left of the shape . <p> Offsets ( moves ) the shape in the X and / or Y axis some number of positive or negative pixels . <p> Example:Shape=Rectangle 0,0,100,100 Offset 10,0 <p> TransformOrderDefault : Rotate , Scale , Skew , Offset <p> Allows you to change the default order in which the various Transform modifiers are applied . This can be important when anchor points are used in transforms , as for instance you may want to Scale before you Rotate . Any missing Transform modifier names will be placed to the back of the queue in the default order . <p> Example:Shape=Rectangle 0,0,100,100 TransformOrder Scale , Rotate In this example the resulting order would @ @ @ @ @ @ @ @ @ @ Modifier <p> Extend <p> A special modifier that will allow you to move Attribute and / or Transform modifiers from the ShapeN option to one or more named options in the meter . The intent of this is two-fold . First , to allow different shape to share modifiers without having to specify them repeatedly in each shape option . Second , to provide a way to shorten the overall length of the shape option line , by breaking out modifiers as desired to separate named options . <p> Notes on Extend : The named options can be any names you like , however as with any other option in a . ini file , they must be unique to the Section . <p> This functionality can not " cascade " . You ca n't have a named Extend option use an Extend modifier . <p> The modifiers in the named option are in effect " inserted " in the ShapeN option line where the Extend keyword is located . In the case of any duplication of a modifier this inadvertently causes , the rule is " last wins " @ @ @ @ @ @ @ @ @ @ that end up being defined for a single ShapeN option , the last one that is defined after all Extend named options are " inserted " will be performed . <h> Defining Gradients <p> Gradients must be defined in a separate named option , which you then reference in Fill or Stroke modifiers on the shape . There are two kinds of gradients possible , LinearGradient and RadialGradient . <p> This takes the form of the Angle for the gradient in degrees , a pipe character , then a series of Color codes , a ; semi-colon , and a Percentage from 0.0 to 1.0 to define the position of the color in the gradient . Each series of Color ; Percentage are separated by a pipe character . <p> That will define a gradient at 180 degrees . It will start with a color of 255,0,0,255 ( red ) at percentage 0.0 ( the start ) , will transition to a color of 0,255,0,255 ( green ) at percentage 0.5 ( 50 percent ) , and to 0,0,255,255 ( blue ) at percentage 1.0 ( 100 percent ) . @ @ @ @ @ @ @ @ @ @ , with 0 or 360 starting directly to the right and rotating clockwise . This results in the following gradient directions on the Shape or Stroke : <p> 0 ( 360 ) : Right to Left <p> 90 : Bottom to Top <p> 180 : Left to Right <p> 270 : Top to Bottom <p> Note : Any defined color with a percentage outside the 0.0 to 1.0 range will not directly be displayed , but will still affect the interpolation of the gradient . <p> RadialGradientParameters : ( See below ) <p> This takes the form of the required CenterX , CenterY and any optional coordinate parameters , a pipe character , then a series of Color codes , a ; semi-colon , and a Percentage from 0.0 to 1.0 to define the position of the color in the gradient . Each series of Color ; Percentage are separated by a pipe character . <p> Note : Any defined color with a percentage outside the 0.0 to 1.0 range will not directly be displayed , but will still affect the interpolation of the gradient . <p> Note on Gradients @ @ @ @ @ @ @ @ @ @ used by adding a " 1 " to the end of LinearGradient or RadialGradient These LinearGradient1 and RadialGradient1 forms use all the same setting values , but interpolate the gradient using an alternative method of handling gamma correction . In some cases you may find this makes for a smoother or brighter gradient transition . <h> Mouse Detection on Shapes <p> The behavior of Mouse Actions , for actions like LeftMouseUpAction , MouseOverAction , MouseScrollDownAction and the others is a bit different on a Shape meter than other meters . <p> In a Shape meter , the mouse is detected on any solid part of the drawing created by any and all shapes in the meter . It is not detected on the actual meter container , no matter what value SolidColor is set to , or what other meters may be behind or in front of the Shape meter . <p> In order to have the mouse detected in the non-solid parts of your shape(s) , you will need to create a background Shape as the first shape in the meter . It can simply be a rectangle ( @ @ @ @ @ @ @ @ @ @ size you need , with a Fill Color 0,0,0,1 and a StrokeWidth 0 . Again , simply setting SolidColor on the meter itself will not work . For Shape meters , mouse detection has been entirely moved from the " meter " to the " shape " . <p> The mouse will be detected on any solid part of the shapes even if the shapes extend outside the boundaries of the meter container . This will be common with this meter type and is why we have changed the " target " of the mouse detection from the meter to the shapes . <p> As always , there can only be one of each kind of mouse action in a Section . This means that you ca n't for instance have two ShapeN shapes in the meter , and have a distinct LeftMouseUpAction on each . In order to have distinct mouse actions of the same type on individual shapes , you will need to create the shapes in different Shape meters . <h> Device Independent Pixels <p> The values for pixels that are used in the Shape meter are @ @ @ @ @ @ @ @ @ @ You may use 10.25 pixels or even 0.754 pixels when defining a shape . This is important for precision . However , this is only for the values used in shapes . The values used for meters , the W and H and X and Y of a Rainmeter meter , are still as of this writing in full integer pixels . <h> Examples <p> While the code here is for a simple skin that demonstrates various ways to manipulate the Rectangle shape type , the . rmskin in the Download button is a much more robust suite of skins demonstrating many of the aspects of the Shape meter . 
@@6350955 <h> More <h> AudioLevel plugin <p> Plugin=AudioLevel monitors and analyzes streams of audio sound to or from an audio endpoint . <p> AudioLevel will monitor , filter and analyze the amplitude ( volume level ) of sound input or output on the default or defined device and channels . The value returned will be a number from 0.0 to 1.0 , which will be treated as a percentage for use in meters . <p> This can be used to create a volume level VU Meter for defined channels , or optionally can filter the audio stream into distinct frequency bands to create a Spectrum Analyzer . <p> The plugin monitors the amplitude of the post-mixer signal at a Windows audio endpoint. ( i.e. sound card speaker output , USB audio interface , headphone port , microphone input ) It does this by creating a WASAPI capture client in loopback mode . The capture client streams audio data to the plugin where it can be filtered and measured . The resulting volume level is returned by the plugin for use in Rainmeter measures and meters . <p> Note : Creating meters @ @ @ @ @ @ @ @ @ @ skin be set with a fairly low Update rate in the Rainmeter section of the skin . While the plugin is quite resource friendly and efficient , some care should be taken when deciding how much analysis should be done on the signal , and it is recommended that this plugin be used in a skin dedicated to it , and not as a part of a larger skin where the low update rate may cause higher CPU usage . <h> Usage <p> AudioLevel operates with a " parent / child " approach . A single " parent " AudioLevel measure is used to obtain and analyze the audio stream , and then as many " child " measures as desired request data from the parent to get individual values to display in meters . Example : <p> ; This parent measure processes the default audio output . <p> MeasureAudioRaw @qwx22557 <p> Plugin=AudioLevel <p> ; This child measure gets the current RMS value of the left channel ( 0.0 to 1.0 ) . <p> MeasureAudioRMSL @qwx22557 <p> Plugin=AudioLevel <p> Parent=MeasureAudioRaw <p> Channel=L <p> Type=RMS <p> ; This child measure gets @ @ @ @ @ @ @ @ @ @ to 1.0 ) . <p> MeasureAudioRMSR @qwx22557 <p> Plugin=AudioLevel <p> Parent=MeasureAudioRaw <p> Channel=R <p> Type=RMS <p> Note : Only the Type , Channel , FFTIdx and BandIdx child measure options can be changed dynamically with ! SetVariable or ! SetOption . Parent measure options may not be changed dynamically . <h> Options <h> Parent measure options <p> Specifies whether you want to measure the input or output levels for the given device . <p> Output ( default ) <p> Input <p> IDDefault : None <p> Specifies the audio device to measure . <p> If not set , it will use the default device for the specified Port . If you specify Port=Output and no I 'd , the plugin will connect to the default audio output device defined in Windows . <p> To specify a device other than the default , you will need to find the Windows device I 'd . See the DeviceList child measure option for more info . <p> Device I 'd 's will be in the form : LONG ... <p> Note : The default audio device in Windows can be changed by using " Manage Audio Devices @ @ @ @ @ @ @ @ @ @ <p> RMS is a way of calculating the average of values over a period of time , using the mathematical algorithm Root Mean Square . The signal value ( amplitude ) is squared , averaged over a period of time , then the square root of the result is calculated . The result is a value , that when squared , is related ( proportional ) to the effective power of the signal . <p> This is the most meaningful way of measuring audio volume levels in a skin . <p> The following parent options are used in combination with child measures having the Type=Peak option set . <p> PeakAttackDefault : 50 <p> Specifies the time in milliseconds over which to interpolate as the signal level increases . For example , how quickly a needle jumps up for a higher peak . <p> PeakDecayDefault : 2500 <p> Specifies the time in milliseconds over which to interpolate as the signal level decreases . For example , how quickly a needle subsides to a lower peak . <p> PeakGainDefault : 1.0 <p> A multiplication factor that will be applied to the Peak @ @ @ @ @ @ @ @ @ @ signal from the time domain to the frequency domain , with FTTSize determining how many points you get back in the frequency domain . This is done by analyzing the audio stream into a linear-based number of points using the mathematical algorithm Fast Fourier Transform . <p> This frequency information can then optionally be extrapolated into logarithm-based Bands to distinctly measure by frequency in the ranges that are the most useful for spectrum display , based on the way humans detect changes in sound . <p> In order to use Bands , both FFTSize and Bands must be set on the parent measure . <p> The following parent options are used in combination with child measures having the Type=FFTand FFTIdx or Type=Band and BandIdx options set . <p> FFTSizeDefault : 0 <p> A number value for the frequency resolution of the output data . <p> This will be an even integer greater than or equal to 0 , usually a power of 2 . Typical values are 256 , 512 , or 1024 , with the higher the number the greater the frequency resolution . <p> Note : It should @ @ @ @ @ @ @ @ @ @ more CPU resources and time will be needed to analyze the audio stream . A very high number here can both impact CPU usage and potentially cause some " lag " between the sound generation and the measurement by the plugin . <p> FFTOverlapDefault : 0 <p> Optionally , the FFT can be windowed to overlap successive sections . A Hann function is used to shape the data before the FFT is applied . Typical values are half the FFTSize . Increasing this value will lower the latency between the audio and the measure 's response , at the cost of extra CPU . <p> FFTAttackDefault : 300 <p> Specifies the time in milliseconds over which to interpolate as the signal level increases . For example , how quickly a needle jumps up for a higher level . <p> FFTDecayDefault : 300 <p> Specifies the time in milliseconds over which to interpolate as the signal level decreases . For example , how quickly a needle subsides to a lower level . <p> BandsDefault : 0 <p> An integer , specifying the number of frequency bands to generate . <p> The @ @ @ @ @ @ @ @ @ @ frequency bands , similar to a typical spectrum analyzer . This option specifies the number of bands to create . <p> FreqMinDefault : 20 <p> A number in Hz , specifying the minimum frequency band calculation . <p> FreqMaxDefault : 20000 <p> A number in Hz , specifying the maximum frequency band calculation . <p> SensitivityDefault : 35.0 <p> A number specifying in what dB range the measure will return FFT and Band data . Increasing this value will cause the measure to respond to quieter sounds , decreasing it will only trigger the measure on louder sounds . <h> Child measure options <p> ParentRequired <p> Defines the parent AudioLevel plugin measure to read values from . <p> Example : Parent=SomeMeasureName <p> ChannelDefault : Sum <p> This specifies which audio channel level to read from the parent . Channels can be identified by name or number , e.g. Channel=0 is the same as Channel=L or Channel=FL . <p> L or FL or 0 <p> R or FR or 1 <p> C or 2 <p> LFE or Sub or 3 <p> BL or 4 <p> BR or 5 <p> SL or @ @ @ @ @ @ @ @ @ @ TypeRequired <p> Specifies the type of data to retrieve from the parent measure . <p> RMS : The current RMS level ( 0.0 to 1.0 ) corresponding to the specified Channel . <p> Peak : The current Peak level ( 0.0 to 1.0 ) corresponding to the specified Channel . <p> FFT : The current FFT level ( 0.0 to 1.0 ) corresponding to the specified FFTIdx option . <p> FFTFreq : The frequency in Hz corresponding to the specified FFTIdx option . <p> Band : The current FFT level ( 0.0 to 1.0 ) value corresponding to the specified BandIdx option . <p> BandFreq : The frequency in Hz corresponding to the specified BandIdx option . <p> Format : A string describing the audio format of the device connected to with the parent I 'd option . <p> DeviceStatus : Status ( 0 or 1 ) of the device connected to with the parent I 'd option . <p> DeviceName : A string with the name of the device connected to with the parent I 'd option . <p> DeviceID : A string with the Windows I 'd of the device connected to @ @ @ @ @ @ @ @ @ @ string with a list of all available device I 'd 's for the specified Port This can be used to identify a desired device I 'd for use in the parent I 'd option . <p> Example : Type=RMS <p> FFTIdxDefault : 0 <p> Specifies which FFT point you want to extract from the parent . FFTSize must be enabled on the parent measure to use this option . <p> Valid values range from 0 to ( FFTSize/2 ) . <p> BandIdxDefault : 0 <p> Specifies which frequency band number , starting with 0 , you want to extract from the parent . FFTSize and Bands must be enabled on the parent measure to use this option . 
@@6350956 <h> Options <p> Name of the measure whose percentual value controls the amount of rotation . The measure must be able to return percentual values . <p> Note : If MeasureName is not specified , then the value is in effect always 100% , which can be used for instance to draw a circle or other curved solid . <p> StartAngle <p> The starting angle in radians for the line . This defines the starting point on the circle that will be treated as zero percent . The zero angle is to the right of the center . <p> RotationAngle <p> The size of the rotation angle in radians for the line . This defines the distance in radians from StartAngle that the meter will travel around the circle when the measure value is 100% . Use a negative value for counter-clockwise rotation . <p> LineStart <p> Defines the distance in pixels from the center of rotation at which the line starts . <p> LineLength <p> Length in pixels of the line . The length is always measured from the center of rotation , regardless of the LineStart option . @ @ @ @ @ @ @ @ @ @ meter with LineColor from StartAngle to the current MeasureName percentage value . LineWidth is ignored . <p> ControlAngleDefault : 1 <p> If ControlAngle is 1 ( default ) , then the percentage value of the measure that is bound to the meter controls the angle of the line ( or the fill rotation if Solid=1 ) starting at StartAngle for RotationAngle radians . <p> If ControlAngle is set to 0 , then the measure does not control the angle of the line , which will be static at the value in StartAngle . RotationAngle is ignored . <p> ControlStart , StartShiftDefault : 0 <p> If ControlStart is set to 1 , then the percentage value of the measure that is bound to the meter controls the starting position of the line . This is defined by StartShift , and will range from LineStart to ( LineStart + StartShift ) pixels from the center of rotation . <p> ControlLength , LengthShiftDefault : 0 <p> If ControlLength is set to 1 , then the percentage value of the measure that is bound to the meter controls the length of the line . @ @ @ @ @ @ @ @ @ @ LineLength to ( LineLength + LengthShift ) pixels from the center of rotation . <p> ValueRemainder <p> Use a remainder instead of the actual measured value . <p> This is primarily used to draw an analog clock . When used with the value of a Time measure in MeasureName the meter will internally use the % modulo mathematical operator , and calculate the meter based on the remainder when the number of seconds in the Time measure is divided by the following values : <p> Note : If the width and height are not defined , the center point is at the X and Y position of the meter and any part of the meter that intersects with the edges of the skin window will be cut off . If width and height are specified , the center point will be in the middle of the bounding box and the skin window will include the meter . 
@@6350957 <p> Notes : The values returned are not the mouse position on the screen , but are pixels or a percentage relative to the meter or skin with the mouse action . They are also not general purpose variables , and when used outside the context of a mouse action on a meter or the skin , will not contain a value . <p> $MouseX$ <p> X position of the mouse cursor as a number of pixels relative to the meter or skin with the mouse action . <p> $MouseY$ <p> Y position of the mouse cursor as a number of pixels relative to the meter or skin with the mouse action . <p> $MouseX : %$ <p> X position of the mouse cursor as a percentage relative to the meter or skin with the mouse action . <p> $MouseY : %$ <p> Y position of the mouse cursor as a percentage relative to the meter or skin with the mouse action . 
@@6350958 <h> About <p> Rainmeter is the best known and most popular desktop customization program for Windows . Enhance your Windows computer at home or work with skins ; handy , compact applets that float freely on your desktop . Rainmeter skins provide you with useful information at a glance . It 's easy to keep an eye on your system resources , like memory and battery power , or your online data streams , including email , RSS feeds , and weather forecasts . <p> Many skins are even functional : they can record your notes and to-do lists , launch your favorite applications , control your media player - all in a clean , unobtrusive interface that you can rearrange and customize to your liking . <p> There are thousands and thousands of skins available , crafted by a large and ever-growing community of Rainmeter users . <p> Rainmeter is not just an application , it is a robust toolkit . Create and modify your own skins in a simple language that 's easy to learn , with the help of our extensive documentation , getting started guide and @ @ @ @ @ @ @ @ @ @ of powerful built-in modules that do all the heavy lifting , and create interactive meters to display that information however you decide . In this way , Rainmeter brings productive innovation together with creative artistry like no other platform of its kind . <p> Rainmeter is a community . People in our forums are always happy to help you get started or answer questions . Over the last few years , a thriving community has built up around Rainmeter , as average users freely contribute their own original skins , their generous knowledge and support , and their inspirational ideas to a project whose scope and capabilities are constantly expanding . <p> Rainmeter is designed for YOUR system . Rainmeter uses very little CPU and RAM resources , has a tiny space footprint , and will run perfectly well on any hardware using Windows 7 through Windows 10 . <p> Rainmeter is free and open source . Rainmeter is open source software distributed free of charge under the terms of the GNU GPL v2 license . If you want to get involved , check the Rainmeter GitHub repository . 
@@6350960 <p> The starting angle in radians for the image . This defines the starting point on the circle that will be treated as zero percent . The zero angle is to the right of the center . <p> RotationAngleDefault : ( 2 * pi ) <p> The size of the rotation angle in radians for the image . This defines the distance in radians from StartAngle that the meter will travel around the circle when the measure value is 100% . Use a negative value for counter-clockwise rotation . <p> ValueRemainderDefault : 0 <p> Use a remainder instead of the actual measured value . <p> This is primarily used to draw an analog clock . When used with the value of a Time measure in MeasureName the meter will internally use the % modulo mathematical operator , and calculate the meter based on the remainder when the number of seconds in the Time measure is divided by the following values : <h> Remarks <p> The center of rotation will be located at the center of the height and width specified for the meter . If height and width are not @ @ @ @ @ @ @ @ @ @ the X and Y coordinates provided for the meter . It is also important to remember that if the height and width are not specified , any portion of the meter that lies outside of the skin window will be cut off . 
@@6350961 <h> More <h> Rainmeter section <p> The Rainmeter section of Rainmeter.ini defines global options . <h> Options <p> SkinPath <p> Path to the skins folder . <p> ConfigEditorDefault : Notepad <p> Defines the path to the text editor used to edit Rainmeter 's configuration files when " Edit Skin " or " Edit Settings " is chosen from the context menu or Manage . Relative paths can be used here , which may be useful for portable installs . <p> Note : This should always be a plain text editing application , and should never be any " word processing " program like Word or Wordpad . More fully-featured alternatives to the default Windows Notepad are discussed at Notepad Alternatives . <p> TrayIconDefault : 1 <p> Set to 0 to remove the notification area ( tray ) icon . <p> Note : If all skins are unloaded , the notification area icon will appear , regardless of this setting , in order to avoid a situation where you ca n't interact with Rainmeter at all . <p> TrayExecuteM , TrayExecuteR , TrayExecuteDM , TrayExecuteDR <p> Action to be executed when @ @ @ @ @ @ @ @ @ @ the notification area icon . Left-clicking the icon will always load the Manage dialog . <p> With multiple monitors , use DesktopWorkArea@N ( where N is the number of the monitor ) to set the work area of a specifc monitor . DesktopWorkArea and DesktopWorkArea@0 both represent the primary monitor . <p> Note : Moving the taskbar will reset the workarea to Windows ' default , as will changing screen resolution . <p> **26;7000;TOOLONG : 0 <p> If set to 1 , DesktopWorkArea will be define margins relative to the edges of the screen . <p> Example : With DesktopWorkAreaType=0 and **29;7028;TOOLONG , maximized windows will use an area of 600x500 pixels , which is located 10 pixels from the left and 20 pixels from the top of the screen . With DesktopWorkAreaType=1 and **27;7059;TOOLONG , the area for maximized windows will be 10 pixels from the left , 20 pixels from the top , 30 pixels from the right , and 40 pixels from the bottom of the screen . 
@@6350963 <h> More <h> About <p> The About interface in Rainmeter is much more than the usual version number and link to a website . It is a powerful tool for finding and fixing problems with Rainmeter and skins . It consists of four main tabs : <p> Using the ! About bang as an action in a skin or from the command line as a parameter to Rainmeter.exe . <p> Right-Click any running skin on the desktop and select " Rainmeter / About " . <h> The Log tab <p> When opened , the list displays the last 20 messages logged by Rainmeter . While left open , the log continues to add new messages to the top of the list . <p> The log has three columns of information : <p> Type : The category of message : <p> Error - An error impacting the functionality of Rainmeter or a skin.Warning - An warning that some functionality is outside of normal parameters.Notice - Normal activity logged to provide information about the success of some action.Debug - Messages generated when Rainmeter or a skin is in Debug mode . <p> @ @ @ @ @ @ @ @ @ @ : The text of the log message . Select a line and hit CTRL-C to copy the message to the Windows clipboard . <p> The types of messages that are displayed by the log can be controlled with the checkboxes at the bottom of the list . This can be used to filter the display to only certain kinds of new messages . <h> The Skins tab <p> Extremely powerful tool displaying real-time information about currently active skins . The tab displays a list of currently active skin config names in the panel on the left . Selecting one from the list will update important information about the skin in real time , in the panel on the right . <p> Name - The name of the measure.Range - The current MinValue and MaxValue values for the measure , expressed as a range of values.Value - The current string value of the measure . Select a line and hit CTRL-C to copy the value to the Windows clipboard. 
@@6350967 <h> Bitmap meter <h> Options <p> Note : The size of the meter is automatically determined by the height of the bitmap image and the number of image frames displayed . Care must be taken to ensure the skin is big enough to hold the meter , using SkinWidth / SkinHeight or a background image meter . DynamicWindowSize will not be effective with this meter . <p> This can be used to display a single frame from the bitmap image , based on the percentage value . <p> Example : If the image contains 5 frames , the first frame is displayed when the percentual measure value is between 0% and 19% , the second frame is shown from 20% to 39% , and so on . <p> The measure returns any integer numeric value equal to or less than 999,999,999 . <p> This can be used to display the entire numeric value using multiple frames from the bitmap image . <p> In this case , you will use BitmapExtend with a value of 1 , and set BitmapDigits with a value equal to the greatest number of digits the @ @ @ @ @ @ @ @ @ @ BitmapImage that consists of the numbers from 0 to 9 , and a BitmapFrames of 10 . This will then display the entire number using the appropriate numeric ( 0-9 ) frames from the bitmap image . <p> BitmapImage <p> Path to the image . The frames in the images can be laid out either horizontally or vertically ( the orientation is determined automatically from the height or the width of the image ) . The size of a single frame is also determined automatically , so no extra space should surround the frames . <p> If BitmapExtend is not set to 1 , the measure being used must return values from 0.0 to 1.0 or must have both MaxValue and MinValue set . <p> BitmapFramesDefault : 1 <p> Number of frames in the image . <p> BitmapTransitionFrames <p> The number of transition frames per each actual frame . The transition frames are frames which are displayed when the measure value changes . The same number of transition frames must be used after each regular frame . The TransitionUpdate option in the Rainmeter section determines the rate at which the @ @ @ @ @ @ @ @ @ @ of the transition is therefore TransitionUpdate multiplied by BitmapTransitionFrames . <p> Note:BitmapFrames always defines the total number of frames in the bitmap , including the transition frames . <p> Example : If the bitmap has 10 values and each transition consists of 4 additional frames , then BitmapFrames should be set to 50 and BitmapTransitionFrames to 4 . <p> BitmapZeroFrameDefault : 0 <p> If set to 1 , a measured percentual value of zero is included in the calculation of the first frame . Since there are 100 percentage " points " from 0-99% , and 101 from 0-100% , BitmapZeroFrame should be used when measuring from 0-100% , or the meter will overrun the bitmap when the value is at 100% . <p> BitmapExtendDefault : 0 <p> If set to 1 the bitmap is extended to display the whole value . <p> Example : If you define a bitmap that defines frames from 0 to 9 you can use this to display the measured value as the bitmap numbers . <p> BitmapDigitsDefault : 0 <p> Number of digits that are drawn ( for BitmapExtend=1 ) . The first frame @ @ @ @ @ @ @ @ @ @ digits as this defines . 
@@6350968 <h> More <h> IfConditions <p> IfCondition options are used in any measure , of any type , to evaluate a mathematical formula . The formula will be evaluated as " true " or " false " , and will execute IfTrueAction or IfFalseActionaction options , which will contain one or more Bangs or commands . <p> Note : IfCondition can only be used to evaluate a numeric mathematical formula . No string values may be used in the condition test . See IfMatchActions to test and take action on string values . <p> The formula uses the same syntax as described on the Formulas page but does not need to be surrounded in parenthesis . Like the Calc measure , measure names do not need brackets and are always dynamic when referenced inside the IfCondition . <p> There can be multiple sets of condition and action options in the measure , by using IfCondition2 / IfTrueAction2 / IfFalseAction2 and so on . <p> IfConditions are similar in functionality to IfActions , with a few important and powerful differences . <p> The formula is not based on the value of the @ @ @ @ @ @ @ @ @ @ measures , variables or section variables . <p> There can be an IfTrueAction , IfFalseAction or both for each IfCondition , so you can take appropriate actions not only when the result is " true " , but also when it is " false " . <p> The syntax allows for a single IfCondition to embed logical AND &amp;&amp; and OR comparisons in the formula . Unlike IfEqualValue for instance , which allows for a single comparison , you could use IfCondition= ( MeasureName = 5 ) ( MeasureName = 10 ) , to check if the value of MeasureName is " 5 " OR " 10 " . You can also use the full range of logical operators , so rather than being limited to " equal " , " above " or " below " , you can use any of **37;7124;TOOLONG . <h> Options <p> IfCondition , IfCondition2 , ... , IfConditionN <p> A mathematical formula , which when evaluated will result in " true " or " false " . <p> Note : The comparison on either side of logical AND &amp;&amp; and OR operators must @ @ @ @ @ @ @ @ @ @ IfTrueAction2 , ... , IfTrueActionN <p> Optional action to be executed when the formula expressed in IfCondition results in " true " . The action is executed only once when the condition becomes " true " , so it needs to become " false " and again " true " to execute again . <p> IfFalseAction , IfFalseAction2 , ... , IfFalseActionN <p> Optional action to be executed when the formula expressed in IfCondition results in " false " . The action is executed only once when the condition becomes " false " , so it needs to become " true " and again " false " to execute again . <p> IfConditionModeDefault : 0 <p> If set to 1 , the evaluation of the condition will execute the appropriate actions in IfTrueAction or IfFalseAction on every update of the measure . <p> Note : Care should be taken not to create an infinite loop in the actions . In particular , ! Refresh , ! Update and ! UpdateMeasure #CURRENTSECTION# should generally be avoided when IfConditionMode=1 . <h> Example @qwx22547 @qwx22570 @qwx22553 @qwx22549 <p> MeasureCPU <p> Measure=CPU <p> IfCondition=MeasureCPU @ @ @ @ @ @ @ @ @ @ usage is less than 10 percent " 
@@6350970 <h> Options <p> Format of the measure value . This can be a combination of text and the following codes : <p> %4 : Days . <p> %3 : Hours . <p> %2 : Minutes . <p> %1 : Seconds . <p> The following modify the codes : <p> ! i ! : Putting this after the format code shows the numbers with no leading zeros . <p> ! 02i ! : Putting this after the format code shows the numbers with leading zeros . The number following the 0 , as in ! 02i ! above , defines the total length you want for the value , padded with zeros as needed to achieve the length . <p> AddDaysToHoursDefault : 1 <p> If set to 1 and if %4 ( days ) is not used in the Format option , %3 ( hours ) is incremented by days * 24 . Set to 0 to disable this behaviour . <p> SecondsValue <p> This will override the default behavior of the measure . Instead of measuring the time since the last restart of the system , this option will define @ @ @ @ @ @ @ @ @ @ be used to format that number of seconds to days , hours , minutes and/or seconds as desired . <p> An example might be : <p> MesureFormatSeconds <p> Measure=UpTime <p> **28;7163;TOOLONG <p> Format= " %4 ! i ! d %3 ! i ! h %2 ! i ! m %1 ! i ! s " @qwx22552 <h> Example @qwx22547 @qwx22570 @qwx22553 @qwx22549 <p> MeasureUptime <p> Measure=Uptime <p> Format= " %4 ! i ! days , %3 ! i ! hours , %2 ! i ! minutes %1 ! i ! seconds " <p> MeterUptime @qwx22560 <p> **25;7193;TOOLONG <p> FontSize=12 @qwx22554 @qwx22565 @qwx22561 @qwx22550 <p> Text= " Uptime : %1 " <p> Note for Windows 8 or later : <p> Starting with Windows 8 , the standard " shut down " functionality now does a " hybrid shut down " , in order to make the system start much faster when you start it up again . What this does is " hibernate " the system / kernel part of Windows , and shut down the user part . When Windows restarts , the underlying boot up of the system much @ @ @ @ @ @ @ @ @ @ normally . <p> Windows ( and thus Uptime ) does not see this as a full shutdown of your system . So the system uptime value will not be reset to zero . If you want more control over this , you can create two shortcuts , and use the one you want depending on whether you wish a " full " shut down , or the normal " hybrid " one . 
@@6350972 <p> The starting angle in radians for the image . This defines the starting point on the circle that will be treated as zero percent . The zero angle is to the right of the center . <p> RotationAngleDefault : ( 2 * pi ) <p> The size of the rotation angle in radians for the image . This defines the distance in radians from StartAngle that the meter will travel around the circle when the measure value is 100% . Use a negative value for counter-clockwise rotation . <p> ValueRemainderDefault : 0 <p> Use a remainder instead of the actual measured value . <p> This is primarily used to draw an analog clock . When used with the value of a Time measure in MeasureName the meter will internally use the % modulo mathematical operator , and calculate the meter based on the remainder when the number of seconds in the Time measure is divided by the following values : <h> Remarks <p> The center of rotation will be located at the center of the height and width specified for the meter . If height and width are not @ @ @ @ @ @ @ @ @ @ the X and Y coordinates provided for the meter . It is also important to remember that if the height and width are not specified , any portion of the meter that lies outside of the skin window will be cut off . 
@@6350981 <h> General Options <p> UpdateDefault : 1000 <p> Defines the update interval of the skin in milliseconds . On each update , measures and meters are updated , and the skin is redrawn . <p> The lowest possible effective value for Update is " 16 " . Some care should be taken to only use very low update rates ( less than 100 ) when really needed , and to balance a low Update with DefaultUpdateDivider , or UpdateDivider on individual measures and meters , in order to keep the CPU usage by Rainmeter as low as possible . <p> Using -1 will update the skin only once on load ( or on refresh ) . The skin can then be manually updated using the ! Update bang . <p> Note : While Update=1000 will update the skin " once a second " , Update is not related to the system clock , and if a computer is busy or a complicated skin takes longer than the interval to complete a full update of the skin , updates can be unreliable in relation to elapsed time . Do not use @ @ @ @ @ @ @ @ @ @ functions . <p> **27;7220;TOOLONG : 1 <p> Default number of updates at which skin measure and meter values are updated . The Update option is multiplied by the specified value to determine how often measures and meters are updated . <p> Example : If Update=1000 and DefaultUpdateDivider=30 , then by default all measures and meters are updated every 30 seconds . <p> If DefaultUpdateDivider=-1 or any negative number , then by default all measures and meter are only updated once when the skin is loaded or refreshed . <p> Note : This option is designed to set a default UpdateDivider for all measures and meters in the skin . It can be overridden by setting UpdateDivider on individual measures or meters . This option should be used when a low Update is desired to support animations or other skin elements requiring rapid update , while avoiding having to manually set an UpdateDivider on a great many other measures and meters that do not need to be updated as quickly . <p> AccurateTextDefault : 0 <p> If set to 1 , String meters are measured and rendered using improved padding and @ @ @ @ @ @ @ @ @ @ DynamicWindowSizeDefault : 0 <p> If set to 1 , the window size is adjusted on each update to fit the meters . <p> SkinWidth , SkinHeightDefault : None <p> Either or both may be set . This will set and constrain the skin to the fixed dimensions defined , either the width , the height , or both . Any meter or part of a meter positioned outside the defined boundaries will be truncated . DynamicWindowSize will be ignored for the defined dimension(s) , and meters that would normally display even " outside " the skin will be truncated by the fixed skin dimension(s) . <p> DragMarginsDefault : 0,0,0,0 <p> Uses 4 values separated by commas to define the area from where the window can be dragged . The values define a margin of non-draggable area . It 's also possible to use negative numbers in which case the margin is calculated from the opposite side . E.g. DragMargins=0 , -100,0,0 . <p> Note : The action(s) defined will take place at the redraw the skin . <p> OnCloseAction <p> Action to execute when the skin is unloaded or when Rainmeter is closed . <p> OnFocusAction <p> Action to execute when the skin receives focus in Windows ( focus is given when the mouse is clicked on the skin ) . <p> Note : The action(s) defined will take place at redraw the skin . <p> OnUnfocusAction <p> Action to execute when the skin loses focus in Windows ( focus is lost when the mouse is clicked outside the skin ) . <p> Note : The action(s) defined will take place at redraw the skin . <p> OnWakeAction <p> Action to execute when Windows returns from the sleep or hibernate states . <p> Note : The action(s) defined will take place at the redraw the skin . <p> TransitionUpdateDefault : 100 <p> Defines the update time in milliseconds for meter transitions . While a transition is active the meter will update at this rate . Currently , only the Bitmap meter supports meter transitions . <p> ToolTipHiddenDefault : 0 <p> If set to 1 , all tooltips in the skin will be hidden . More information on tooltips . <p> Group <p> Defines a group or series of groups that the skin belongs to . For more information please see the Groups page . <p> If BackgroundMode=3 , defines margins of the Background image that are not scaled . The parameters are left , top , right , bottom . <p> @ @ @ @ @ @ @ @ @ @ the bottom of the image are not scaled . <p> SolidColor , SolidColor2Default : 0,0,0,0 <p> This option will specify the background color when BackgroundMode=2 . If SolidColor2 is also specified , the background is a gradient composed of SolidColor and SolidColor2 . <p> Hint:SolidColor=0,0,0,1 can be used to make transparent areas of the background clickable . <p> GradientAngle <p> Angle of the gradient in degrees ( for SolidColor and SolidColor2 ) when BackgroundMode=2 . <p> BevelTypeDefault : 0 <p> If enabled , draws a bevel around the edges of the entire skin when BackgroundMode=2 . Valid values are : <p> 0 : No bevel <p> 1 : Raised <p> 2 : Sunken <h> Context options <p> ContextTitle , ContextTitle2 , ContextTitle3 ... <p> If not blank , adds an item to the skin 's context menu under " Custom skin actions " . Up to 25 ContextTitleN options are allowed , with up to 30 characters per option . Additional characters are truncated with an ellipsis ( ... ) . If more than 3 ContextTitleN options are given , " Custom skin actions " becomes a submenu . If @ @ @ @ @ @ @ @ @ @ options are ignored . In addition , if more than 3 options are given , and the value of ContextTitleN includes only dashes ( - ) , the item is displayed as a separator . <p> Note : Variables in ContextTitleN are always dynamic . Variable values are read at the time the context menu is opened . This means that the ! SetOption bang can be used to change these values . <p> ContextAction , ContextAction2 , ContextAction3 ... <p> Action triggered by clicking the corresponding ContextTitleN item . ContextActionN is required for ContextTitleN to be valid , unless the item is a separator . <p> Note : Variables in ContextTitleN are always dynamic . Variable values are read at the time the context menu is opened . This means that the ! SetOption bang can be used to change these values . <h> Aero Blur options <p> BlurDefault : 0 <p> Set to 1 to enable Aero Blur on the Windows Windows 7 operating system . If no BlurRegions are specified , the entire skin background is blurred . <p> Note : The function will not work on @ @ @ @ @ @ @ @ @ @ , ... , BlurRegionN <p> Defines areas and shapes of the one or more regions of the skin to be blurred . The format of the option is : BlurRegion=Type , TopX , TopY , BottomX , BottomY , Radius . <p> Valid values for Type are : <p> 0 : Region is disabled <p> 1 : Rectangular region <p> 2 : Rectangular region with rounded corners ( requires Radius ) <p> 3 : Elliptical region <p> The parameters following Type define the size and shape of the region . They are , in order : <p> TopX : Top left horizontal point in the skin <p> TopY : Top left vertical point in the skin <p> BottomX : Bottom right horizontal point in the skin <p> BottomY : Bottom right vertical point in the skin <p> Radius : Radius of the corners of rounded rectangles ( required for Type=2 ) <p> Note : Aero Blur options can be dynamically controlled with several bangs . <h> Example @qwx22547 @qwx22570 <p> Blur=1 <p> **25;7286;TOOLONG <p> ; BlurRegion creates a rectangle starting at 10 pixels from the left , 10 pixels down @ @ @ @ @ @ @ @ @ @ the right , 50 pixels from the top . <p> **26;7313;TOOLONG <p> **31;7341;TOOLONG <p> Background @qwx22559 <p> W=200 <p> H=180 <p> SolidColor=0,0,0,50 <p> LeftMouseUpAction= ! AddBlur " 1,0,0,200,80 " <h> Deprecated options <p> Author <p> The author of the skin . <p> Note : This option is deprecated . Author should be defined in the Metadata section of the skin . <p> AppVersion <p> Defines the minimum version of Rainmeter required to use the skin . The formula to calculate the value is : major * 1000000 + minor1 * 1000 + minor2 . <p> Note : This option is deprecated . Use the version capabilities in Skin Packager . <p> LocalFont , LocalFont2 , ... <p> Loads the specified TTF font files for use with FontFace in String meters. 
@@6350986 <h> More <h> Basic Tutorials <p> This is the first series of tutorials for Rainmeter . It is meant to follow Getting Started and assumes that you have gone through the steps described there . If you have not been through these steps , you should start here . <p> This series starts by creating a simple first skin , then covers the anatomy of Rainmeter skins , focusing on each of the basic skin properties in turn : <p> Meters A skin 's display elements . How to create objects that can be seen and clicked . <p> Measures A skin 's informational elements . How to pull data from your computer or the Internet . <p> Bangs A skin 's interactive elements . How to send commands to Rainmeter or other applications . <p> Updates A skin 's internal clock . How to control the timing and synchronicity of skin events . <p> Variables A skin 's data elements . How to manipulate independent strings that are used to store many kinds of information . <p> This series is in development . Check back soon for the first installment. 
@@6350995 <h> More <h> Variables <p> A variable is a string of text that is associated with a short , memorable name . Variable names can be used in most options throughout the skin , in place of the associated text . <p> Variables are helpful when a certain string is repeated many times throughout the skin . By referencing the variable name instead of the full string , the amount of " redundant " code is reduced , as is the overall size of the skin . Variables also simplify the task of changing values . A variable string can be modified in a single location , and without recreating the entire option in which it is used . <h> Variables section <p> Each skin may have a special section called Variables . Each option in Variables defines a variable name . Unlike most other option names in Rainmeter , variable names are not limited to a specific list . They can have any valid name , as long as they do not conflict with Rainmeter 's built-in variables . @qwx22548 <p> Foo=This is a string ! <p> Bar=So is @ @ @ @ @ @ @ @ @ @ in other options by surrounding the name with pound signs ( # ) , as in #Foo# . When the skin is loaded , Rainmeter replaces the variable reference with the corresponding string . Variables are inserted " literally , " which means they can be mixed with other variables or regular text . <p> MeterFoo @qwx22560 <p> Text=The value of my " Foo " variable is : #Foo# <p> FontColor=#Red# , #Green# , #Blue# , #Alpha# <p> MeterBar @qwx22560 <p> Text=The value of my " Bar " variable is : #Bar# <p> FontColor=#Red# , #Green# , #Blue# , #Alpha# <p> Variables can also be used to define other variables : @qwx22548 <p> Foo=rainmeter <p> Bar=http : //www. #Foo#.net/ <h> Changing Variables <p> The ! WriteKeyValue bang can be used to rewrite values in Variables . The skin must be refreshed to apply changes made by ! WriteKeyValue . <p> ! WriteKeyValue " Variables " " Foo " " This is a new string ! " <p> Alternatively , the ! SetVariable bang can be used to change variable values dynamically . ! SetVariable can be used to create a @ @ @ @ @ @ @ @ @ @ . <p> ! SetVariable " Foo " " This is a new string ! " <h> Dynamic Variables <p> A variable whose value changes while the skin is active is called a dynamic variable . Dynamic variables allow a skin to store , retrieve and display ever-changing information without refreshing the skin . <p> Dynamic variables can only be used in a measure or meter with the option DynamicVariables=1 . Any MeasureName used in a bang as a Section Variable is automatically dynamic , and DynamicVariables=1 is not required . <p> In addition , there are some plugins which do not support dynamic variables at this time . The following are sections where dynamic variables can not be used : <p> When a meter or measure has dynamic variables enabled , Rainmeter uses marginally more processor power . This difference is negligible for most skins , but it may be noticeable in very large , complex skins with many dynamic variables , or on image meters with very large images . For this reason , it is recommended to use dynamic variables only when necessary , and use alternatives such @ @ @ @ @ @ @ @ @ @ <p> Rainmeter automatically creates a number of helpful variables for each skin . These variables do not need to be defined in the Variables section . Some built-in variables are dynamic . <h> Section Variables <p> Some measure and meter properties can also be referenced as dynamic variables by using the section name in brackets ( ) , as in SectionName . These section variables can also be modified by certain parameters , as in SectionName:P1 , P2 . <h> Event Variables <p> Some action options allow the use of special variables that are related to the specific event that triggers the action . These variables are referenced by surrounding the name with dollar signs ( $ ) , as in $Foo$ . Event variables are evaluated at the time the action is triggered , used to execute the action , and then immediately discarded . For example , when using a command with the InputText plugin , the event variable $UserInput$ refers to the string that was entered into a text input box by the user . <h> Environment Variables <p> Windows environment variables can be referenced as variables @ @ @ @ @ @ @ @ @ @ signs ( % ) , such as %APPDATA% or %SystemDrive% . To see a complete list of environment variables available on your system , open a Windows command prompt ( cmd.exe ) and type set . <h> Escaping Variables <p> Rainmeter always attempts to replace #Name# or Name with a value , if " Name " refers to an existing variable , meter or measure . To prevent a variable reference from being replaced , place asterisks ( * ) inside the containers , as in : <p> #*Foo*# <p> *Bar* <p> These are replaced with the literal strings#Foo# and Bar respectively . The ! SetOption bang can use these escape characters to protect variable references when setting options on dynamic meters or measures . 
@@6351005 <h> Contents <h> More <h> Dynamic Cheat Sheet <p> When you want to use the current value of a Variable , Built-in Variable , Section Variable , or Measure name anywhere in a Measure or Meter or Bang in Rainmeter , It is important to know when that value is automatically treated as " dynamic " ( always reflects the current value ) or needs to be resolved dynamically when used , with the DynamicVariables=1 option . <p> The following is a " cheat sheet " for the rules that apply in different situations . <p> Dynamic " Variables " : <p> If you want to reference the current value of a Variable in a meter or measure , and that variable is dynamically set or changed with ! SetVariable , you must use DynamicVariables on the meter or measure using it . <p> If you want to reference the value of a measure in a meter or measure , then you must enclose the measure name in and have DyanmicVariables=1 on the meter or measure using it . This uses the string value of the measure as a Section @ @ @ @ @ @ @ @ @ @ binding " a measure to a meter with the MeasureName option , you do n't need either or DynamicVariables . <p> If you are " binding " a parent WebParser measure to a child measure with the URL option , you need the , but not DynamicVariables . <p> If you reference measures other than the parent in the URL option of a WebParser measure , a special &amp;MeasureName Section Variable with and DynamicVariables must be used . <p> The Formula option in a Calc measure and the IfCondition measure option ( Rainmeter 3.1 or later ) do not require either or DynamicVariables when referencing measures . Section Variables , Variables and Built-in Variables follow the normal rules in these options . <p> Dynamic " Bangs " : <p> Measures in a ( formula ) , Section Variables , Variables , or Built-in Variables used in any Bang do not require DynamicVariables . Things in Bangs are just always resolved dynamically . <p> If the ! SetOption bang is used with Any Measure in a ( formula ) , Section Variable , Variable , or Built-in Variable , the meter @ @ @ @ @ @ @ @ @ @ for one update . If the ! SetOption is done on every update , then DynamicVariables is not needed on that target meter or measure . 
@@6351025 <h> More <h> @Resources folder <p> The @Resources folder in the root folder of a skin is the recommended location to store and access images , fonts , sounds , include files , addons or other additional files used by the skin . The @Resources folder is ignored when scanning for skins , so using it to store images and other resources will improve the initial load time of Rainmeter . <p> The @Resources folder must be created at the root config level of the skin ( e.g. Skinsillustro@Resources ) and the #@#built-in variable can be used as a shortcut to specify it . <p> Note : The #@#built-in variable should always be used to specify the location of the @Resources folder . Since @Resources must be at the root config level of the skin , a relative path like **37;7527;TOOLONG will assume that @Resources is in the same folder as the skin . ini file , and that can be wrong . Using **30;7566;TOOLONG is much more reliable . <h> Fonts <p> TrueType ( . ttf ) or OpenType ( . otf ) fonts in the @ResourcesFonts folder are @ @ @ @ @ @ @ @ @ @ in string meters . <p> For example , to include the font SomeFont.ttf , it should be placed in : **40;7598;TOOLONG , and used with FontFace=SomeFontFamily . <h> Cursors <p> Custom cursors ( . ani or . cur ) in the @ResourcesCursors folder are automatically loaded and can be used with MouseActionCursorName. 
@@6351034 <h> Contents <h> More <h> Advanced . rmskin Options <p> There are times that you want to release a new version of a skin or " suite " of skins . This might be to : <p> Completely replace the skin or suite of skins . <p> Simply create a new . rmskin with all files . <p> The installing user may or may not have installed the previous version of your . rmskin . It is just a " new " install if not , and a " replace " if so . <p> Change only some files in a suite of skins while leaving others alone . <p> Create a new . rmskin , with the same root config folder , but only the files you want to replace in the folder tree . You must use Merge skins . ( See below for instructions ) <p> The installing user must have installed the previous version of your . rmskin . <p> Add new skins and / or other files to an existing installation . <p> Create a new . rmskin , with the same root config folder @ @ @ @ @ @ @ @ @ @ the folder tree . You must use Merge skins . ( See below for instructions ) <p> The installing user must have installed the previous version of your . rmskin . <p> With any of these three approaches you use , ( or a combination of the second and third ) one thing that needs to be kept in mind is that a user may have set the variables you put in to have the skin work correctly for that user . This might be variables for cosmetic colors , fonts or sizes , or variables for gmail logins , RSS feed URL 's , weather location codes or other functional settings for the user . <p> Variables are key=value options in a Variables section in a . inc or . ini file . <p> In any case , unless you want to the user to have to " start over " with configuring your skin or suite with their personal information and cosmetic choices , You should consider using one or both of the following advanced options for your new . rmskin . <h> Using Advanced Options <p> Create @ @ @ @ @ @ @ @ @ @ have selected the root config folder for the skin or suite of skin , click Next . Set any options on the Options tab before continuing . <p> Select the Advanced tab on this dialog : <h> Advanced option - Variables files : <p> Specify the file location starting with the root config folder . Multiple files can be added by separating them with the pipe symbol . <p> Any existing variables that are in both the current file(s) and the . rmskin are left unchanged . <p> Any existing lines that are in both the current file(s) and the . rmskin and are not variables are replaced . <p> Any lines of any type that are in the . rmskin and not in the current file(s) are added . <p> Any lines of any type that are in the current file(s) and not in the . rmskin are removed . <h> Advanced option - Merge skins : <p> Result : <p> The root config folder is not removed or backed up . <p> Any new files in the . rmskin are added . <p> Any changed files in the @ @ @ @ @ @ @ @ @ @ are in the root config folder but not in the . rmskin are left unchanged . <p> Merge skins can not be used to remove any files . <h> Both Variables files and Merge skins : <p> One or more . ini ( or . inc ) files are listed in Variables files , and Merge skins is checked . <p> Result : <p> Both actions are done . <p> Can be used used to change a skin . ini file while leaving existing variable values set by the user unchanged . <p> Can be used to add lines to a . inc file , while leaving existing variable values set by the user unchanged . <h> Neither advanced option : <p> Result : <p> The root config folder is backed up and removed . <p> All files are completely replaced . <h> What wo n't work : <p> The installing user ca n't have added any new files that are not in the . rmskin , unless Merge skins was used . <p> The installing user ca n't have added any new lines of any type in any file @ @ @ @ @ @ @ @ @ @ Final note : It would n't do any harm , and might even make you a friend , if you just add files that contains variables to the " Variables files " option in " Advanced " even if it IS N'T a new version of your skin . Just always do it ... Why ? If an end-user installs your suite , does all the setting up of all the variables for his personal information and all that , then screws up one or more skins trying to customize something , they will thank you when you tell them they can just " re-install " your . rsmkin again and get back to square one without losing all the variables they set . 
@@6351036 <h> Contents <h> More <h> @Include Guide <p> Tip by Brian and Smurfier <p> While @include is a simple tool it is powerful as well . It can be used to make skin code shorter by stripping out longer code into shorter files . Repetitive code used in multiple skins can be managed with one file . It can even be used to load different code when you open a skin . <h> Using @include <p> There are several rules to using @include . The first is the @include call . <p> Section <p> @include=SomeFile.inc <p> Note : The @include call must be made within a section . Authors have generally used the Rainmeter or Variables sections when appropriate . <p> The second being the file that you 're including . @qwx22548 <p> SomeVariable=AValue <p> The file being used with @include must be formatted in the INI format , meaning that it has all the appropriate sections followed by Key=Value pairs . This includes using the Variables section . <p> If you want to include more than one file , they need to be listed with unique identifiers . <p> @ @ @ @ @ @ @ @ @ @ extension it is highly recommended . This prevents the file from appearing in Rainmeters list as a skin . <p> We can also use a variable to define an @include . The only caveat is that variable can not be dynamic . @qwx22548 <p> Theme=SomeTheme <p> **29;7640;TOOLONG <h> Understanding @include <p> When Rainmeter reaches an @include line , it reads the given file , placing all unique options into any existing sections , then places the remainder of the included file after the section in which it was called . <p> SomeFile.inc <p> Background @qwx22559 <p> H=30 <p> W=40 <p> String <p> Text=This Wo n't Work <p> YourSkin.ini @qwx22548 <p> @include=SomeFile.inc <p> Foreground @qwx22559 <p> H=20 <p> W=30 <p> X=5r <p> String @qwx22560 <p> Text=This line will remain . <p> This would place the Background section before the Foreground section . Since the String section already exists in the main file , then any existing options wo n't be changed . In this case , the Text line will still read " This line will remain . " <h> Practical Use : Skin Settings <p> The most common use of @ @ @ @ @ @ @ @ @ @ by a skin in a separate file . <p> Settings.inc @qwx22548 <p> **29;7671;TOOLONG <p> HideBackground=0 <p> Skin.ini <p> @include=Settings.inc <p> Background @qwx22559 <p> **27;7702;TOOLONG <p> Hidden=#HideBackground# <h> Practical Use : Pages and Stylesheets <p> Two of the other major uses of @include are easily switching between different pages of a skin and creating Stylesheets for your skins . Both of these uses take advantage of the fact that we can use Variables to define an @include . <p> Creating different pages is as easy as putting each page in it 's own file and naming them in a sequence . Then in the Parent skin we need to define a variable that we will use to change the page . @qwx22548 <p> Page=1 <p> **31;7731;TOOLONG <p> In the parent skin we can change the page using the ! WriteKeyValue bang . Just remember that after changing the Page variable we need to refresh the skin so that the new page will be loaded . <p> ! WriteKeyValue Variables Page 2 ! Refresh <p> The method is exactly the same for using Stylesheets . Instead of containing meters a style sheet @ @ @ @ @ @ @ @ @ @ skin . 
@@6351040 <h> Contents <h> More <h> Substituted Values in a Calc <p> Calc measures are a useful tool that let you perform any number of operations on the values you get from measures . However , sometimes you need to get the substituted value from that measure . The Calc measure has two ways to get the values of the measure . The first way is to use that measure 's name directly . This use the number value of the measure in your Calc formula . The second way is to use section variables . Here , the other measure 's name is encased in square brackets and the line DynamicVariables=1 is added to the Calc measure . The this will use the string value of the measure , and if the measure has a substitution string , it will perform the substitutions before using it . Here is a quick example demonstrating this effect : <p> InitialValue @qwx22556 <p> Formula=12345 <p> Substitute= " 2 " : " 22 " , " 4 " : " 7 " <p> GetDirectValue @qwx22556 <p> Formula=InitialValue <p> GetSubstitutedValue @qwx22556 <p> Formula=InitialValue @qwx22552 <p> @ @ @ @ @ @ @ @ @ @ " 12345 " , whereas the value of GetSubstitutedValue would have the " 2 " replaced with " 22 " and the " 4 " replaced with " 7 " . As a result , its value would instead be " 122375 " . <p> There are many uses for this , particularly when reading the direct value of the measure is impossible . Let 's say you have a log file somewhere that returns whether or not some system is running . You already know that the only possible values are " Running " and " Offline " and you want to show a green light for " Running " and and red light for " Offline " . The simplest method to check for a specific value is to use the " IfEqualValue " and " IfEqualAction " . Unfortunately , this will not work because they require a number to compare and your results are strings . Instead , we can add a substitute string that will convert these strings into numbers , then use a Calc measure to do the comparison . Here is some example @ @ @ @ @ @ @ @ @ @ @qwx22564 <p> URL=http : **34;7764;TOOLONG <p> LONG ... @qwx22567 <p> Substitute= " Running " : " 1 " , " Offline " : " 0 " <p> MeasureCheckStatus @qwx22556 <p> Formula=MeasureGetStatus <p> IfEqualValue=1 <p> IfEqualAction= ! ShowMeter MeterGreenLight ! HideMeter MeterRedLight <p> IfBelowValue=1 <p> IfBelowAction= ! ShowMeter MeterRedLight ! HideMeter MeterGreenLight @qwx22552 <p> MeterGreenLight @qwx22559 <p> ImageName=GreenLight.png <p> Hidden=1 <p> MeterRedLight @qwx22559 <p> ImageName=RedLight.png <p> Hidden=1 <p> The Calc measure would receive the value as either " 1 " or " 0 " instead of the strings " Running " and " Offline " , which let 's it perform the comparisons to activate the proper lights . 
@@6351041 <h> Contents <h> More <h> Update Guide <h> Using Update , UpdateDivider and UpdateRate <p> The Update option in the Rainmeter section controls how often in milliseconds a skin should update the measures and meters . The UpdateDivider option on a meter or a measure allows you multiply the update interval for that specific meter or measure . By applying UpdateDivider correctly , it is possible to make your skins more efficient . <p> For example , UpdateDivider=5 on a measure would cause that meter to update only on every 5th update cycle . When Update=1000 , the measure will update every ( 1000 x 5 ) milliseconds , which is equal to every 5 seconds . <p> By default , Update=1000 and UpdateDivider=1 . The general formula for calculating the update interval of a measure or a meter in seconds is as follows : ( Update x UpdateDivider / 1000 ) . <p> In the example below , the skin 's update interval is set to 1000 milliseconds ( 1 second ) . Since MeasureCPU does not have UpdateDivider set , it will default to 1 . As a @ @ @ @ @ @ @ @ @ @ In contrast , MeasureUser has UpdateDivider=3600 , as the user name is unlikely to change that often . As a result , MeasureUser will update once every 3600 seconds ( i.e. once every hour ) . <p> MeasureTotalC has UpdateDivider=-1 set . When UpdateDivider is a negative number , the measure will update only once ( when the skin is loaded or refreshed ) . Because MeasureTotalC measures the total space of the drive ( which will not change ) , the it is safe to measure it only once . @qwx22547 @qwx22570 <p> MeasureCPU <p> Measure=CPU <p> MeasureUser @qwx22557 <p> Plugin=SysInfo <p> SysInfoType=USERNAME <p> UpdateDivider=3600 <p> MeasureTotalC <p> Measure=FreeDiskSpace <p> Drive=C : <p> Total=1 <p> UpdateDivider=-1 <h> What about UpdateRate ? <p> UpdateDivider is an option available to all meters and measures . UpdateRate , on the other hand , is only available with the WebParser and Ping plugins . For the purpose of this example , let us use a plugin measure using WebParser . <p> UpdateRate essentially states how often the WebParser should connect to the internet to download the specified URL . The general formula for @ @ @ @ @ @ @ @ @ @ x UpdateDivider x UpdateRate / 1000 ) . <p> In the example below , MeasureMailCount has no UpdateDivider . As a result , UpdateDivider will default to 1 . <p> Since MeasureMailCount has UpdateRate=1200 set , we can calculate that WebParser will download the page every 1200 seconds ( or every 20 minutes ) . <p> MeasureMailCount @qwx22557 @qwx22564 <p> LONG ... <p> LONG ... @qwx22567 <p> UpdateRate=1200 <p> Generally , you want to use UpdateRate in place of UpdateDivider on a WebParser measure , not in addition to it . In some instances , using both can cause a " lag " between when the plugin is finished getting and parsing the data from the site , and when it is actually used and displayed in the skin . <p> Since WebParser connects to the internet , it is important to have a high enough " download interval " . If you try to download a page too often ( e.g. every second ) , you may end up causing a high load on the target site , which ultimately may cause the site to block all access from @ @ @ @ @ @ @ @ @ @ a default value of 600 , or 10 minutes when Update=1000 and UpdateDivider is not set . 
@@6351043 <h> Contents <h> More <h> Rotate an Image Around its Center <p> Tip by Smurfier and JSMorley <p> There may be a time when you want to rotate an image around its own center , as demonstrated below : <p> Probably the easiest approach is to use a Rotator meter . What you will need to do is set the OffsetX and OffsetY to the middle of the image based on the width and height of the original . Then you will need to find the total width and height of the container needed to rotate the image , which will be the length of a line from the upper left to the bottom right corners . These will be used to set the W and H of the Rotator meter . <p> Then you can use any measure that returns a value between 0% and 100% ( with any number of " steps " ) as the MeasureName of the meter , and the image will rotate around its own center based on the current value of that measure . @qwx22547 <p> Update=50 @qwx22553 @qwx22548 <p> ImageW=128 <p> ImageH=64 @ @ @ @ @ @ @ @ @ @ + 1 <p> MaxValue=360 <p> MeterRotate <p> Meter=Rotator <p> **25;7800;TOOLONG <p> ImageName=Rectangle.png <p> OffsetX= ( #ImageW# / 2 ) <p> OffsetY= ( #ImageH# / 2 ) <p> W= ( SQRT ( #ImageW# ** 2 + #ImageH# ** 2 ) ) <p> H= ( SQRT ( #ImageW# ** 2 + #ImageH# ** 2 ) ) <p> The only complicated bit are those formulas to obtain the W and H settings for the meter . The formula ( SQRT ( ImageWidth ** 2 + ImageHeight ** 2 ) ) Reference will measure the length from the top left to bottom right of the image , which is the size the meter will need to be to rotate the image in place without cutting off corners . <p> Note : If the visible part of the image being used is " round " , then you will not need the formula to set the width and height of the meter . In fact , doing so will make the overall size of the meter container unnecessarily large . Simply use the full size of the image when specifying the W and H options in the meter . 
@@6351053 <h> More <h> ActionTimer plugin <p> Plugin=ActionTimer <p> Executes a series of Rainmeter actions independent of the normal skin Update cycle . This can allow the series of actions to be executed faster ( or slower ) than the rate defined in Update in Rainmeter and can be executed as fast as 1 millisecond apart . <h> Overview <p> To understand the purpose of ActionTimer , it helps to have some understanding of how Rainmeter runs a skin . On each skin Update , the value set in the Rainmeter section of the skin , Rainmeter does the following : <p> Update all measures <p> Execute measure actions <p> Update all meters <p> Redraw the skin <p> Update has a lower limit of 16 , or once every 16 milliseconds . This means that any series of separate actions can only execute every 16 milliseconds . In addition , setting a very low Update rate in Rainmeter can cause the entire skin to use a lot of CPU resources , when you may only need it to be " fast " for a specific purpose , perhaps some animation or @ @ @ @ @ @ @ @ @ @ take in the context of the Update cycle are " blocking " , in the sense that Rainmeter must complete them before it is able to continue with other normal skin processing . <p> Rainmeter will run both of the actions in the same Update cycle , before it updates the meters and redraws the skin , and so in effect they both visibly happen " at once " . The meter wo n't visibly move to " 5 " and then " 10 " , but will just jump straight to " 10 " . The only current solution is to have the two actions take place in two Update cycles , and thus the fastest the series can ever execute is every 16 milliseconds . <p> Now 16 milliseconds seems pretty fast , and it is . However , if you have some animation with 100 " frames " or want to do some " transition " of a meter ; fading the opacity , shifting the color or sliding the position , it is in fact visibly quite slow . <p> Do n't forget as well , @ @ @ @ @ @ @ @ @ @ will have to do everything in the skin . Update all measures , take all actions , update all meters , and redraw the skin . In reality , even a moderately complicated skin is n't really going to update every 16 milliseconds in any case , it will at best " try to " . <p> What ActionTimer does is execute the list of actions defined in ActionListN , one after the other , in a separate thread outside the normal Update cycle , as fast as it possibly can . This is REALLY fast . The Wait N values that you put in between each action in the list is what stops them from appearing to just happen all at once , and allows you to completely control the speed of the series of actions . Wait can be any number , from 1 ( one millisecond ) to whatever you need . <p> Since the actions in ActionListN are executed in a separate thread from the main Rainmeter process , the skin will carry on updating normally , while the ActionTimer plugin will control the actions in @ @ @ @ @ @ @ @ @ @ very CPU efficient , it is not " free " . The actions are executed by the plugin in a separate thread from the rest of the Rainmeter skin , allowing the skin to continue to process normally while the plugin actions are executing , with the plugin communicating with the skin via window " messages " to the Rainmeter message queue . This allows the plugin to instruct the skin to " do this now " , much as a MouseOverAction is recognized and acted upon immediately . <p> Some care must be taken however , not to overwhelm the message queue . Things done with ActionTimer in general should be short targeted actions , like a meter transition or short animation . Ensure that there is at least some " wait " time between actions , so Rainmeter has time to handle other messages in the message queue . In addition , keep in mind that ! Redraw actions can be relatively CPU expensive , particularly if a lot of image resizing is involved . <p> ActionTimer does not support , and should not be used , to @ @ @ @ @ @ @ @ @ @ long duration combined with a very rapid update . If the Rainmeter message queue becomes overwhelmed , the skin can get laggy and unresponsive to mouse actions you might take . <h> Options <p> Each ActionListN will execute one or more Actions separated by the pipe character . In addition there are two list commands , Repeat and Wait , that can be used in the ActionList . In a sense , this option is a " script " of what you want the plugin to do when the ActionList is triggered . In its most simple expression , it is <p> ActionList1=Do this Wait this long Do that <p> ActionList components <p> Action name The plugin will execute what is defined in the named Action option . The action name can be anything . This is simply the name of the Action option , and should never be actual bangs or commands itself . The actual skin bangs or commands to be executed are defined in the Action option . <p> RepeatAction name , Wait time number , Repeat count number This will repeat the named Action option Repeat @ @ @ @ @ @ @ @ @ @ between each . Note that Wait time is not applied after the last execution of Action name , only between each . <p> Waitnumber of milliseconds This is used to create a pause or wait in milliseconds between each named Action or other component in the ActionList . There should always be a Wait of at least 1 millisecond between each ActionList component . <p> The pipe character is used to separate each of the ActionList components . <p> Since the actions are being done independent of the Update cycle of the skin , you must explicitly do any ! UpdateMeter and ! Redraw commands needed to have the skin actually reflect any changes to meters made in the action . <p> If you are using ! SetVariable to change and use any dynamic #Variables# in the action , you will need to ! UpdateMeasure the plugin measure between each execution of the action option , to ensure the measure has the most current value for the #Variable# . <p> This can be simplified by setting and using a #Variable# that will take the appropriate update actions , and then @ @ @ @ @ @ @ @ @ @ option . @qwx22548 <p> U= ! UpdateMeasure MeasureChangeFont ! UpdateMeter * ! Redraw <p> MeasureChangeFont @qwx22557 <p> Plugin=ActionTimer <p> ActionList1=SetFontSmall Wait 1000 SetFontBig <p> SetFontSmall= ! SetOption SomeMeter FontSize " 10 " #U# <p> SetFontBig= ! SetOption SomeMeter FontSize " 15 " #U# <p> IgnoreWarningsDefault : 0 <p> Any ActionListN must completely finish all actions in the list before it can be executed again . Any command to execute the list while it is still performing actions will be ignored , and a warning message will be generated in the log . There may be occasions where this is in fact desired behavior , and the log error messages can be suppressed . <p> 0 - Warnings in the log are produced . ( default ) <p> 1 - Warnings in the log are suppressed . <h> Plugin Commands <p> The plugin will take no action unless triggered with one of these commands . <p> Execute ActionList number <p> Execute the correspondingly numbered ActionListN . <p> Example : <p> LeftMouseUpAction= ! CommandMeasure MeasureName " Execute 1 " <p> Stop ActionList number <p> Stop the correspondingly numbered ActionListN . <p> As @ @ @ @ @ @ @ @ @ @ in the list before it can be executed again . Any command to execute the list while it is still performing actions will be ignored , and a warning message will be generated in the log . <p> The Stop N command will immediately terminate and reset the corresponding running ActionListN , so it may be executed again . 
@@6351061 <h> More <h> Version History <p> This page includes a brief description of changes included in each publicly-released version of Rainmeter . For a complete , line-by-line history of Rainmeter 's source code changes since version 0.14 , see the project commit history on GitHub <h> Rainmeter 4.1 <h> July 7 , 2017 - Revision 2824 <p> Added Rainmeter : Drag Groups can now be created by selecting skins while holding CTRL-ALT , and dragging one skin , or nudging with the arrow keys will move all selected skins . See Multiple Skins for details . <p> Fixed Formulas : Corrected a missing BitwiseXOR formula operator . <h> July 1 , 2017 - Revision 2822 <p> Fixed Languages : Corrected an encoding problem with the Russian language . <h> June 29 , 2017 - Revision 2821 <p> Added Bangs : New ! EditSkin bang . Opens the current or a specified skin . ini file in the text editor defined in ConfigEditor in the Rainmeter settings , or associated with . ini files in Windows . The default will be Windows Notepad.exe . <p> Added Built-in variables : New #CONFIGEDITOR# @ @ @ @ @ @ @ @ @ @ defined in ConfigEditor in Rainmeter settings , or the text editor associated with . ini files in Windows . The default will be Windows Notepad.exe . <p> Changed Rainmeter : When dragging skins , temporarily enable the ' Show window contents while dragging ' system option if disabled in Windows , to allow skins to draw during dragging and use the snapping feature . <h> June 24 , 2017 - Revision 2815 <p> Changed NowPlaying : For Spotify , the artist and song text is obtained from the Windows titlebar of the Spotify application . Spotify used to prefix the text with " Spotify - " , but they do n't anymore . The change to NowPlaying for Spotify fixes that . For iTunes , the change allows the album art to be retrieved for streaming songs as well as of local only songs . <p> Changed Languages : Updated Dutch , Russian and Swedish translations . <p> Fixed Shape meter : Corrected a bug introduced in a previous beta that broke some features of the stroke style , like StrokeLineJoin . <h> June 7 , 2017 - Revision 2807 @ @ @ @ @ @ @ @ @ @ r2806 that caused transform modifiers on Path shapes to be invalid . <h> June 1 , 2017 - Revision 2806 <p> Added Bangs : Added new ! FadeDuration and ! FadeDurationGroup bangs to set the FadeDuration in milliseconds when activating/deactivating a skin , using the fade-in / fade-out effects on mouse over , or when the fade bangs are used . <p> Changed NowPlaying : Changed the measure values for Progress and SetPosition to use floating point numbers instead of integers for increased accuracy . <p> Fixed Shape meter : Corrected a possible crash or unexpected behavior when Combined shapes were defined before their component shapes in the meter . The order of the options in the meter are now of no consequence , as it is with all other meter and measure options . <h> April 21 , 2017 - Revision 2787 <p> Added Shape meter : Added Path1 alternative of the Path shape . It will use a different form of the SVG fill-rule when the shape is filled with a color or gradient . This determines what parts of a shape with intersecting segments are " inside @ @ @ @ @ @ @ @ @ @ for purposes of filling the shape with the defined color or gradient . See Path1 shape for details . <p> Added CoreTemp plugin : The author of both the CoreTemp application and Rainmeter plugin , Arthur Liberman , added CPU core-specific values to the data available in the plugin . See CoreTemp plugin for details . <p> Fixed Bangs : Fixed an issue when the config parameter of a bang contained a leading or trailing slash . <p> Fixed InputText plugin : Fixed a possible Rainmeter crash if an input box is open and the skin is deactivated . <p> Fixed Shape meter : Fixed a possible Rainmeter crash if the starting point of a Path shape was invalid . <p> Fixed Bitmap meter : Fixed an issue where BitmapExtend=1 would not increase the meters width and/or height , which would cause the meter to ignore DynamicWindowSize and draw outside its bounds and possibly truncate outside the skin window . <p> Fixed Bitmap meter : Fixed an issue where the Padding height values on the meter would be ignored in some situations . <p> Fixed InlineSetting : Corrected an issue @ @ @ @ @ @ @ @ @ @ empty string was received by a meter using InlineSetting . <p> Fixed Shape meter : Fixed an issue where certain gradients would not display correctly if there were multiple gradients in a shape meter . <h> Rainmeter 4.0 <h> January 1 , 2017 - Revision 2746 <p> 4.0 Release Version <h> December 19 , 2016 - Revision 2731 <p> Added New Skin dialog . This new dialog is opened with the Create new skin button in Manage , or by using the context menus on existing folders . This will allow you to add new root-level folders and skin file , or add folders or files to skins . See New Skin for details . <h> December 4 , 2016 - Revision 2722 <p> Changed InputText plugin : InputNumber option has been changed to support negative and fractional numbers . A single - may be the first character , and a single . character may be entered anywhere in the input . <h> November 27 , 2016 - Revision 2720 <p> Added Manage : Add a Create new skin button to the top of the skins list . This will @ @ @ @ @ @ @ @ @ @ template you can edit . The new skin will be selected in Manage and opened in your text editor . <p> Fixed Shape meter : Corrected an issue where using TransformationMatrix on a Shape meter would cause incorrect mouse detection . <p> Fixed Rainmeter : Corrected an issue parsing options that use the pipe character as a separator , if they also contained a formula that used the Logical OR operator . <h> November 6 , 2016 - Revision 2679 <p> Added Shape meter : Draws shapes using Vector graphics . Rectangle and Combine shapes , as well as all Attribute and Transform modifiers implemented in this first beta . See the documentation at : Shape Meter . <p> Changed String meter : Changed the number of degrees of angle in InlineSetting Gradients to allow fractional numbers . ( e.g. 45.5 ) . <p> Fixed About dialog : Corrected an issue where tabs were not being correctly displayed in the Log and Skins panels . <p> Fixed RunCommand plugin : Corrected a rare issue when the command is run by OnCloseAction , where Rainmeter would unexpectedly terminate and the command @ @ @ @ @ @ @ @ @ @ language . <h> September 12 , 2016 - Revision 2627 <p> Fixed Lua scripting : Corrected an issue in r2620 that could cause Lua to crash Rainmeter in rare cases . <h> September 4 , 2016 - Revision 2620 <p> Fixed Illustro skins : Changed the remote site used to get the user 's WAN IP address in the Network.ini skin . <p> Changed Lua scripting : Corrected an issue where anything defined in the Initialize() function of a Lua script was treated as " global " across all skins using Lua , which could cause " bleeding " of defined variables between skins , or between script measures in a single skin . Each Lua measure will now run in an entirely separate local context . <p> Changed Lua scripting : The above change to the context of each Lua measure in a skin has allowed for the use of the Lua dofile function in your scripts . Some changes were made to the standard Lua dofile functionality to support Unicode characters in a file path , and to improve error logging . <h> July 13 , 2016 - @ @ @ @ @ @ @ @ @ @ where the position of an inline Gradient could be incorrect when an inline Shadow was also used on the meter . <h> July 12 , 2016 - Revision 2617 <p> Added String meter : Added Shadow InlineSetting type to String meter Inline options . This will allow you to add a drop shadow to all or part of a string . <h> June 1 , 2016 - Revision 2613 <p> Fixed String meter : Corrected an issue where ClipString=1 was not working correctly if W ( width ) was defined without defining H ( height ) . <h> March 22 , 2016 - Revision 2607 <p> Fixed Corrected a rare issue where skins might be loaded with only partial opacity when Windows is first started . <p> Changed The Rainmeter notification area icon is forced to be visible any time there are no skins loaded in Rainmeter . This will temporarily override any setting for " Show notification area icon " in Manage . This change is to eliminate the possibility that a user could turn off the tray icon and then unload all skins , thus no longer having @ @ @ @ @ @ @ @ @ @ : Updates to Russian language . <h> March 18 , 2016 - Revision 2601 <p> Fixed Corrected an issue with the Insider Preview builds of Windows 10 that would not display the Rainmeter Notification Area / System Tray icon . <p> Fixed String case : Corrected an issue with non-English characters in the string case functionality of both StringCase and InlineSetting=Case in String meters . <h> March 17 , 2016 - Revision 2599 <p> Added String meter : Added Case InlineSetting type to String meter Inline options . This will allow you to set the string case to one of Lower , Upper , Proper , or Sentence for all or part of the displayed text . <p> Changed Language : Updates to Chinese Traditional language . <h> March 12 , 2016 - Revision 2593 <p> Added SysInfo : Added DOMAINWORKGROUP SysInfoType value to the SysInfo plugin . This will return either the " domain " or " workgroup " set for the system . <p> Added SysInfo : added a new ADAPTERTYPE SysInfoType option for the SysInfo plugin . This will return the adapter type ( Ethernet or Wireless @ @ @ @ @ @ @ @ @ @ be found at Change Announcements . <p> Changed InlineSetting : Changed the default value for InlinePattern(N) to . * ( the entire string ) when the option is left off or set to " " . This will allow you to set an InlineSetting on the entire string value without needing to define any matching InlinePattern . Details can be found at Change Announcements . <p> Fixed GradientColor : Corrected a bug that would not properly adjust a GradientColor InlineSetting when the width or height of the meter was changed but the string value was not . <h> Rainmeter 3.3 <h> July 5 , 2017 - Revision 2744 <p> 3.3.3 Release Version <p> Fixed Corrected a problem with the RunCommand plugin on 32bit Windows XP <h> May 16 , 2016 - Revision 2609 <p> 3.3.2 Release Version <p> Fixed Corrected an issue where Rainmeter could fail with an Error 127 on Windows Vista . <h> March 18 , 2016 - Revision 2602 <p> 3.3.1 Release Version <p> Fixed Corrected an issue with the Insider Preview builds of Windows 10 that would not display the Rainmeter Notification Area / System Tray @ @ @ @ @ @ @ @ @ @ <p> 3.3 Release Version <h> December 28 , 2015 - Revision 2494 <p> Release Candidate 2 <p> Fixed Localization : Fixed an issue with the Russian langauge . <h> December 27 , 2015 - Revision 2493 <p> Release Candidate 1 <p> Added ActionTimer : Added the ActionTimer plugin to the Rainmeter build . This plugin can be used to support animations and meter transitions . Details and examples can be found at ActionTimer Plugin and ActionTimer forum post . <p> Added RunCommand : Added the RunCommand plugin to the Rainmeter build . This plugin can be used to execute and obtain values from external commands and programs . Details and examples can be found at RunCommand Plugin and RunCommand forum post . <p> Changed Time measure : Added some additional Time measure Format Codes , made possible by the upgrade of the Rainmeter project to Visual Studio 2015 . This also corrects some issues with existing codes like %p . <p> Fixed WebParser : Corrected an issue where WebParser could not read a local file if it was locked open by some other process . <p> Changed Rainmeter Project : @ @ @ @ @ @ @ @ @ @ for development . <h> October 4 , 2015 - Revision 2468 <p> Changed Context options : Changed the maximum number of ContextTitleN / ContextActionN pairs from 15 to 25 . <p> Fixed Tooltips : Corrected an issue where a dynamic value for a ToolTipTitle would be one skin update behind . <p> Fixed Tooltips : Corrected an issue where removing a ToolTipTitle with ! SetOption would not work . <h> September 27 , 2015 - Revision 2464 <p> Changed SysInfo plugin : Added support for Windows 10 to SysInfoType=OSVERSION . <p> Fixed Quote plugin : Corrected an issue where some Unicode characters in a text file read by the plugin could be mistaken for an end-of-file control character and truncate the returned string . <h> August 15 , 2015 - Revision 2461 <p> Added Skins : Added new SkinWidth and SkinHeight option to the Rainmeter section of a skin . This will constrain the skin to the dimensions defined , either the width , the height , or both . Any meter or part of a meter positioned outside the defined boundaries will be truncated . DynamicWindowSize will be ignored @ @ @ @ @ @ @ @ @ @ display even " outside " the skin will be truncated by the " fixed " skin dimensions . <p> Fixed IfActions : Corrected an issue with IfMatch where doing a match on a measure that has returned no string value could crash Rainmeter . <p> Fixed Skin Installer : Corrected an issue with the comparison of plugin versions when multiple plugins were included in the . rmskin . <p> Fixed String meter : Corrected an issue with **27;7827;TOOLONG where the gradient did not properly react to relative positioning dynamically changing the meter position . <h> August 11 , 2015 - Revision 2457 <h> August 11 , 2015 - Revision 2455 <p> Fixed String meter : Additional corrections to the Inline Options settings . Fixed an issue when Unicode characters were embedded in the string . <p> Changed PCRE library : Updated the PCRE library to version 8.37 . Also added the UTF-16 version of the library files , and changed all Rainmeter functionality to use the UTF-16 libraries . <h> August 6 , 2015 - Revision 2438 <p> Changed Skin Installer : The Skin Installer application , used to install @ @ @ @ @ @ @ @ @ @ it will by default not replace a newer version of an included 3rd-party plugin with an older version . This is based on the " File version " information in the compiled . dll file(s) . <p> Fixed String meter : Corrected an issue with the Inline Options GradientColor setting , that was causing incorrect percentage placement of the gradient in some cases . <p> Fixed Image meter : Corrected an issue where removing a MaskImageName with ! SetOption was not possible . <h> July 31 , 2015 - Revision 2423 <p> Added String meter : Added new Inline Options features to the String meter . This will allow " inline " formatting of part or all of a string , and adds several new formatting options including a color gradient . <p> Fixed Plugin API : Corrected a bug , introduced in r2416 , which caused some threaded plugins to fail when sending a FinishAction to Rainmeter . <h> May 31 , 2015 - Revision 2416 <p> Fixed RegExpSubstitute : Corrected a bug , introduced in r2414 , where comparisons with an empty string could fail . <p> Fixed @ @ @ @ @ @ @ @ @ @ could crash or hang Rainmeter if Refresh All or Unload Skin was done while the plugin was executing commands to the main Rainmeter process . <h> May 24 , 2015 - Revision 2414 <p> Fixed RegExpSubstitute : Fixed a problem where a ( capture ) that returned an empty string would cause Rainmeter to hang or crash . Care should still be taken when using * ( zero or more ) quantifiers or ( ? ( ? = ( If/Then Lookaround ) constructs in RegExpSubstitute , as any ( capture ) returning an empty string will cause the Substitute to fail . <h> April 30 , 2015 - Revision 2412 <p> Fixed Net measures : Corrected a bug when using Interface with a number , introduced in r2410 . It is important that this new version be used in place of r2410 . <h> April 29 , 2015 - Revision 2410 <p> Changed Net measures : Changed the values accepted for the Interface option to accept new values of " Best " , which will automatically use the active network interface , or a string value of the name of @ @ @ @ @ @ @ @ @ @ Changed SysInfo plugin : Changed the values accepted for the SysInfoData option with network related SysInfoType options to accept new values of " Best " , which will automatically use the active network interface , or a string value of the name of the desired Network Interface Controller ( NIC ) . <p> Changed About / Log : Changed the Time column in the About / Log panel to use the current time in Hours , Minutes , Seconds and Milliseconds rather than elapsed time since Rainmeter was started . <h> April 6 , 2015 - Revision 2402 <p> Added Loop : Added new Loop measure . This will create a looping counter between two numbers . <p> Added NowPlaying : Added a value of Genre to the PlayerType option . This option value is currently supported with the AIMP , CAD , iTunes , WMP and WinAmp PlayerName values . <h> Rainmeter 3.2.1 <h> March 24 , 2015 - Revision 2386 <p> 3.2.1 Release Version <p> Fixed QuotePlugin : Fixed a bug with the random number generation that could potentially crash Rainmeter . <h> March 22 , 2015 - @ @ @ @ @ @ @ @ @ @ Changed the routines used to generate a random number to be more reliable . <h> March 15 , 2015 - Revision 2383 <p> Release Candidate 1 <p> Added WebParser : Added new OnDownloadErrorAction to WebParser measures to allow taking an action when a remote file defined by Download=1 fails to download or ca n't be saved locally . <p> Changed Rainmeter : Added the value 100 to both Manage and the skin context menus to support setting the transparency of a skin to an opacity of 1 , which is invisible but will still react to the mouse . This can be used in conjunction with the fade in / fade out / on hover capabilities . <h> March 9 , 2015 - Revision 2380 <p> Fixed AudioLevel : Fixed a long-standing issue where stopping music or other sounds or exiting an application playing music or other sounds could cause the plugin just keep the last values it received . This resulted in a freezing of meter displays and on some systems a buzzing sound being produced for some number of milliseconds . <h> March 3 , 2015 - Revision @ @ @ @ @ @ @ @ @ @ r2378 that would crash Rainmeter if a malformed option , with a trailing comma , i.e. FontColor=255,255,255 , was used . <h> March 2 , 2015 - Revision 2378 <p> Added WebParser : Added new OnConnectErrorAction to WebParser parent measures to allow taking an action when a site or file resource can not be connected to . <p> Added WebParser : Added new OnRegExpErrorAction to WebParser parent measures to allow taking an action when parsing a site or file resource with RegExp ( regular expression ) fails . <p> Changed WebParser : Changed the FinishAction to not be executed when parsing a site or file resource with RegExp ( regular expression ) fails AND an OnRegExpErrorAction is defined on the measure . <p> Added WebParser : Added a new Reset command , used with the ! CommandMeasure bang , to reset all values in the WebParser parent and related child measures to their initial empty values . <p> Fixed Math : Corrected a problem when a comma-separated , multi-argument math function was used in a formula in a comma-separated , multi-argument option . For instance using Clamp ( x , @ @ @ @ @ @ @ @ @ @ ggg , bbb , aaa . <p> Fixed Skin Installer : Changed the Skin Packager to only allow inclusion of a valid 400x60 . bmp file as a custom header in a . rmskin . Improperly sized custom images were causing visual problems in the Skin Installer user interface . <h> February 22 , 2015 - Revision 2373 <p> Changed Time : Added a Local value to the FormatLocale option , e.g. FormatLocale=Local . This will cause the output format of the measure to automatically use the date / time " locale " language and format set in Windows for the machine the skin is running on , rather than defaulting to a standard platform-agnostic " English " representation . <p> Fixed Time : Accounted for some minor bugs in Microsoft 's implementation of the code to read and parse the TimeStampFormat option . <h> February 18 , 2015 - Revision 2371 <p> Changed Time : Changed the TimeStamp option to allow a formatted date / time string as input . <p> Added Time : Added new FormatLocale option to support formatting a Time measure in any defined language / @ @ @ @ @ @ @ @ @ @ option to allow formatting any defined number of seconds into " days , hours , minutes , seconds " as desired . This will override the default behavior of the UpTime measure . <p> Added Section Variables : Added a new : Timestamp section variable measure modifier . This will return the Windows timestamp value of the named Time measure , and overcomes a limitation with getting and using this number when a Time measure has a Format option . <p> All of the above additions and changes are related to new functionality for getting and using date / time information in skins . As well as support for Language / Locale values in Time measures . Details and examples can be found at Change Announcements . <h> February 8 , 2015 - Revision 2360 <p> Added Time : Added several TimeStamp options to obtain Daylight Savings Time information for the local computer . <h> September 16 , 2014 - Revision 2325 <h> September 9 , 2014 - Revision 2318 <p> Fixed AudioLevel plugin : Added error trapping when the AudioLevel plugin is used on the unsupported Windows XP operating @ @ @ @ @ @ @ @ @ @ <p> Added Plugins : Added new AudioLevel plugin by author dgrace to the Rainmeter build . This will allow for real-time VU-Meter and Spectrum Analyzer visualizations of sound output . See AudioLevel plugin for full documentation and example skins . <p> Fixed AudioLevel plugin : Fixed an issue with the Format child measure option that was not returning a Unicode string value . <h> August 29 , 2014 - Revision 2313 <p> Fixed Formulas : Corrected an error when a negative number was used in combination with the Random function . <h> August 23 , 2014 - Revision 2311 <p> Changed Image : Due to possible conflicts , removed support for ImagePath from MaskImageName functionality . MaskImagePath should be used to define a shared location for mask images , or simply use a full or relative path as part of MaskImageName . ImagePath should only be used to define a location for an Image meter 's primary image . <p> Changed Tooltip : ToolTipIcon option now allows a relative path to the image . <p> Changed Language : Updates to localization language strings . <h> November 10 , 2013 - @ @ @ @ @ @ @ @ @ @ . This is a powerful extension to the concepts provided in IfActions , allowing multiple tests and actions , both " true " and " false " testing , and the ability to use logical AND and OR operators in the conditions . See Change Announcements for details and example skins . <h> Rainmeter 3.0.2 <h> October 29 , 2013 - Revision 2161 <p> 3.0.2 Release <p> Fixed Rainmeter : Fixed an issue where skins would " flicker " when refreshed . <h> Rainmeter 3.0.1 <h> October 20 , 2013 - Revision 2151 <p> 3.0.1 Release <p> Fixed Direct2D : Fixed crash of Rainmeter in D2D when String meters had a negative width or height . <p> Fixed Rainmeter : Fixed an AnchorX/Y issue caused by a change to support D2D . <p> Changed Installer : Removed the need to support / install older versions of . NET and C++ runtimes . <p> Changed Installer : Embed msvcr110.dll and msvcp110.dll C++ 2012 runtime libraries , so if they are not currently installed on the user 's system , Rainmeter will not need to try to download and install them . @ @ @ @ @ @ @ @ @ @ 2113 <p> 3.0 Release <p> Fixed String meter : Corrected an incompatibility between GDI+ and D2D when a string ends with a carriage return . <p> Changed Languages : Updated several language files for changes to the Rainmeter user interface . <h> October 6 , 2013 - Revision 2106 <p> 3.0 Release Candidate 1 <p> Changed Direct2D ( UseD2D ) rendering is now used by default if the system supports it . <h> September 29 , 2013 - Revision 2097 <p> Changed Due to some Direct2D issues with image quality when an image meter is " resized " in Rainmeter with W and H , all image rendering is changed to use the GDI+ engine while a more permanent solution is found . <h> September 22 , 2013 - Revision 2094 <p> Fixed Lua Scripting : Fixed a problem with a defined " default " value not working with SKIN:GetVariable() and meter:GetOption() . <h> September 15 , 2013 - Revision 2090 <p> Added Variables : New #ROOTCONFIG# built-in variable . Name of root config - Highest-level folder under the skins folder for the current skin . <p> Fixed Bangs : @ @ @ @ @ @ @ @ @ @ function without any parameter . " Skins " is the default parameter . <p> Fixed Meters : Fixed a bug where in some cases the width and height of a meter was not dynamically changing correctly when the Padding option was used . <h> August 26 , 2013 - Revision 2085 <p> Added About : Added a " Clear " button to the About / Log panel to remove the current contents of the log displayed in the panel . <p> Changed Bangs : Added " Config " and " File " parameters to the ! Manage bang . This will allow opening the Manage / Skin panel with the desired config and / or skin . ini file automatically selected in the list . <h> August 18 , 2013 - Revision 2081 <p> Added Calc : Added a new UniqueRandom option . If set to 1 , any measure using the random constant and UpdateRandom will not repeat until all values between and including LowBound and HighBound have been used . Note that any dynamic change to LowBound or HighBound will reset the tracking of values . See Change @ @ @ @ @ @ @ @ @ @ 2013 - Revision 2076 <p> Changed Script : We have now added support for Unicode characters in Lua scripting . There are some limitations , see Change Announcements for important details . <p> Changed Direct2D : There have been many fixes and improvements for compatibility with the new UseD2D / Direct2D functionality and older skins . See Change Announcements for details . <h> August 4 , 2013 - Revision 2050 <p> Special bug fix release <p> Fixed Rainmeter : Fixed an issue with Direct2D where a string meter with an empty string would still have a width and height . <p> Fixed About : Fixed a bug in the Log panel that could cause problems with the " Source " column . <h> August 4 , 2013 - Revision 2047 <p> Changed Rainmeter : Important improvements made to the D2D ( Direct2D ) rendering option for Rainmeter . See Change Announcements for important details . <p> Added Manage Dialog : Added " UseD2D " option in the Manage / Settings Tab . If checked , all skins are refreshed using D2D ( Direct2D ) rendering . The option is disabled @ @ @ @ @ @ @ @ @ @ with the latest Platform Update or Windows 8 is required . <p> Added Rainmeter : Added AccurateText option in the Rainmeter section of skins . When AccurateText=0 ( default ) and UseD2D=0 , inaccurate GDI+ measuring of text is used . When AccurateText=1 and UseD2D=0 , Accurate measuring occurs similar to D2D . When AccurateText=0 and UseD2D=1 , D2D adds padding to the text similar to GDI+ . When AccurateText=1 and UseD2D=1 , Accurate measuring occurs using D2D. <h> 21 July , 2013 ( r2022 ) <p> Removed String meter : Due to problems and inconsistent behavior , removed the ability to include trailing spaces on the Text option that was added in previous betas . See the new Padding option for an alternative solution . <p> Added Meters : Added Padding=left , top , right , bottom option to meters . Allows adding pixels around any or all sides a meter . The width and height of the meter will dynamically be adjusted to the new size . <p> Added Measures : Added Paused=0/1 option to measures . This allows setting the " paused " state of a measure @ @ @ @ @ @ @ @ @ @ . <p> Fixed ! SetWallpaper : Improved performance when setting the wallpaper with large images . <p> Changed Button meter : Changed the mouse over behavior to ignore transparent areas of the image , to match the mouse click behavior. <h> 14 July , 2013 ( r2012 ) <p> Changed String meter : Trailing spaces are displayed in the Text option if the value is enclosed in quotes . This was previously changed in D2D , and now has the same behavior in GDI+ . <p> Added ! PauseMeasure : New ! PauseMeasure , ! UnpauseMeasure , and ! TogglePauseMeasure bangs . This is similar to a disabled measure , however the measure retains its current value instead of changing to 0 . Group versions of these bangs also added . <p> Changed ! SetWallpaper : Changed the problem that an image file set with ! SetWallpaper would be locked in Windows . <p> Fixed Rainmeter : Fix for a problem with ! DeactivateConfig in a OnCloseAction that could cause high CPU usage . <h> 30 June , 2013 ( r1995 ) <p> Changed Error Logging : Improved the About/Log @ @ @ @ @ @ @ @ @ @ possible , the configskin.ini and meter or measure section producing the error will be displayed . <p> Fixed String Meter : Corrected a bug where trailing spaces were not displayed when the option value was enclosed in quotes . Text= " Some Trailing spaces " <h> 23 June , 2013 ( r1990 ) <p> Fixed Lua Scripting : Fixed an issue where some meter related bangs ( i.e. ! HideMeterGroup ) were ignored in the Initialize() function of the script . <p> Fixed Meters : Fixed an issue where the hiding of a meter caused the skin to have a width and height of zero would not properly destroy the drawing of the last meter hidden . <p> Changed Languages : User Daniel Peukert made some updates and corrections to the Czech language files . <h> 17 June , 2013 ( r1986 ) <p> Fixed Image meter : Fixed a bug that caused images not be be displayed when both MeasureName and ImageName options were used . <h> 16 June , 2013 ( r1979 ) <p> Fixed String meter : Fixed a small bug with the Angle option . <p> @ @ @ @ @ @ @ @ @ @ <h> 9 June , 2013 ( r1950 ) <p> Added New ImagePath option added to General Image Options . This replaces the Path option on Image meters , and extends the functionality to all other meters that support images . Note that Histogram uses PrimaryImagePath , SecondaryImagePath and BothImagePath due to the fact that the Histogram meter has an optional secondary measure binding . <h> 4 June , 2013 ( r1946 ) <p> Fixed Fixed an issue with the ! Toggle bang that could cause a crash in some instances . <h> 3 June , 2013 ( r1945 ) <p> Fixed Corrected a couple of bugs with group bangs that caused them to fail . One long-standing , and one caused by the most recent r1941 beta . <h> 2 June , 2013 ( r1941 ) <p> Changed Improvements to the level of detail in the Rainmeter log when there are command or bang errors . <p> Changed Major refactoring of the Rainmeter code for efficiency and easier code maintenance . <h> 19 May , 2013 ( r1930 ) <p> Changed Process : Improvements made to the Process plugin to @ @ @ @ @ @ @ @ @ @ processes started with a higher security level than Rainmeter , 64bit processes when Rainmeter is 32bit , and processes run as a Windows " service " . <p> Fixed Roundline : Corrected a rounding error when a large value is used for the StartAngle option . <h> 12 May , 2013 ( r1928 ) <p> Added Image meter : New UseExifOrientation option to automatically correct the orientation of images based on the EXIF data encoded in the image by a camera . <p> Fixed NowPlaying : Corrected an issue that caused the NowPlaying plugin to fail on XP systems in some cases . <h> 7 April , 2013 ( r1879 ) <p> Changed D2D : Made some changes to how font " family " and " subfamily " names are handled , to be more consistent with GDI+. <h> 31 March , 2013 ( r1871 ) <p> Added InputText : Added OnDismissAction to the plugin . <p> Fixed FileView : Fixed an issue with the Open command which in rare instances could crash Rainmeter . <p> Changed Localization : Updated language files . <h> Rainmeter 2.5 <h> 24 March , @ @ @ @ @ @ @ @ @ @ March , 2013 ( r1819 ) <p> Changed InputText : Improved formula and section variables support in measure options and inline CommandN option . X , Y , W , H and FontSize are supported . DynamicVariables is not required on the measure . <p> Changed SkinInstaller : Remove all Rainmeter section options from layouts installed by a . rmskin . Skin authors may not automatically overwrite the user 's settings for these options . <p> Changed SkinInstaller : Add FileView to protected official plugins , FileView.dll may not be distributed with a . rmskin. <h> 5 March , 2013 ( r1808 ) <p> Fixed FileView : Fixed an issue with threading that caused icons to display as the Windows default / unknown image in some cases . <p> Changed FileView : WildcardSearch now works properly with Recursive=2. <h> 3 March , 2013 ( r1806 ) <p> Added Ping : Added FinishAction to plugin . Action to execute as soon as a successful value is returned , or when the number of milliseconds set in the Timeout option is reached . <p> Changed InputText : Updated to current Rainmeter API @ @ @ @ @ @ @ @ @ @ <p> Fixed InputText : Fixed issues with handle leaks caused by threading . <p> Fixed InputText : Fixed an issue that prevented input using a language IME in the field . <p> Added FileView : Added Recursive=2 option . Allows recursive indexing of files in a folder tree . Folders are ignored with this option . Plugin commands FollowPath and PreviousFolder are disabled , and ShowFile , ShowFolder , and ShowDotDot options have no effect . <p> Changed FileView : Drives are now sorted . <p> Changed FileView : Drives are now counted as folders for Type=FolderCount. <h> 3 February , 2013 ( r1786 ) <p> Fixed FileView : The current index number was not being reset on Update command . <p> Fixed Calc : An issue with negative signs being incorrectly parsed was corrected . <h> 27 January , 2013 ( r1781 ) <p> Changed ClipString : Added new ClipString=2 setting and new ClipStringW / ClipStringH options . This will allow for more dynamic clipping and wrapping of a string while sizing the containing meter to accommodate the entire contents . <p> Changed WebParser : Changed the behavior of @ @ @ @ @ @ @ @ @ @ Internet Explorer for proxy management . <p> Fixed FileView : The default icon index was off by 1 when non IconPath was specified . <h> 5 June , 2011 ( r826 ) <p> Fixed an issue with FinishAction on a WebParser measure not working correctly if #CURRENTCONFIG# was not specified . <p> Changes to Uptime measure to work better on Vista/Win7 systems . <h> 29 May , 2011 ( r822 ) <p> Added support for MusicBee and MediaMonkey to NowPlaying plugin . <p> Improved image caching when image scaling is not required , to reduce resource usage . <h> 22 May , 2011 ( r816 ) <p> Added NowPlaying media plugin as noted above . <p> Fix to Rainstaller when a full restore of a . rmskin made with RainBackup is done containing the " Backup " folder from Skins . <h> 15 May , 2011 ( r808 ) <p> Fixed an issue with Rainstaller that was preventing it from restoring full backup . rmskins made with RainBackup . <p> Changes to the Rainmeter source build process to better support those using Visual Studio in both 32 and 64 bit @ @ @ @ @ @ @ @ @ @ Fixed a bug with Measure=Registry returning invalid DWORD values . <p> Improved fix in r800 that correctly handles SkinPath in Rainmeter.ini for portable installations . <h> 17 April , 2011 ( r793 ) <p> Change to how network statistics are stored ( Rainmeter.stats ) . <p> Fixed an issue with the Rainmeter icon on the System Tray/Notification Area disappearing when Explorer was restarted . <p> Fixed an issue that Roundline " Shift " parameters were not working when Solid=0 was set on the meter . <p> Fixed a problem where SkinPath was read from Rainmeter.ini in portable installations . <h> 10 April , 2011 ( r790 ) <p> Added the NowPlaying media player plugin by developer and overall Rainmeter superstar poiru . <p> Added support for Aero Glass " blur " effects on skins . <p> FolderInfo now returns size in bytes . If using InfoType=FolderSizeStr , ( which until now autoscaled the value internally ) AutoScale=1 should be added to the meter(s) . While this does change the behavior , it allows for the use of Scale , NumOfDecimals , etc. that were n't possible prior to this change @ @ @ @ @ @ @ @ @ @ failing if a " config name " folder had a space in it . <p> Fix for the CoreTemp plugin to address a mutex handle leak . <p> Added image caching system to the internal Rainmeter code . <p> New option for Uptime meter : setting added to disable the addition of days to hours when days ( %4 ) is not specified in the Format= setting . Use AddDaysToHours=1/0 to control this option . <p> Some bug fixes and improvements to VirtualDesktops plugin from Patrick at Dexpot . <p> " Silent " installation of Rainmeter now available . <p> Rainmeter development environment updated to Visual C++ 2010 . <p> Rainmeter now requires WinXP SP2 / Win2003 SP1 / WinVista or Win7 . <p> Support for Win2k ( Windows 2000 ) is not provided in the new VC++ 2010 development environment . <h> Rainmeter 2.0 <h> 6 February , 2011 ( r745 ) <p> Rainmeter installer changed to a single . exe which installs both 32bit and 64bit Rainmeter . <p> Fixed an issue with " BevelType " in meters not displaying correctly . <p> Added AutoScale=2 and " k @ @ @ @ @ @ @ @ @ @ skins from the build . Now available as a download after the install . <p> Changed Update= and UpdateDivider to enable a setting of -1 , disabling updates after the initial load/refresh . <h> Rainmeter 1.3 <h> 3 October , 2010 ( r560 ) <p> Fixed a issue that MouseOver/LeaveAction could loop infinitely when used with ! RainmeterMoveMeter . <p> Minor change to RainThemes to make closing Rainmeter more efficient . <p> Changes to many Rainmeter error/prompt dialogs to make them more descriptive . <p> Fixed a issue that Value column is n't updated if value is empty string in the About dialog . <p> Fixed a issue that Download=1 does n't work correctly in some cases in WebParser . <p> Added Measure-name to log messages in WebParser . <p> Rainmeter error messages now display meter/measure in question . <p> Change to detect skins with no meters OR measures to reduce issues with people loading Rainlendar skins and such . <p> Fixed an issue where ToolTips were remaining active on hidden meters . <p> Added the ability to use formulas to define ToolTipWidth . <p> Rainstaller : Added display of @ @ @ @ @ @ @ @ @ @ Fix for long standing issue where numbers were being truncated to zero decimal places in some instances , causing possible incorrect calculated values when the measure 's number was used dynamically later . <p> Fix for a TooTip initialization issue which could cause intermittent Windows Taskbar error message loop when Rainmeter was started . <p> NumOfDecimals is now enabled when Percentual=1 is used in a STRING meter . <p> Fixed a multithreading issue that could cause a crash of Rainmeter in the internal function LSLog() . <p> 1 : Decodes both numeric character references and character entity references . <p> 2 : Decodes only numeric character references . <p> 3 : Decodes only character entity references . <p> Improved the PLAY command so it works more like a ! bang does : <p> ButtonCommand=PLAY **31;7856;TOOLONG <p> ButtonCommand=PLAY " **31;7889;TOOLONG " <p> ButtonCommand= ! execute PLAY **31;7922;TOOLONG <p> ButtonCommand= ! execute PLAY " **31;7955;TOOLONG " <p> Fix an issue with the " ClickThrough " skin setting broken in an earlier beta . <p> Major visual / interface changes to the " About " dialog . Should make this a much more @ @ @ @ @ @ @ @ @ @ updated to version 1.6 . <p> New bangs Mute/Unmute <p> Volume shows -1 when muted <p> Fixed an issue where dynamic variables would be reset to default when Windows " WorkArea " is reset by changing the screen resolution or a screensaver is activated . <p> Minor fixes to WebParser for a memory leak and routines to interact with Rainmeter " window " . <p> Changed to allow substituting quote characters in Substitute= statements . This is done by using single quotes to surround the first part of the " find " : " replace " pair . So Substitute= ' " ' : " " would remove all quotes from the text . <p> Single and double quotes MUST be " mismatched " on the " find:replace " pairs when using single quotes as a delimiter , or the Substitute will fail . Example : Substitute= ' " ' : " None " will replace a quote with the word None . Substitute= " None " : ' " ' will replace the word None with a quote . However , Substitute= ' " ' : ' None ' @ @ @ @ @ @ @ @ @ @ on both sides of the " find:replace " pairs . An easier to read example is Substitute='red ' : ' blue ' , which will fail . <p> Updated the pcre ( Regular Expression ) library from 6.4 to 8.10 . The pcre change log is at Change Log <p> Added new ! bangs to change " settings " in Rainmeter.ini for current / group / all skins at once . <p> ! RainmeterDraggable/ ! RainmeterDraggableGroup <p> LONG ... <p> LONG ... <p> ! RainmeterSnapEdges/ ! RainmeterSnapEdgesGroup <p> ! RainmeterSnapEdges parm1 ( Config * ) <p> ! RainmeterSnapEdgesGroup parm1 GroupName <p> Parm1 : <p> -1 toggles the setting . <p> 0 forces the setting to off . <p> 1 forces to setting to on . <p> WebParser : Fix for issue where StringIndexes from previous call to WebParser would remain even if the item no longer exists . This fixes a long standing problem with uTorrent skins for example , when the last item was removed from uTorrent but remained displayed in the skin until a refresh was done . <p> Added MeasureName2 as an alternative to SecondaryMeasureName in Meter=Histogram @ @ @ @ @ @ @ @ @ @ all restrictions on the string case of function names . Calc measures are now completely case-insensitive , with the exception of the " b/o/x " character when specifying the base of a number , this must be lower case . <p> Added new PluginMediaKey plugin by poiru . <p> Some minor improvements to MouseOver/MouseLeave actions . <p> Change to Rainstaller to close RainBrowser if it is running when a skin is installed , to eliminate a problem with open files . <p> Fix by elestel to iTunes plugin : iTunesPlugin did not handle **28;7988;TOOLONG . <p> Added new #ROOTCONFIGPATH# variable . This will contain the path to the highest level folder under Skins for the current config. **41;8018;TOOLONG can be used to have an @Include work even if you move a skin to another " suite " for instance . <p> Re-design of the layout of the Rainmeter manual . The manual is now exclusively online . The " Help " context menu item will launch the appropriate ( release or beta ) version of the manual in your default web browser . The Rainmeter.chm help file is no longer @ @ @ @ @ @ @ @ @ @ <p> Added new ! RainmeterWriteKeyValue bang . ! RainmeterWriteKeyValue " Section " " Key " " Value " ( " FileSpec " ) , where " FileSpec " is an optional parameter . If FileSpec is not present , the change is automatically done in the currently running skin file . If the bang is executed from the command line , FileSpec is required . FileSpec must be either in the Skins or %APPDATA%Rainmeter paths . This can be used to permanently change any Key=Value setting in any . ini or . inc file ( Including Rainmeter.ini ) . <p> Changes to MouseLeaveAction to make it more reliable and faster . This should eliminate having to put MouseLeaveAction in the Rainmeter section to ensure detection . <p> Made the " About " dialog a bit larger by default . Other cosmetic changes to this dialog . <p> Fixed WifiStatusPlugin so it no longer closes WLAN handle when skin is closed even if another skin is still using it . <p> Fixed an issue where an invalid Format= code in a Time or Uptime measure would crash Rainmeter . Invalid formats @ @ @ @ @ @ @ @ @ @ just gracefully fails . <p> Change to Rainstaller so that a default Rainmeter plugin will not be overwritten if an author includes it by mistake in a . rmskin file . <p> Fixed an issue where Rainmeter was detecting an incorrect value for %APPDATA% in a multi-user environment . <p> Fixed an issue where check marks of context menu items in configs/root/variants menu are cleared if LONG ... is used . <p> Minor fix to new " groups " function for configs . <p> Added root folder of a config on the skin context menu . <p> Fixed an issue where the context menu did not close when focus was given to another windows element . <p> Many additions to the supported Windows Messages that Rainmeter will respond to , allowing 3rd-party applications to query Rainmeter for paths , currently loaded configs , etc . These changes are courtesy of JamesAC and Patrick from Dexpot . <p> Added the Win7AudioPlugin plugin by Reiswaffle . <p> Added the PluginVirtualDesktops plugin from Patrick at Dexpot . This will provide support for Virtual Desktop Management tools like Dexpot and VirtuaWin . <p> Added @ @ @ @ @ @ @ @ @ @ in Rainmeter.ini and on " About " dialog . <p> Re-design of the RainBrowser GUI . <p> Major re-design of the Rainmeter and Skins context menus . <p> Fix to Calc measure to properly allow use of numbering systems other than decimal using a prefix of 0b ( binary ) 0x ( hex ) 0o ( octal ) on the numbers . <p> Added " Group= " to meters and measures in skins , and in Rainmeter.ini to support configs . This allows many ! bangs to operate on multiple entities at once without multiple ! bang statements . <p> Major improvement to " logging " in Rainmeter , including new context menu support . <p> Addition of support for multiple monitors when using DesktopWorkArea . This change is courtesy of user Jott . <p> Addtion of " ToolTip " functionality , so meters can have standard Windows tooltips when hovered over . <p> Improvement to image quality when scaling images . <h> Rainmeter 1.2 <h> 24 June , 2010 ( r440 ) <p> Major improvements to how Rainmeter works with multiple monitors . <p> New WebParser settting " DownloadFile= @ @ @ @ @ @ @ @ @ @ . <p> New ! Bang - ! RainmeterRefreshApp . Allows full Rainmeter refresh from a skin or command line . <p> FIXED : Issue where DynamicVariables=1 disabled UpdateDivider . <p> FIXED : LineColor did not use the values of Dynamic Variables in Meter=Line . <p> FIXED : A numeric value greater than 32bit can be now displayed when NumOfDecimals is 0 in Meter=STRING . <p> FIXED : Compatibility issue in Windows 2000 . ( AboutDialog , SysInfo ) <p> CHANGED : FontSize=0 ( invisible ) is now valid in a STRING meter . <p> CHANGED : The parsing of parameters to use default values for incorrect " typing " . ( ie : FontSize=ABC ) <p> FIXED : An issue with skins not positioning correctly on multiple monitors when KeepOnScreen=1 . <p> Added " Processor=n " parameter to Measure=CPU function so it can be used as well as / instead of PefMon.dll Plugin to measure multiple-core CPU systems . Processor=1 is the first core , etc . Processor=0 or no parameter is still the average of all cores . <p> Changed NetIn and NetOut function to return correct information if @ @ @ @ @ @ @ @ @ @ value by combining the activity of the physical network card with Windows virtual interfaces . <p> Added the statement " Debug=1 / 0 " in the Rainmeter section of Rainmeter.ini . This currently will do some logging of enumerated monitors and network interfaces and may be added to over time . <p> FIXED : Corrected an invalid return value from MainWndProc . <p> Added the parameter " ImageAlpha= " for image meters . This will allow setting the " transparency " of an image from 0 ( invisible ) to 255 ( fully opaque ) . <p> Changed " AntiAlias=1 " to use " default " interpolation instead of " Bicubic " . This should result in better antialiasing of images . <p> RainBrowser : Minor change to a link added by the program to Metadata <p> FIXED : Corrected an issue where a BAR meter did not work correctly with DynamicVariables=1 <p> Change ! RainmeterSetVariable to accept formulas as a parameter . Formulas must be enclosed in parentheses with the entire parameter enclosed in quotes if there are spaces in the formula : ! RainmeterSetVariable VarName " ( #SCREENAREAWIDTH# @ @ @ @ @ @ @ @ @ @ enable the use of " On Desktop " ( AlwaysOnTop=-2 ) Z-Position for skins under Vista and Win7 . <p> Fix to timing issue with Ping Plugin to reduce possibility of Rainmeter crash when pinging an active server not responding to the Ping service . <p> Changed @Include to allow the use of variables in the statement . <p> Updated GUI for EnigmaConfigure . Now also restores saved settings on upgrade of Enigma from Backup . <p> Improvement of functionality when using ! **25;8061;TOOLONG and DynamicVariables=1 . <p> Fixed a bug in SpeedFan that could cause a crash if SpeedFanType was not set to TEMPERATURE . <p> Changed an error in using Dynamic image names to write to the log rather than producing an error dialog . <p> Fixed an issue with loading image names when in a MeterStyle . <p> Fixed a bug in Meter=Histogram . <p> Fixed a bug in the Ping plugin that could cause a crash if the network was not present when the skin was refreshed . <h> Rainmeter 1.1 <h> 1 November , 2009 ( r306 ) <p> The default value for the UpdateRate @ @ @ @ @ @ @ @ @ @ . <p> Fix for the ToggleiTunes command in the iTunesPlugin . <p> The IgnoreRemovable now defaults to true ( 1 ) which should help with the missing disk errors . <p> Added Themes submenu to the Rainmeter 's context and tray menus . <p> Variables can be used under the Variables section ( as long as they have been defined before the current variable is read ) . <p> Changed RainThemes to automatically create a theme called " AutoSave " which will contain your current setup . <p> The windows stay visible with Windows 7 Aero Peek . <p> WebParser reads the resource now only if it has been modified . This can be overridden with ForceReload=1 . <p> ! RainmeterRefresh and ! RainmeterQuit are now handled only during the event loop since they can crash the application if executed during Update() . <p> It 's now possible to use the measures as if they were variables ( use MeasureName instead #VariableName# ) . Set DynamicVariables=1 for all meters and measures which refer to other measures . <p> New bang ! RainmeterSetVariable can be used to change the value of @ @ @ @ @ @ @ @ @ @ the variable is used ) . <p> Skin information and instructions can be added to Metadata section . <p> Aspect ratio of the image is preserved when the image is scaled . <p> New RANDOM function in the CALC measure type . <p> Fonts can now be stored in RainmeterFonts or with the skin and not " installed " in Windows . <p> Added support for style sections . MeterStyle can be used in meters to read the values from the style section . <p> Added support for the middle mouse button ( MiddleMouseDownAction / MiddleMouseUpAction ) . <p> The skin files can read other files with @include statement . <p> If native transparency is enabled the windows are not refreshed anymore when settings change but they are just moved to the correct location . <p> Added a version check for the skins which come with Rainmeter so they can be upgraded . <p> Path and filename of the file created by Debug=2 in WebParser is now configurable with Debug2File= " Pathfilename.ext " . <p> The standard " hand pointer " mouse cursor is shown when you hover over a @ @ @ @ @ @ @ @ @ @ button . <p> Added #CURRENTCONFIG# as a " built-in " variable . <p> Fixed : Measure contained in Action in Measure and Meter are not replaced when reading skins . They are replaced only when executing action . <p> Fixed : When the designation of Drive is wrong , a strange volume label is indicated . <p> The ! bangs can be now used from command line even if there are no active configs . <p> Included RainBrowser to the build . <p> WiFiStatus : Added a variable called WifiListLimit=X that allows you control how many access points to display at a time . <p> WiFiStatus : Removed all popup errors , all debugging messages now sent to Rainmeter log file . <p> WiFiStatus : Fixed some memory leaks 7 and Vista users were facing . <h> Rainmeter 1.0 <h> 7 August , 2009 ( r163 ) <p> Diskspace can be checked from the removable drives too . <p> Time measure did n't show correct week number . Fixed . <p> New plugins : RecycleManager and iTunesPlugin <p> SysInfo plugin updated with 11 new SysInfoTypes . <p> SysInfo IP Address @ @ @ @ @ @ @ @ @ @ n't be opened if Rainmeter was installed to a folder with spaces . Fixed . <p> Added support for transition frames for the bitmap meter . <p> Some Vista specific fixes : Rainmeter.ini and Rainmeter.log are now written to %APPDATA%Rainmeter and editing the skins will ask for admin privileges . <p> When Rainmeter is started the first time the default skin is activated automatically . <p> New build in variables : #WORKAREAX# , #WORKAREAY# , #WORKAREAWIDTH# , #WORKAREAHEIGHT# , #SCREENAREAWIDTH# , #SCREENAREAHEIGHT# , #PROGRAMPATH# , #SETTINGSPATH# , #SKINSPATH# , #PLUGINSPATH# , #ADDONSPATH# and #CURRENTPATH# ( this is the path where the ini file that is currently read is located ) . <p> Math formulas can be used to define the window position and the meter dimensions ( the formula must be surrounded in parenthesis ) . <p> If there is a file called Default.ini in the program folder it will be used as the default settings file for new users . <p> The location of the settings file ( rainmeter.ini ) can be defined as a command line argument . <p> Meters have now support for a transformation matrix . @ @ @ @ @ @ @ @ @ @ . <h> Rainmeter 0.14 <h> 22 January , 2006 <p> Webparser parses the files as UTF8 by default . The codepage can be changed with CodePage . <p> Added proxy support for the webparser . <p> The reference measures in Webparser can use RegExps to parse the substring . <p> Fixed few graphics problems with the images . <p> Fixed the background rendering bug and incompatibility problem with DynamicWindowSize . <p> Some ! bangs did n't work during the first update cycle . Fixed . <p> Fixed SSID and BANDWIDTH in the WirelessPlugin . <p> WindowMessagePlugin uses PostMessage instead of SendMessage so now you can control Rainmeter with it too : - ) . <p> Fixed couple of crashes with ! RainmeterRefresh-bang . <p> The plugin folder can be defined with RainmeterPluginPath in step.rc . <p> The AdvancedCPU can show the process that currently takes the most CPU time . <p> Substitutes are applied in the order they are defined . <p> Fixed a crash with the PingPlugin and added TimeoutValue which defines the value on timeout . <p> QuotePlugin can scan subfolders and it 's possible to filter the @ @ @ @ @ @ @ @ @ @ directly icon files . <p> Fixed hit test in BITMAP measure when alignments are used . <p> Format in TIME measure can show the time and date as locale specific string . <p> Added OnRefreshAction which is executed when the config is refreshed . <p> Fixed uptime in 64-bit build . <h> Rainmeter 0.13 <h> 20 July , 2005 <p> Compiled as Unicode so this is Win2k/WinXP only from now on . <p> Removed wharf interface . Use ! RainmeterLsBoxHook instead . <p> Some code optimizations . <p> Updated the PCRE-library in WebParser . <p> WebParser : Debug=2 Dumps the downloaded data to a file ( C : WebParserDump.txt ) . <p> Fixed crash bug when plugins were used as the tray measure . <p> UpdateDivider did n't work in meters . Fixed . <p> Empty substitutes are now also possible . <p> Added button meter , which should make button creation easier . <p> Removed size limitation from the section names . It should be now possible to have as many meters and measures in the skins as you like . <p> Meter background can be drawn with a @ @ @ @ @ @ @ @ @ @ overuse it ) . <p> R ( i.e capital r ) in the relative position makes the meter relative to the bottom ( or right ) edge of the previous meter . <p> Created a quote plugin for random texts and images . <p> Created a window message plugin that allows to control other applications ( e.g. Winamp ) . <p> Created a ping plugin for network status checking . <p> STRING meter calculates its size automatically . <p> The window size can be recalculated dynamically with DynamicWindowSize. 
@@6351064 <p> Note : The maximum value of HighBound is a 32bit signed integer , or 2147483647 . <h> Additional Formula Syntax <h> Functions <p> Note : These functions are only available in the context the Formula option of a Calc measure , and not in other ( formulas ) in other measure or meter types . <p> Random : A random number . The number will be between and include the values set in LowBound and HighBound . <p> Counter : The number of update cycles from the time the skin is loaded . This number only resets when the skin is unloaded and then loaded again - not when the skin is refreshed . <h> Other Bases <p> The Calc measure allows numbers to be represented numbering systems other than decimal . To use another base , prefix the number with a zero then the letter representing the system you wish to use . The following are accepted prefixes , which are case ( lower ) sensitive : <p> 0b - Binary number ( base 2 ) ( ex : 0b110110 - returns 54 in decimal ) <p> 0o @ @ @ @ @ @ @ @ @ @ 0o123 - returns 83 in decimal ) <p> 0x - Hexadecimal number ( base 16 ) ( ex : 0xF1 - returns 241 in decimal ) <h> Measure Values <p> The use of measure values in the Formula option of a Calc measure does not require the use of Dynamic Variables . Simply omit the and the number value of the measure will be retrieved . If the measure does not have a number value , 0 will be used . Section Variables , Variables and Built-in Variables follow the normal rules . For more information see the Dynamic Cheat Sheet . 
@@6351065 <h> Contents <h> More <h> WebParser : Lookahead Assertions in RegExp <p> Many times you need to parse an RSS feed or other web site , and ca n't be sure beforehand how many results for a particular search might be there . You might search for five occurrences of something when there are only four , and the entire regular expression will fail and no results will be returned to the WebParser measure(s) . <p> This can be solved by using what is known in regular expressions as a " Lookahead Assertion " . What this does is evaluate an expression you define that says in effect " do this search if some pattern is found , otherwise continue the regular expression without failing " . <p> The best way to explain this is probably to give an example with an explanation of what it is doing . <p> Let 's start with an HTML file . We will use the " file : // " functionality of WebParser for this test , so we can parse a local file on our hard drive . <p> &lt;HTML&gt; <p> &lt;BODY&gt; @ @ @ @ @ @ @ @ @ @ <p> &lt;/Item&gt; <p> &lt;/BODY&gt; <p> &lt;/HTML&gt; <p> Normally , we might use something like this in a WebParser measure to search for and return three results : <p> The problem is , there are only two instances of " &lt;Item&gt; " in this file at this time , and the regular expression will fail and no results will be returned to the WebParser measure . A feed or web site might have none or twenty " &lt;Item&gt; " occurrences , and you ca n't always know ahead of time . <p> Using a " lookahead assertion " will allow you to solve this . You can use a RegExp of : <p> Now the WebParser measure will return the two StringIndexes for " Larry " and " Curly " , and will just return a null value for the third search item ( the third StringIndex ) without failing . <p> How does this work ? <p> LONG ... <p> The ( ? at the beginning , paired with the ) at the very end , is an IF conditional directive , basically saying " If the following succeeds , @ @ @ @ @ @ @ @ @ @ next is the lookahead assertion . It is asking " If I look ahead from here , does the text . *&lt;Item&gt; exist ? " <p> If " true " , what comes outside the lookahead assertion , . *&lt;Name&gt; ( . * ) &lt;/Name&gt; is searched for and the capture is made . The trailing ) ends that starting ( ? IF conditional . <p> The point of that overall outside ( ? ... ) IF conditional is to keep the RegExp from failing if the lookahead assertion is " false " . If the test in the lookahead is " true " , fine . If not , it just shrugs and continues to the next part of the RegExp or exits gracefully at the end of the expression . <p> Example skin <p> Let 's put it all together . I will use a Variable to define the search pattern , then just repeatedly use the variable in the RegExp= statement to save some typing , and set a Substitute= on the WebParser measures so we get something other than just a null value displayed . @qwx22547 @ @ @ @ @ @ @ @ @ @ URL=file : //#CURRENTPATH#Test.html <p> RegExp= " ( ? siU ) #Get##Get##Get# " <p> MeasureChild1 @qwx22557 @qwx22564 <p> URL=MeasureParent @qwx22567 <p> Substitute= " " : " No Moe ! " <p> MeasureChild2 @qwx22557 @qwx22564 <p> URL=MeasureParent <p> StringIndex=2 <p> Substitute= " " : " No Moe ! " <p> MeasureChild3 @qwx22557 @qwx22564 <p> URL=MeasureParent <p> StringIndex=3 <p> Substitute= " " : " No Moe ! " <p> MeterChild1 @qwx22560 <p> **25;8152;TOOLONG <p> FontSize=10 @qwx22554 @qwx22550 <p> Text=Item 1 : %1 <p> MeterChild2 @qwx22560 <p> **25;8179;TOOLONG <p> Y=2R <p> FontSize=10 @qwx22554 @qwx22550 <p> Text=Item 2 : %1 <p> MeterChild3 @qwx22560 <p> **25;8206;TOOLONG <p> Y=2R <p> FontSize=10 @qwx22554 @qwx22550 <p> Text=Item 3 : %1 <p> This will display : <p> Item 1 : Larry Item 2 : Curly Item 3 : No Moe ! <p> Details on how " Lookaround " functionality works in regular expressions can be found at RegExp Tutorial . 
@@6351066 <h> Options <p> Name(s) of the measure(s) bound to the meter . The value of a measure or measures will define the image file to be used in the meter . The value can define a full path and name of any supported image file , or just the name if the ImagePath option is used or the image file is in the current skin folder . <p> ImageNameDefault : %1. png <p> Name of an image file . This can be a full path and name of any supported image file , or just the name of the file if the ImagePath option is used or the image file is in the current skin folder . <p> Note : If a MeasureNameN option is defined , it will override any named file in the ImageName option . Generally , MeasureNameN and ImageName will not be used together in the same meter . <p> The exceptions are when MeasureName returns a file name with no extension , and the default . png is not desired , or when ImageName is being used to define an image based on the combined @ @ @ @ @ @ @ @ @ @ syntax as follows : <p> MeasureName=SomeMeasure <p> **25;8233;TOOLONG <p> ImageName=%1-%2.png <p> ; %1 and %2 will be replaced by the string values of SomeMeasure and <p> ; SomeMeasure2 , respectively . <p> **26;8260;TOOLONG : 0 <p> Controls how W and H scale the image when Tile=0 . Valid values are : <p> 0 : The image is scaled to exactly fit the bounds specified by W and H without regard to aspect ratio . <p> 1 : The image is scaled to fit within the bounds specified by W and/or H while preserving the aspect ratio . <p> 2 : The image is scaled and cropped to fill the bounds specified by W and/or H while preserving the aspect ratio . <p> Note : If only one of either W or H is defined , then PreserveAspectRatio will default to 1 . <p> ScaleMarginsFormat : Left , Top , Right , Bottom <p> Margins of the image to exclude from scaling when Tile=0 and PreserveAspectRatio=0 . <p> Example:ScaleMargins=10 , 50 , 10 , 50 <p> TileDefault : 0 <p> If set to 1 , the image is tiled ( repeated @ @ @ @ @ @ @ @ @ @ Hint : Using the SolidColor option , along with W and H options , an image meter may be used to draw squares , rectangles or lines without needing any ImageName or MeasureName . <p> However , no manipulations can be done to the resulting square , rectangle or line with any general image options . Only actual images loaded from a file can be manipulated . ( e.g. ImageRotate ) <h> Deprecated Features <p> The following options have been deprecated and should not be used . They are still supported , but may be removed in future versions . <h> Mask Image <p> MaskImageNameDefault : None <p> Name of an image file to use as a mask for the primary image defined with MeasureName or ImageName . The size and shape of MaskImageName will be used to mask and define the size and shape of the primary image . <p> MaskImageName can be a full path and name of any supported image file , or just the name of the file if the MaskImagePath option is used , or the image file is in the current skin folder . @ @ @ @ @ @ @ @ @ @ define the size of the mask image , and the size of the meter . Whatever is defined as the primary image with ImageName or MeasureName is then masked into the mask image , displaying in any non-transparent areas of MaskImageName using a " fill " method that sizes and crops the image to fit while preserving the aspect ratio . <p> If either the primary image or mask image has areas of transparency or partial transparency , those " alpha channel " values are applied to the final image . When both images have a shared area with full or partial transparency , the " most transparent " value is applied . <p> Notes : <p> The Mask Image functionality is only available on systems supporting D2D . It will not work on Windows XP , or if D2D is turned off in the Rainmeter settings . <p> MaskImageName can not be bound to the meter from a measure with MeasureNameN and %1 , %2 etc . <p> If MaskImageName is defined , then ScaleMargins and Tile options can not be used on the meter . <p> MaskImagePathDefault : @ @ @ @ @ @ @ @ @ @ ( e.g. MaskImagePath=#@#Images ) . <p> MaskImageFlipDefault : None <p> Flips the image . Valid values are None , Horizontal , Vertical or Both . <p> MaskImageRotateDefault : 0.0 <p> Rotates the image by the specified angle in degrees . Negative angles can be used for counter-clockwise rotation . 
@@6351075 <h> More <h> IfActions <p> IFActions are action options you add to a measure to execute one or more Bangs or commands when a defined numerical threshold value is returned by the measure . IfActions are done by using pairs of Above , Equal , and Below Value and Action statements . You may have one of each kind of IfAction in a single measure . <h> Options <p> IfAboveValue <p> The value used by IfAboveAction . <p> IfAboveAction <p> Action to be executed when the measure goes above the value defined in IfAboveValue . The action is executed only at the moment when the measure exceeds the value , so it needs to go below the defined value before the action is executed again . <p> IfBelowValue <p> The value used by IfBelowAction . <p> IfBelowAction <p> Action to be executed when the measure goes below the value defined in IfBelowValue . The action is executed only at the moment when the measure falls below the value , so it needs to go above the defined value before the action is executed again . <p> IfEqualValue <p> The value @ @ @ @ @ @ @ @ @ @ executed when the measure is equal with the value defined in IfEqualValue . The action is executed only once when the measure is equal to the value , so it needs to go above or below the defined value before the action is executed again . The compared value is rounded to an integer . 
@@6351076 <p> Note : The maximum value of HighBound is a 32bit signed integer , or 2147483647 . <h> Additional Formula Syntax <h> Functions <p> Note : These functions are only available in the context the Formula option of a Calc measure , and not in other ( formulas ) in other measure or meter types . <p> Random : A random number . The number will be between and include the values set in LowBound and HighBound . <p> Counter : The number of update cycles from the time the skin is loaded . This number only resets when the skin is unloaded and then loaded again - not when the skin is refreshed . <h> Other Bases <p> The Calc measure allows numbers to be represented numbering systems other than decimal . To use another base , prefix the number with a zero then the letter representing the system you wish to use . The following are accepted prefixes , which are case ( lower ) sensitive : <p> 0b - Binary number ( base 2 ) ( ex : 0b110110 - returns 54 in decimal ) <p> 0o @ @ @ @ @ @ @ @ @ @ 0o123 - returns 83 in decimal ) <p> 0x - Hexadecimal number ( base 16 ) ( ex : 0xF1 - returns 241 in decimal ) <h> Measure Values <p> The use of measure values in the Formula option of a Calc measure does not require the use of Dynamic Variables . Simply omit the and the number value of the measure will be retrieved . If the measure does not have a number value , 0 will be used . Section Variables , Variables and Built-in Variables follow the normal rules . For more information see the Dynamic Cheat Sheet . 
@@6351078 <h> Help <p> Help is available on the forum . Members of the development team and the Rainmeter community offer support and advice on a volunteer basis . <p> For shorter questions , join the discussion in our IRC chat room . Click here to chat in your browser , or use your own IRC client to connect to #rainmeter at irc.freenode.net . <h> Contact <p> For press inquiries or technical problems with the site or forums , email the development team at team@rainmeter.net . Please do not send Rainmeter or skin support requests to this address ; use the forum or chat room instead . Support requests sent to this address will not be answered . 
@@6351080 <h> Rainmeter 4.1 <p> The following are the changes for the 4.1 beta version of Rainmeter . You can safely install the new 4.1 beta version right over top of your existing Rainmeter 4.0 or earlier installation , and nothing you have done will be lost or changed . There is never any need to uninstall any earlier version of Rainmeter to use the newest version . <p> Note : As of Rainmeter 4.0 , Windows XP and Windows Vista are no longer supported by the application . <p> Rainmeter 4.0 and later require at least Windows 7 with Service Pack 1 and the Platform Update applied . These should have been automatically applied several years ago by Windows Update , but if you have Windows Update turned off you may need to get and apply these updates manually . Windows versions later than Windows 7 are fully supported . <p> If you are on Windows XP or Windows Vista , and ca n't or do n't wish to upgrade , you will need to stay on the 3.3 Release version of Rainmeter . <h> Changes in Rainmeter beta 4.1 @ @ @ @ @ @ @ @ @ @ progresses can always be found at Change Announcements . <p> July 7 , 2017 - Revision 2824 <p> Added Rainmeter : Drag Groups can now be created by selecting skins while holding CTRL-ALT , and dragging one skin , or nudging with the arrow keys will move all selected skins . See Multiple Skins for details . <p> Fixed Formulas : Corrected a missing BitwiseXOR formula operator . <p> July 1 , 2017 - Revision 2822 <p> Fixed Languages : Corrected an encoding problem with the Russian language . <p> June 29 , 2017 - Revision 2821 <p> Added Bangs : New ! EditSkin bang . Opens the current or a specified skin . ini file in the text editor defined in ConfigEditor in the Rainmeter settings , or associated with . ini files in Windows . The default will be Windows Notepad.exe . <p> Added Built-in variables : New #CONFIGEDITOR# variable . The path and executable for the text editor defined in ConfigEditor in Rainmeter settings , or the text editor associated with . ini files in Windows . The default will be Windows Notepad.exe . <p> Changed Rainmeter @ @ @ @ @ @ @ @ @ @ window contents while dragging ' system option if disabled in Windows , to allow skins to draw during dragging and use the snapping feature . <p> June 24 , 2017 - Revision 2815 <p> Changed NowPlaying : For Spotify , the artist and song text is obtained from the Windows titlebar of the Spotify application . Spotify used to prefix the text with " Spotify - " , but they do n't anymore . The change to NowPlaying for Spotify fixes that . For iTunes , the change allows the album art to be retrieved for streaming songs as well as of local only songs . <p> Changed Languages : Updated Dutch , Russian and Swedish translations . <p> Fixed Shape meter : Corrected a bug introduced in a previous beta that broke some features of the stroke style , like StrokeLineJoin . <p> June 7 , 2017 - Revision 2807 <p> Fixed Shape meter : Corrected a bug introduced in r2806 that caused transform modifiers on Path shapes to be invalid . <p> June 1 , 2017 - Revision 2806 <p> Added Bangs : Added new ! FadeDuration and @ @ @ @ @ @ @ @ @ @ activating/deactivating a skin , using the fade-in / fade-out effects on mouse over , or when the fade bangs are used . <p> Changed NowPlaying : Changed the measure values for Progress and SetPosition to use floating point numbers instead of integers for increased accuracy . <p> Fixed Shape meter : Corrected a possible crash or unexpected behavior when Combined shapes were defined before their component shapes in the meter . The order of the options in the meter are now of no consequence , as it is with all other meter and measure options . <p> Added Shape meter : Added Path1 alternative of the Path shape . It will use a different form of the SVG fill-rule when the shape is filled with a color or gradient . This determines what parts of a shape with intersecting segments are " inside " the shape and what are " outside " , for purposes of filling the shape with the defined color or gradient . See Path1 shape for details . <p> Added CoreTemp plugin : The author of both the CoreTemp application and Rainmeter plugin , Arthur Liberman @ @ @ @ @ @ @ @ @ @ the plugin . See CoreTemp plugin for details . <p> Fixed Bangs : Fixed an issue when the config parameter of a bang contained a leading or trailing slash . <p> Fixed InputText plugin : Fixed a possible Rainmeter crash if an input box is open and the skin is deactivated . <p> Fixed Shape meter : Fixed a possible Rainmeter crash if the starting point of a Path shape was invalid . <p> Fixed Bitmap meter : Fixed an issue where BitmapExtend=1 would not increase the meters width and/or height , which would cause the meter to ignore DynamicWindowSize and draw outside its bounds and possibly truncate outside the skin window . <p> Fixed Bitmap meter : Fixed an issue where the Padding height values on the meter would be ignored in some situations . <p> Fixed InlineSetting : Corrected an issue where Rainmeter could crash in some cases when an initial empty string was received by a meter using InlineSetting . <p> Fixed Shape meter : Fixed an issue where certain gradients would not display correctly if there were multiple gradients in a shape meter . 
@@6351082 <p> Bangs can also be used from the Windows command line as a parameter to the Rainmeter.exe executable . Example : " C : Program **27;8288;TOOLONG " ! RefreshApp . <p> Note : Many bangs have a Config parameter . Unless otherwise specified , valid values are the config name of a currently loaded skin to be acted upon or * ( asterisk ) to act on all currently loaded skins . When optional and not supplied , the parameter defaults to the current config . If executing a bang with a " config " parameter from the Windows command line , the parameter is always required . <h> Operating System bangs <p> ! SetClipParameter : String <p> Copies the specified string to the Windows clipboard . If the string contains spaces , use quotes around the parameter . <p> String ( required ) : The string to be copied to the clipboard . <p> Example : ! SetClip " This is copied to the clipboard ! " <p> ! SetWallpaperParameters : File , Position <p> Sets the Windows desktop background to the specified image file . <p> File ( @ @ @ @ @ @ @ @ @ @ desktop background . The following formats are supported : . bmp , . jpg , . png , . gif , and . tiff . If the filename contains spaces , you must enclose the filename in quotes . <p> Position ( optional ) : Sets the position of the wallpaper . Valid values are : Center , Tile , Stretch . Windows 7 ( and above ) also have the values : Fit and Fill . <p> Does a full refresh of all skins and reloads the list of configs and Rainmeter.ini settings . This is the same as " Refresh All " from the system tray context menu . The main difference from ! Refresh * is that the skins folder is rescanned . <p> ! Quit <p> Quits Rainmeter . <p> PlayParameter : SoundFile <p> Plays the given sound file once . <p> SoundFile ( required ) : Path and file to be played . Must be a . wav file . <p> Note : While listed in this section for simplicity , the Play commands are not bangs , and do not require or allow the @ @ @ @ @ @ @ @ @ @ call to embedded Windows functionality to play the sound , and only one sound at a time can be managed , Rainmeter-wide . Playing a sound in any skin will stop any other currently playing sounds . <p> Example:Play " SomeFile.wav " <p> PlayLoopParameter : SoundFile <p> Plays the given sound file in a loop . <p> SoundFile ( required ) : File to be played . Must be a . wav file . <p> Example:PlayLoop " SomeFile.wav " <p> PlayStop <p> Stops any currently playing sound started by Rainmeter . <h> Option and Variable bangs <p> ! SetOptionParameters : Meter/Measure , Option , Value , Config <p> Sets an option ( ie. FontSize , Text , Formula , etc. ) of a meter or measure . <p> Sets a new value for a variable . The meter or measure where the variable is used must enable DynamicVariables . ! SetVariable can create a new variable in memory , even if it is not pre-defined in the Variables section . <p> Variable ( required ) : Name of the variable . <p> Value ( required ) : New value to @ @ @ @ @ @ @ @ @ @ " New value ! " <p> ! WriteKeyValueParameters : Section , Key , Value , FilePath <p> Permanently writes a Key=Value pair below a section in a INI formatted file ( such as . ini or . inc files ) . A skin must be refreshed for a new value written to the skin 's . ini or . inc files to be re-read and used . <p> Section ( required ) : If the section does not exist in the file , a new section will be written at the end of the file . <p> Key ( required ) : If the key does not exist under the section , a new key will be written at the end of the section . <p> Value ( required ) : Value to be written . Any previous value will be overwritten . <p> FilePath ( optional ) : If not specified , the current skin file is used . The file must exist and must be located under either #SKINSPATH# or #SETTINGSPATH# . <p> Example : ! WriteKeyValue Variables MyFontName Arial " #@#Variables.inc " <h> Option and Variable group @ @ @ @ @ @ @ @ @ @ Value , Config <p> Sets an option ( ie. FontSize , Text , Formula , etc. ) of meters and measures in the specified group . <p> Group ( required ) : Name of the group . <p> Option ( required ) : Name of the option to be changed . <p> Value ( required ) : New value to be set . @qwx22551 <p> Example : ! SetOptionGroup StringGroup Text " New text ! " <p> ! **26;8317;TOOLONG : Variable , Value , Group <p> Changes the value of a variable in the configs of the specified group . <p> File ( optional ) : If not specified , the next . ini file variant in the config folder is activated . <p> Example : ! ActivateConfig " illustroClock " " Clock.ini " <p> ! **25;8345;TOOLONG : Config <p> Deactivates a skin . @qwx22551 <p> Example : ! DeactivateConfig " illustroClock " <p> ! ToggleConfigParameters : Config , File <p> Activates or deactivates a skin . <p> Config ( required ) : The config to be activated or deactivated . <p> File ( required ) : The . ini @ @ @ @ @ @ @ @ @ @ ! ToggleConfig " illustroClock " " Clock.ini " <p> ! UpdateParameter : Config <p> Overrides the setting of the Update option in Rainmeter and immediately updates the entire skin , all measures and meters . This does not override any UpdateDivider options on measures or meters. @qwx22551 <p> ! RedrawParameter : Config <p> Immediately redraws all visible elements of the entire skin , independent of the normal skin update cycle . @qwx22551 <p> Note : This simply redraws the skin . Meters will use the values obtained when they were last updated . Since by itself ! Redraw accomplishes nothing useful , this bang will always be used in conjunction with bangs that update specific things before redrawing the skin . Depending on the case , this might be with ! UpdateMeasure bangs to immediately update measure values , and certainly ! UpdateMeter bangs to update meter values and options . The idea is to update specific meters and redraw the skin before the next normal update cycle . This can allow immediate visible changes , while not having to force an update of the entire skin . <p> Edits @ @ @ @ @ @ @ @ @ @ in ConfigEditor in Rainmeter settings , or the text editor associated with . ini files in Windows . The default will be Windows Notepad.exe . If no parameters are defined the current skin . ini file will be edited . <p> Overrides the setting of the Update option in Rainmeter and immediately updates the skins in the specified group , all measures and meters . This does not override any UpdateDivider options on measures or meters . <p> Group ( required ) : Group to redraw . <p> ! RedrawGroupParameter : Group <p> Overrides the setting of the Update option in Rainmeter and immediately redraws all visible elements of the specified group of skins . Meters will use the last value obtained for any measures or variables referenced . <p> Overrides the setting of the Update option in Rainmeter or any UpdateDivider on the meter , and immediately updates the meter , obtaining new current values for any measures or variables referenced . Note that the meter is not redrawn with any new values until the next update , or if a ! Redraw bang is used . <p> Meter @ @ @ @ @ @ @ @ @ @ . Use * to update all meters. @qwx22551 <p> Example : ! UpdateMeter " MyMeter " <p> ! MoveMeterParameters : X , Y , Meter , Config <p> Moves the given meter ( not the window ) to the specified position . The new position is relative to the top left corner of the skin . The size of the skin window is re-evaluated after the meter is moved . This would make the skin window become larger or smaller to incorporate all meters . <p> Overrides the setting of the Update option in Rainmeter or any UpdateDivider on the meters in the specified group , and immediately updates the meters , obtaining new current values for any measures or variables referenced . Note that the meters are not redrawn with any new values until the next update , or if a ! RedrawGroup bang is used . 
@@6351084 <h> More <h> MeterStyles <p> Meters can use option values from other meters . Using the MeterStyle option , one meter may inherit options from one or more " parent " sections . <h> Usage <p> If an option is given on both the parent meter and the child meter , the child 's setting overrides the parent 's for that meter . If multiple parents are given , separated by pipes ( ) , options on later parents override those on earlier parents . <p> Inherited options are used just as if they were explicitly written in the child meter . For example , if the #CURRENTSECTION# variable is used in an inherited option , it resolves as the name of the child meter , not the parent . Similarly , if a relative position is used , such as X=5R , the meter immediately previous to the child meter is used , not the parent 's . <p> The only options that can not be inherited are : <p> Meter . The meter type must be explicitly set in order to identify a section as a meter . @ @ @ @ @ @ @ @ @ @ be inherited through more than one generation . In other words , meters can not have " grandparents . " <h> MeterStyle Sections <p> Meters may inherit options from sections that are not meters . A skin section of any name1 that does not have the Meter or Measure option is treated as a MeterStyle . A MeterStyle section is completely ignored by Rainmeter unless it is referenced in the MeterStyle option of a meter . Options that are not valid for the child meter are also simply ignored , which means that the parent and child can be different types . <p> MyChild inherits all options from the MyFirstParent meter and the MySecondParent MeterStyle . This means it is displayed with all of the same font , color , size and other options given for those sections . The second parent 's StringStyle option overrides the first parent 's , which means the child meter displays italic text . Likewise , the child meter 's FontColor option overrides both parents ' , so the text displays with a color of 0,0,255 ( blue ) . 
@@6351088 <p> The Net measures internally measure the traffic across the NIC ( Network Interface Controller ) in bits per second . The measures automatically divide both this internal measurement and any MinValue or MaxValue options by 8 , ( there are 8 bits in a byte ) in order to use and display the values as bytes in measures and meters . <p> Note that this means that any MinValue and MaxValue options on the measures , used to support a percentage in meters , should be set by you in bits , not bytes . Rainmeter itself will do the conversion to bytes automatically when the value(s) are used . <p> Per Second <p> The measured value is the number of bytes per second , factored by the total update rate of the measure , as defined by the Update option for the skin and any UpdateDivider option on the measure . Since the usual display of network traffic is in bytes per second , it is advisable to either set Update=1000 in the Rainmeter section of the skin , or add UpdateDivider options to NetIn / NetOut / @ @ @ @ @ @ @ @ @ @ Updating these measures at a rate other than once a second will return results that are confusing at best . <p> LAN and WAN <p> The measured value is simply the network traffic in and out of the network interface controller ( NIC ) of the computer running the skin . If the computer is on a local network through a router ( LAN ) , the traffic will include all interaction between the computer and both the router and any other devices on the LAN . It will not include traffic directly to and from other devices and the internet ( WAN ) , and so can not be used to determine the amount of internet traffic . <p> You just can not isolate traffic between your computer and another devices on the local network ( LAN ) , from traffic coming from or going to the internet ( WAN ) , nor can you ever know what some other device on your LAN is doing with the internet . If you are on some kind of " metered " connection to the internet , do not try to @ @ @ @ @ @ @ @ @ @ the most " approximate " kind of way . <h> Options <p> The string value Best , which will automatically detect the active interface . <p> The name of the network interface controller . For example , Qualcomm AR938x Wireless Network Adapter . <p> The index number of the network interface controller . If set to 0 , ( default ) all interfaces are measured . <p> Example : Interface=Best <p> Notes : <p> When the option is set to Best , the function will select a " wired " network connection in preference to a " wireless " one , if both are active . <p> When the option is set to Best , DynamicVariables=1 must be set on the measure if you want it to automatically react to changes in the active interface . This should be done if for instance you have a laptop or other computer that you switch between wired and wireless connections . <p> CumulativeDefault : 0 <p> If set to 1 , measures the cumulative network traffic . This can be used to measure the cumulative NetIn , NetOut or NetTotal traffic through @ @ @ @ @ @ @ @ @ @ The network traffic cumulative statistics are persistent and stored when Rainmeter is exited . They can be reset by either using the " Reset statistics " button in the " Settings " tab of the Manage interface , or by using the ! ResetStats bang in a skin . <h> Deprecated Options <p> NetInSpeedNumber of Bytes per second <p> This option replicates the behavior of setting MaxValue on the measure . There is no reason to prefer this over MaxValue . <p> While this option does not automatically divide the value by 8 to convert from bits to bytes , and is just set with bytes to start with , most sites that allow you to measure your total bandwidth , like speedtest.net , will return values in bits per second , and it is easier to just use those values in bits in MaxValue and let Rainmeter do the math . <p> NetOutSpeedNumber of Bytes per second <p> This option replicates the behavior of setting MaxValue on the measure . There is no reason to prefer this over MaxValue . <p> While this option does not automatically divide the @ @ @ @ @ @ @ @ @ @ and is just set with bytes to start with , most sites that allow you to measure your total bandwidth , like speedtest.net , will return values in bits per second , and it is easier to just use those values in bits in MaxValue and let Rainmeter do the math . 
@@6351094 <h> More <h> Win7Audio plugin <p> String : The name of the current sound device . This will be used when the measure is bound to a String meter , or if the string SectionVariable value of the measure is used . <p> Number : The percentage ( 0-100 ) of current volume level . This will be used when the measure is bound to a meter which requires a percentage . This numeric value can also be used in a String meter , by setting the Text option of the meter to the numeric SectionVariable : value of the measure . 
@@6351099 <h> Contents <h> More <h> WebParser : Weather Skin Translations <p> One of the things that is often asked is " How can I translate the weather conditions text , returned by WebParser when creating or editing a weather skin , to my own language ? " <p> This actually pretty simple to do . First find the measure or measures ( often in a weather skin there will be 3 - 5 of them ) which are returning the " weather conditions " text . It will look something like this : <p> **31;8372;TOOLONG @qwx22557 @qwx22564 <p> Url=MeasureYahooWeather <p> StringIndex=34 <p> Note that a weather skin normally works by having a first , primary measure that retrieves all the information from the weather RSS feed in one shot . Then there will be subsequent measures which will extract the individual bits of information from the large array of values returned by this first measure . So you will often see something like : <p> As you can see , the measure **31;8405;TOOLONG is using as its " Url= " the result of MeasureYahooWeather ( our first main RSS measure @ @ @ @ @ @ @ @ @ @ in the array of returned values which holds the first of the " Weather Condition " values , in this case the " Current Conditions " . <p> Since Weather.com / Yahoo Weather return these values in English , you may want to translate them to your native language . To do so , add a line at the end of each of the measures that specifically return " Weather Conditions " text . In our current example , after the line " StringIndex=34 " . <p> Substitute= " Thing to replace " : " Thing to replace with " , " Thing to replace " : " Thing to replace with " <p> The punctuation is important . " Thing to replace " and " Thing to replace with " are enclosed in quotes . There is a colon between them . Pairs are separated with commas . <p> We use RegExpSubstitute so a regular expression comparison is used . Then in the Substitute option , we first tell it to be case insensitive ( ? i ) , and look for very specific strings by using start-of-string and @ @ @ @ @ @ @ @ @ @ is to it . In our example above , " Cloudy " will be replaced with " Bew+lkt " when the text is later displayed in a meter . <p> What " Weather Conditions " text codes are returned by Yahoo Weather so I know what to translate ? " 
@@6351123 <p> RSS and Atom feeds follow certain patterns that make them fairly easy to parse . While there are differences between the RSS and Atom standards , which we will touch on a bit later , let 's use a simple RSS output to outline how they are laid out . <p> &lt; ? xml version= " 1.0 " encoding= " UTF-8 " ? &gt; <p> &lt;rssversion= " 2.0 " &gt; <p> &lt;channel&gt; <p> &lt;title&gt;RSS Title&lt;/title&gt; <p> &lt;description&gt;This is an example of an RSS feed&lt;/description&gt; <p> LONG ... <p> &lt;lastBuildDate&gt;Mon , 06 Sep 2009 16:45:00 +0000 &lt;/lastBuildDate&gt; <p> &lt;item&gt; <p> &lt;title&gt;Example entry&lt;/title&gt; <p> &lt;description&gt;Here is some text containing an interesting description . &lt;/description&gt; <p> LONG ... <p> &lt;pubDate&gt;Mon , 06 Sep 2009 16:45:00 +0000 &lt;/pubDate&gt; <p> &lt;/item&gt; <p> &lt;/channel&gt; <p> &lt;/rss&gt; <p> As you can see , the pattern is that there is a header section which contains " tags " for the title , description , link and lastBuildDate of the overall feed . This is followed by a series of one or more item entries , each of which has its own set of **30;8503;TOOLONG tags . It @ @ @ @ @ @ @ @ @ @ in a feed . However , in an RSS feed , the ones we are going to look at are the ones that are certain to be there , and will have the information we want for a simple RSS skin . <h> Sample RSS feed <p> What we want to do is take some representative example of an RSS feed , and get that header title , link and last build date information , then a few " items " , with their title , link and publication dates . Then we will build a simple skin to display our results . <p> Since a feed is meant to be read by a computer program that will parse the data from the XML / HTML output , there is often no attempt made to have the text be particularly formatted or easy to read . Sometimes a feed in your browser WILL have some HTML formatting codes to make it easier to view . If it does , you should right click and use " view page source " ( or some variant of that depending on your browser @ @ @ @ @ @ @ @ @ @ output and not formatted data . <p> If we look through this output , we can spot the patterns of XML " tags " that we described above . <p> We have the title of the feed in&lt;title&gt;BBC News - Home&lt;/title&gt; a link to the feed LONG ... and the date the feed was last updated **26;8535;TOOLONG , 13 Nov 2013 14:26:44 **25;8563;TOOLONG . <p> We can then see the first of our &lt;item&gt; tags <p> This is followed by a title of&lt;title&gt;UK recovery takes hold , says Bank&lt;/title&gt; a link LONG ... and a bit later on , a publication date of&lt;pubDate&gt;Wed , 13 Nov 2013 12:46:25 GMT&lt;/pubDate&gt; . <p> We know when we are done with any given item when we see the &lt;/item&gt; tag . <p> This is followed by more &lt;item&gt; tags , each with their own titles , links and publication dates . <h> Building our skin <p> First , let 's get the skin started . @qwx22547 @qwx22570 @qwx22553 <p> Now we will start building our first WebParser measure . <p> MeasureSite @qwx22557 @qwx22564 <p> URL=http : **31;8590;TOOLONG <p> The next thing we will @ @ @ @ @ @ @ @ @ @ guide is not a tutorial for the WebParser measure , nor a tutorial for Regular Expressions . However , at a high level what we want to do is use a regular expression in the " parent measure " to search the feed and capture parts of it into StringIndex numbers that we will use later in " child measures " . <p> We can begin by getting the title of the feed into a StringIndex . <p> MeasureSite @qwx22557 @qwx22564 <p> URL=http : **31;8623;TOOLONG <p> RegExp= ( ? siU ) &lt;title&gt; ( . * ) &lt;/title&gt; <p> So we are searching for &lt;title&gt; , capturing ( ) any number of characters of any kind . * into StringIndex number 1 , and ending the capture when the text &lt;/title&gt; is found . <p> Let 's extend that RegExp option and get the link for the site and the last build date into StringIndex numbers 2 and 3 . <p> Notice that we use . * without parentheses to " skip " any number of any characters , without capturing anything . <p> So now we have those three bits @ @ @ @ @ @ @ @ @ @ and 3 . We can build some child WebParser measures to contain each of those values , that we can then use in meters . <p> The added parsing code will skip to the first &lt;item&gt; , then find the &lt;title&gt; , &lt;link&gt; and &lt;pubDate&gt; . It will put them in StringIndex numbers 4 , 5 and 6 . Just count the instances of ( . * ) in the expression to determine which StringIndex numbers contain each value . <p> Following the same pattern as above , we can add new child measures to reference these StringIndex numbers . <p> MeasureItem1Title @qwx22557 @qwx22564 @qwx22571 <p> StringIndex=4 <p> MeasureItem1Link @qwx22557 @qwx22564 @qwx22571 <p> StringIndex=5 <p> MeasureItem1Date @qwx22557 @qwx22564 @qwx22571 <p> StringIndex=6 <h> Adding more feed items <p> Adding another item is as simple as extending our RegExp option to get the next &lt;item&gt; into the next three StringIndex numbers . <h> That RegExp is getting pretty long ... <p> If you are retrieving a number of items , let 's say five for instance , that RegExp is going to get pretty long and a bit hard to debug . @ @ @ @ @ @ @ @ @ @ simplify it a bit . Go back up to the top of your skin right under the Rainmeter section , and create a new Variables section . <p> Since the variable #Item# is replaced in the RegExp with LONG ... we still get our parse of the site header information into StringIndex numbers 1 , 2 and 3 , and our first &lt;item&gt; into StringIndex numbers 4 , 5 and 6 . However the RegExp is quite a bit shorter and easier to read and debug . Adding more items is as simple as repeating that variable . <p> That will get a total of five items , with the total of StrinIndex numbers at 18 . Now you just create all the child measures you need to pick off those 18 values , and display them as you like in meters . <h> A few more advanced suggestions <p> DecodeCharacterReference <p> An RSS or Atom feed can contain the HTML codes for some characters , ones that you would want to display as the actual character instead of the code . For instance , the raw data might contain @ @ @ @ @ @ @ @ @ @ You do n't want to dislay the code , but the actual &lt; . <p> If you add the option **26;8656;TOOLONG to any or all desired child measures , Rainmeter will translate and display the correct character for the embedded HTML code . <p> MeasureItem1Title @qwx22557 @qwx22564 @qwx22571 <p> StringIndex=4 <p> **26;8684;TOOLONG <p> Generally , you will need this only on the " title " child measures , as the " link " and " pubdate " entries will almost never contain any of these HTML codes . <p> Substitute <p> One of the other things you will run into in feeds , more often in Atom feeds than in RSS , is the &lt; ! CDATA &gt; tag around some data . It will take the form &lt; ! CDATASome Text in here&gt; . This special tag construct in HTML just means that any text inside the opening &lt; ! CDATA and the closing &gt; will be displayed as the characters , without any problems with characters that are illegal in XML data . ( like &amp; , &lt; , &gt; " and others ) <p> While it would @ @ @ @ @ @ @ @ @ @ " parse around " this tag , you certainly do n't want that text displayed as part of your skin output . You can use the Substitute option to find and remove this text on any or all child measures . Note that sometime the feed will start and end the tag with &lt; and &gt; and sometimes not . We should use Substitute to take care of both cases . <p> MeasureItem1Title @qwx22557 @qwx22564 @qwx22571 <p> StringIndex=4 <p> **26;8712;TOOLONG <p> LONG ... <p> Regular Expression Substitute <p> Sometimes a feed will be formatted in such a way that there are leading spaces or tabs in front of a value . An example would be : <p> &lt;item&gt; <p> &lt;title&gt; <p> This is an item title <p> &lt;/title&gt; <p> &lt;/item&gt; <p> We do n't want to capture and display those leading tab characters in this example , so we can use the RegExpSubstitute option instead of the normal Substitute , so we can take advantage of the additional power of regular expressions in our substitution . <p> We are using the regular expression construct at the beginning to say " @ @ @ @ @ @ @ @ @ @ " white space " characters s+ , then change them to empty strings " " . <p> Note that since the and characters are " reserved " in regular expressions , we needed to " escape " them using the character in our Substitute when we use RegExpSubstitute . <p> Lookahead Assertions <p> In our example above , we used our #Item# variable in our RegExp option to retrieve five " items " from the feed . What if there are currently only four items in the feed ? Our regular expression will fail , and no information at all will be obtained . <p> You can protect against this by using what is known in regular expressions as a " lookahead assertion " . What this does is basically say " if the following text exists , then parse it this way . If not , then just skip that part of the regular expression without failing " . The format for using a lookahead assertion in regular expressions looks a bit daunting , but in concept it is not too hard to wrap your head around . I @ @ @ @ @ @ @ @ @ @ Assertions . <p> Then we are saying " look ahead " ( ? for a string that equals ( ? = . *&lt;item&gt; ) " Note the trailing parentheses to end the " look for " part of the expression . If the string . *&lt;item&gt; is found , then execute the the parse LONG ... Note that then we follow the entire thing with another ending parentheses , to end the " look ahead " part of the expression . <p> If the lookahead assertion fails , only that part contained in it will be ignored , and any other parts of the expression will still be evaluated and return data . <h> Putting it all together <p> Here is a full skin , using all we have learned so far , that will parse and display the first five items from our RSS feed site . You can copy this code and paste it into a new skin to test it out , modify the output meters as and if you like , and you are well on your way ! <h> Atom vs . RSS feeds <p> @ @ @ @ @ @ @ @ @ @ RSS feed site . However , if the site you are parsing is based on the Atom feed standard , there are some differences we need to take into account . Here is a sample of an Atom feed : <p> As you can see , there are differences in both the names of the " tags " used to identify data values , and some differences in formatting within the tags themselves . <p> RSS <p> &lt;item&gt; <p> &lt;title&gt; <p> &lt;link&gt; <p> &lt;pubDate&gt; <p> Atom <p> &lt;entry&gt; <p> &lt;titletype= " SomeValue " &gt; <p> &lt;linkhref= " SomeSite.com " /&gt; <p> &lt;updated&gt; <p> Fortunately , we can for the most part just change our RegExp to account for these differences , and the balance of what we learned making our RSS skin works just fine . It should also be noted that the order of the tags in different Atoms feeds can vary , where RSS feeds generally have the tags always in the same order . This may mean some re-ordering of the StringIndex numbers you use with your measures . 
@@6351128 <h> Contents <h> More <h> Notepad Alternatives <p> By default , the Rainmeter skin text files in the . ini format will be associated with Windows Notepad text editing application . While Notepad is a perfectly good little text editor , we really recommend that you look at a couple of alternatives if you are going to be working with Rainmeter skins . A more powerful " programmers text editor " can add a lot of useful functionality for searching and replacing text , finding typos and other problems with your skin files , and working with color coding of the files to make it much easier to follow and edit the code . <h> Notepad <p> Notepad is the built-in text editor included with Windows . It will be the default editor used by Rainmeter unless you specify otherwise . <p> It is a pretty simple and plain text editor , with no line numbers , color coding or other advanced features . <h> Notepad++ <p> We recommend that after you install the latest Notepad++ , you get the RainLexer addon by poiru , which will add custom color @ @ @ @ @ @ @ @ @ @ Text is another full-featured programmer 's text editor available at http : //www.sublimetext.com/ . It is not free , but can be run for an extended length of time in " unregistered " mode to try it out . <p> We recommend that after you install the latest Sublime Text , you get the Rainmeter Package addon by merlinthered , which will add custom color coding for Rainmeter skins and lots of other nice Rainmeter specific functionality . <h> Associating skin files with your desired editor <p> Once you have decided on and installed a better text editor , you will probably want to associate the common Rainmeter file types of . ini , . inc , and . lua with the application . This can be done in Windows Explorer : <p> Open the folder that contains the file you want to change . <p> Right-click the file you want to change and then , depending on the type of file , either click Open with or point to Open with and then click Choose default program . <p> Click the program you want to use to open the @ @ @ @ @ @ @ @ @ @ If you want all files of that type to open in the same software program , select the Always use the selected program to open this kind of file check box , and then click OK . <p> If you want only that file to open in the software program this one time , clear the Always use the selected program to open this kind of file check box , and then click OK . <p> Alternatively , if you do not wish to associate the file types with your editor in Windows , but still want to have Rainmeter use the editor when editing skins , you can add a setting for ConfigEditor to your Rainmeter.ini file . Simply enter the full path to the executable for your text editor . 
@@6351130 <h> More <h> FileView plugin <p> Plugin=FileView retrieves information about folders and files . <p> The plugin gathers all the folder and file names , sizes , dates and icons in the selected folder . It counts the number of files and folders and obtains the combined size . It can also search recursively through all the subfolders of the selected folder to obtain the totals for count and size . <p> FileView operates with a " parent / child " approach . A main " parent " FileView measure is used to obtain all the information for a selected folder , and then " child " measures are used to read individual entries from the parent using the Path= option . <h> Usage <p> FileView measures take the form : @qwx22547 @qwx22570 @qwx22553 <p> MeasureFolder @qwx22557 @qwx22563 <p> Path= " C : Program FilesRainmeter " <p> ShowDotDot=0 <p> ShowFolder=0 <p> Count=3 <p> In this example , this " parent " measure will obtain name , size , date and icon information about all files in the selected folder , then create three Index values for the first three files @ @ @ @ @ @ @ @ @ @ FileView measures : <p> MeasureChild1 @qwx22557 @qwx22563 @qwx22562 @qwx22569 <p> Index=1 <p> MeasureChild2 @qwx22557 @qwx22563 @qwx22562 @qwx22569 <p> Index=2 <p> MeasureChild3 @qwx22557 @qwx22563 @qwx22562 @qwx22569 <p> Index=3 <p> The values of the three child measures are now the FileName information parsed into Indexes 1 through 3 by the parent measure . These can then be used with MeasureName and other options in meters . <p> Another way to use the information in child measures is : <p> MeasureChild1 @qwx22557 @qwx22563 @qwx22562 @qwx22569 <p> Index=1 <p> MeasureChild2 @qwx22557 @qwx22563 @qwx22562 <p> Type=FileSize <p> Index=1 <p> MeasureChild3 @qwx22557 @qwx22563 @qwx22562 <p> Type=FileDate <p> Index=1 <p> The values of the three child measures are now the FileName , FileSize and FileDate information from the first file ( Index 1 ) of the parent measure . <p> In these examples , three indexes are created due to the Count=3 option on the parent measure . However , the information for all files and / or folders are obtained by the plugin , and subsequent or previous entries can be assigned to the three indexes by using ! CommandMeasure statements described below . This will @ @ @ @ @ @ @ @ @ @ and / or folders in a dynamic way . <p> If it is desired that a folder be monitored for new or changed files , the Update plugin command should be used in conjunction with an OnUpdateAction statement to keep the measure current with changing disk information . Be aware that having the plugin physically access the disk has a performance cost , and care should be taken to use an appropriate UpdateDivider . <p> If set to 1 , the entries are sorted in ascending order . Otherwise a descending order is used . <p> WildcardSearchDefault : * <p> Wildcards used to filter included files and/or folders . Standard * and ? characters can be used . <h> Child measure options <p> IndexDefault : 1 <p> Index of the file or folder from the parent measure . This should not exceed the Count number in the parent measure . If it does , the items will wrap around . For example , if Count=8 , Index=9 will be treated as Index=1 . <p> IgnoreCountDefault : 0 <p> If set to 1 , the Index will represent the actual index @ @ @ @ @ @ @ @ @ @ is useful to display a particular file or folder at all times ( like the .. folder ) . <p> TypeDefault : FolderPath <p> Type of information to obtain from the parent measure . <p> Information for path returned by the parent measure <p> FolderPath : Path of folder returned in parent Path , with trailing " " <p> FolderSize : Size in bytes of folder returned in parent Path <p> FileCount : Count of files in folder returned in parent Path <p> FolderCount : Count of folders in folder returned in parent Path <p> Information for object returned by the child Index number <p> FileName : Name of indexed object , folder or file <p> FileType : Extension only with no " . " for indexed file . Empty with folder <p> Path and filename of the location ( relative to the skin folder ) to save icons when Type=Icon . If no path is given , the icons are saved in the skin folder and are named " iconX.ico " , where " X " is the index number . <p> For example , if Count=8 , and @ @ @ @ @ @ @ @ @ @ a total of 4 pages . If items 8-15 ( page 2 ) are being displayed , the PageUp will decrease the page count by one changing the displayed items to items 0-7 ( page 1 ) . <p> This will change the path to the folder one higher in the folder structure . Behaves like clicking on the .. folder . <h> Child measure commands <p> FollowPath <p> If the index referenced in the child measure is currently a folder , then the parent measure 's Path is updated to the new path . If it is a file , then it is opened with the default Windows associated application . In order to better simulate Windows behavior , it is recommended that this command be used with a double-click action . <p> This will open the file or folder that the index represents . If it is a folder , the folder is opened in Windows Explorer . If it is a file , then it is opened with the default Windows associated application . In order to better simulate Windows behavior , it is recommended that this @ @ @ @ @ @ @ @ @ @ commands <p> ContextMenu <p> Opens the context menu for the item represented by the measure . The context menu will appear at the current mouse location if the mouse is hovering over the skin , otherwise it will appear at the top left corner of the skin . This command can be used on a parent or child measure . <p> Example : ! CommandMeasure " MeasureName " " ContextMenu " <p> Parent measures have the extra ability to open the context menu for a manually defined file/folder . See the example below . 
@@6351146 <h> Win7Audio plugin <p> String : The name of the current sound device . This will be used when the measure is bound to a String meter , or if the string SectionVariable value of the measure is used . <p> Number : The percentage ( 0-100 ) of current volume level . This will be used when the measure is bound to a meter which requires a percentage . This numeric value can also be used in a String meter , by setting the Text option of the meter to the numeric SectionVariable : value of the measure . 
@@6351172 <p> There are no text formatting options possible with ToolTipText . The font , colors and sizes are the ones built into the standard tooltip behavior in the Windows operating system . <p> On a String meter , numeric formatting options are forced to AutoScale=1 , Scale=1 , NumOfDecimals=0 , Percentual=0 on the tooltip when values from the meter are used with %1 , %2 etc . To have more control over numeric formatting , SectionVariables should be used instead . Be sure to use DynamicVariables=1 on the meter when section variables are used . <p> ToolTipTitle <p> Title of the tooltip . Only one line of text can be used . <p> ToolTipIcon <p> Specifies the icon to use for the tooltip . This can be the path to an . ico file , or one of the following preset icons : <p> Info <p> Warning <p> Error <p> Question <p> Shield <p> Note:ToolTipTitle must be specified to use ToolTipIcon . <p> ToolTipTypeDefault : 0 <p> If set to 1 , a balloon tooltip is displayed . Otherwise a normal tooltip is displayed . <p> ToolTipWidthDefault : 1000 <p> @ @ @ @ @ @ @ @ @ @ reached , the text will automatically wrap . <p> Note : As a ToolTipTitle can not be wrapped , do not set this width less than the length of the title , or there could be unexpected results . <p> ToolTipHiddenDefault : 0 <p> If set to 1 , the tooltip is not displayed . <p> Note : This option can also be used in the Rainmeter section to hide all tooltips in the skin . 
@@6351205 <h> Contents <h> More <h> Developers <p> This page is intended for people who want to work with the source code for Rainmeter . This can be to make or suggest changes to the project C++ source code , or to create plugins for Rainmeter in C++ or C# . In addition , there is information on interacting with Rainmeter from external applications . <p> The Rainmeter project is primarily written in C++ using Microsoft Visual Studio 2017 . In addition , custom plugins can be written and distributed separately from the official Rainmeter project using C++ or C# . This page assumes familiarity with Visual Studio and either C++ or C# . <h> Project Source Code <p> If you simply wish to obtain the source code to examine it or make a local change to how something works for your own use , you can simply download a . zip file from Download ZIP . <p> The only software you will need is Microsoft Visual Studio 2017 or the free Microsoft Visual Community which can be obtained at Download Visual Studio . Be sure to download and apply any @ @ @ @ @ @ @ @ @ @ containing the project code from the . zip file , and open Rainmeter.sln in Visual Studio . You can then set the desired Solution Configuration and Solution Platforms fields and build the solution to create Debug or Release versions in x32 or x64 architectures . <h> Creating a Project Repository <p> To do any serious work on the project source code , or to get involved in the development of Rainmeter , you will want to create a local repository and install a couple of tools to help manage your copy of the project . <p> Then , unless you are a fan of the Windows cmd.exe command line , it can be useful to install a Windows front-end client to help manage your Git repositories . There are several options for that , two of the more popular are TortoiseGit for Windows and GitHub for Windows . <p> To create your repository of the project code , first create an account on GitHub.com . Then from the Rainmeter Repository on GitHub you can fork the project to your account . Now you can use either the Git command line @ @ @ @ @ @ @ @ @ @ repository from your personal fork of the project on GitHub to a folder on your PC . <h> Submitting Code Changes <p> If you make changes to the project source code that you would like to suggest as changes to the official build , you can make the changes in your personal GitHub repository , then at the Rainmeter repository , create a pull request with your code changes . It will expedite things if you contact the Rainmeter Team either on the forums at Bugs and Feature Suggestions or on IRC at #Rainmeter on Freenode to discuss the desired changes . <h> Creating a Full Rainmeter Build <p> In order to create a full build of the Rainmeter installer , you will need one additional piece of software . <p> Now you can simply run the Build.bat batch file in the Build folder of your local repository . If there are any " not found " errors when you run the batch file , check the paths in the Set commands at the top of the file . <p> Use Build.bat RELEASE to build a non-beta installer . <p> @ @ @ @ @ @ @ @ @ @ obtain a certificate from a service that provides them , and create a Certificate.bat file alongside Build.bat with the following contents : <p> set **29;8834;TOOLONG <p> set CERTKEY=certpassword <h> Creating Rainmeter Plugins <p> Note : The Rainmeter Skin Installer program , which is used by end-users to install the skins containing your plugin , will not allow the same or older version of the plugin to overwrite a newer version . The means that it is critically important that every release of your plugin must have the " File version " number incremented . If you do n't do this , your plugin will not be distributed . <p> The only software you will need is Microsoft Visual Studio 2017 or the free Microsoft Visual Community which can be obtained at Download Visual Studio . Be sure to download and apply any Visual Studio Updates when prompted . <p> Then you will want to download the Rainmeter Plugin SDK to a folder on your PC . The SDK contains the API code needed to create plugins , as well as some starting and sample plugin code for C++ and C# @ @ @ @ @ @ @ @ @ @ as a starting point for your code . <p> PluginSystemVersion An example plugin that returns the Windows system version to a skin . <p> PluginParentChild An example plugin demonstrating how to do " parent-child " functions in your plugin . <p> To create a plugin , the simplest approach is to make a copy of and rename the PluginEmpty example folder and files . Use GuidGen.exe from Visual Studio with Format 4 to generate a new GUID and add this and other appropriate changes to the . vcxproj or . csproj files . Open either SDK-CPP.sln ( C++ ) or SDK-CS.sln ( C# ) in Visual Studio , add your new plugin project to the solution , develop your code in this template and build your plugin . Be sure that you use the Solution Configuration and Solution Platforms fields and build both x32 and x64 architecture release versions of your plugin . dll before you distribute it . <h> Plugin API Documentation <h> Using SendMessage with External Applications <p> The Rainmeter window message API can be used to query or control Rainmeter from external applications . The examples are @ @ @ @ @ @ @ @ @ @ from any programming platform that can send window messages to running applications . <h> Query <p> The following sample demonstrates how to retrieve a running skin 's window handle based on the skin config name . Note that the returned handle should only be used to check if the skin is active or not -- do not abuse the handle . <p> C/C++ code : <p> // Usage : GetSkinWindow ( L " illustroClock " ) ; <p> // Return value will be NULL if config not found or a valid HWND otherwise <p> **25;8865;TOOLONG <p> HWND GetSkinWindow ( const WCHAR* configName ) <p> <p> HWND trayWnd = FindWindow ( L " RainmeterTrayClass " , NULL ) ; <p> if ( trayWnd ) <p> <p> COPYDATASTRUCT cds ; <p> cds.dwData = 5101 ; <p> cds.cbData = ( DWORD ) ( wcslen(configName) + 1 ) * sizeof(WCHAR) ; <p> cds.lpData = ( void* ) configName ; <p> return ( HWND ) SendMessage ( trayWnd , WMCOPYDATA , 0 , ( LPARAM ) &amp;cds ) ; <p> <p> returnNULL ; <p> <p> AutoIT code : <p> ; Usage : $Return = GetSkinWindow @ @ @ @ @ @ @ @ @ @ be 0 if config not found <p> #include &lt;SendMessage.au3&gt; <p> Func **28;8892;TOOLONG <p> Local Const $hWnd = WinGetHandle ( " CLASS:RainmeterTrayClass " ) <p> If $hWnd &lt;&gt; 0 Then <p> Local Const $iSize = StringLen($szConfigName) + 1 <p> Local Const $pMem = DllStructCreate ( " wchar " &amp; $iSize &amp; " " ) <p> DllStructSetData ( $pMem , 1 , $szConfigName ) <p> Local Const $pCds = DllStructCreate ( " dword ; dword ; ptr " ) <p> DllStructSetData ( $pCds , 1 , 5101 ) <p> DllStructSetData ( $pCds , 2 , ( $iSize * 2 ) ) <p> DllStructSetData ( $pCds , 3 , DllStructGetPtr($pMem) ) <p> Local Const $WMCOPYDATA = 0x004A <p> Return SendMessage ( $hWnd , $WMCOPYDATA , 0 , DllStructGetPtr($pCds) ) <p> EndIf <p> Return 0 <p> EndFunc <p> The following code demonstrates how to retrieve important application path information for Rainmeter from your external application . <p> AutoIT code : <p> **31;8922;TOOLONG <p> **34;8955;TOOLONG <p> **36;8991;TOOLONG <p> **25;9029;TOOLONG <p> $RAINMETERQUERYWINDOW = WinGetHandle ( " CLASS:RainmeterTrayClass " ) <p> $WMQUERYRAINMETER = $WMAPP + 1000 <p> **26;9056;TOOLONG = 4101 <p> **29;9084;TOOLONG = 4102 <p> **28;9115;TOOLONG = @ @ @ @ @ @ @ @ @ @ <p> Dim $PathsArray4 <p> $hGUI = GUICreate ( " " , 1 , 1 , -1 , -1 ) <p> If Not ProcessExists ( " Rainmeter.exe " ) Then <p> MsgBox ( 16 , " GetPath Error " , " Rainmeter must be running to use GetPath. " ) 
@@6351216 <h> More <h> User Interface <p> Rainmeter can be controlled using several user interface windows built into the application . Choose one of the items to see details on how they are used to operate the application , install , load and manage skins , monitor and debug during skin editing , and save and load the current skin layout and settings . <p> Much more than the usual simple About dialog in applications , the About window in Rainmeter provides powerful tools for monitoring the current status of the application and skins . Monitor the log file for information and errors , watch current values of variables and measures for running skins , and view the status and version of the application and plugins . <p> In addition to the Manage window , Rainmeter can be completely controlled from context menu items available by right-clicking the application 's notification area ( system tray ) icon or an individual skin on the screen . 
@@6351225 <h> More <h> Setting Up <h> System Requirements <p> Rainmeter will run on Windows 7 ( Service Pack 1 and Platform Update required ) and above . The same installer may be used on either 32-bit or 64-bit systems , and all skins and features are compatible with both architectures . <p> Rainmeter is not available for non-Windows systems , including Mac OS and Linux , and there are no plans to support these operating systems . <h> Download <p> There are two versions of Rainmeter available : the final release of the current version , and the beta release of the next version . Betas are often released weekly , and final versions are released every few months . Despite the " beta " label , every release of Rainmeter is stable and backwards-compatible with previous versions . The only difference is that beta features may ( rarely ) be changed or removed before the next version becomes final . <p> We recommend the beta version for most users who want to get the latest features and bug fixes . However , if you do not want to risk @ @ @ @ @ @ @ @ @ @ in a future release , use the final version instead . <p> Installing Rainmeter is mostly automatic . <h> Install <p> To install Rainmeter , run the installer program that you downloaded , and follow the instructions . ( See Installing Rainmeter if you need more detailed instructions , including steps for installing Rainmeter as a portable application. ) 
@@6351231 <h> Contents <h> More <h> NetIn/NetOut Alternative <p> Tip by TitaniumDust <p> Depending on your configuration , sometimes Windows ( and thus Rainmeter ) seems to get confused about the Interface= number required for the Measure=NetIn and Measure=NetOut built-in measures for retrieving the amount of data being sent and received over your NIC . ( Network Interface Card ) <p> An alternative is to use the Perfmon Plugin . This uses the actual text name of your NIC instead of the number assigned by Windows , and seems to be more reliable for some users . <p> Using Measure=Plugin with the " Perfmon " plugin as in the examples below , set " PerfMonInstance " to the name of your NIC . To find the name , you can run Perfmon.exe in Windows and press the " Add " button . ( the green plus sign above the graph on the right ) Select " Network Interface " under " Available Counters " and find your NIC under " Instances of selected objects " . Then use the name of your NIC card , EXACTLY as it appears in Perfmon.exe @ @ @ @ @ @ @ @ @ @ plugin in your measure . 
@@6351248 <p> List : Returns a list of all visible networks . The list is automatically separated by line-breaks n , so each network appears on a separate line . It will also display the PHY , Encryption , and AUTH algorithms next the the network SSID . <p> WiFiIntfIDDefault : 0 <p> Only use this if you have more than 1 wireless interface adapter ( which may include any bluetooth or infrared receivers ) . If you do not get any response from the measure with this value at 0 , then try other values starting from 1 , then 2 and so on . <p> WiFiListStyleDefault : 0 <p> This allows you to control what information appears along with the names of all visible networks when WiFiInfoType=List . Valid values are : <p> 0 : SSID . <p> 1 : SSID @band . <p> 2 : SSID ( **25;9176;TOOLONG ) . <p> 3 : SSID @band ( **25;9203;TOOLONG ) . <p> WiFiListLimitDefault : 5 <p> Allows you to control the number of networks that are will be displayed when used with WiFiInfoType=List . <p> Note : The list is @ @ @ @ @ @ @ @ @ @ each network ( i.e. strongest first , weakest last ) . 
@@6351249 <h> WebParser : Using StringIndex2 <p> StringIndex2 The second string index is used when using a RegExp in a measure that uses data from another WebParser measure ( i.e. the URL points to a parent measure . In this case the StringIndex defines the index of the result of the parent measure 's RegExp and the StringIndex2 defines the index of this measure 's RegExp ( i.e. it defines the string that the measure returns ) . <p> First , here is the entire code of a little skin to demonstrate how to use this feature . Go ahead and create this and run it to see it in action : <p> Notice we are doing something a bit different here . Instead of fully parsing the site into many , many StringIndexes on the main measure , we are just getting the main title and link for the site into StringIndexes 1 and 2 , then getting the entire contents of each &lt;item&gt; into StringIndexes 3 , 4 and 5 . <p> Now let 's skip the measures for the main title and link , they are done the @ @ @ @ @ @ @ @ @ @ : <p> MeasureItem1Title @qwx22557 @qwx22564 @qwx22571 <p> LONG ... <p> StringIndex=3 <p> StringIndex2=1 <p> Substitute=#Sub# <p> What we are doing is using the StringIndex2= feature to get the &lt;title&gt; of the first &lt;item&gt; from the feed . We define StringIndex=3 , which will return the entire first &lt;item&gt; from the main WebParser measure at the top . Then , unlike a normal " child " measure in WebParser , we use a RegExp= to parse the information in that StringIndex=3 and return the single bit of information we want from that &lt;item&gt; in a StringIndex2=1 on this measure . <p> Remember , the way StringIndex2 works is that IF a WebParser measure is using an earlier WebParser measure as the Url= AND the measure has a RegExp= on it , then the RegExp= is applied to the data in StringIndex , and the result is returned in StringIndex2 . <p> The " value " of the measure , when used for instance in a MeasureName= option in a meter , is what is returned in StringIndex2 . <p> We can repeat this process to get the link of the first @ @ @ @ @ @ @ @ @ @ ( ? siU ) &lt;link&gt; ( . * ) &lt;/link&gt; " <p> StringIndex=3 <p> StringIndex2=1 <p> Note that once again we are getting the entire &lt;item&gt; data from StringIndex=3 of the main measure , then using a RegExp= to get just the link from that information into StringIndex2=1 on this measure . <p> It might be obvious by now , but when we want to carry on with the second &lt;item&gt; from the feed , we use : <p> MeasureItem2Title @qwx22557 @qwx22564 @qwx22571 <p> LONG ... <p> StringIndex=4 <p> StringIndex2=1 <p> Substitute=#Sub# <p> So now we are getting the information for the entire second &lt;item&gt; from the main measure , which is in StringIndex=4 on that measure . Then we parse it with a RegExp= and the result is returned in the StringIndex2=1 on this measure . <p> Play with this a bit , and you might find that it can save a lot of extra parsing and creating huge RegExp= options to parse absolutely everything out of a site all at once up front . Get the main site in big chunks , then deal with the chunks as @ @ @ @ @ @ @ @ @ @ Hint : This can be a nice way to get around the limit of 99 StringIndex numbers on any single WebParser measure ... 
@@6351274 <h> Contents <h> More <h> WebParser : Relative Paths <p> There is an issue with retrieving and displaying images from web sites when the source HTML has them referred to as a " relative path " to the image . <p> WebParser can download and display images by doing a WebParser Measure which gets the full URL and name of the image , and setting " Download=1 " on the Measure . Then a Meter using Meter=Image with a MeasureName=xxxx referring to the Measure which downloaded the image will display the downloaded image . <p> Problem <p> The problem came in when the image was referred to in the web site HTML using a relative path to the image . An example is the logo at the top of the Rainmeter forums : <p> As you can see , the full URL is not included in anything that WebParser can search for , so Download=1 fails ... <p> Solution <p> A WebParser Measure can append the RESULTS of another WebParser Measure in the " URL " line by referencing the Measure in square brackets . This means you can use @ @ @ @ @ @ @ @ @ @ the image you want , and use this information in a second Measure where you hard code the URL and then pass the result of the search for the image to the second Measure . <p> In order to have the two measures work in the correct " order " , so the second one is n't looking for the relative URL before the first one is done getting it , you should make the second measure " dynamic " , and use ! CommandMeasure SecondMeasure " Update " as a FinishAction on the first measure . That way the first measure will " drive " the second one . @qwx22547 @qwx22570 @qwx22553 @qwx22549 <p> MeasureImageLocation @qwx22557 @qwx22564 <p> UpdateRate=1800 <p> Url=http : //forum.rainmeter.net/ <p> RegExp= ( ? siU ) &amp;lt ; img src= " ( . * ) " @qwx22567 <p> FinishAction= ! CommandMeasure MeasureImageDownload " Update " <p> MeasureImageDownload @qwx22557 @qwx22564 <p> UpdateRate=1800 <p> LONG ... @qwx22567 @qwx22552 <p> Download=1 <p> MeterDisplayImage @qwx22559 <p> **32;9230;TOOLONG <p> W=200 <p> PreserveAspectRatio=1 <p> Here we are using the first Measure MeasureImageLocation to get the relative path and filename of the image @ @ @ @ @ @ @ @ @ @ combine the known URL and the information in a dynamic way **25;9264;TOOLONG to create a fully loaded Measure which will succeed in downloading the image ... Then we just display it . 
@@6351292 <h> More <h> New Skin <p> The New Skin dialog is accessed through the Manage interface . It will open a dialog that will allow you to add new skin folders and files to Rainmeter . The dialog is opened by clicking the " Create a new skin " button at the top of the Manage panel , or by right clicking an existing skin folder and selecting " Create a new skin " from the context menu . <p> Using the button will create a new root-level config folder , and allow you to add sub-folders and skins below that . Using the context menu on an existing skin folder will allow you to add sub-folders and skins below the existing item . <h> Using the New Skin dialog <p> Add folder <p> The Add folder button will create a new folder , prompting you to provide a name . <p> @Resources <p> The @Resources button will add an @Resources folder under a root-level config folder . <p> Template <p> The Template button will allow you to select an existing template file , and any new skin created will @ @ @ @ @ @ @ @ @ @ and deleted from the Template tab of the New Skin dialog . <p> Add skin <p> The Add skin button will create a new skin . ini file with the name you provide . The file will automatically be encoded as UTF-16 ( Unicode ) and contain the text in the template file you selected . <p> If you change your mind ... <p> You can change the name of any folder or . ini skin file , or delete any folder or file you created by using the context menus in this dialog . Be aware , that this will only be possible on new items you created in this instance of the dialog , and will no longer be available after you " Close " the panel . <p> Finishing up ... <p> When you click on the " Close " button in the dialog , the new items will be added to Rainmeter , and a full refresh of the application and all skins will take place . Your new folders and skins will appear in the Skins panel of Manage and are ready to be edited @ @ @ @ @ @ @ @ @ @ , edit or delete the templates used when new skin . ini files are created using the Templates tab of this dialog . 
@@6351321 <h> More <h> WindowMessage plugin <p> **26;9291;TOOLONG can be used to send and receive information from other applications . It can send window messages to other applications and show the result . For example , the plugin can be used to control WinAmp or some similar media players . <h> Options <p> The name of the window . This is used to identify the window . It 's not necessary to set this if the WindowClass is set . <p> WindowClass <p> The class of the window . This is used to identify the window . It 's not necessary to set this if the WindowName is set . <p> WindowMessage <p> This is the message to be send to the window . You need to define 3 parameters to where the first one is the message and the next ones are wParam and lParam . Both wParam and lParam are unsigned decimal integers . The measure returns the value returned by the SendMessage API function . If the WindowMessage is not given , the measure returns the window 's current title . <h> Bangs <p> Messages can also be @ @ @ @ @ @ @ @ @ @ arguments are similar that of the WindowMessage option . ! CommandMeasure " MeasureName " " SendMessage Msg wParam lParam " <h> Examples <p> The following example returns the name of the song that is playing in WinAmp . <p> MeasureWinamp @qwx22557 <p> **26;9319;TOOLONG <p> WindowClass=Winamp v1.x <p> Substitute= " Paused " : " " , " - Winamp " : " " <p> Check if Winamp is playing , or not . The following example returns 0 if it 's not playing , 1 if it is playing , and 3 if it 's paused . <p> MeasureWinampPlaying @qwx22557 <p> **26;9347;TOOLONG <p> WindowClass=Winamp v1.x <p> WindowMessage=1024 0 104 <p> Show song progress . In the following example , the MeasureWinampDuration will return the current song position as a value between 0 and 1 . Then you can use the Bar meter to display the value . 
@@6351326 <h> More <h> System <h> Introduction <p> With this tutorial , we are going to cover several things . First , we are going to introduce two new measure and two new meter types , as well as some new options for controlling how they work . We will also touch on the use of UpdateDivider on measures to control the performance of a skin , and will explore using Variables to set , use and change values shared by measures and meters . <p> There is a lot going on in this skin , so let 's explore the end-result a bit so you can get a sense of where we are going as we work through it . First , let 's take a look at the final skin . <p> What we are going to do is measure the percent usage of the CPU , and the space on a couple of hard drives . Then we are going to create some circular meters showing the usage with Roundline meters . We are going to monitor the CPU with a Line meter , and display some information @ @ @ @ @ @ @ @ @ @ see one hard drive in that image ? We will get to that ... <h> Building the System skin <p> First , as we did in our earlier tutorial , let 's add the Rainmeter section to control the Update speed of the skin . @qwx22547 @qwx22570 <p> The next thing we are going to do is define some variables for the skin . Variables are used to create a value , which can be used repeatedly in the skin by enclosing the variable name in ## ( example : #VarName# ) . In order to change the value in all places it is used , you only need to change it one time in the Variables section of the skin . @qwx22548 <p> DarkBlue=27,63,107,255 <p> **25;9375;TOOLONG <p> **25;9402;TOOLONG <p> LightRed=250,148,135,255 <p> AlmostBlack=40,40,40,255 <p> CurrentDrive=C : <p> Drive1=C : <p> Drive2=D : <p> Now we will cheat a bit . In earlier tutorials , we waited until the end and put a solid background on the skin using an Image meter . Let 's go ahead and add that now , so we can demonstrate the first use of one @ @ @ @ @ @ @ @ @ @ <p> X=0 <p> Y=0 <p> W=185 <p> H=110 <p> SolidColor=#AlmostBlack# <p> Note that we have used the variable #AlmostBlack# in the SolidColor option for this meter . The meter will then use the value we defined as AlmostBlack=40,40,40,255 in the Variables section earlier . Remember that if you define SolidColor on an image meter with no MeasureName option , it simply draws a square or rectangle based on the W and H ( width and height ) options . <p> So let 's load our new skin and take a look at where we stand . From the Manage dialog , find the System.ini entry in the list and click on the Load button on the upper right . <p> Not much to look at just yet ... <p> Next , let 's create a measure to get the current amount of CPU usage , as a percentage , on each update . <p> MeasureCPU <p> Measure=CPU <p> Now it is time to introduce a new meter type . We are going to display the value of that MeasureCPU measure as filling a cirle on the screen using a Roundline @ @ @ @ @ @ @ @ @ @ <p> MeterCPUCircle <p> Meter=Roundline <p> MeasureName=MeasureCPU <p> X=5 <p> Y=8 <p> W=40 <p> H=40 @qwx22566 <p> RotationAngle= ( Rad(360) ) <p> LineStart=15 <p> LineLength=20 <p> Solid=1 <p> LineColor=#LightBlue# @qwx22550 <p> Refresh the skin so we can see what it is doing as we walk through the options . <p> What the Roundline meter does is draw a line that rotates around the center of a circle defined by the W and H options of the meter . In this case , we have defined the size of the meter ( and thus the circle ) as 40x40 pixels . Keep in mind that this defines a circle that has a total width of 40 pixels , and a width from the center to the edge as 20 pixels . <h> Roundline - Working with angles <p> We first needed to define two options to control how the meter works . We need to tell the Roundline where the line should point when the value is 0% ( the starting point ) . This is done with the StartAngle option . We also need to tell the Roundline how much of @ @ @ @ @ @ @ @ @ @ travel when the value is 100% ) . This is done with the RotationAngle option . As you can see , we have set the value of StartAngle to StartAngle= ( Rad(270) ) , and the value of RotationAngle to RotationAngle= ( Rad(360) ) . Let 's talk about that for a minute . <p> The angles in a Roundline meter are defined in Radians . Radians are a unit of measure used to define degrees of distance around a circle , starting with 0 , which is the point directly to the right of the center of the circle . This is important ! Do not picture a compass in your head , which has 0 ( North ) pointing " up " . Radians are defined with 0 pointing to the right . <p> I highly recommend taking a minute and reading through the explanation at Radians Guide . <p> So beginning with StartAngle , we are telling the Roundline that the starting point of the meter is a distance of 270 degrees in radians from the 0 position of directly right . That will move the starting @ @ @ @ @ @ @ @ @ @ meter , which is what we want . <p> Next , we are setting the RotationAngle option to 360 degrees in radians , which tells the Roundline that the distance to travel around the circle from the starting point defined in StartAngle will be the full circle ( a circle has 360 degrees ) . We want the entire circle to fill when the value of the measure is 100% . <p> Note that we are using the Rad(x) function to make it easier to convert degrees ( which are easy to picture in our heads ) into radians ( which are mathematically useful , but stupidly complicated ) . <h> Roundline - The line options <p> By default , the Roundline meter will draw a single line from the center of the meter to the outside edge , pointing to the position represented by the value of the measure . We do n't want a " pointer " in this case , but want to draw and fill a circle . There are few options we have used to control this . <p> LineStart=15 This tells the Roundline that @ @ @ @ @ @ @ @ @ @ center of the meter . <p> LineLength=20 This sets the overall length of the line to 20 pixels . Remember that our meter is 40 pixels wide in total , but only 20 pixels wide from the center to the outside edge . <p> The result of these two options is a line that starts 15 pixels from the center , and extends to the full 20 pixels defined as the length from the center to the edge . So in effect , a 5 pixel line at the outside edge . <p> Solid=1 This option tells the Roundline that instead of a single line , we want the meter to " fill " from the position defined as 0% to the current value represented by the measure . So instead of a " pointer " , we get a circle being filled as the value changes . <p> Then we are using one of the variables we defined in the Variables section at the beginning . We want to set the color of the circle to a nice light blue , which we defined as **25;9429;TOOLONG . So we @ @ @ @ @ @ @ @ @ @ <p> Good job ! Roundline is a very useful and flexible meter type in Rainmeter , and once you play with the options and different behaviors you will find lots of creative ways to use it . Take a breather ... <h> Continuing the skin <p> That Roundline meter looks a little funny by itself , so let 's add another Roundline meter to serve as a " background " for it . In your code , move up above the MeterCPUCircle section we added before , and insert a new meter section . Remember , we want this meter to be " behind " MeterCPUCircle , so it needs to be " before " it in the actual . ini skin code . <p> MeterCPUCircleBack <p> Meter=Roundline <p> X=5 <p> Y=8 <p> W=40 <p> H=40 @qwx22566 <p> RotationAngle= ( Rad(360) ) <p> LineStart=15 <p> LineLength=20 <p> Solid=1 <p> LineColor=#MediumBlue# @qwx22550 <p> What we are doing here is creating another Roundline meter , at the same X and Y position as the one that comes after , but behind it . All of the options in MeterCPUCircleBack are the same @ @ @ @ @ @ @ @ @ @ is no MeasureName option to " bind " a measure to the meter . Roundline will by default use a value of 100% in this case , in effect allowing us to draw a full circle that we can use as a background . Oh , we also used a different variable for the color of the line . Refresh the skin to see the change . <p> Your entire skin code should now look like this : @qwx22547 @qwx22570 @qwx22548 <p> DarkBlue=27,63,107,255 <p> **25;9456;TOOLONG <p> **25;9483;TOOLONG <p> LightRed=250,148,135,255 <p> AlmostBlack=40,40,40,255 <p> CurrentDrive=C : <p> Drive1=C : <p> Drive2=D : <p> MeasureCPU <p> Measure=CPU <p> MeterBackground @qwx22559 <p> X=0 <p> Y=0 <p> W=185 <p> H=110 <p> SolidColor=#AlmostBlack# <p> MeterCPUCircleBack <p> Meter=Roundline <p> X=5 <p> Y=8 <p> W=40 <p> H=40 @qwx22566 <p> RotationAngle= ( Rad(360) ) <p> LineStart=15 <p> LineLength=20 <p> Solid=1 <p> LineColor=#MediumBlue# @qwx22550 <p> MeterCPUCircle <p> Meter=Roundline <p> MeasureName=MeasureCPU <p> X=5 <p> Y=8 <p> W=40 <p> H=40 @qwx22566 <p> RotationAngle= ( Rad(360) ) <p> LineStart=15 <p> LineLength=20 <p> Solid=1 <p> LineColor=#LightBlue# @qwx22550 <p> Next we want to create a String meter showing the actual value we are getting in @ @ @ @ @ @ @ @ @ @ . We have talked about string meters and positioning in earlier tutorials , so let 's just add the following as a new section at the end of your skin code . <p> MeterCPUPercent @qwx22560 <p> MeasureName=MeasureCPU <p> FontFace=Segoe UI <p> FontSize=8 <p> FontColor=#LightBlue# <p> X=26 <p> Y=28 <p> StringAlign=CenterCenter @qwx22568 @qwx22550 <p> Text=%1% <p> Save and refresh the skin to see your new meter . <p> You know , it would be nice if the color of that text changed when the CPU usage hits some value we define . What we can do is change the color to " red " if the value is at or above 25% , and back to " blue " if it is below that value . <p> Go back near the top of the code and find the the MeasureCPU measure . Let 's add a few lines to it . <p> If the value of the measure moves above 24 , use the ! SetOption bang to change the FontColor option on the MeterCPUPercent meter to the value of the variable #LightRed# we defined earlier in Variables . <p> If @ @ @ @ @ @ @ @ @ @ the ! SetOption bang to change the FontColor option on the meter to the value of the variable #LightBlue# we defined earlier in Variables , in effect changing it back to the original color . <h> Line meter <p> Next we are going to touch on another meter type in Rainmeter . The Line meter displays the percentage value of a measure ( or more than one measure ) as a series of points over time , connected to create lines on a graph . <p> Add a new section to the skin . <p> MeterCPULine <p> Meter=Line <p> MeasureName=MeasureCPU <p> X=49 <p> Y=8 <p> W=130 <p> H=38 <p> LineCount=1 <p> LineColor=#LightBlue# <p> LineWidth=1 <p> HorizontalLines=1 <p> **33;9510;TOOLONG <p> SolidColor=#DarkBlue# <p> The Line meter is pretty self-explanatory , you " bind " one or more measures to the meter with MeasureName , and then use options like LineWidth and LineColor to control how the meter looks . The line is plotted over time on a graph that is defined by the W and H options of the meter . The additional HorizontalLines and HorizontalLineColor options draw the background lines on @ @ @ @ @ @ @ @ @ @ we set a SolidColor option on the meter to define a overall background color . Refresh the skin and have a look . Let it run for a while so you can see the movement of the line . <p> We should put a label on the Line meter , so it is clear what it is measuring . We have looked at the String meter previously , so let 's just add one and take a look at the result . <p> MeterCPUText @qwx22560 <p> FontFace=Segoe UI <p> FontSize=15 <p> FontColor=#LightBlue# <p> X=48 <p> Y=4 @qwx22568 @qwx22550 <p> Text=CPU <h> Measuring a hard drive <p> It is time to introduce a new measure type to our skin . We are going to be measuring the total , used , and free space on one of your hard drives . We will display the used space on a circular Roundline meter almost exactly as we did with the CPU measurement , then display the other information , total and free space , in string meters next to it . <p> First , let 's set up the measures you will @ @ @ @ @ @ @ @ @ @ under the MeasureCPU we created in the beginning , and add some new measures . <p> MeasureDriveTotal <p> Measure=FreeDiskSpace <p> Drive=#CurrentDrive# <p> Total=1 <p> IgnoreRemovable=0 @qwx22552 <p> UpdateDivider=-1 <p> MeasureDriveFree <p> Measure=FreeDiskSpace <p> Drive=#CurrentDrive# <p> IgnoreRemovable=0 @qwx22552 <p> UpdateDivider=5 <p> MeasureDriveUsed <p> Measure=FreeDiskSpace <p> Drive=#CurrentDrive# <p> InvertMeasure=1 <p> IgnoreRemovable=0 @qwx22552 <p> UpdateDivider=5 <p> The FreeDiskSpace measure obtains space information about a drive . There are several options we are using that should be explained . <p> Drive=#CurrentDrive# This option tells the measure which drive to examine . In this case , we are using one of the variables we defined earlier , to set the value to C : . <p> IgnoreRemovable=0 By default , FreeDiskSpace will ignore all removable drives like USB or optical drives . Set IgnoreRemovable=0 to enable measuring these kinds of drives . <p> InvertMeasure=1 By default , FreeDiskSpace will measure the free space on a drive . To measure the used space , you use the General Measure OptionInvertMeasure=1 to reverse what is measured . <p> In addition , we are using two other options on the measures we have not looked at before . @ @ @ @ @ @ @ @ @ @ that any variables used in the section should be re-evaluated on each update of the section . In order to have Rainmeter use as few resources as possible , variables are only evaluated when the measure or meter is created , and will not detect any dynamic changes to variables it uses , if this option is not set . It will become clear in a little bit why we want this option on our FreeDiskSpace measures . <p> UpdateDivider is used to control how often a measure or meter is updated . The overall Update of the skin is set in the Rainmeter section at the top of the skin , and defines how often in milliseconds the skin is updated . In our case , and by default , this is Update=1000 or once a second . <p> The UpdateDivider=5 option we are setting on these FreeDiskSpace measures tells Rainmeter to update these measures every 5 updates of the skin , or in our case every 5 seconds . UpdateDivider should be considered for any measures that do n't need to be updated as often as the Update @ @ @ @ @ @ @ @ @ @ Rainmeter has to do . In the case of FreeDiskSpace , this is particularly useful as actually reading the drives once every second would be more resource hungry than is really needed . <p> Ok , our measures are all set up , and providing the various kinds of space measurements for our drive in bytes . One thing that should be noted is that the FreeDiskSpace measure also automatically sets the MinValue and MaxValue of the measure , so the value can be used in meters that require a Percentage , like the Roundline meter we are about to create . <p> Add the following new meters to the skin . <p> MeterDriveCircleBack <p> Meter=Roundline <p> X=5 <p> Y=63 <p> W=40 <p> H=40 @qwx22566 <p> RotationAngle= ( Rad(360) ) <p> LineStart=15 <p> LineLength=20 <p> Solid=1 <p> LineColor=#MediumBlue# @qwx22550 <p> MeterDriveCircle <p> Meter=Roundline <p> **28;9545;TOOLONG <p> X=5 <p> Y=63 <p> W=40 <p> H=40 @qwx22566 <p> RotationAngle= ( Rad(360) ) <p> LineStart=15 <p> LineLength=20 <p> Solid=1 <p> LineColor=#LightBlue# @qwx22550 <p> MeterDriveCircleLabel @qwx22560 <p> FontFace=Segoe UI <p> FontSize=10 <p> FontColor=#LightBlue# <p> X=26 <p> Y=83 <p> StringAlign=CenterCenter @qwx22568 <p> Percentual=1 @qwx22550 @qwx22552 <p> @ @ @ @ @ @ @ @ @ @ the meters we created earlier to show the CPU usage as a circular Roundline meter . We bind the active Roundline meter MeterDriveCircle to the measure MeasureDriveUsed to display the amount of " used " space , and instead of showing any measured value inside the circle in MeterDriveCircleLabel , we simply create a label with the value of the current drive letter we created in the variable #CurrentDrive# . We again set DynamicVariables=1 on this label meter . We will see why shortly . Save and refresh the skin to see how we are doing . <p> Finally , we can create a nice background to match the one behind the Line meter we created in MeterCPULine , by simply creating an Image meter with a SolidColor and no MeasureName option , then some String meters to display the other drive space information , total and free . Add the following meters to the bottom of the skin . Save and refresh . <p> MeterDriveBack @qwx22559 <p> X=49 <p> Y=63 <p> W=130 <p> H=38 <p> SolidColor=#DarkBlue# <p> MeterDriveTotalLabel @qwx22560 <p> FontFace=Segoe UI @qwx22555 <p> FontColor=#LightBlue# <p> X=50 <p> Y=64 @ @ @ @ @ @ @ @ @ @ MeterDriveTotal @qwx22560 <p> **29;9575;TOOLONG <p> FontFace=Segoe UI @qwx22555 <p> FontColor=#LightBlue# <p> X=180 <p> Y=64 @qwx22568 <p> StringAlign=Right <p> AutoScale=1 @qwx22550 <p> Text=%1B <p> MeterDriveFreeLabel @qwx22560 <p> FontFace=Segoe UI @qwx22555 <p> FontColor=#LightBlue# <p> X=50 <p> Y=81 <p> W=130 <p> H=18 <p> ClipString=1 @qwx22568 <p> AutoScale=1 @qwx22550 <p> Text=Free : <p> MeterDriveFree @qwx22560 <p> **28;9606;TOOLONG <p> FontFace=Segoe UI @qwx22555 <p> FontColor=#LightBlue# <p> X=180 <p> Y=81 @qwx22568 <p> StringAlign=Right <p> AutoScale=1 @qwx22550 <p> Text=%1B <p> One new option we have used in two of these meters should be explained . The FreeDiskSpace measure obtains the space values from the drive in bytes . For most of us , that is going to be a really huge and long number , ( my one-terabyte C : drive has a total of 1000097181696 bytes for instance ) and probably not one we want to display on a skin . The AutoScale option on the string meter will automatically scale the number to megabytes , gigabytes , terabytes etc. and append the appropriate M / G / T label to the end . We have added an extra hard-coded B at the end of the text @ @ @ @ @ @ @ @ @ @ GB . Let 's take a look . <h> What about those dynamic variables ? <p> I promised we would get back to the reason why we added DynamicVariables=1 to a few measures and meters . Our last goal is to have the skin dynamically change the Drive that we measure and display when we move the mouse over the skin . <p> If you look back to the Variables section , you will see that we set the following : <p> CurrentDrive=C : <p> Drive1=C : <p> Drive2=D : <p> Then in our FreeDiskSpace measures MeasureDriveTotal , MeasureDriveFree , and MeasureDriveUsed , we set the Drive option to that variable #CurrentDrive# . So to start with , the measures are looking at the C : drive . What we want to do is set the value of #CurrentDrive# to be equal to the value of the variable #Drive2# when we move the mouse over the skin , and back to #Drive1# when we move the mouse away . <p> To accomplish this , we need to add new Mouse actions to the skin , and some Bangs that are @ @ @ @ @ @ @ @ @ @ back up to our MeterBackground meter , the first one after the measures in the skin . Change it by adding our mouse action lines . <p> If the mouse moves over the background meter , use the ! SetVariable bang to change the value of the variable CurrentDrive to the value of the variable Drive2 . <p> If the mouse moves away from the background meter , use the ! SetVariable bang to change the value of the variable CurrentDrive to the value of the variable Drive1 , or in effect back to the original value . <p> Then we are using the ! UpdateMeasure , ! UpdateMeter , and ! Redraw bangs to have the change take place as soon as we move the mouse over or away , and not wait for the next update of the skin . <p> This functionality is why we added DynamicVariables=1 to the measures and meters which are using the #CurrentDrive# variable . That option allows the measures and meters to re-evaluate the variable on each update of the section , so when we change it with ! SetVariable they react @ @ @ @ @ @ @ @ @ @ ... Great job ! Here are two shots of your final skin , the first with the mouse away from the skin and the second with the mouse over the skin . 
@@6351331 <h> Rainmeter 3.1 Release <p> There are a lot of new features and capabilities in the latest Rainmeter 3.1 . You can safely install the new 3.1 release version right over your existing Rainmeter 3.0 installation , and nothing you have done will be lost or changed . There is never any need to uninstall any earlier version of Rainmeter to use the newest version . <h> Major additions in Rainmeter 3.1 <p> New IfConditions functionality added . This is a powerful extension to the concepts provided in IfActions , allowing multiple tests and actions , both " true " and " false " testing , and the ability to use logical AND and OR operators in the conditions . See Change Announcements for details and example skins . <p> New IfMatchAction functionality added . Supports taking actions based on a regular expression comparison with a measure 's string value . See Change Announcements for details and examples . 
@@6351336 <h> More <h> FileView plugin <p> Plugin=FileView retrieves information about folders and files . <p> The plugin gathers all the folder and file names , sizes , dates and icons in the selected folder . It counts the number of files and folders and obtains the combined size . It can also search recursively through all the subfolders of the selected folder to obtain the totals for count and size . <p> FileView operates with a " parent / child " approach . A main " parent " FileView measure is used to obtain all the information for a selected folder , and then " child " measures are used to read individual entries from the parent using the Path= option . <h> Usage <p> FileView measures take the form : @qwx22547 @qwx22570 @qwx22553 <p> MeasureFolder @qwx22557 @qwx22563 <p> Path= " C : Program FilesRainmeter " <p> ShowDotDot=0 <p> ShowFolder=0 <p> Count=3 <p> In this example , this " parent " measure will obtain name , size , date and icon information about all files in the selected folder , then create three Index values for the first three files @ @ @ @ @ @ @ @ @ @ FileView measures : <p> MeasureChild1 @qwx22557 @qwx22563 @qwx22562 @qwx22569 <p> Index=1 <p> MeasureChild2 @qwx22557 @qwx22563 @qwx22562 @qwx22569 <p> Index=2 <p> MeasureChild3 @qwx22557 @qwx22563 @qwx22562 @qwx22569 <p> Index=3 <p> The values of the three child measures are now the FileName information parsed into Indexes 1 through 3 by the parent measure . These can then be used with MeasureName and other options in meters . <p> Another way to use the information in child measures is : <p> MeasureChild1 @qwx22557 @qwx22563 @qwx22562 @qwx22569 <p> Index=1 <p> MeasureChild2 @qwx22557 @qwx22563 @qwx22562 <p> Type=FileSize <p> Index=1 <p> MeasureChild3 @qwx22557 @qwx22563 @qwx22562 <p> Type=FileDate <p> Index=1 <p> The values of the three child measures are now the FileName , FileSize and FileDate information from the first file ( Index 1 ) of the parent measure . <p> In these examples , three indexes are created due to the Count=3 option on the parent measure . However , the information for all files and / or folders are obtained by the plugin , and subsequent or previous entries can be assigned to the three indexes by using ! CommandMeasure statements described below . This will @ @ @ @ @ @ @ @ @ @ and / or folders in a dynamic way . <p> If it is desired that a folder be monitored for new or changed files , the Update plugin command should be used in conjunction with an OnUpdateAction statement to keep the measure current with changing disk information . Be aware that having the plugin physically access the disk has a performance cost , and care should be taken to use an appropriate UpdateDivider . <p> If set to 1 , the entries are sorted in ascending order . Otherwise a descending order is used . <p> WildcardSearchDefault : * <p> Wildcards used to filter included files and/or folders . Standard * and ? characters can be used . <h> Child measure options <p> IndexDefault : 1 <p> Index of the file or folder from the parent measure . This should not exceed the Count number in the parent measure . If it does , the items will wrap around . For example , if Count=8 , Index=9 will be treated as Index=1 . <p> IgnoreCountDefault : 0 <p> If set to 1 , the Index will represent the actual index @ @ @ @ @ @ @ @ @ @ is useful to display a particular file or folder at all times ( like the .. folder ) . <p> TypeDefault : FolderPath <p> Type of information to obtain from the parent measure . <p> Information for path returned by the parent measure <p> FolderPath : Path of folder returned in parent Path , with trailing " " <p> FolderSize : Size in bytes of folder returned in parent Path <p> FileCount : Count of files in folder returned in parent Path <p> FolderCount : Count of folders in folder returned in parent Path <p> Information for object returned by the child Index number <p> FileName : Name of indexed object , folder or file <p> FileType : Extension only with no " . " for indexed file . Empty with folder <p> Path and filename of the location ( relative to the skin folder ) to save icons when Type=Icon . If no path is given , the icons are saved in the skin folder and are named " iconX.ico " , where " X " is the index number . <p> For example , if Count=8 , and @ @ @ @ @ @ @ @ @ @ a total of 4 pages . If items 8-15 ( page 2 ) are being displayed , the PageUp will decrease the page count by one changing the displayed items to items 0-7 ( page 1 ) . <p> This will change the path to the folder one higher in the folder structure . Behaves like clicking on the .. folder . <h> Child measure commands <p> FollowPath <p> If the index referenced in the child measure is currently a folder , then the parent measure 's Path is updated to the new path . If it is a file , then it is opened with the default Windows associated application . In order to better simulate Windows behavior , it is recommended that this command be used with a double-click action . <p> This will open the file or folder that the index represents . If it is a folder , the folder is opened in Windows Explorer . If it is a file , then it is opened with the default Windows associated application . In order to better simulate Windows behavior , it is recommended that this @ @ @ @ @ @ @ @ @ @ commands <p> ContextMenu <p> Opens the context menu for the item represented by the measure . The context menu will appear at the current mouse location if the mouse is hovering over the skin , otherwise it will appear at the top left corner of the skin . This command can be used on a parent or child measure . <p> Example : ! CommandMeasure " MeasureName " " ContextMenu " <p> Parent measures have the extra ability to open the context menu for a manually defined file/folder . See the example below . 
@@6351342 <h> Rainmeter 3.0 Release <p> There are a lot of new features and capabilities in the latest Rainmeter 3.0 . You can safely install the new 3.0 release version right over your existing Rainmeter 2.5 installation , and nothing you have done will be lost or changed . There is never any need to uninstall any earlier version of Rainmeter to use the newest version . <h> Improved font rendering <p> The biggest single change in Rainmeter 3.0 is that we have moved from the older GDI+ display rendering method for applications to the newer and vastly better Direct2D rendering engine . As a part of a bigger effort to move all of Rainmeter to the new engine , the initial change concentrates on improving the quality of text displayed in String meters . <p> There will be a dramatic improvement in the quality of text you display in your skins . <p> Rainmeter will use the new Direct2D rendering by default if your system supports it . If not , it will fall back to the older GDI+ engine , and there will be no impact . Direct2D requires @ @ @ @ @ @ @ @ @ @ Platform Update . <p> The Rainmeter user is given complete control over when Direct2D is used and when it is not . The overall default use of Direct2D for your entire Rainmeter installation is controlled with the UseD2D option in the Manage / Settings Tab . In addition , the user can have individual skins override this setting by changing the UseD2D option in the skin context menu . <p> There may be some minor differences when Direct2D is used with older Rainmeter skins , due to differences in the way Direct2D and GDI+ handle font metrics and create the " container " the meter is displayed in . It is possible that some older skins , particularly those using 3rd-party custom fonts , may need some tweaking for position with Direct2D . <h> Other enhancements in Rainmeter 3.0 <p> The WebParser plugin now supports Dynamic Variables . This is a long-awaited and very welcome change to the way WebParser works , and should provide a lot of flexibility in creating skins that access the web . See Change Announcements for additional information about this change . <p> We have @ @ @ @ @ @ @ @ @ @ means that you can use languages and alphabets in Lua other than those supported by standard " ANSI " in your text editor . See Unicode in Rainmeter for details on using Unicode in Rainmeter in general , and Lua in particular . <p> Added a Padding=left , top , right , bottom option to meters . Allows adding pixels around any or all sides a meter . The width and height of the meter will dynamically be adjusted to the new size . This can be very useful for positioning meters relative to each other with more flexibility , and when used with the SolidColor meter option , can give you a lot of control over the " background " of your meters , without having to create additional meters specifically for this purpose . <p> Added a AccurateText option in the Rainmeter section of skins . One of the failings of the older GDI+ rendering engine was some forced and undesirable extra padding around fonts when rendered in String meters . Whether your system or skin uses Direct2D or not , this option can be used to render @ @ @ @ @ @ @ @ @ @ . This option defaults to 0 , which will use the GDI+ positioning of the string within all meters . When set to 1 , the more accurate method will be used , giving you much better flexibility with relative positioning . <p> Added a new UniqueRandom option . If set to 1 , any Calc measure using the Random constant and UpdateRandom will not repeat until all values between and including LowBound and HighBound have been used . Note that any dynamic change to LowBound or HighBound will reset the tracking of values . See Change Announcements for an example skin . <p> Added a Paused=0/1 option to measures . This allows setting the " paused " state of a measure , in addition to the LONG ... bangs above . <p> Added a OnWakeAction option to the Rainmeter section of skins , to take action when Windows returns from sleep or hibernate states . <p> Important improvements made to the Process plugin to correct issues with the plugin not being able to detect processes started with a higher security level than Rainmeter , 64bit processes when Rainmeter is @ @ @ @ @ @ @ @ @ @ " . <p> Added a OnDismissAction option to the InputText plugin . This will allow you to define an action to be taken when you hit escape to dismiss the input text field without submitting any value . <p> Added a ImagePath option to General Image Options . This replaces the existing Path option on Image meters , and extends the functionality to all other meters that support images . Note that Histogram uses PrimaryImagePath , SecondaryImagePath and BothImagePath due to the fact that the Histogram meter has an optional secondary measure binding . <p> Added a UseExifOrientation option for meters using images , to automatically correct the orientation of the image based on the EXIF data encoded by a camera . <p> Added new " Config " and " File " parameters to the ! Manage bang . This will allow opening the Manage / Skins panel with the desired config and / or skin . ini file automatically selected in the list . <p> Added a new #ROOTCONFIG# built-in variable . This provides the name of the root config - The highest-level folder under the skins folder for @ @ @ @ @ @ @ @ @ @ / Log dialog to better show the source of errors . Where possible , the config or skin.ini , and meter or measure section producing the error will be displayed . In addition , we have made improvements to the level of detail in the Rainmeter log when there are command or bang errors , and added a " Clear " button to the panel to remove the current contents of the log displayed in the panel . <p> Improved performance when using the ! SetWallpaper bang with large images . <p> Changed the mouse over behavior on Button meter images , to ignore transparent areas of the image . This make the behavior visibly match the existing mouse click behavior. 
@@6351356 <h> General Options <p> UpdateDefault : 1000 <p> Defines the update interval of the skin in milliseconds . On each update , measures and meters are updated , and the skin is redrawn . <p> The lowest possible effective value for Update is " 16 " . Some care should be taken to only use very low update rates ( less than 100 ) when really needed , and to balance a low Update with DefaultUpdateDivider , or UpdateDivider on individual measures and meters , in order to keep the CPU usage by Rainmeter as low as possible . <p> Using -1 will update the skin only once on load ( or on refresh ) . The skin can then be manually updated using the ! Update bang . <p> Note : While Update=1000 will update the skin " once a second " , Update is not related to the system clock , and if a computer is busy or a complicated skin takes longer than the interval to complete a full update of the skin , updates can be unreliable in relation to elapsed time . Do not use @ @ @ @ @ @ @ @ @ @ functions . <p> **27;9636;TOOLONG : 1 <p> Default number of updates at which skin measure and meter values are updated . The Update option is multiplied by the specified value to determine how often measures and meters are updated . <p> Example : If Update=1000 and DefaultUpdateDivider=30 , then by default all measures and meters are updated every 30 seconds . <p> If DefaultUpdateDivider=-1 or any negative number , then by default all measures and meter are only updated once when the skin is loaded or refreshed . <p> Note : This option is designed to set a default UpdateDivider for all measures and meters in the skin . It can be overridden by setting UpdateDivider on individual measures or meters . This option should be used when a low Update is desired to support animations or other skin elements requiring rapid update , while avoiding having to manually set an UpdateDivider on a great many other measures and meters that do not need to be updated as quickly . <p> AccurateTextDefault : 0 <p> If set to 1 , String meters are measured and rendered using improved padding and @ @ @ @ @ @ @ @ @ @ DynamicWindowSizeDefault : 0 <p> If set to 1 , the window size is adjusted on each update to fit the meters . <p> SkinWidth , SkinHeightDefault : None <p> Either or both may be set . This will set and constrain the skin to the fixed dimensions defined , either the width , the height , or both . Any meter or part of a meter positioned outside the defined boundaries will be truncated . DynamicWindowSize will be ignored for the defined dimension(s) , and meters that would normally display even " outside " the skin will be truncated by the fixed skin dimension(s) . <p> DragMarginsDefault : 0,0,0,0 <p> Uses 4 values separated by commas to define the area from where the window can be dragged . The values define a margin of non-draggable area . It 's also possible to use negative numbers in which case the margin is calculated from the opposite side . E.g. DragMargins=0 , -100,0,0 . <p> Note : The action(s) defined will take place at the redraw the skin . <p> OnCloseAction <p> Action to execute when the skin is unloaded or when Rainmeter is closed . <p> OnFocusAction <p> Action to execute when the skin receives focus in Windows ( focus is given when the mouse is clicked on the skin ) . <p> Note : The action(s) defined will take place at redraw the skin . <p> OnUnfocusAction <p> Action to execute when the skin loses focus in Windows ( focus is lost when the mouse is clicked outside the skin ) . <p> Note : The action(s) defined will take place at redraw the skin . <p> OnWakeAction <p> Action to execute when Windows returns from the sleep or hibernate states . <p> Note : The action(s) defined will take place at the redraw the skin . <p> TransitionUpdateDefault : 100 <p> Defines the update time in milliseconds for meter transitions . While a transition is active the meter will update at this rate . Currently , only the Bitmap meter supports meter transitions . <p> ToolTipHiddenDefault : 0 <p> If set to 1 , all tooltips in the skin will be hidden . More information on tooltips . <p> Group <p> Defines a group or series of groups that the skin belongs to . For more information please see the Groups page . <p> SelectedColorDefault : ( see below ) <p> A color code used to define the color and transparency of the overlay when a skin is selected in @ @ @ @ @ @ @ @ @ @ , the default setting SelectedColor option is used . <p> If BackgroundMode=3 , defines margins of the Background image that are not scaled . The parameters are left , top , right , bottom . <p> **35;9665;TOOLONG 10 pixels from the top and 20 pixels from the bottom of the image are not scaled . <p> SolidColor , SolidColor2Default : 0,0,0,0 <p> This option will specify the background color when BackgroundMode=2 . If SolidColor2 is also specified , the background is a gradient composed of SolidColor and SolidColor2 . <p> Hint:SolidColor=0,0,0,1 can be used to make transparent areas of the background clickable . <p> GradientAngle <p> Angle of the gradient in degrees ( for SolidColor and SolidColor2 ) when BackgroundMode=2 . <p> BevelTypeDefault : 0 <p> If enabled , draws a bevel around the edges of the entire skin when BackgroundMode=2 . Valid values are : <p> 0 : No bevel <p> 1 : Raised <p> 2 : Sunken <h> Context options <p> ContextTitle , ContextTitle2 , ContextTitle3 ... <p> If not blank , adds an item to the skin 's context menu under " Custom skin actions " . @ @ @ @ @ @ @ @ @ @ to 30 characters per option . Additional characters are truncated with an ellipsis ( ... ) . If more than 3 ContextTitleN options are given , " Custom skin actions " becomes a submenu . If a ContextTitleN option is not valid , all subsequent ContextTitleN options are ignored . In addition , if more than 3 options are given , and the value of ContextTitleN includes only dashes ( - ) , the item is displayed as a separator . <p> Note : Variables in ContextTitleN are always dynamic . Variable values are read at the time the context menu is opened . This means that the ! SetOption bang can be used to change these values . <p> ContextAction , ContextAction2 , ContextAction3 ... <p> Action triggered by clicking the corresponding ContextTitleN item . ContextActionN is required for ContextTitleN to be valid , unless the item is a separator . <p> Note : Variables in ContextTitleN are always dynamic . Variable values are read at the time the context menu is opened . This means that the ! SetOption bang can be used to change these values . @ @ @ @ @ @ @ @ @ @ to 1 to enable Aero Blur on the Windows Windows 7 operating system . If no BlurRegions are specified , the entire skin background is blurred . <p> Note : The function will not work on Window 8.1 or Windows 10 . <p> BlurRegion , BlurRegion2 , ... , BlurRegionN <p> Defines areas and shapes of the one or more regions of the skin to be blurred . The format of the option is : BlurRegion=Type , TopX , TopY , BottomX , BottomY , Radius . <p> Valid values for Type are : <p> 0 : Region is disabled <p> 1 : Rectangular region <p> 2 : Rectangular region with rounded corners ( requires Radius ) <p> 3 : Elliptical region <p> The parameters following Type define the size and shape of the region . They are , in order : <p> TopX : Top left horizontal point in the skin <p> TopY : Top left vertical point in the skin <p> BottomX : Bottom right horizontal point in the skin <p> BottomY : Bottom right vertical point in the skin <p> Radius : Radius of the corners of @ @ @ @ @ @ @ @ @ @ Aero Blur options can be dynamically controlled with several bangs . <h> Example @qwx22547 @qwx22570 <p> Blur=1 <p> **25;9702;TOOLONG <p> ; BlurRegion creates a rectangle starting at 10 pixels from the left , 10 pixels down from the top , and ending at 190 pixels to the right , 50 pixels from the top . <p> **26;9729;TOOLONG <p> **31;9757;TOOLONG <p> Background @qwx22559 <p> W=200 <p> H=180 <p> SolidColor=0,0,0,50 <p> LeftMouseUpAction= ! AddBlur " 1,0,0,200,80 " <h> Deprecated options <p> Author <p> The author of the skin . <p> Note : This option is deprecated . Author should be defined in the Metadata section of the skin . <p> AppVersion <p> Defines the minimum version of Rainmeter required to use the skin . The formula to calculate the value is : major * 1000000 + minor1 * 1000 + minor2 . <p> Note : This option is deprecated . Use the version capabilities in Skin Packager . <p> LocalFont , LocalFont2 , ... <p> Loads the specified TTF font files for use with FontFace in String meters. 
@@6351376 <h> Rainmeter context menus <p> Help : Opens the Rainmeter documentation site in the default web browser . <p> Skins : Displays a list of all skins found when Rainmeter was started or refreshed . The list consists of the config folder for each skin , which expand to the skin . ini files in each . Clicking on a . ini file will load the skin in Rainmeter . <p> Favorites : Displays a list of skins that have been defined as a " Favorite " in either the skin 's settings in Manage or the skin 's context menu under Settings . If you have a large collection of skins in Rainmeter , this can be helpful for quickly finding and loading skins without having to use the entire Skins list . <p> Layouts : Displays a list of saved layouts . Clicking on one will load that layout in Rainmeter . <p> Edit settings : Manually edit the settings in Rainmeter.ini with the text editor associated with . ini files . <p> Refresh all : Refresh the entire Rainmeter application , including all currently active skins . 
@@6351391 <h> Rainmeter 3.2.1 Release <p> There are a lot of new features and capabilities in the latest Rainmeter 3.2.1 . You can safely install the new 3.2.1 release version right over your existing Rainmeter 3.1 or earlier installation , and nothing you have done will be lost or changed . There is never any need to uninstall any earlier version of Rainmeter to use the newest version . <h> Major additions in Rainmeter 3.2.1 <h> AudioLevel plugin <p> Added a new AudioLevel plugin . This will allow for real-time VU-Meter and Spectrum Analyzer visualizations of sound output . <h> Mask Image functionality <h> Formatted date / time options <p> Added several new options to allow using a formatted date / time string in the TimeStamp option of a Time measure . This can for instance allow the measure to parse and use a date / time string which might come from an RSS feed or other WebParser measure . <p> Time Measure : TimeStampFormat to define a " mask " for the date / time string . <p> Time Measure : TimeStampLocale to define the input " language / locale @ @ @ @ @ @ @ @ @ @ . <p> Added the value 100 to both Manage and the skin context menus to support setting the transparency of a skin to an opacity of 1 , which is invisible but will still react to the mouse . This can be used in conjunction with the fade in / fade out / on hover capabilities . <p> Added a new PathToFile value for the FileView plugin Type child measure option . This will return just the path the file , including a trailing " " . 
@@6351396 <h> Contents <h> More <h> Read &amp; Write a File <p> These are general functions that can be used to read or write any type of string data to or from a permanent text file . These make use of Lua 's Io Library functions , which can be hard to understand without a template . <h> ReadFile <p> **26;9832;TOOLONG <p> -- HANDLE RELATIVE PATH OPTIONS . <p> FilePath = **31;9860;TOOLONG <p> -- OPEN FILE . <p> local File = io.open(FilePath) <p> -- HANDLE ERROR OPENING FILE . <p> ifnot File then <p> print ( 'ReadFile : unable to open file at ' .. FilePath ) <p> return <p> end <p> -- READ FILE CONTENTS AND CLOSE . <p> local Contents = File:read ( ' *all ' ) <p> File:close() <p> return Contents <p> end <h> ReadFileLines <p> Alternatively , instead of getting the entire file as a single string , you may instead want to break it down into its individual lines . <p> **31;9893;TOOLONG <p> -- HANDLE RELATIVE PATH OPTIONS . <p> FilePath = **31;9926;TOOLONG <p> -- OPEN FILE . <p> local File = io.open(FilePath) <p> -- HANDLE @ @ @ @ @ @ @ @ @ @ ( 'ReadFile : unable to open file at ' .. FilePath ) <p> return <p> end <p> -- READ FILE CONTENTS AND CLOSE . <p> local Contents = <p> for Line in File:lines() do <p> table.insert ( Contents , Line ) <p> end <p> File:close() <p> return Contents <p> end <h> WriteFile <p> **26;9959;TOOLONG , Contents ) <p> -- HANDLE RELATIVE PATH OPTIONS . <p> FilePath = **31;9987;TOOLONG <p> -- OPEN FILE . <p> local File = io.open ( FilePath , ' w ' ) <p> -- HANDLE ERROR OPENING FILE . <p> ifnot File then <p> print ( 'WriteFile : unable to open file at ' .. FilePath ) <p> return <p> end <p> -- WRITE CONTENTS AND CLOSE FILE <p> File:write(Contents) <p> File:close() <p> returntrue <p> end <p> To merge a table of " lines " into a single string with each value on a separate line , use String = table.concat ( Table , ' n ' ) 
@@6351406 <p> There was a problem displaying an ad here , most likely because of an ad blocker.Ads help fund the development of Core Temp , please consider adding the website toyour whitelist or making a donation via PayPal . <p> Core Temp is a compact , no fuss , small footprint , yet powerful program to monitor processor temperature and other vital information . <p> What makes Core Temp unique is the way it works . It is capable of displaying a temperature of each individual core of every processor in your system ! You can see temperature fluctuations in real time with varying workloads . Core Temp is also motherboard agnostic . <p> Ads could n't be displayed.Please consider making a donation via PayPal . <p> All major processor manufacturers have implemented a " DTS " ( Digital Thermal Sensor ) in their products . The DTS provides more accurate and higher resolution temperature readings than conventional onboard thermal sensors . ( How does it work ? ) . This feature is supported by all recent x86 processors . Processors by Intel , AMD and VIA are supported . @ @ @ @ @ @ @ @ @ @ Core Temp is easy to use , while also enabling a high level of customization and expandability . Core Temp provides a platform for plug-ins , which allows developers to add new features and extend its functionality . You can find our plug-ins and add-ons here . If you are a developer and you are interested in creating your own addition , please see the developer 's page . <p> Core Temp goes mobile ! Have you ever wished that you could keep an eye on your systems while you were out of home or the office ? If you have an Android or Windows Phone device , now you can ! Click here for more information . <p> Core Temp Gadget and Windows Media Center addon for Windows 7 and Vista . Recently I 've released a new version of the Core Temp Gadget , completely overhauled . The new version includes a graph view , listing processor load or temperature as well as memory utilization . The readings are now color coded and they are user adjustable from the Options screen . Among these improvements the gadget can @ @ @ @ @ @ @ @ @ @ be hidden if so desired . You can download Core Temp Gadget and CoreTempMC from the Add Ons page . <p> CoreTempMC is a Windows Media Center add-on for Windows 7 and Vista . It allows you to view information from Core Temp right from the Media Center interface using your remote . In addition it also displays the memory utilization . 
@@6351410 <p> SpeedFan is a program that monitors voltages , fan speeds and temperatures in computers with hardware monitor chips . SpeedFan can even access S.M.A.R.T . info and show hard disk temperatures . SpeedFan supports SCSI disks too . SpeedFan can even change the FSB on some hardware ( but this should be considered a bonus feature ) . SpeedFan can access digital temperature sensors and can change fan speeds accordingly , thus reducing noise . SpeedFan works fine with Windows 9x , ME , NT , 2000 , 2003 , XP , Vista , Windows 7 , 2008 , Windows 8 , Windows 10 and Windows Server 2012 . It works with Windows 64 bit too . <p> SpeedFan can access the temperature sensors available on your motherboard and on your nVidia video card . The most widely available temperatures are from the chipset , the CPU , the ambient and from the power circuitry . <p> Modern CPUs can report their own internal temperature . Multi-core CPUs are often able to report temperatures from each single core . SpeedFan can access those readings and report changes . <p> @ @ @ @ @ @ @ @ @ @ and hard disks ) often requires more power . More power leads to more heat to dissipate . A proper airflow inside the computer cabinet helps to keep temperatures low . Inside computers there are fans that create such an airflow . SpeedFan can report the speeds of each fan and it can even change their speed based on current temperatures . This lowers noise and improves computer experience . <p> SpeedFan can access the voltages reported by the hardware . This can help to identify odd issues with computers resetting under stress , for example . Please , note that SpeedFan reports the voltages according to the official documentation . Sometimes hardware manufacturers use custom circuitry . In the FAQ you can find further info on this topic . <p> Almost every hard disk can report a set of data about its own health and status . This is called S.M.A.R.T .. Based on reported data , a hard disk failure can often be early detected . Hard disk temperature can be read too and it is useful to identify overheating components that could reduce your valuable data reliability @ @ @ @ @ @ @ @ @ @ online analysis " ) that compares your hard disk SMART data to a model derived from millions of reports . This helps to better identify when a specific hard disk is outside " normal " values . <p> SpeedFan can report health data and statistical values returned by SCSI hard disks . Such data contains the hard disk temperature too . Hard disk temperatures are positively correlated to hard disk failures . This is the reason why these information are so important . <p> SMART data from hard disks connected to RAID ( software or hardware ) controllers is more difficult to be read . SpeedFan is improving RAID support and it currently properly supports software RAID ( offered by Windows ) , ARECA , CSMI and AMCC 3ware controllers . Reliable access to RAID controllers requires support from hardware manufacturers . This is something that is being worked on . <p> Hover on the icons to read more about specific SpeedFan features . <p> advertisement <p> News <p> SpeedFan 4.52 Final is online ! <p> SpeedFan 4.52 Final is now online ! It adds support for a lot of @ @ @ @ @ @ @ @ @ @ . This version took quite a long time to see the light because of many things that happened . New versions will now appear more often . Stay tuned : - ) <p> Both the installer and the executable are digitally signed with my company 's ( SOKNO S.R.L. ) certificate . If you download an installer that has not SOKNO 's signature , then it is not SpeedFan ! ... Enjoy ! <p> Advanced Fan Control How-To <p> An article has been added to describe the long awaited new Advanced Fan Control method . You can find it here . <p> SpeedFan monitor temperatures from several sources . By properly configuring SpeedFan , you can let it change fan speeds based on system temperatures . When choosing parameters for the minimum and maximum fan speed , try to set them by hand ( disable all the VARIATE FANs checkboxes ) and listen to the noise . When you hear no noise from the fan then you can set that value as the minimum fan speed for that fan . I suggest to use 100 as the maximum value , @ @ @ @ @ @ @ @ @ @ in which case you might reduce the maximum speed to 95 or 90 . You can set , say , 60 as the maximum value and , sometimes , I myself set it that way . Consider that when the WARNING temperature is reached , the program sets the fan speed to 100 , whatever maximum speed you selected . One last word should be said regarding the USE FAN x listbox . In my pc , more than one temperature changes when a fan runs faster . You can configure on which fan every temperature should rely . On my system , TEMP1 and TEMP3 are both influenced by FAN1 . <p> Credits <p> The first one to thank is Alexander Van Kaam , for letting me discover the wonderful world of sensors <p> Carlo Adami , for his great work on AS99127F <p> Massimiliano Battaglia , for his infinite patience debugging and reporting <p> Istvan Dercze , for his help testing VIA686 support <p> A few numbers ... <p> SpeedFan can handle : <p> almost any number of South Bridges <p> almost any number of hardware monitor chips @ @ @ @ @ @ @ @ @ @ number of temperature readings <p> almost any number of voltage readings <p> almost any number of fan speed readings <p> almost any number of PWMs <p> Disclaimer <p> This program is aimed at the power user . At those who know what they 're doing . I 've known of no real problem caused by SpeedFan , but may be it 's due to the fact that once it made the PC explode and the user disappeared in the blast , thus being unable to report : - ) Anyway : SpeedFan can be extremely useful , but you should first watch its behavior before setting and forgetting it . <p> Feedback <p> You can contact me at alfredo at almico.com if you 've got any question or suggestion or discover any strange behavior . I 'd appreciate an e-mail from those of you who try and find useful my program . Just a line of text will do . Thanx for your attention 