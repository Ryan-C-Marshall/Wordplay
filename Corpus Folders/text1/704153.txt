
@@120535870 @9535870/ <p> Depeche View allows high speed research and edit on a Windows XP/Vista/7 system ( 32 or 64 bits ) . Many modern software projects , however , are spread across many platforms , typically editing under Windows , then compiling under Linux . This process is supported by the following tool . <h> The Swiss File Knife Mobile Book . <p> The whole syntax . All commands in a 300 page PDF , for convenient reading on your tablet , smartphone , or for self printing . Contains a 60 page tutorial with 25 pages of detailed xed examples and a 200 page command reference . 
@@120535871 @9535871/ <p> On Mac OS X , open the . DMG then control+click on the contained script and select Open . On Linux , open a command line or terminal , then rename the binary to sfk like " mv sfk-linux.exe sfk " , make it executable by " chmod +x sfk " and type " . /sfk " . <p> SFK Extended Edition ( XE ) comes with a powerful replace command for text and binary files . It allows to replace fixed strings at high performance , or to use a flexible search and replace with SFK Expressions . Furthermore it allows direct reading of . zip , . tar.gz and . tar.bz2 file contents . Some . zip file formats ( e.g. 64 bits ) are not supported . 
@@120535872 @9535872/ <p> alternatively , you may download it via the original Info-ZIP website : select one of the given FTP locations , enter directory WIN32 , download unz552xN.exe , which is a self-extracting archive . create a subdirectory , e.g. " tmp " , enter that , then run unz552xN.exe. many files will be extracted , one of them being unzip.exe . <p> to view all text in a zip file without extraction , download DView Zip . <p> this is a portable freeware tool ( no installation ) that allows to fly through all text of a . zip , . jar , . ear , . war or . aar file , with search and filter as you type . it is created and maintained only by this website , www.stahlworks.com , and not associated with Info-ZIP . <p> to search all contents of a zip file on the command line for words , download zzfind.exe here . <p> this tool is created and maintained only by this website , www.stahlworks.com , and not associated with Info-ZIP . <p> to list the contents of all zip or jar @ @ @ @ @ @ @ @ @ @ embedded within other zip files ) , download Swiss File Knife Base here . Type " sfk help xe " or find further syntax examples here . <p> this tool is created and maintained only by this website , www.stahlworks.com , and not associated with Info-ZIP . <p> These files are copies from the Info-Zip download locations listed above , provided under the Info-ZIP license . They are not the most recent versions , but still the most recent official binaries available . Before downloading , please check if your Linux distribution comes with a newer version already . <p> The gzip , bzip2 and tar commands should be available on your linux already . <p> Although not discussed here , it should be mentioned that the original Info-ZIP homepage provides further tools , e.g. for the creation of self-extracting zips , gzip and zipsplit , and of course zip/unzip binaries for many other operating systems . <p> i experienced one small problem when using the command-line ( un ) zip together with NTFS file systems ; in short terms , after unzipping " . msi " files , I @ @ @ @ @ @ @ @ @ @ complained that access to the files was not possible or denied ( due to some " execution prevention " mechanism introducted with XP SP2 ) . this was probably because i zipped those files from a FAT partition ( maybe even with an older zip tool ) and then unzipped them on NTFS. the solution was to copy the files to a partition with FAT(32) file system , e.g. an USB stick , and then to run the installer from there . <p> NTFS and ZIP - filetime jumps : <p> another issue concerns filetimes , especially when zipping/unzipping accross FAT and NTFS partitions . in short terms , if you zip files from a FAT partition , then unpack this . zip on an NTFS partition , you always have to expect that the filetimes may be changed globally by a few hours . This is not at all a bug in the zip tool - it 's due to the way that NTFS manages filetimes internally . in case you 're irritated by this , try the following : 1 ) remember the filetimes in some directory on @ @ @ @ @ @ @ @ @ @ your system from summer to winter time , or vice versa 3 ) have a look again at the filetimes and be shocked : all file times have jumped by one hour ! so this is not a zip-specific problem , but it may show up when you compare times listed in a . zip file with those of the files actually created . 
@@120535875 @9535875/ <p> The whole syntax . All commands in a colored 300 page PDF document , with a large font and no side borders , for large text display . Allows zoomless reading on your Smartphone , 2-page side by side reading on your tablet , or optimized printing with 2 pages per paper sheet . Describes both the features of SFK Base and XE . <p> Contains a 60 page tutorial , introducing the most important SFK functions step by step , including 25 pages of detailed xed examples with input , command and output , a 200 page command reference , and a 7 page alphabetical index . Covers the latest SFK version 1.8.7 . <p> detailed tutorial <p> reference part <p> Will it work with your reader device ? Try the 20 page Demo PDF here . The page numbers in the text are links that jump to a page when touched on . On every page you may touch on contents at the left top to jump back to the index . This was tested with Adobe Reader for Android , it does not work with @ @ @ @ @ @ @ @ @ @ is outside the demo , view the first pages here . <h> $4.95 <p> Payment is done by PayPal . Directly after payment you will get a download link displayed on screen . Download/Save the link content to your device : on a Windows PC click with the right mouse button and select Save As . On a Smartphone/Tablet , touch the link for 1-2 seconds until a menu pops up , then select Save Link ( test it with the Demo PDF above ) . Then open the file from within your download folder . 
@@120535876 @9535876/ <p> Depeche View loads all text files from a folder , showing them all in a single window , as if they are one huge text . <p> Furthermore , this all-in-one window can be cloned . A click on the window create button ( or a right click on blank space while there is only one window ) creates another view onto the same text , showing the same location , no matter in what file . <p> This allows to look up informations further down or up in the same file , or nearby files , while keeping a view onto the initial text position , e.g. to swiftly continue editing . <p> Take a look at the example snapshot to the right : <p> I started text editing by double clicking on a word in the left window , within a file " sfk.cpp " . I typed " // get the file size " . <p> Now I need to look up a function named " getFileSize " , to read about it 's parameters . <p> therefore I change into the right side window @ @ @ @ @ @ @ @ @ @ <p> I type " getfilesize " , finding the function immediately . <p> now that I see how it is declared , I continue editing in the left side window . 
@@120535877 @9535877/ <p> sfk touch -date n opts filesfk touch -from srcfile opts file change date and time of file(s) or directories. if just a file- or directory name is given then the access and modification time is set to the current time . with SFK for windows , creation time is not changed by default . options -force create empty file if it does n't exist -date n set file date/time to this value given like YYYYMMDDhhmmss , for example 20130412063015. year 2038 and further may work only with newer file systems like NTFS . NTFS second fractions are set to 0 unless option -nsec is given . -nsec n specify nanoseconds part for -date as a 9 digit number . the last 2 digits are not used and should be 00. -from f copy file date/time from another file -atime change only access time -mtime change only modification time -ctime change only creation time ( Windows only ) -full set or copy atime , mtime and ctime -copyctom do not use current time but copy every file 's creation time into mod. time . may also use -copymtoc , @ @ @ @ @ @ @ @ @ @ through chaining : sfk select mydir . ext +touch ... see alsosfk filetime print times of a file web LONG ... touch foo.txt sets access and modification time of foo.txt to the current time . sfk touch -date 20130412063015 foo.txt sets access and modification time of foo.txt to 12-Apr-2013 at 06:30:15. sfk touch -from src.txt myfile.txt reads access and modification time of src.txt and copies it to myfile.txt sfk select mydir . cpp . hpp +touch touch all . cpp and . hpp files from mydir. sfk sel -withdirs mydir +touch touch all files of mydir and mydir itself . sfk select -justdirs mydir +touch -copyctom for folder mydir itself , and all sub folders therein , copy creation time to modification time , leaving files unchanged . to view times use : sfk filetime -full -justdirs mydir 217463 @qwx1077463 
@@120535880 @9535880/ <p> archive file contents must fit completely into memory . in general , archives below 100 mb should be ok , but beyond that your machine must provide enough memory . <p> zip files must use a normal compression format ( DEFLATE ) , e.g. as it is produced by the InfoZIP or WinZIP tool . ( most zip files in the internet use DEFLATE compression. ) exotic compressions and 64-bit zip files are NOT supported . <p> . tar , . tar.gz and . tar.bz2 files produced by non-Windows/Linux operating systems , or produced by old and exotic tar tools may slightly differ in their format , and may fail to read . <p> To make sure than you can load the archive files you 're most interested in , test loading first in SFK Base ( using the XE Demo mode ) . <p> To browse and search . zip , . tar.gz and . tar.bz2 text contents interactively at high speed , take a look at Depeche View Professional . <p> Replace strings or byte sequences in text and binary files at high speed , with @ @ @ @ @ @ @ @ @ @ large files not limitedby the amount of available memory . <p> Execution times are heavily dependent on content , search patterns , and hardware.But in general , replacing within a gigabyte file is a matter of minutes , not hours . <p> Note : temporary files are not active by default . To enable them if output exceeds 300 MB , set option -usetmp or the environment variable SFKCONFIG=memlimit:300 <p> Search and Replace using wildcards and SFK Expressions . SFK Expressions are not " regular expressions " , but rather simple search patternsallowing to search for character classes like chars of a-z0-9 or bytes not x00 . They are of limited flexibility , but easy to write and understand . <p> Learn more by downloading the free SFK Base , then type sfk xfind to search through text files using SFK Expressions . SFK Base provides read-only commands for wildcard search . SFK XE also allows to reformat and rewrite the found data by command xreplace , in multiple files , and in large files not limited by the memory . <p> Available for Windows XP/2000/Vista/7/8/10 with 32 and 64 @ @ @ @ @ @ @ @ @ @ 32 and 64 bit Windows . <p> No admin rights required . <p> Swiss File Knife XE comes with a special No Admin Installer , allowing installation on every machine , even without admin rights . By default , Swiss File Knife does not install to a path within C : Program Files ( which would require admin rights ) but suggests a path C : appsfk . <p> Optional admin installation to Microsoft standard location . <p> For company admins , there is also an option to install Swiss File Knife XE to the Microsoft standard location C : Program Files ( x86 ) . This option requires admin rights . Under Windows 7/8 , the installer will require two additional clicks . Under Windows XP , the installer must be " Run As " with an administrator account . Installing as admin ist just an option , but not required for companies . <p> Portable Installation to USB stick . <p> The Swiss File Knife XEinstaller contains an option to install Swiss File Knife to a portable USB stick . You may then insert that stick into any @ @ @ @ @ @ @ @ @ @ stick . The portable binary can not be used under Linux/WINE . Also see the installer screenshots below . <p> Easy deployment . <p> No Serial Number Typing . <p> The Swiss File Knife XE Installer already contains the license I 'd . You simply make a few clicks to install as shown below . <p> Company admins run the installer the same way on every target machine . The installer supports a command line option -silent to install instantly without any dialogues ( Search " silent installation " in the help text for details ) . All license participants use the same license I 'd . <p> No technical enforcements . <p> The license owner ( company admin ) himself should keep track of the total number of installations and users . Swiss File Knife XE contains no automatic checking , especially no dongles , no network messages , no license server or live activation . <p> One year of free upgrades . <p> If a new version of Swiss File Knife is released within one year after your purchase , you can download that one as well , for free @ @ @ @ @ @ @ @ @ @ customers who want the latest features can get an upgrade for the halve price . For single user licenses just login to your download account to find the upgrade option . Block license customers may contact <p> Please note : before you purchase XE , it is required that you have some experience with the freeware edition , SFK Base , and know how to use a command line program . Play around with sfk xfind , sfk xed and the sfk xreplace demo . As soon as you can use SFK Base successfully to find text patterns within files , and to edit a file content with xed using Simple Expressions , then you are ready to purchase XE . <p> Swiss File Knife Extended Edition <p> 32 bit binary for Windows XP/2000/Vista/7/8/10 operating system with 32 and 64 bits <p> Number of licenses <p> Payment is done by PayPal . The order processing is fully automated , available 24/7 . Within a minute after payment , you will have your download . <p> If you have any problems during your ordering process , please EMail to : <p> @ @ @ @ @ @ @ @ @ @ then our reply may got lost in a spam filter . Write then again from a different account , like googlemail . <p> Ask our sales department : if you prefer payment by wire transfer to our German bank account , or need a different number of licenses , then please EMail to No matter if you need 1 license or 127 , we will be happy to reply with a price quote . Please note that payments by wire transfer will take 2-3 business days for processing . 
@@120535881 @9535881/ <p> Created and owned by Juergen Thumm , experienced software developer , StahlWorks Technologies provides revolutionary non-standard tool solutions to improve the everyday computer based working process , for anyone doing serious work with his PC or Notebook . <p> During more than a decade of projects across many Windows and Linux systems , it turned out that on every new machine , basic functionality like easy file search , file transfer , efficient folder content listing or text conversion are far too complicated to configure or to use , or not present at all . That 's why the Swiss File Knife was created , providing a hundred most needed functions across all systems , on the command line for easy automation . <p> And furthermore , it became clear that no program on earth provided a quick , simple way to view , search and edit huge amounts of text . Today 's Integrated Development Environments are software dinosaurs with thousands of functions , but the most basic tasks , like displaying the same text file in two windows side by side , are often not possible @ @ @ @ @ @ @ @ @ @ , new way to the most important thing - the text , which is the foundation for many things like program source code , batch files , database exports , configuration files , log outputs and documentation . <p> StahlWorks Technologies , a small but independent enterprise located in the south west of Germany , focuses on these two essential products . We value our customer 's feedback , which lead to many useful product changes already . <p> Juergen Thumm , CEO <p> StahlWorks Technologies <p> Media Resources <p> Permission is granted to use the following images in articles about products of StahlWorks Technologies . 
@@120535882 @9535882/ <h> Depeche View loads all text files from a folder , showing all content in one window . <p> The tool is used to search , analyze and edit huge amounts of text ( source code , CSV data , log files or documentation ) at high speed with the smallest possible effort . It is designed for industrial use , e.g. to analyze automotive software projects with 50,000 source files.Depeche View Lite is portable freeware , use it without installation ! <p> Under Windows , run the tool through double-click , then click on Open and select a folder containing many text files . Alternatively , open a command line and type " dview dirname " . Under Linux or Macintosh ( i686 ) : make sure Wine 1.4.1 or higher is installed , then type " wine dview.exe -linux " to run the tool in Linux compatible mode . Both ways will run Depeche View . The tool will load all text files from the given directory , and all subdirectories , and display their contents in a single window : <p> Ultra High Speed GUI . @ @ @ @ @ @ @ @ @ @ completely different to any other application . This is because window fragmentation , dialogues and menus are time wasters that make sense only for configuration purposes , but not while you need to search or edit something quickly . But read on . Search as you type . To start searching for a word , just type it . No drop down menus , no filling out of dialogues , nothing - just type the word . When you stop typing , dview will search for it , instantly and across all files . In the above example , the word " description " was typed and searched . The hits are highlighted in red and yellow . Search as you click . Another instant way of searching a word is to click on any word within the text . If you SHIFT+click on a word like EXTMGRFUNCINIT , for example , <p> it is searched instantly , and instantly you get the list of results , again . Fly over search results . To fly over all hits for the current search , press F3 . You will step @ @ @ @ @ @ @ @ @ @ dialogue boxes , you do n't have to click or press anything to change between files . Fly over text by Grab And Drag . To surf over text , click anywhere into the text , keep the left button pressed , then pull the mouse down or up . Forget about exact , time-wasting clicks and drags of scrollbar buttons . DView gives you touchscreen feeling without a touchscreen ! By the way , are you scrolling through this text using a scrollbar ? Then I recommend the Firefox extension grab and drag ( not associated with DView or this website ) which provides the same feeling for web surfing . Read here how to configure . New views by a single click . As said above , a SHIFT+left button click on any word searches it instantly , within the same window . But what if you want to stay with one piece of text , and search another word in a second window ? Simple : do a right mouse click . <p> This example was a right-click onto " Report " . Because no second window @ @ @ @ @ @ @ @ @ @ searched therein . No dragging around of window edges , no long and time-wasting size changes - view two parts of text instantly . Keys sorted by frequency . Press F1 anytime to switch between multi-view and maximized mode . It 's F1 and not some other key , because switching between these two view modes is the function used most frequently within Depeche View - therefore it uses the key easiest to reach . All results only : the Filtered View . Click the button at the bottom , or press F4 to view all text lines that contain your search result . Click into any of those lines to reenter normal text display , or press F4 again . SHIFT + Click = Speed ! The Depeche View GUI is a radical , new concept which does require some training . Instead of selecting text and then using a command on the selection , which is a two step operation , DView allows to search , copy and bookmark with just one click . When doing a hundred searches a day , you will feel the difference . @ @ @ @ @ @ @ @ @ @ or popup menus , and learn the DView fundamentals of a SHIFT+click ( =search ) , CONTROL+click ( =copy ) and ALT+click ( =bookmark ) on words or phrases . Those who master these basics of Depeche View will enter a new dimension of speed in searching and editing thousands of files . Fully portable application , instant use from USB stick . Depeche View Lite requires no installation , and Depeche View Pro supports portable installation to USB stick . This way you can run DView from a stick instantly , whereever needed . To change some default behaviour , you may create a config file and copy it into the same directory as dview . <p> Help requests , Bug reports and Open discussion : Can be submitted in the SFK forum . You may have to create a free account at sourceforge , or use your OpenID . Depeche View is based on Swiss File Knife technology for loading file trees and supports the same options as sfk 's snapto command . For software download sites , PAD files are available here for DView Lite and Pro . 
@@120535884 @9535884/ <p> Hands on : How to install free virtual Linux on Windows for safest surfing , or to compile a program with Linux . Follow these steps , and become a Linuxer within an hour ( including download times by DSL or cable ) . <p> 2 . Run the VMWare Player installation . This may take another 5 minutes ; VMWare Player is a large application which needs to install some drivers and services . <p> 3 . Now all you need is a machine image to run . The VMWare site contains a 260 MB Browser Appliance , which is an Ubuntu Linux with pre-installed Firefox browser . <p> Downloading 260 MB via DSL/cable may take half an hour . If you are impatient and want a much smaller Linux , have a look at VMWare 's appliances directory . If you just want a surf station Linux , search for the 55 MB Damn Small Linux . And if you want to exchange downloaded files with the windows host , read on here how to do this . <p> But my intention for a Linux download @ @ @ @ @ @ @ @ @ @ but also to upgrade this to a full Linux installation sufficient for software development . And this should be easiest with the Ubuntu surface . <p> 5 . After the download , unpack the . zip to some hard disk with at least 2 GByte of free space . The image files are 1 GB , but you have to provide some space as well for the VMWare memory image files , and further applications we like to install . <p> 6 . Run Browser-Appliance.vmx by a double click . The virtual Ubuntu is booting . There is only one user configured , so you do n't have to enter a username - the full GUI with a browser appears instantly . <p> 7 . Make sure your VMWare ethernet settings are " NAT " ( network address translation ) , and that connected is set . Then you should be able to surf with the given Firefox instantly . <p> 8 . C++ compilation with linux : let 's open a shell through Applications / Accessories / Terminal . Typing g++ only tells " command not found " . @ @ @ @ @ @ @ @ @ @ <p> By the way , if you 're irritated by the VMWare menu at the top of the screen , just click on the needle symbol , move the mouse down , and wait a second . The menu will disappear . <p> Furthermore , you may press CTRL+ALT any time within VMWare player to leave the full screen mode and get back to windows . <p> 9 . To install software , enter System / Administration / Add Applications . Because you 're about to administer the system , you 'll be asked for the administration password . As told on the Browser Appliance download page , the only account is vmware with password vmware . So enter this . <p> We enter the application installer in some kind of simple mode . It 's actually a bit too simple - many packages do n't seem to be available , so forget about this mode and select File / Advanced . <p> 10 . Package source upgrading . We want to install something . Unfortunately , Ubuntu has one problem : no matter what version you download , it @ @ @ @ @ @ @ @ @ @ try to install any software , the package manager only tells you not found because package sources for your version no longer exists . The workaround is to add package sources from newer Ubuntu versions : <p> in the package manager , select Settings / Repositories <p> remove all listed entries , as they 're no longer supported <p> click Add / Custom <p> Then type : deb http : **31;0;TOOLONG hardy main restrictedand confirm the following query with yes . <p> Now your Ubuntu should be able to install the most important applications . Of course , an alternative would be to download some up-to-date Ubuntu VM appliance , but these are at least 700 MB in size and may change on a monthly basis . <p> 11 . Compiler installation <p> Within the Synaptic Package Manager , <p> click on Development <p> mark gcc-4.2 for installation ( via right mouse button ) <p> then click on Apply . <p> Some packages will be downloaded . Whatever you 're asked for ( upgrade libc etc. ) , just click Yes or Forward . <p> Then select Applications / Accessories @ @ @ @ @ @ @ @ @ @ g++ " . You should now have a working compiler . <p> 12 . File exchange between the Linux and Windows side <p> may often result in an endless trying-around with all kinds of tools.First of all , try the sfk ftp , which should be working in most cases . <p> 13 . Installing multimedia support with Linux <p> To add multimedia support to Linux , it is highly recommended to download a different , up-to-date appliance . I 'll list the usual required steps below , but with Ubuntu 5.10 , you may have to find the correct package sources first . <p> run synaptic packager , activate all sources . <p> search and add gstreamer packages , but exclude 0.8 and -dbg packages . <p> add gxine , libxine-extracodecs , mplayer , mozilla-mplayer , vlc . <p> search the web for the " plf repository " , " w32codecs " or " win32codecs " to get . avi and . wmv support . <p> the " gxine " plugin for firefox seems to crash on video playback , therefore deactivate it , by moving **30;33;TOOLONG into a @ @ @ @ @ @ @ @ @ @ flash is n't working correctly , type " about:plugins " within firefox and check which . so files are registered to display flash . if you find multiple entries , it may help to deactivate the first . so , again by moving it into another directory ( e.g. plugins2/ ) where the browser can not find it . restart the browser , and retry . 
@@120535885 @9535885/ <p> sfk replace singleFile -text /src/dst/ pattern2 ... -yessfk replace -spat -binary /A0A1A2/B5B6B7/ -dir anydir -file . ext1 -yessfk rep -dump -wide -bylist words.txt file1 file2 ... -yes replace text or binary data in text and binary files . may replace many different patterns in parallel . Multiple search patterns are executed in the given sequence . Mind this if they overlap , e.g. /foo/bar/ /foosys/thesys/ makes no sense ( foo is replaced by the first expression , so the 2nd one will fail to match ) . by default , replace functions run in SIMULATION mode , previewing hits without changing anything . add -yes to apply changes . Changing binaries may lead to unpredictable results , therefore keep backups of your files in any case . license notice this is the open source version of sfk replace . replacing source / target patterns of different length is slower and may require much memory compared to replacements of same length . SFK XE contains a different implementation with high performance . subdirectories are included by default the sfk default for most commands is to process the given directories @ @ @ @ @ @ @ @ @ @ -nosub to disable this . options -nosub do not include files in subdirectories. -nobinary skip binary files . -case case-sensitive text comparison . default is case-insensitive comparison for all -text strings , but NOT for -bin blocks . case-sensitive comparison is faster then case-insensitive. -nocase force case-insensitive comparison ALSO on -bin patterns . -pat starts a list of search or replace patterns of the form xsrcxdstx where x is the separator char , src the source to search for , and dst the destination to replace it with . e.g. /foo/bar/ or foobar both replace foo by bar . -pat is not required if a single filename is given . -text the same as -pat , starting a text pattern list . -spat same as -pat but also activates slash patterns like t . type " sfk help pat " for the list of possible patterns . -spatstrict same as -spat , but stops with error on undefined slash patterns like m in C : myproj. every slash must then be escaped , e.g. using C : myproj. -binary starts a list of binary replace patterns , specified as hexcode @ @ @ @ @ @ @ @ @ @ x.txt , supporting multiple lines per pattern . ( add -full for more. ) -bylinelist x read /from/to/ or just /from/ patterns from a file x with one pattern per line . ( add -full for more. ) -by(line)list does not support sfk variables . to use variables in patterns create an sfk script with patterns as parameters . " sfk script " for more . -recsize with same length replacements : set input record size for processing ( default=100k ) -firsthit process only first found pattern match per file . -maxscan=nm stop searching after ( approximately ) first n megabytes per file . can be used only with same length replace . -quiet do not show progress infos. -stat show statistics like hits per pattern and no. of files . -perf show performance statistics . -memlimit=nm with different-length replacements , files must be loaded into memory for processing . the default limit for memory use is 300 MB. set -memlimit=500m to select 500 MB. -full print full help text telling about -bylist pattern files , special character case sensitivity and nested or repeated replace behaviour . output options -dump @ @ @ @ @ @ @ @ @ @ with -dump : show 16 bytes per line . -lean with -dump : show 8 bytes per line . -dumpfrom always dump search hits but not replaced text . -dumpall dump search text and replaced text . -nodump do not create a hexdump , list only matching files . -astext no hexdump , but print search hits as plain text . use this only with plain text files , not binary . -showle highlight CR/LF line endings in hex dump output -context=n with hexdump : show additional n bytes of context . -reldist with hexdump : tell relative distances to previous hits . -to dir$file write output files to given path . for details about output file masks , type " sfk help opt " or " sfk run " . -tofile x write output data to a single output filename x ( which is not interpreted as a mask but taken as is ) . return codes for batch files 0 = no matches , 1 = matches found , &gt;1 = major error occurred . see also " sfk help opt " on how to influence error processing @ @ @ @ @ @ @ @ @ @ SFK base , " foo " will be replaced by " bar " and then immediately " bar " is replaced again by " goo " . with SFK XE , a replaced part of text is not replaced again in the same command , so " foo " stays replaced by " bar " . unexpected repeat replace behaviour depending on the input data and search/replace expressions , it can happen that running the same replace multiple times on the same file produces further hits that did n't exist in the first run . add option -full to read more on this . quoted multi line parameters are supported in scripts using full trim . type " sfk script " for details . performance notice the system may cache output file(s) , writing to disk in background after sfk has finished . subsequent batch file commands may execute slower . see also--- open source commands ---sfk xfind search wildcard text in text/binary files sfk xtext search wildcard text in text files only sfk xhexfind search in text/binary with hex dump output sfk extract extract wildcard data from text/binary files @ @ @ @ @ @ @ @ @ @ find search fixed text in text/binary files sfk ftext search fixed text in text files sfk hexfind search fixed text in binary files sfk replace replace fixed text in text/binary files --- freeware commands ---sfk view GUI tool to search text as you type --- xe commercial commands ---sfk replace replace fixed text with high performance sfk xreplace replace wildcard text in text/binary files sfk help xe about SFK XE and xreplace with SFK Expressions . beware of Shell Command Characters . to find or replace text patterns containing spaces or special characters like &lt;&gt; ! &amp; ? * you must add quotes " " around parameters or the shell environment will destroy your command . for example , pattern /foo bar/other/ must be written like " /foo bar/other/ " within a . bat or . cmd file the percent % must be escaped like %% even within quotes : sfk echo -spat " percent %% is a percent x25 " web referencehttp : **30;65;TOOLONG usage errorssfk hexfind in.txt " /foorn/ " will not find " foo " at line ends , but searches literal strings like " slash and @ @ @ @ @ @ @ @ @ @ , converting rn to real CRLF codes , or use xhexfind where slash patterns are default . sfk hexfind mydir " /foo*bar/ " will not find " foo " and " bar " with any characters inbetween , but searches a literal star " * " . use xhexfind to enable search with wildcards. sfk rep in.txt " /foo0.1000 bytesbar/---/ " will not replace up to 1000 bytes between " foo " and " bar " , but replaces a literal string " foo " then " 1000 bytes " then " bar " . use xed or xreplace instead . examplessfk replace myfile.dat " /Lemon/Curry/ " replace Lemon by Curry within myfile.dat. search is case-insensitive , therefore " lemon " will be replaced as well . the quotes " " are optional here . sfk replace -pat /FooCase// -dir . -file . txt search for FooCase in all . txt files below current directory . note that if you leave out the single fileOrDir parameter , you have to say -spat , -bin or -text first to tell clearly that you will specify the target fileset later on . @ @ @ @ @ @ @ @ @ @ " The foo " by " The " and " bar " separated by TAB char , within all files within mydocs. sfk rep -binary /1A/20/ -dir docs -file . txt . info . note replaces all bytes with code 0x1A by code 0x20 , in all . txt , . info and . note files , in directory docs and all subdirectories. sfk replace tmpimage.dat -bylist patches.txt searches for source patterns in file tmpimage.dat , replaces by patterns specified in patches.txt SFK Base and XE : swap text in two stepssfk -yes rep io.txt /foo34/foo99/ /foo12/foo34/ +rep /foo99/foo12/ replaces foo12 by foo34 and vice versa. with SFK Base , a word which is replaced may be replaced again by a following pattern , therefore the intermediate step : turn foo34 into something not used anywhere in io.txt , then replace foo12 , then replace the intermediate pattern back in a second replace command on the same file . SFK XE only : swap text in one stepsfk rep io.txt /foo12/foo34/ /foo34/foo12/ -yes replaces foo12 by foo34 and vice versa. with XE , a word which is replaced is not @ @ @ @ @ @ @ @ @ @ foo34 " from the first pattern is not changed by the 2nd. sfk hexfind mydir -pat /FooCase/ +list -late do not replace , just find binary files containing " FooCase " , then list them sorted by time . also accepts -bylist files . sfk replace -binary /666f6f/626172/ -dir mydir -file . dat replace binary data with hex values 0x66 , 0x6f , 0x6f by data with values 0x62 , 0x61 , 0x72 in all . dat files . example with output : preparing a replacement of pattern " class Foo " . sfk rep testfiles " /class foo/class Other/ " -dump output : simulating : total hits/matching patterns/non-matching LONG ... hit at offset 0x64 &gt;6F6E616C 6974792E&lt;onality. 00000054 &gt;0D0A2A2F 0D0A0D0A&lt; .. */ .... 0000005C **29;97;TOOLONG Fo 00000064 &gt;6F475549 0D0A7B0D&lt;oGUI .. . 0000006C &gt;0A707562 6C69633A&lt; . public : 00000074 001/1/0 **36;128;TOOLONG **30;166;TOOLONG : hit at offset 0xE6C &gt;6F6E616C 6974792E&lt;onality. 00000E5C &gt;0D0A2A2F 0D0A0D0A&lt; .. */ .... 00000E64 **29;198;TOOLONG Fo 00000E6C &gt;6F475549 0D0A7B0D&lt;oGUI .. . 00000E74 &gt;0A707562 6C69633A&lt; . public : 00000E7C 001/1/0 **30;229;TOOLONG 38 files checked , 2 would be changed . add -yes to execute. the input data is listed as @ @ @ @ @ @ @ @ @ @ @qwx1077463 
@@120535887 @9535887/ <p> Depeche View loads all text files from a . zip , . tar.gz , . tar.bz2 or . jar file , showing them all in a single window , as if they were one large text . <p> The tool can even view nested archives within archives , e.g. a . jar file embedded within a . zip file . <p> This makes it extremely helpful for programmers who need to get a quick overview in downloaded Open Source packages , to check if they contain a solution for a specific technical issue . <p> But of course it is also helpful for anyone who wants to check quickly the contents of some archive file , either downloaded from the web , or on hard disk . <h> High Speed Open Source Research <p> An example session with Depeche View Pro : <p> I need example source code on how to write a video player . I go to sourceforge.net and search for " video player " . I get a list with 300 results . There is an " Open Video Player " , presenting a download @ @ @ @ @ @ @ @ @ @ contains source code in a . zip package , so let 's try . I click on that button . <p> The file is downloaded and opened in Depeche View Pro immediately , presenting 319 text files . Clicking the Filter button gives me the list of filenames . Unfortunately , the project does not use C++ , but " . cs " files , meaning Microsoft Visual C# code . But I want a C++ or C example , so I press Escape and ignore that package . Depeche View saved me lots of time , as I did n't have to extract the package at all . <p> back into the SourceForge result list . I see " xine-lib-1.1.19.tar.bz2 " . Let 's try that . As Depeche View comes up , the file list says : it 's C source code ! <p> so I type " int main " and click on the button , to find main programs that can be taken as a research starting point . <h> Try it yourself ! <p> Run the tool as Administrator , to allow registering of file @ @ @ @ @ @ @ @ @ @ all under " Register Depeche View In Windows Explorer " , as shown to the right . <p> Close Setup , exit the program by Escape . <p> The next time that you click on a . zip or . tar.bz2 link within Firefox , you will be asked to open it with Depeche View directly . <p> One further tip : when searching stuff in a . zip file , use the Filter button ( square F at the right bottom ) intensely , as it gives you either a list of text lines containing only the searched word , or the whole file list . Even better , right click on that button to activate Auto Filter Mode ( it then becomes a square A button ) . More about it in the tool 's help under " Filtered Views " . 
@@120535888 @9535888/ <p> I type " mousewheel.acceleration " . Within one second ( * ) ( on a 2.13 GHz i3 notebook , with 4 GB of RAM ) I 'm landing in some source file where the value is read in a method GetAccelerationStart . <p> Next I want to know where this method is called from . One Right Click onto the word GetAccelerationStart , and it is searched in the second window . Within two seconds ( * ) I see there is one place calling it , called AccelerateWheelDelta . <p> And so I may continue with further right clicks , ping-pong tracking how the mouse wheel accelaration is used in the Firefox browser . <p> And whenever an important place in the code is found , a double click ( or optionally single click ) enters editing mode , allowing to change the source code at that place immeditately . <p> Depeche View Pro comes with built-in syntax highlighting for C and C++ source code . The highlighting can be adapted or extended through a configuration file with straightforward syntax : see an example here and search for name= " cpp " . 
@@120535889 @9535889/ <p> sfk dupfind -dir anydir -file . ext1 . ext2 find and list duplicate files , just by file content , independent from filename . searches for files with same size and then compares contents by md5 checksums. options -diffdirs list only duplicates residing in different root directories. this option requires that you specify at least two dirs after -dir. -listorg list all original filenames , leave out any duplicate filenames. -minsize=n compare only files with size &gt;= n. examples for n are : 5m = 5000000 bytes ( 5 mbytes ) 100k = 100000 bytes ( 5 kbytes ) 1M = 1048576 bytes ( 2&lt;&lt;20 bytes ) 9000b = 9000 bytes command chaining - by default , this command passes the names of found duplicate files to the next command . - option -listorg does the opposite : it passes only original filenames , but no duplicates , to the next chain command . NOTE : if identical files are found , the decision what is listed as " original " or " duplicate " is currently based on the order in the file system : the file @ @ @ @ @ @ @ @ @ @ carefully if this is what you think , before cleaning up any duplicates . web LONG ... dupfind . find all duplicates within the current directory tree . sfk dupfind -dir docs1 docs2 docs3 find all dups across and within the given directories. sfk dupfind -diffdir -dir docs1 docs2 docs3 find dups between docs1/docs2 , docs2/docs3 , docs1/docs3 , but does NOT list dups within the same root directory . sfk dupfind docs . doc +del find all duplicate . doc files , within the docs directory tree , and delete them . sfk dupfind -listorg docs . doc +run " copy $file docs2 " copy all . doc files from docs to docs2 , but leave out any duplicate files . sfk dupfind -dir pic1 -dir pic2 -dir pic3 find duplicates across three different directory trees . specifying multiple -dirs is also a way of influencing the result order ; if a file is found both in pic1 and pic3 , the file from pic1 will be listed as original , the other one as the duplicate . sfk sel -dir pic1 pic2 pic3 -file . jpg +dup -minsize=1m @ @ @ @ @ @ @ @ @ @ : list all . jpg files from the pic directories , then pass this to the dupfind command , also filtering by size . 217463 @qwx1077463 
@@120535890 @9535890/ <p> sfk md5gento=outfile dir mask mask2 ! mask3 ... sfk md5gento=outfile -dir dir1 dir2 -file mask1 mask2 ! mask3 ... create list of md5 checksums over all files in a folder . by default , this also includes all subfolders ( recursive tree walk ) . sfk md5gento=md5.dat thedirsfk md5check=infile -skip=n -skip n verify list of md5 checksums. to speed up verifys by spot checking , specify -skip=n : after every checked file , n files will be skipped . sfk md5check=md5.datsfk md5 -quiet -verify md5sum file1 file2 file3 ... calculate md5 hash of one or more files , and optionally compare results . if md5 sums are compared , both a message is issued , and the shell rc is set to 0 ( all equal ) or 1 ( not equal ) . sfk md5 test01.dat tell md5 sum of test01.dat sfk md5 test01.dat test02.dat compare both files , if content is the same . sfk md5 -quiet -verify **32;261;TOOLONG test01.dat check if test01.dat has an md5 matching the one specified . issues no output , returns a shell return code &gt; 0 on mismatch . If @ @ @ @ @ @ @ @ @ @ you may turn them into self-verifying archives by adding an md5 list , sfk.exe , and a short batch file in it 's root directory . For example , create a batch file " 90verify.bat " that contains two commands : 91toolssfk md5check 91toolsmd5sum.txt pause Then create a directory 91tools , copy sfk.exe into it , and run sfk **26;295;TOOLONG . Test the whole stuff once before burning , by running 90verify.bat . Then burn everything onto DVD . Insert the DVD into another PC , double-click on 90verify.bat . This way you verify that your DVD can be read also on another machine , which is an important test for your data 's safety . The md5 checksums for the current sfk distribution binaries are : sfk156.zip **32;323;TOOLONG sfk156.exe **32;357;TOOLONG sfk156-linux.exe **32;391;TOOLONG sfk156-linux-lib5.exe **32;425;TOOLONG dview142.exe **32;459;TOOLONG 217463 @qwx1077463 
@@120535892 @9535892/ <p> sfk echo options string string2 string3 ... sfk tell -spat string string2 string3 ... prints the supplied string , which may contain color patterns : LONG ... ( bright ) LONG ... ( dark ) print the following text in the selected color . def switch back to default color . print the ' ' character , no not interpret the following word . print the ' ' character , do not interpret it . options : -literal or -lit disables everything , even color patterns , i.e. words in brackets like red are not changed . -noline stay in the same line , print no linefeed. if your string ends with r , -noline is assumed . for command chaining -noline requires -literal and a command accepting binary data , like xed : sfk echo -lit -noline " %1 " +xed ... -pure same as -literal -noline. use this always to send chain input data as unchanged as possible , like filenames from parameters , to following commands : sfk echo -pure " %1 " +xed " / " ... -spat activates slash patterns : t=TAB q= @ @ @ @ @ @ @ @ @ @ nn. can be given after -lit to use slash patterns without colors. -joinline join all into one line . line ends are stripped from quoted multi line parms ( full trim ) . multiple string parameters are joined without blanks . -lines print every given string as a single line . command chaining supportsfk tell just prints to terminal , and never sends text to a following command . always prefer this if you just want to print an info to terminal . sfk echo will send the given text to a following command if it accepts text or filename list input . to send a single string as unchanged as possible to a command accepting binary data , like xed , use -literal -noline. by default , echo produces only text data , not filenames. to send this to file commands use +texttofilenames or +ttf. echo -lines may produce filename lists directly . quoted multi line parameters are supported in scripts using auto indent . type " sfk script " for details . use option -joinline to apply full trim . see also : sfk help colors web LONG @ @ @ @ @ @ @ @ @ @ prints " error : missing filename . " onto terminal . sfk tell CyanNOTE : def type the word red with brackets ! prints " NOTE : type the word red with brackets ! " onto terminal . sfk echo " Greenmytext contains : def " +then filter mytext.txt+then forces echo not to pass its text to filter , but to print it immediately . filter then prints the content of mytext. sfk tell " Greenmytext contains : def " +filter mytext.txt same as above , but shorter . tell never sends text to following commands therefore +then is not required . sfk tell -nocconv -spat " xc9xcdxbbnxba xbanxc8xcdxbcn " print a graphical box using extended dos characters . more infos under sfk ascii -dos and sfk help optsfk echo -spat " foonandnbar " +tofile mydirtest1.txt create a small text file with three text lines sfk echo -pure " C : in.txt " +xed -dump send the string C : in.txt as unchanged as possible to xed and create a hexdump , to check that no ( CR ) LF was added . sfk echo -pure -spat " footbar " @ @ @ @ @ @ @ @ @ @ tab character then " bar " to xed and create a hexdump. " t " is changed by -spat. sfk echo -lines 100 101 102 +perline " web . $text/status.xml " load page /status.xml from three local ip 's .100 , .101 , .102 sfk color colorname switches the text color of terminal ( command line ) . supported color names are : white grey red green blue yellow cyan magenta black 217463 @qwx1077463 
@@120535893 @9535893/ <h> split and join large binary and text files <p> , using the sfk split command for Windows , Mac OS X , Linux and Raspberry Pi , to enable transport or archiving on size limited media like usb stick , dvd or cd , or to work around file system limitations . <p> sfk split partsize inputfile outputfilebase -noverify reads and splits inputfile into output files of specified size . if output files exist already , split asks if it may overwrite ; specify -yes to overwrite outputs without asking . partsize syntax : 100000b , 100k = 100000 bytes 2000000k , 2000m , 2g = 2 giga-bytes if outputfilebase is omitted , outputfilenames will be : inputfile.part1 inputfile.part2 inputfile.part3 ... if outputfilebase is given , . part1 is appended to this . options -yes always overwrite existing output files . -noverify no verify after split . -altsize use different method ( fseek ) to read the file size . -getsize=n:d before splitting , read file size n times with a delay of d milliseconds ( default=100 ) . -verbose be verbose about file size results etc. -buffer=xm @ @ @ @ @ @ @ @ @ @ . -update do not rewrite existing parts of full size . useful when splitting repeatedly a growing input file , e.g. during a download . -update implies -yes. -digits=n set minimum number of digits used for the . part extension . since sfk 1.6.5 , sfk join will autodetect the number of digits . if output will be joined with older versions of sfk then -digits must stay default ( 1 ) . -text split at line boundaries if possible . can not be combined with -update. performance notes the operating system may cache output files , writing to disk in background after sfk has finished . subsequent split commands may run slower , even if -noverify is used . web LONG ... split 2g c : bigfish.avi d : transfereasy.avi splits bigfish.avi into easy.avi.part1 , . part2 etc. to rejoin the files , use the sfk join command : sfk join d : transfereasy.avi.part1 e : full.avi joins easy.avi.part1 , . part2 etc. into full.avi splitting text files by no. of lines : this is not yet supported by sfk , but for example the cygwin split command supports @ @ @ @ @ @ @ @ @ @ requiring some installation . if you have it installed , type for example split --lines=10000 biginput.txt outprefix which creates output files outprefixaa , outprefixab etc. see also : sfk partcopy - copy a single byte block from a binary file sfk hexdump - dump parts of a file for further analysis sfk snapto - joins all text files of a directory 217463 @qwx1077463 
@@120535895 @9535895/ <p> Depeche View is a high speed text search application that can search TAB separated database exports from databases or spreadsheet applications in realtime . <p> It allows to search words as you type , or by clicking on words already present on screen , producing result lists instantly . <p> A typical scenario is to check address data for correctness . <p> In the screenshot to the right , a database of zip codes , or postal codes , taken from geonames.org was loaded with Depeche View Pro . The database provides country code , postal code , place name , state , county and community as tab separated columns . <p> I press CONTROL+SHIFT+TAB in Depeche View to select a large tab size of 20 , for a better display of the columns . <p> I right click on the button to activate AutoFilter mode . This means : whenever I type a word , the tool will present a list of only the text lines containing that word ( a filtered view ) . <p> Now let 's type , for example , " Washington " @ @ @ @ @ @ @ @ @ @ containting that word . But actually I meant the city Washington , not every city within a state , county or province named Washington . <p> So I have to restrict my search to the third column of the database , as this is the city name . This is done by typing : <p> COL3 washington . <p> This way , I get only 358 hits . But still I get city names like Mount Washington , or Fort Washington . I want records with the whole 3rd column containting only Washington , and nothing else . Furthermore , it should be in the District Of Columbia only . Finally , I type : <p> COL3FULL washington COL5FULL DC <p> and get all zip codes from exactly that city . <p> As you can see , the main principle of Depeche View is simplicity . It does NOT use complicated regular expressions , but plain English search operators like AND , OR , NOT , or COL for column . <p> Furthermore Depeche View allows to search words by a single click on a word , either in the @ @ @ @ @ @ @ @ @ @ different window . This allows high speed jumping between different table contents . <p> Tab separated database , displayed with tab size 20 <p> Simple search for Washington presents too many results <p> Search restricted to partial hit within 3rd column <p> Search with exact 3rd and 5th column text <p> Another major feature is clipboard automation : let Depeche View run in parallel to your spreadsheet application , and whenever you copy a word into the clipboard , let Depeche View run an automated search in it 's text data . <p> This and more can be tried immediately by downloading the free Depeche View Pro Demo. 
@@120535896 @9535896/ <p> sfk list -time -size-size=digits ... dir masksfk select -dir dir1 dir2 -file . ext1 . ext2 ! . ext3 ... list all or just selected files from a directory tree . select is the same , but it ignores command chaining input . options -time show date and modification time -flattime show date and time in a more compact format -tab separate columns by tab characters , not blanks -size=n show size of files n characters wide -kbytes or -kb lists sizes in kbytes instead of bytes -mbytes or -gbytes lists sizes in mbytes or gbytes -kbpure list without " kb " postfix -stat show statistics ( number of files , dirs , bytes ) and tell if hidden files or dirs were skipped . -nofollow or -nofo does not follow symbolic directory links . use this if list runs in an endless recursion . -withdirs list also directories -justdirs list just directories -hidden list also hidden or system files -arc list contents of well known zip , tar.gz and tar.bz2 archives as deep as possible , including nested archives . type " sfk help opt " for @ @ @ @ @ @ @ @ @ @ list archives , lists only archive entries at the top level , skipping nested archives . -xarc list contents of any zip file , regardless of file extension , and tar.gz and tar.bz2 files . reads the first bytes of every file and will therefore perform slower then -arc. -qxarc quick list any archive content . -sort=n sort by name , list all or last n files -sortrev sort by name , in reverse order -late=n sort by time , list latest n files last -old=n sort by time , list oldest n files last -big=n sort by size , list biggest n files last -small=n sort by size , list smallest n files last -skiplate=n sort by time , select all except newest n -minsize=s list only files &gt;= size , like 10b or 100k -maxsize=s list only files &lt;= size , like 10m or 4g b=bytes k=kbytes m=megabytes g=gigabytes -late=all sort by time , list all files -notime do n't list time , after -late or -old -nosize do n't list size , after -big or -small -pure pure list of filenames , leave out time , size @ @ @ @ @ @ @ @ @ @ quotes . needed when post-processing filename lists containing blanks . -quiet do not show the " scan " progress information -since list only files since this timestamp , e.g. " 2006-01-31 12:15:59 " or 20060131121559 2006-01-31 or 20060131 today : files changed since midnight of today 1d : changed since 1 day , i.e. not counting from midnight , but 24 hours into the past 5h , 30m , 10s : 5 hours , 30 minutes , 10 seconds . -before select files modified before that timestamp. -today short replacement for " -since today " . -usectime use or list creation time instead of modification time . may not be available on some filesystems. -utc or -gmt lists UTC/GMT time instead of local time . -sincedir compare against another directory , list files that or -sd have been added , have different time , or content . does not list files which have been removed . -sinceadd like -sincedir , list only added files . -sincedif like -sincedir , list only changed files . does not list files with diff. time but same content . does not list added files @ @ @ @ @ @ @ @ @ @ files . or -sc does not list files with diff. time but same content . -relnames list filenames relative to specified directory(s) , i.e. strip root directory names at the beginning . -absolute list all filenames with full absolute path . -tomake . ext select only files that have no , or an older , counterpart file with extension . ext in the same folder . -tomake outdir$base.ext select only files that have no or an older counterpart file in outdir with . ext. see " sfk run " for example : . wav to . mp3 conversion -tofile x write all names directly to file x ( using less memory than the chain command +tofile x ) . -maxfiles=n list a maximum of n files only . -fileoffset=n from all selected files , list only a subset , starting at index n. first file has index 0 . -upat unix style exclusion syntax with : instead of ! e.g. -subdir : /tmp does the same as -subdir ! tmp -upat2 also support wildcard % instead of * important details of file name / extension selection : - when specifying @ @ @ @ @ @ @ @ @ @ and no wildcard , only files with this extension will be selected . - otherwise the pattern is searched anywhere within the filename . to force a filename start comparison , say pattern ( with a slash ) . - filename means the relative filename , not directory or path name . command chaining difference between list and select : +list accepts files from previous commands . +select ignores them , allowing scripts to run many independent selects in one chain . aliasessfk dir same as " sfk list -stat " . sfk select same as list , but ignoring chain input . sfk larc same as " sfk list -arc " . sfk late same as " sfk list -late " . sfk today same as " sfk list -today " . sfk big same as " sfk list -big " . sfk old same as " sfk list -old " . sfk small same as " sfk list -small " . see alsosfk help select the sfk file selection syntax . sfk help opt for further general options . sfk stat to list directory tree sizes . sfk @ @ @ @ @ @ @ @ @ @ : **29;493;TOOLONG in the SFK Book the SFK Book contains a 60 page tutorial , including sfk dir and list examples with input , command and output . type " sfk book " for details . examplessfk list . list all files of current directory and all subdirectories. sfk list mydir ! . bak ! . tmp.txt list all files within mydir , except . bak and . tmp.txt files . sfk list -dir . -file foo . htm . java* this will find and list the following sample filenames : thefoobar.dat - matches anywhere-pattern " foo " biginfo.htm - matches exact extension " . htm " test.java.9.15 - matches anywhere-pattern " . java* " the command will NOT list the following sample filenames : foosysthebar.dat - pattern must match filename , not path . biginfo.html - does not match extension " . htm " sfk list -dir mydir ! tmp ! save -file . txt list all . txt files within mydir , excluding all sub folders having " tmp " in their name , or called exactly " save " . sfk alias list = sfk list -noop @ @ @ @ @ @ @ @ @ @ current directory . sfk list -dir src1 -file . cpp -dir src2 -file . hpp list . cpp files from src1 , . hpp files from src2. sfk list -dir src " *examples* " list contents of all directories having a name with " examples " , located somewhere below src. note that " *examples* " defines a path mask , whereas " examples " would be another root directory . under linux , patterns with a * wildcard MUST have quotes " " . sfk list -late -dir . -sub foo -file . jsp . java list the most recent . jsp and . java files , in all dirs below the current one ( . ) having " foo " in their pathname. sfk list -late -dir . *foo -file . jsp . java the same , only shorter to type . sfk list -justdirs -dir . *foo* -file . jsp . java list all folders having " foo " in their pathname and which contain any . jsp or . java files . sfk list -sincedir src5 src1 . cpp provided that directory src5 is an older @ @ @ @ @ @ @ @ @ @ have been added/changed since src5 was created . sfk list -pure -late=30 -quot zip .. update.zip -@ collect the latest 30 files from current dir into a zip file , using InfoZIP 's option " -@ " to use a filename list from stdin. sfk sel src . bak +del select all . bak files in src , then delete them . sfk list -nosub -late mydir +sleep 5000 +loop list most recent files of mydir every 5 seconds , excluding all sub folder contents . sfk list . . jpg +count tell the number of . jpg files in current directory tree . sfk list soundlib . wav -tomake outdir$base.mp3 list all . wav files in folder soundlib that have no or an older . mp3 file counterpart in folder outdir. see " sfk run " for the full -tomake example . sfk list -nosub -flattime -tabs . . jpg +filter -stabform " ren $qcol3 q$col1$col2-$col3q " +run " $text " rename all . jpg files in current folder to be prefixed by their modification time ( type whole command in one line ) . 27 sfk larc src.zip @ @ @ @ @ @ @ @ @ @ View , to search filenames interactively ( " sfk view " for details ) . sfk list . &gt;lslr list files of the current directory and all subdirectories into an index text file " lslr " ( named after the unix command " ls -lR " ) . doing this in a root directory may take some while , but afterwards you will find the location of every file in realtime , by simply typing " sfk find lslr yourfilenamepattern " . sfk list -qarc -tofile lslrx . same as above , but including hidden and sys. files , as well as the first content level of every . zip and . jar file . using -tofile instead of " &gt;lslrx " redirection allows you to see a progress info . doing this in a root dir like C : may produce a filename listing of several hundred MB in size . sfk list -hidden -arc -tofile lslrxl . produce an ultimate file listing , including hidden and sys. files , . zip and . jar contents , . tar , tar.gz and tar.bz2 contents , as well as archive @ @ @ @ @ @ @ @ @ @ within . jar files within a . tar.bz2 archive . running this command in a root dir like C : may take some hours , and it may produce a 1 GB or more file listing , so make sure there is enough disk space . examples with output:sfk list -late tfiles lists the most recent files within the directory tree " tfiles " , including their date/time of last modification as the first column , sorted by modification time . example output : 2006-11-26 14:52:00 **34;524;TOOLONG 2006-11-26 14:56:12 **38;560;TOOLONG 2006-11-26 14:56:20 **37;600;TOOLONG 2006-11-26 14:58:40 **27;639;TOOLONG 2006-11-26 14:58:59 **27;668;TOOLONG 2006-11-26 15:10:20 **33;697;TOOLONG sfk list -big testfiles list the biggest files of " testfiles " , sorted by size . 39 **36;732;TOOLONG 202 **37;770;TOOLONG 237 **41;809;TOOLONG 532 **40;852;TOOLONG 8864 **30;894;TOOLONG 8943 **30;926;TOOLONG sfk list -zip tdir list all files of " tdir " , and the content of all . zip and . jar files found within : **33;958;TOOLONG tdirFormats02-crlf.txt **28;993;TOOLONG **29;1023;TOOLONG **25;1054;TOOLONG **33;1081;TOOLONG LONG ... LONG ... LONG ... LONG ... **35;1116;TOOLONG blank dir/ **25;1153;TOOLONG **34;1180;TOOLONG LONG ... **33;1216;TOOLONG LONG ... LONG ... **42;1251;TOOLONG LONG ... LONG ... LONG ... **31;1295;TOOLONG 217463 @qwx1077463 
@@120535897 @9535897/ <p> on the available memory : In general , a machine with 1 GByte of memory is able to load 30000 text files without swapping . A PC or notebook running Windows 7/8 with 64 bits , with 4 GB of RAM , can load much more . <p> on a technical limit : Depeche View is a 32-bit executable , therefore even under Windows 7/8 with 64 bits , with 4 GB of RAM , the amount of loaded text - as displayed while loading - should not exceed 1 GB ( or 2 GB of allocated memory as shown in the Windows Task Manager ) . This is usually sufficient for 100000 text files . <p> ( 2 ) <p> The . zip , . tar.gz or . tar.bz2 files must fit completely into memory to allow loading . Archive files beyond 1 GB of size may not work . <p> No admin rights required . <p> Depeche View Pro ( not the Demo ) comes with a special No Admin Installer , allowing installation on every machine , even without admin rights . By default , @ @ @ @ @ @ @ @ @ @ : Program Files ( which would require admin rights ) but suggests a path C : appdview . <p> Optional admin installation to Microsoft standard location . <p> For company admins , there is also an option to install Depeche View Pro to the Microsoft standard location C : Program Files ( x86 ) . This option requires admin rights . Under Windows 7/8 , the installer will require two additional clicks . Under Windows XP , the installer must be " Run As " with an administrator account . Installing as admin ist just an option , but not required for companies . <p> Portable Installation to USB stick . <p> The Depeche View Proinstaller ( not the Demo ) contains an option to install Depeche View to a portable USB stick . You may then insert that stick into any Windows machine and run Depeche View directly from that stick . The portable binary can not be used under Linux/WINE . Also see the installer screenshots below . <p> Broad licensing terms . <p> Single User License : <p> The license owner is allowed to install Depeche View @ @ @ @ @ @ @ @ @ @ , the license owner is allowed to install Depeche View Professional on up to three USB sticks simultaneously , and to use the program from these sticks on any machine where needed . <p> In other words , you may install Depeche View Pro on your work PC , home PC , on your Notebooks at work and home . And you may use it from USB stick on a colleague 's PC to help in researching something quickly . <p> Multi User Block License : <p> For every participant ( employee ) of the block license , the license owner ( company ) is allowed to install Depeche View Professional permanently on up to three machines used regularly by that participant . This means Depeche View Professional is allowed to be installed permanently on up to three times the machines as number of licenses purchased , provided that those machines are used regularly by any of the license participants . <p> Furthermore , the license owner ( company ) is allowed to install Depeche View Professional on a maximum of two USB sticks per license participant ( employee ) @ @ @ @ @ @ @ @ @ @ the number of licenses purchased , allowing the program to be used only by the license participants ( employees ) from those sticks on any machine where needed . <p> In other words , a company simply has to buy as many licenses as persons that will be using the program . But the program can be installed on more machines than there are license participants , up to a limit , provided that those machines are actually used by the license participants . <p> Easy deployment . <p> No Serial Number Typing . <p> The Depeche View Pro Installer already contains the license I 'd . You simply make a few clicks to install as shown below . <p> Company admins run the installer the same way on every target machine . The installer supports a command line option -silent to install instantly without any dialogues ( Search " silent installation " in the help text for details ) . All license participants use the same license I 'd . <p> No technical enforcements . <p> The license owner ( company admin ) himself should keep track of the total number @ @ @ @ @ @ @ @ @ @ automatic checking , especially no dongles , no network messages , no license server or live activation . <p> One year of free upgrades . <p> If a new version of Depeche View is released within one year after your purchase , you can download that one as well , for free . <p> Discount upgrades after one year . <p> Existing customers who want the latest features can get an upgrade for the halve price . For single user licenses just login to your download account to find the upgrade option . Block license customers may contact <p> Is your Paypal EMail address still functional ? Some people seem to have Paypal accounts with a completely outdated email address . Please send yourself a test email sometimes . Of course , the download link and login data are also presented on-screen during purchase , not strictly requiring a confirmation email . But it 's better if there is a way to contact you . <p> Buy here : <p> The processing is fully automated , available 24/7 . Within a minute after payment , you will have your installer @ @ @ @ @ @ @ @ @ @ processing is done by Paypal , but if you have no account , read here how to purchase by credit card or bank account instantly , without registration . <p> Please note : <p> Directly after purchase , you get a confirmation page in your browser , with all relevant download infos . Write these infos down immediately ! <p> The ordering system also sends you an email with the same informations . However some customers reported that this mail did not arrive , possiblydue to spam filter settings on some servers . <p> On any problems while ordering , please email to : <p> If there is no reply within three business days , it may have been blocked by your EMail provider , so please retry again from a different mail account . <p> Ask our sales department : if you prefer payment by wire transfer to our German bank account , or need a different number of licenses , then please EMail to No matter if you need 1 license or 127 , we will be happy to reply with a price quote . Please note that @ @ @ @ @ @ @ @ @ @ processing . 
@@120535898 @9535898/ <h> TV Recording and Editing : example hardware and software list <h> 1 . PVR hardware list <p> a Personal Video Recorder ( PVR ) device that writes Mpeg2 format files , as received from cable or sattelite , directly to an NTFS formatted USB hard disk . I am using the Xoro HRK 7560 HD DVB-C Receiver which is available in Europe ( PAL system ) for $50 . Depending on your region , especially in the USA , this device may not be available but similar devices from other vendors will surely exist . Update that device to the latest firmware directly after purchase . For example with the Xoro strictly use Firmware V1.4 or higher , otherwise the device may freeze after fast forward , until restart . Firmware updates are described on the vendor website and require only to copy a file onto an USB stick . <p> a fresh new hard disk . In theory an USB stick may do so as well , but in practice I tried two cheap USB sticks , and they caused regular image dropouts , probably because the @ @ @ @ @ @ @ @ @ @ disk with already 100,000 files on it also failed to do the job - massive image failures every few seconds . Maybe a full reformat of the disk would have improved things , but to repeat , it was my backup HD and I did n't want to do that . So I bought a Western Digital My Passport Ultra 1 TB hard disk for $70 . They also have special " AV-ready " Passport disks which are more expensive , so I thought , let 's take the cheaper one as they probably use the same mechanics . And indeed it worked fine - all recordings are excellent . The Passport Ultra is not completely silent , but the sounds produced are in the low frequency range and very soft . I recommend to place a foam rubber pad under the hard disk to avoid head movements being amplified by the underlying surface . I can sleep well with this hardware recording in the same room at a 2 meters distance . <p> HDMI cable to connect the PVR with a monitor/TV ( $6 ) <p> Coax cable to @ @ @ @ @ @ @ @ @ @ ) <p> Connection steps : <p> connect wall antenna cable to PVR 's Cable In ( at Xoro backside ) <p> connect second antenna cable to PVR 's Loop Out and your TV <p> connect HDMI cable to PVR 's HDMI out and your TV <p> connect hard disk to the PVR 's USB slot . The Xoro has just 1 USB slot at the front . <h> 2 . Recording tips <p> For every show to record , select a start time 5 minutes before the EPG start time , and an end time 10 minutes after EPG end time . Unfortunately the Xoro does not provide configurable pre- and post recording times , so this needs to be done manually . <p> Before an important recording , select PVR device infos in the menu to check if the connected hard disk can be read , and how many free space is left on it . <p> The Xoro allows to program a one-time recording , or to repeat it every day , or every week . It does not allow recordings on workdays only . <h> 3 . @ @ @ @ @ @ @ @ @ @ I ended up with 500 GB of episodes surrounded by tons of advertisements and other tv shows ( due to arbitrary changes in airing times and programming schedule of the tv station ) . <p> To extract the relevant parts , I use : <p> VLC Media Player to mark cutting points in files <p> Swiss File Knife command line tool to extract video based on the cutting points <p> Step by step : <p> download the Swiss File Knife , open a CMD.EXE command line and go into the folder where the . mts or . mpg recorded files are . With the Xoro the folder name is HBPVR . <p> Fixing ( Junk ) Filenames : filenames produced by the Xoro may look like : <p> The " ? " are 16-bit Junk characters that keep the files from being used by command line applications . This is not Xoro 's fault as these characters are sent within the TV station 's name . So this junk needs to be removed . Furthermore it would be desirable to change the date format " 04122015 " to " 20150412 @ @ @ @ @ @ @ @ @ @ This can all be done with SFK for Windows by typing within the HBPVR folder : <p> It will collect the video between bookmark 1 and 2 , between bookmark 3 and 4 , and so on , joining all together into an output file out.mpg . <p> The resulting video has jumps in the displayed playback time . To avoid this , make sure the ffmpeg command line tool ( ffmpeg.exe ) is available in your path , then use <p> sfk media cut01.m3u -keepbook -tofile out.mts -fix " " <p> which tells sfk to run ffmpeg for post processing . finally rename out.mts to out.mpg manually . ( when trying to use ffmpeg to write . mpg directly the audio may be missing afterwards . ) <p> close and reopen VLC for the next video to edit , to get a clear new bookmark list . if you process further files in the same VLC session , the M3U files may contain references to many files , but only the last ( newest ) entry is used . <p> The resulting . mpg output file(s) can be played @ @ @ @ @ @ @ @ @ @ menu . However , the Xoro fast forward behaves strange with . mpg files : if you select 4x speed it will fell like 16x . So do not select more than 4x speed . 
@@120535901 @9535901/ <p> sfk extract dirName " /searchtext/totext/ " extract data from text and binary files using wildcards * and ? as well as SFK Simple Expressions in brackets . produces a ( binary ) data stream that can be - written to terminal as hex dump ( default ) - written to file by option -tofile - sent to xed by +xed command chaining subdirectories are included by default the sfk default for most commands is to process the given folders , as well as all subdirs within them . specify -nosub to disable this . options -nosub do not include files in subdirectories. -nobinary skip binary files . -case case-sensitive text comparison . default is insensitive. -text starts a list of search patterns of the form /src/ or /src/totext/ where / is the separator char , src the text to search for , and totext a mask to reformat output . any separator char can be used which is not part of the search text , i.e. /foo/ or foo both search " foo " . -text is not required if a single filename is given . -pat the @ @ @ @ @ @ @ @ @ @ x.txt read search patterns from a file x.txt , supporting multiple lines per pattern . ( add -full for more. ) -bylinelist x read /from/to/ or just /from/ patterns from a file x with one pattern per line . ( add -full for more. ) -by(line)list does not support sfk variables . to use variables in patterns create an sfk script with patterns as parameters . " sfk script " for more . -arc XE : include content of . zip . jar . tar etc. archives as deep as possible , including nested archives . XD : demo will read first 1000 bytes of each entry . -qarc quick read top level archives but not nested ones . -firsthit process only first found pattern match per file . -quiet do not show progress infos. -stat show statistics like hits per pattern and no. of files . -perf show performance statistics . -full print full help text telling about -bylist pat . files , special character case sensitivity and nested or repeated replace behaviour . output options -dump create hexdump of search hits or replaced text . -wide with -dump @ @ @ @ @ @ @ @ @ @ : show 8 bytes per line . -dumpfrom always dump search hits but not replaced text . -dumpall dump search text and replaced text . -nodump do not create a hexdump , list only matching files . -astext no hexdump , but print search hits as plain text . use this only with plain text files , not binary . -showle highlight CR/LF line endings in hex dump output -context=n with hexdump : show additional n bytes of context . -reldist with hexdump : tell relative distances to previous hits . -nofile do not insert : file header lines in output . -crlf , -lf for file headers and default totext : force crlf or lf line endings instead of system default -filehead s file header to insert on every matching file . only file.name surrounded by text can be used . default is -filehead " : file file.namen " unless a single input filename is given . does not change hex dump output headers. -sep s define separator s between hits in a file -to dir$file write output files to given path . for details about output file masks @ @ @ @ @ @ @ @ @ @ run " . -tofile x write output data to a single output filename x ( which is not interpreted as a mask but taken as is ) . +tofile x as last parameter ( command chaining ) : write text as displayed on terminal to a file x. return codes for batch files 0 = no matches , 1 = matches found , &gt;1 = major error occurred . see also " sfk help opt " on how to influence error processing . quoted multi line parameters are supported in scripts using full trim . type " sfk script " for details . wildcards and SFK expressions SFK Expressions are simple patterns containing literal text , wildcards * and ? and character classes in square brackets . basically , the syntax provides extended wilcards but no further logic and is not related to regular expressions . search patterns are surrounded by a separator character which can be anything not contained in the search text , like / or within a pattern /fromtext/totext/the fromtextmay contain : * - 0 to 4000 characters in the same text line or paragraph , i.e. @ @ @ @ @ @ @ @ @ @ 4000 is just a default maximum that can be changed by : 0.100000 chars - 0 to 100000 characters in the same text line or paragraph , i.e. the same as * but with a larger range . ? - one character . ? ? ? ? ? - same as 5.5 chars or 5 charsbytes - 0 to 4000 bytes ( with CR , LF , NULL ) i.e. it collects stream text across lines , even in binary data ** - the same as bytes. 0.100 bytes - 0 to 100 bytes .100000 bytes - up to 100000 bytes 1. * bytes - 1 to default maximum bytes 30 bytes - exactly 30 bytes byte of aeiou - one vocal ( a OR A OR e OR ... ) , case insensitive by default . " aeiou " is a character list . byte of x2f - a backslash or forw. slash / bytes of rn t - whitespace incl. line ends bytes of ( rn t ) - the same , ( ) are optional bytes not rn0 - up to 4000 bytes as long as no @ @ @ @ @ @ @ @ @ @ same as bytes not rn0 , i.e. collect text in a line char not ( t ) - same as byte not ( rn0t ) , everything not blanks and tabs char not ) ( t - not brackets , blanks and tabs , same as not ( ( ) t ) chars of a-z0-9 - means a-zA-Z0-9 as search is case insensitive by default chars of x61-x7A - search a-z but not A-Z , or use option -case for case search eol - end of line by characters : CRLF or LF or CR white = chars of ( t ) - 0 or more whitespaces xwhite = bytes of ( t rn ) - same but across lines 1 white = byte of ( t ) - 1 whitespace digit = byte of ( 0-9 ) - 1 digit digits = bytes of ( 0-9 ) - 0 or more digits hexdigit = byte of ( 0-9a-f ) - 1 hexadecimal digit hexdigits = bytes of ( 0-9a-f ) - 0 or more hex digits special keywords that do not count as tokens : keep - search also @ @ @ @ @ @ @ @ @ @ , without consuming it ortext - fooortextbar searches word foo or bar . ortext is allowed only between literals. anchors that have no length of their own : start - start of file end - end of file lstart - line start , i.e. start or CRLF or CR or LF lend - logical line end , i.e. eol or end of file how to search or replace special characters : - to search or replace text containing the literal characters * ? then these must be escaped like * ? - ( ) are escaped only within character lists , like ( ) - to search or replace the forward slash ' / ' type x2f or use another char around from/to text , e.g. fromtexttotext - parameters with blanks and non trivial characters need double quotes " " , see also " about Shell Command Characters " below . expansion priorities : ( highest first ) if two search parts are side by side , and the same input character matches both , then these priorities apply : 5 : start , end , lstart , lend 4 @ @ @ @ @ @ @ @ @ @ byte of , bytes of 2 : blacklist classes : chars not , bytes not 1 : plain wildcards : ? , * , ** , byte , bytes , chars this means in " /bytesfoo/ " the bytes will stop to collect characters as soon as " foo " is found , as " foo " is a literal . on same or higher priority the right side stops the left side . the totextmay contain : part 1 - use first text part of the fromtext. e.g. the fromtext /*foo.100 charsbar*/ contains parts 1 2 3 4 5part1 - the same ( blank is optional ) . parts 1,2,3 - use parts 1 , 2 and 3. parts 1-10 - use parts 1 to 10. strip ( part1 , 0 ) - use part 1 but remove zero bytes. only zero bytes " 0 " can be removed . file.name - full input filename with path file.relname - input filename without path file.path - input file 's path file.base - relname without last . extension file.ext - input filename extension all - use all parts from fromtext. setvar @ @ @ @ @ @ @ @ @ @ data between setvar and endvar. getvar name - fill in data from variable " name " although anchors like lstart , lend count as a separate part they need NOT be specified in the totext. this means that /lstartfoolend/bar/ just changes the word " foo " . supported slash patternst = TAB r = CR n = LF x00 = one byte with code 00 hexadecimal 0 = short form for x00 q = a double quote " = the backslash character itself = the bracket open character = the bracket close character * = the literal star character * ? = the literal question mark ? - = to use literal " - " in a command Within multi line -bylist files : = slash+blank is changed to a single blank Only within " char of " or " byte not " lists : ( = to use literal character " ( " ) = to use literal character " ) " SFK expression options -showpart(s) print /from/ part numbers , range statistics and expansion priority points per part . done automatically if a required /to/ text is not @ @ @ @ @ @ @ @ @ @ finds nothing , use this to see how many parts would match so far , and with up to how many bytes per part . anchors like lstart may show a non zero length when matching ( CR ) LF. -showlist with -bylist , show the internal joined list if commands are spread across multiple lines . -showall show all of the above . -xmaxlen=n set default maximum length for chars or bytes commands , e.g. -xmaxlen=10000 means /foo*bar/ matches with up to 10000 characters between foo and bar . the default max length without this option is 4000 characters . performance notes - always use a string literal , or single byte or char , at the start of your search expressions , like in /foo*bar/ starting with ' f ' . Do not use a wildcard like * at the start like in /*foobar/ when searching huge input data , as your search will slow down byfactor 256 . Use /lstart*foobar/ instead . - the system may cache output file(s) , writing to disk in background after sfk has finished . subsequent batch commands may execute slower . @ @ @ @ @ @ @ @ @ @ +xed or +xex. other commands require an xed conversion step like sfk extract ... +xed +viewaliasessfk xhexfind is the same as xfind -hex to extract unmodified binary data you may use either sfk xfind -pure ... -tofile or sfk extract ... -tofilesee also--- open source commands ---sfk xfind search wildcard text in text/binary files sfk xtext search wildcard text in text files only sfk xhexfind search in text/binary with hex dump output sfk extract extract wildcard data from text/binary files sfk filter filter and edit text with simple wildcards sfk find search fixed text in text/binary files sfk ftext search fixed text in text files sfk hexfind search fixed text in binary files sfk replace replace fixed text in text/binary files --- freeware commands ---sfk view GUI tool to search text as you type --- xe commercial commands ---sfk replace replace fixed text with high performance sfk xreplace replace wildcard text in text/binary files sfk help xe about SFK XE and xreplace with SFK Expressions . beware of Shell Command Characters . to find or replace text patterns containing spaces or special characters like &lt;&gt; ! &amp; ? * you @ @ @ @ @ @ @ @ @ @ environment will destroy your command . for example , pattern /foo bar/other/ must be written like " /foo bar/other/ " within a . bat or . cmd file the percent % must be escaped like %% even within quotes : sfk echo -spat " percent %% is a percent x25 " web LONG ... example numbers with brackets if you see 1 type " sfk cmd 1 " for whole command in one line . bad examples with correctionsif input text contains : bool bClFoo ; bool bClBar ; sfk xfind in.txt " /boolxwhitebCl*xwhite ; / " does NOT match " bool bClFoo ; " because * eats the whole input line including " ; " so no input is left for " xwhite ; " and the whole expression fails . sfk xfind in.txt " /boolxwhitebCl* not ; xwhite ; / " does both match " bool bClFoo ; " and " bool bClBar ; " . this means whenever your search fails to work write in detail which characters ( not ) to collect where . sfk xex in.txt " /lstartfoo/lstartgoo/ " there is no need to write @ @ @ @ @ @ @ @ @ @ data . use instead : sfk xex in.txt " /lstartfoo/goo/ " sfk xex in.txt " /foolendbar/goopart2bar/ " anchors like lend must be at start or end of fromtext and can not be referenced within totext. use instead : sfk xex in.txt " /fooeolbar/goopart2bar/ " working examplessfk xfind -text " /class bytesbytes/allnn/ " -dir mydir -file . hpp +tofile out.txt collect class definitions from mydir and write output indirectly ( via command chaining ) to out.txt 13 sfk extract in.txt -text " /foo*bar/ " search in.txt for patterns starting with foo and ending with bar , in the same line , with up to 4000 characters inbetween. sfk extract in.txt -text " /foo*bar/ " +view same as above , but show the result in the depeche view text browser tool for easy reading . sfk xhex -text " /foo0.100000 bytesbar/ " -dir mydir search all text and binary files of mydir for patterns of foo and bar with 0 to 100000 bytes ( including NULL , CR and LF ) inbetween and print output as hex dump . sfk extract -text " /printf(**) ; / " -dir mydir -file . cpp @ @ @ @ @ @ @ @ @ @ across multiple lines . sfk extract in.txt " /foo0.100 chars of ( a-z0-9@ ) bar/ " extracts from a single input file in.txt all phrases starting foo and ending bar , in the same line , with 0 to 100 characters inbetween being alphanumeric or one of @ or a blank character . sfk sel mydir . txt +extract " /foo*bar/ " extract foo*bar from all . txt files in mydir. sfk extract mydir " /x66x6fx6f0.100 bytesx62x61x72/ " -tofile out.dat find binary data starting with bytes 0x66 , 0x6f , 0x6f , ending with 0x62 , 0x61 , 0x72 and up to 100 bytes inbetween within all files of folder mydir , writing found data to a single file out.dat sfk extract -text " /class bytesbytes/allnn/ " -tofile out.txt -dir mydir -file . hpp collect class definitions from mydir directly to out.txt 10 sfk extract -dir mydir -file . cpp -text " /printf(bytes) ; /alln/ " +xed " / ) ; eol/all/ " " /eol1. * white/ / " extract all ( multi line ) printf statements from source code , convert multi line to single line , stripping whitespace. @ @ @ @ @ @ @ @ @ @ line endings after " ) ; " sfk extract -text LONG ... part6 vpart2 for part10n/ " -tofile versions.txt -dir mydir -file . exe -nofilenames search all . exe files in mydir for a text block like $version:vernum=1.6.9 , name=fooprog , os=windows then extract and reformat version informations , writing results without : file headers to versions.txt 12 sfk extract in.zip " /PKx05x060.100 bytes/ " search characters ' P ' , ' K ' then bytes 0x05 0x06 and then up to 100 bytes in raw compressed data of a . zip file without extracting any contents . sfk extract -arc in.zip " /class*/ " XE : find phrases starting with " class " in . zip contents XD : demo will search first 1000 bytes per . zip sub file 217463 @qwx1077463 
@@120535903 @9535903/ <p> sfk dupfind -dir anydir -file . ext1 . ext2 find and list duplicate files , just by file content , independent from filename . searches for files with same size and then compares contents by md5 checksums. options -diffdirs list only duplicates residing in different root directories. this option requires that you specify at least two dirs after -dir. -listorg list all original filenames , leave out any duplicate filenames. -minsize=n compare only files with size &gt;= n. examples for n are : 5m = 5000000 bytes ( 5 mbytes ) 100k = 100000 bytes ( 5 kbytes ) 1M = 1048576 bytes ( 2&lt;&lt;20 bytes ) 9000b = 9000 bytes command chaining - by default , this command passes the names of found duplicate files to the next command . - option -listorg does the opposite : it passes only original filenames , but no duplicates , to the next chain command . NOTE : if identical files are found , the decision what is listed as " original " or " duplicate " is currently based on the order in the file system : the file @ @ @ @ @ @ @ @ @ @ carefully if this is what you think , before cleaning up any duplicates . web LONG ... dupfind . find all duplicates within the current directory tree . sfk dupfind -dir docs1 docs2 docs3 find all dups across and within the given directories. sfk dupfind -diffdir -dir docs1 docs2 docs3 find dups between docs1/docs2 , docs2/docs3 , docs1/docs3 , but does NOT list dups within the same root directory . sfk dupfind docs . doc +del find all duplicate . doc files , within the docs directory tree , and delete them . sfk dupfind -listorg docs . doc +run " copy $file docs2 " copy all . doc files from docs to docs2 , but leave out any duplicate files . sfk dupfind -dir pic1 -dir pic2 -dir pic3 find duplicates across three different directory trees . specifying multiple -dirs is also a way of influencing the result order ; if a file is found both in pic1 and pic3 , the file from pic1 will be listed as original , the other one as the duplicate . sfk sel -dir pic1 pic2 pic3 -file . jpg +dup -minsize=1m @ @ @ @ @ @ @ @ @ @ : list all . jpg files from the pic directories , then pass this to the dupfind command , also filtering by size . 217463 @qwx1077463 
@@120535905 @9535905/ <p> sfk md5gento=outfile dir mask mask2 ! mask3 ... sfk md5gento=outfile -dir dir1 dir2 -file mask1 mask2 ! mask3 ... create list of md5 checksums over all files in a folder . by default , this also includes all subfolders ( recursive tree walk ) . sfk md5gento=md5.dat thedirsfk md5check=infile -skip=n -skip n verify list of md5 checksums. to speed up verifys by spot checking , specify -skip=n : after every checked file , n files will be skipped . sfk md5check=md5.datsfk md5 -quiet -verify md5sum file1 file2 file3 ... calculate md5 hash of one or more files , and optionally compare results . if md5 sums are compared , both a message is issued , and the shell rc is set to 0 ( all equal ) or 1 ( not equal ) . sfk md5 test01.dat tell md5 sum of test01.dat sfk md5 test01.dat test02.dat compare both files , if content is the same . sfk md5 -quiet -verify **32;1328;TOOLONG test01.dat check if test01.dat has an md5 matching the one specified . issues no output , returns a shell return code &gt; 0 on mismatch . If @ @ @ @ @ @ @ @ @ @ you may turn them into self-verifying archives by adding an md5 list , sfk.exe , and a short batch file in it 's root directory . For example , create a batch file " 90verify.bat " that contains two commands : 91toolssfk md5check 91toolsmd5sum.txt pause Then create a directory 91tools , copy sfk.exe into it , and run sfk **26;1362;TOOLONG . Test the whole stuff once before burning , by running 90verify.bat . Then burn everything onto DVD . Insert the DVD into another PC , double-click on 90verify.bat . This way you verify that your DVD can be read also on another machine , which is an important test for your data 's safety . The md5 checksums for the current sfk distribution binaries are : sfk156.zip **32;1390;TOOLONG sfk156.exe **32;1424;TOOLONG sfk156-linux.exe **32;1458;TOOLONG sfk156-linux-lib5.exe **32;1492;TOOLONG dview142.exe **32;1526;TOOLONG 217463 @qwx1077463 
@@120535907 @9535907/ <p> Depeche View is a high speed text search application that can search TAB separated database exports from databases or spreadsheet applications in realtime . <p> It allows to search words as you type , or by clicking on words already present on screen , producing result lists instantly . <p> A typical scenario is to check address data for correctness . <p> In the screenshot to the right , a database of zip codes , or postal codes , taken from geonames.org was loaded with Depeche View Pro . The database provides country code , postal code , place name , state , county and community as tab separated columns . <p> I press CONTROL+SHIFT+TAB in Depeche View to select a large tab size of 20 , for a better display of the columns . <p> I right click on the button to activate AutoFilter mode . This means : whenever I type a word , the tool will present a list of only the text lines containing that word ( a filtered view ) . <p> Now let 's type , for example , " Washington " @ @ @ @ @ @ @ @ @ @ containting that word . But actually I meant the city Washington , not every city within a state , county or province named Washington . <p> So I have to restrict my search to the third column of the database , as this is the city name . This is done by typing : <p> COL3 washington . <p> This way , I get only 358 hits . But still I get city names like Mount Washington , or Fort Washington . I want records with the whole 3rd column containting only Washington , and nothing else . Furthermore , it should be in the District Of Columbia only . Finally , I type : <p> COL3FULL washington COL5FULL DC <p> and get all zip codes from exactly that city . <p> As you can see , the main principle of Depeche View is simplicity . It does NOT use complicated regular expressions , but plain English search operators like AND , OR , NOT , or COL for column . <p> Furthermore Depeche View allows to search words by a single click on a word , either in the @ @ @ @ @ @ @ @ @ @ different window . This allows high speed jumping between different table contents . <p> Tab separated database , displayed with tab size 20 <p> Simple search for Washington presents too many results <p> Search restricted to partial hit within 3rd column <p> Search with exact 3rd and 5th column text <p> Another major feature is clipboard automation : let Depeche View run in parallel to your spreadsheet application , and whenever you copy a word into the clipboard , let Depeche View run an automated search in it 's text data . <p> This and more can be tried immediately by downloading the free Depeche View Pro Demo. 
@@120535908 @9535908/ <p> sfk list -time -size-size=digits ... dir masksfk select -dir dir1 dir2 -file . ext1 . ext2 ! . ext3 ... list all or just selected files from a directory tree . select is the same , but it ignores command chaining input . options -time show date and modification time -flattime show date and time in a more compact format -tab separate columns by tab characters , not blanks -size=n show size of files n characters wide -kbytes or -kb lists sizes in kbytes instead of bytes -mbytes or -gbytes lists sizes in mbytes or gbytes -kbpure list without " kb " postfix -stat show statistics ( number of files , dirs , bytes ) and tell if hidden files or dirs were skipped . -nofollow or -nofo does not follow symbolic directory links . use this if list runs in an endless recursion . -withdirs list also directories -justdirs list just directories -hidden list also hidden or system files -arc list contents of well known zip , tar.gz and tar.bz2 archives as deep as possible , including nested archives . type " sfk help opt " for @ @ @ @ @ @ @ @ @ @ list archives , lists only archive entries at the top level , skipping nested archives . -xarc list contents of any zip file , regardless of file extension , and tar.gz and tar.bz2 files . reads the first bytes of every file and will therefore perform slower then -arc. -qxarc quick list any archive content . -sort=n sort by name , list all or last n files -sortrev sort by name , in reverse order -late=n sort by time , list latest n files last -old=n sort by time , list oldest n files last -big=n sort by size , list biggest n files last -small=n sort by size , list smallest n files last -skiplate=n sort by time , select all except newest n -minsize=s list only files &gt;= size , like 10b or 100k -maxsize=s list only files &lt;= size , like 10m or 4g b=bytes k=kbytes m=megabytes g=gigabytes -late=all sort by time , list all files -notime do n't list time , after -late or -old -nosize do n't list size , after -big or -small -pure pure list of filenames , leave out time , size @ @ @ @ @ @ @ @ @ @ quotes . needed when post-processing filename lists containing blanks . -quiet do not show the " scan " progress information -since list only files since this timestamp , e.g. " 2006-01-31 12:15:59 " or 20060131121559 2006-01-31 or 20060131 today : files changed since midnight of today 1d : changed since 1 day , i.e. not counting from midnight , but 24 hours into the past 5h , 30m , 10s : 5 hours , 30 minutes , 10 seconds . -before select files modified before that timestamp. -today short replacement for " -since today " . -usectime use or list creation time instead of modification time . may not be available on some filesystems. -utc or -gmt lists UTC/GMT time instead of local time . -sincedir compare against another directory , list files that or -sd have been added , have different time , or content . does not list files which have been removed . -sinceadd like -sincedir , list only added files . -sincedif like -sincedir , list only changed files . does not list files with diff. time but same content . does not list added files @ @ @ @ @ @ @ @ @ @ files . or -sc does not list files with diff. time but same content . -relnames list filenames relative to specified directory(s) , i.e. strip root directory names at the beginning . -absolute list all filenames with full absolute path . -tomake . ext select only files that have no , or an older , counterpart file with extension . ext in the same folder . -tomake outdir$base.ext select only files that have no or an older counterpart file in outdir with . ext. see " sfk run " for example : . wav to . mp3 conversion -tofile x write all names directly to file x ( using less memory than the chain command +tofile x ) . -maxfiles=n list a maximum of n files only . -fileoffset=n from all selected files , list only a subset , starting at index n. first file has index 0 . -upat unix style exclusion syntax with : instead of ! e.g. -subdir : /tmp does the same as -subdir ! tmp -upat2 also support wildcard % instead of * important details of file name / extension selection : - when specifying @ @ @ @ @ @ @ @ @ @ and no wildcard , only files with this extension will be selected . - otherwise the pattern is searched anywhere within the filename . to force a filename start comparison , say pattern ( with a slash ) . - filename means the relative filename , not directory or path name . command chaining difference between list and select : +list accepts files from previous commands . +select ignores them , allowing scripts to run many independent selects in one chain . aliasessfk dir same as " sfk list -stat " . sfk select same as list , but ignoring chain input . sfk larc same as " sfk list -arc " . sfk late same as " sfk list -late " . sfk today same as " sfk list -today " . sfk big same as " sfk list -big " . sfk old same as " sfk list -old " . sfk small same as " sfk list -small " . see alsosfk help select the sfk file selection syntax . sfk help opt for further general options . sfk stat to list directory tree sizes . sfk @ @ @ @ @ @ @ @ @ @ : **29;1560;TOOLONG in the SFK Book the SFK Book contains a 60 page tutorial , including sfk dir and list examples with input , command and output . type " sfk book " for details . examplessfk list . list all files of current directory and all subdirectories. sfk list mydir ! . bak ! . tmp.txt list all files within mydir , except . bak and . tmp.txt files . sfk list -dir . -file foo . htm . java* this will find and list the following sample filenames : thefoobar.dat - matches anywhere-pattern " foo " biginfo.htm - matches exact extension " . htm " test.java.9.15 - matches anywhere-pattern " . java* " the command will NOT list the following sample filenames : foosysthebar.dat - pattern must match filename , not path . biginfo.html - does not match extension " . htm " sfk list -dir mydir ! tmp ! save -file . txt list all . txt files within mydir , excluding all sub folders having " tmp " in their name , or called exactly " save " . sfk alias list = sfk list -noop @ @ @ @ @ @ @ @ @ @ current directory . sfk list -dir src1 -file . cpp -dir src2 -file . hpp list . cpp files from src1 , . hpp files from src2. sfk list -dir src " *examples* " list contents of all directories having a name with " examples " , located somewhere below src. note that " *examples* " defines a path mask , whereas " examples " would be another root directory . under linux , patterns with a * wildcard MUST have quotes " " . sfk list -late -dir . -sub foo -file . jsp . java list the most recent . jsp and . java files , in all dirs below the current one ( . ) having " foo " in their pathname. sfk list -late -dir . *foo -file . jsp . java the same , only shorter to type . sfk list -justdirs -dir . *foo* -file . jsp . java list all folders having " foo " in their pathname and which contain any . jsp or . java files . sfk list -sincedir src5 src1 . cpp provided that directory src5 is an older @ @ @ @ @ @ @ @ @ @ have been added/changed since src5 was created . sfk list -pure -late=30 -quot zip .. update.zip -@ collect the latest 30 files from current dir into a zip file , using InfoZIP 's option " -@ " to use a filename list from stdin. sfk sel src . bak +del select all . bak files in src , then delete them . sfk list -nosub -late mydir +sleep 5000 +loop list most recent files of mydir every 5 seconds , excluding all sub folder contents . sfk list . . jpg +count tell the number of . jpg files in current directory tree . sfk list soundlib . wav -tomake outdir$base.mp3 list all . wav files in folder soundlib that have no or an older . mp3 file counterpart in folder outdir. see " sfk run " for the full -tomake example . sfk list -nosub -flattime -tabs . . jpg +filter -stabform " ren $qcol3 q$col1$col2-$col3q " +run " $text " rename all . jpg files in current folder to be prefixed by their modification time ( type whole command in one line ) . 27 sfk larc src.zip @ @ @ @ @ @ @ @ @ @ View , to search filenames interactively ( " sfk view " for details ) . sfk list . &gt;lslr list files of the current directory and all subdirectories into an index text file " lslr " ( named after the unix command " ls -lR " ) . doing this in a root directory may take some while , but afterwards you will find the location of every file in realtime , by simply typing " sfk find lslr yourfilenamepattern " . sfk list -qarc -tofile lslrx . same as above , but including hidden and sys. files , as well as the first content level of every . zip and . jar file . using -tofile instead of " &gt;lslrx " redirection allows you to see a progress info . doing this in a root dir like C : may produce a filename listing of several hundred MB in size . sfk list -hidden -arc -tofile lslrxl . produce an ultimate file listing , including hidden and sys. files , . zip and . jar contents , . tar , tar.gz and tar.bz2 contents , as well as archive @ @ @ @ @ @ @ @ @ @ within . jar files within a . tar.bz2 archive . running this command in a root dir like C : may take some hours , and it may produce a 1 GB or more file listing , so make sure there is enough disk space . examples with output:sfk list -late tfiles lists the most recent files within the directory tree " tfiles " , including their date/time of last modification as the first column , sorted by modification time . example output : 2006-11-26 14:52:00 **34;1591;TOOLONG 2006-11-26 14:56:12 **38;1627;TOOLONG 2006-11-26 14:56:20 **37;1667;TOOLONG 2006-11-26 14:58:40 **27;1706;TOOLONG 2006-11-26 14:58:59 **27;1735;TOOLONG 2006-11-26 15:10:20 **33;1764;TOOLONG sfk list -big testfiles list the biggest files of " testfiles " , sorted by size . 39 **36;1799;TOOLONG 202 **37;1837;TOOLONG 237 **41;1876;TOOLONG 532 **40;1919;TOOLONG 8864 **30;1961;TOOLONG 8943 **30;1993;TOOLONG sfk list -zip tdir list all files of " tdir " , and the content of all . zip and . jar files found within : **33;2025;TOOLONG tdirFormats02-crlf.txt **28;2060;TOOLONG **29;2090;TOOLONG **25;2121;TOOLONG **33;2148;TOOLONG LONG ... LONG ... LONG ... LONG ... **35;2183;TOOLONG blank dir/ **25;2220;TOOLONG **34;2247;TOOLONG LONG ... **33;2283;TOOLONG LONG ... LONG ... **42;2318;TOOLONG LONG ... LONG ... LONG ... **31;2362;TOOLONG 217463 @qwx1077463 
@@120535910 @9535910/ <h> split and join large binary and text files <p> , using the sfk split command for Windows , Mac OS X , Linux and Raspberry Pi , to enable transport or archiving on size limited media like usb stick , dvd or cd , or to work around file system limitations . <p> sfk split partsize inputfile outputfilebase -noverify reads and splits inputfile into output files of specified size . if output files exist already , split asks if it may overwrite ; specify -yes to overwrite outputs without asking . partsize syntax : 100000b , 100k = 100000 bytes 2000000k , 2000m , 2g = 2 giga-bytes if outputfilebase is omitted , outputfilenames will be : inputfile.part1 inputfile.part2 inputfile.part3 ... if outputfilebase is given , . part1 is appended to this . options -yes always overwrite existing output files . -noverify no verify after split . -altsize use different method ( fseek ) to read the file size . -getsize=n:d before splitting , read file size n times with a delay of d milliseconds ( default=100 ) . -verbose be verbose about file size results etc. -buffer=xm @ @ @ @ @ @ @ @ @ @ . -update do not rewrite existing parts of full size . useful when splitting repeatedly a growing input file , e.g. during a download . -update implies -yes. -digits=n set minimum number of digits used for the . part extension . since sfk 1.6.5 , sfk join will autodetect the number of digits . if output will be joined with older versions of sfk then -digits must stay default ( 1 ) . -text split at line boundaries if possible . can not be combined with -update. performance notes the operating system may cache output files , writing to disk in background after sfk has finished . subsequent split commands may run slower , even if -noverify is used . web LONG ... split 2g c : bigfish.avi d : transfereasy.avi splits bigfish.avi into easy.avi.part1 , . part2 etc. to rejoin the files , use the sfk join command : sfk join d : transfereasy.avi.part1 e : full.avi joins easy.avi.part1 , . part2 etc. into full.avi splitting text files by no. of lines : this is not yet supported by sfk , but for example the cygwin split command supports @ @ @ @ @ @ @ @ @ @ requiring some installation . if you have it installed , type for example split --lines=10000 biginput.txt outprefix which creates output files outprefixaa , outprefixab etc. see also : sfk partcopy - copy a single byte block from a binary file sfk hexdump - dump parts of a file for further analysis sfk snapto - joins all text files of a directory 217463 @qwx1077463 
@@120535916 @9535916/ <p> sfk partcopy infile offset length outfile offset2 -yessfk partcopy infile -allfrom startoffset outfile ... sfk partcopy infile -fromto startoffset endoffset outfile ... reads a block of bytes from infile at specified offset , writing them into another file . if offset2 is specified , outfile is not created , but the bytes are used to overwrite other bytes within the output file . by default , the command simulates , checking file lengths but not copying any data . add -yes to really copy contents . negative offsets can be used , to specify positions relative to the file end instead of file start . if output offset2 + length is larger than output file size , the output file is extended . use -noext to avoid this . length syntax : 100000 , 100k = 100000 bytes 2000000k , 2000m , 2g = 2 giga-bytes options -quiet do not print number of copied bytes. -verbose tell how offsets and lengths are calculated . type directly after " partcopy " for all infos. -fromto use this if you do n't want to specify offset and length for the @ @ @ @ @ @ @ @ @ @ offset is exclusive , i.e. length is end minus start . -fromtoinc same as -fromto but including end offset , so copy length is ( end - start ) + 1 -allfrom copy all from start offset , until end of file . -noext do not allow an extension of the output file , stop with error if writing beyond output end . -append if given after output filename , data is added to the end of the output file . see alsosfk media keep or cut multiple parts of a file sfk setbytes write a byte sequence into a file sfk hexdump show binary file contents as hexdump sfk hexfind search data in binary files sfk hextobin convert hexdump to binary web LONG ... partcopy first.dat 10000 50 second.dat 500000 copies 50 bytes from first.dat at offset 10000 into second.dat ( which should exist ) at offset 500000 sfk partcopy first.dat -fromto 0x2710 0x2950 second.dat input start and end offset in hexadecimal numbers , output file is created ( no output offset given ) . sfk partcopy in.txt -allfrom 1000 out.txt -append take from in.txt all data from offset @ @ @ @ @ @ @ @ @ @ in.dat -fromto -1000 -900 out.dat -500 take from in.dat all bytes from end minus 1000 until end minus 900 , i.e. a 100 bytes block , and write this into output at end minus 500 bytes. ( type -verbose after partcopy for details. ) 217463 @qwx1077463 
@@120535918 @9535918/ <h> 100 Command Line Tools For Windows , Linux and Mac OS/X <h> The Swiss File Knife Book . <p> How to transfer files between computers by an instant web or ftp server , find and replace text in files , run a command on all files of a folder , show directory tree sizes , list biggest or newest files , list different files between two folders , copy a folder selecting or excluding sub folders and file names , find filenames fast across the whole drive , rename files by easy patterns , find duplicate files , split large files , convert line endings , remove tab characters from text , convert csv to tab separated text , sort and count text lines , create checksums and more . <p> All made possible by the Swiss File Knife ( SFK ) , a free open source tool with all these functions in a single binary that runs instantly , anywhere . No installation or dependencies , it can be used directly on any computer with Windows XP/Vista/7/8/10 , Intel or ARM based Linux and Mac OS/X after @ @ @ @ @ @ @ @ @ @ - <p> an introduction how to get SFK running quickly on Windows , Linux or Mac OS/X <p> - <p> a 30 pages tutorial introducing the most popular functions <p> - <p> a 200 pages reference part with the full syntax of all functions with many examples . 
@@120535919 @9535919/ <p> sfk ftpserv -help -port=nport -rw workdir The SFK Instant FTP Server for easy file transfer . default behaviour since SFK 1.6.7.2 : * the CURRENT DIRECTORY is made accessible , WITH subdirs. * any kind of directory traversal ( .. , / etc. ) is blocked . * just ONE CLIENT ( browser etc. ) can connect at a time . if another client connects , the first is auto closed . * after 60 seconds of inactivity , the connection is closed . * filenames with accents are sent as is ( no UTF8 support ) . * with -rw , files of any size can be written ( no size limit ) . * with -rw , existing files are overwritten without asking.only for trusted environments ! sfk ftpserv is intended only for personal file transfer between two machines that the user has control of , within a trusted LAN environment . it should not be used to offer files in the internet. if security is important then do not use sfk ftpserv but a full scale FTP server like FileZilla. options -port=n use other port @ @ @ @ @ @ @ @ @ @ if first port fails . use -port2=0 to disable alternative port . -pasvport=n define a fixed port for PASV connections . default is to allocate a random port defined by the operating system . -pw=x require primitive authentication , i.e. client must provide password x to login. you may also set an environment variable like : set SFKFTPPW=mypassword or set SFKFTPSPW=mypassword with the latter one being used only by the sfk ftpserv command , but not by sfk ftp. -user=x require this username. if not specified then any username can be used . can also be given by environment variable SFKFTPUSER or SFKFTPSUSER. -timeout=n set timeout to n seconds . default is 60. -rw allow read+write access . default is readonly. -maxsize=n set size limit per file write to this , e.g. 10m = 10 mbytes. default is no size limit . -minspace=n set required free disk space for file writing , e.g. -minspace=200m requires 200 megabytes . -noclone do not try to replicate time stamps on a file transmission from an sfk ftp client . -verbose list the transmitted ftp commands . helpful to get more infos in case @ @ @ @ @ @ @ @ @ @ terminal , except for 550 no such file . default is to print them only with -verbose. -quiet=2 print less or no status informations. -nosub block sub directory access , e.g. the client may NOT say " put the/sub/dir/document.txt " . -run allow client to execute system commands . requires -pw option being set as well . requires an sfk ftp client to run commands . -runpw=x require authentication only for run commands . can also be set via the environment : set SFKFTPRUNPW=mypassword or set SFKFTPSRUNPW=mypassword -ownip=x if client sends PASV command , by default the -ownip x server replies with the first network interface IP found . if this is the wrong one , you may supply a different IP here ( as n.n.n.n ) . -noclose do not auto close first client connection if another client tries to connect . specific single work dir : instead of making the current directory accessible you may set a folder name like sfk ftpserv mydir to allow access to these contents only . multi directory mappings : instead of making the current directory accessible you may specify folders ( with @ @ @ @ @ @ @ @ @ @ : images=picaliases sfk sftserv ... = the same as sfk ftpserv , but using port 2121. transfer protocol selection since SFK 1.8.5 , when using " sfk ftpserv " at the server and " sfk ftp " at the windows client , plain FTP protocol is used to avoid firewall restrictions via port 21. to use SFT Simple File Transfer for better connectivity and cput/cget support run the server as " sfk sftserv " and the client as " sfk sft " , which will use port 2121. file attributes since SFK 1.6.7 , when using the SFT protocol , linux file attributes are sent and written at the receiver , except for file owner ' rw ' flags which are set by default to allow rewrite in future transfers . when sending from linux to windows attributes like ' x ' get lost . problems and solutions : if you try to login to the server using a regular ftp client , but you can not connect and/or transfer files , then usually there is a firewall or network configuration incompatible to normal FTP. - if your ftp client @ @ @ @ @ @ @ @ @ @ , press enter , and then try the usual commands like dir , get or put . - use " sfk sftserv " at the server and " sfk sft " at the client . this will use a different protocol ( SFT ) via port 2121 with which you often can transfer files even if normal FTP fails . - Windows : the firewall may stop sfk to sfk file transfer on port 21 , with error ECONNRESET , if your sfk client is old . use the sfk 1.8.5 ftp client which uses plain FTP. - Windows 7 Starter : you may have to open the firewall settings and enable incoming connections for application " sfk " manually . - Windows : whenever running sfk.exe in an ununsual user context , e.g. from a mounted virtual drive , or a non-admin shell , this may cause the system to block incoming connections . - some FTP clients must be configured not to use multiple transfer connections in parallel ( FileZilla : edit/settings/transfers ) - virtual machines : when using NAT network adapter mode you may not connect from @ @ @ @ @ @ @ @ @ @ may configure port forwards in the VM 's adapter settings , then connect to 127.0.0.1:portnumber but not to the IP shown in the guest . also read the VM 's help on adapter modes . known compatible ftp clients : WinSCP ( in FTP mode ) , WSFTP95 , FileZilla , command line ftp known incompatible ftp clients : Windows Explorer FTP ( requires unsupported multi connections ) see alsosfk ftp the sfk ftp clientsfk sft the sfk sft client sfk httpserv the sfk instant http server web LONG ... - to run a ' real ' ftp server ( port 21 ) for non sfk clients : sfk ftpserv -user=foo -pw=bar mydir require the given user/pw and allow read only access to mydir and all subdirectories of mydir. sfk ftpserv -rw -usedir website/images=pic /Musik/audio=audio allow read/write access to website/images with virtual folder name " pic " and to /Musik/audio as just " audio " . - if you just want quick and simplest file transfer between two machines both having sfk , use this : sfk sftserv -rw run an sfk simple file transfer server , using port 2121 @ @ @ @ @ @ @ @ @ @ dirs. then use " sfk sft " at the client side . should no connection be possible run the server and/or client with admin rights and check the firewall settings . file transfer between windows and vmware linux the sfk ftpserv function was originally created to enable file transfer between a windows host and vmware guest OS , as I saw no other way to accomplish this . for detailed instructions , read on here . 217463 @qwx1077463 
@@120535920 @9535920/ <p> sfk udpsend host : port options data data2 ... send an UDP message and optionally receive replies . maximum message size is 2000 bytes. your network may limit this further , e.g. to 1500 or 1000 bytes. options -listen wait for a single reply , and dump it . -listen=n wait for so many replies and dump them . -listenall receive endless . -replyport=n specify replyport for listening . -timeout=n wait up to n msec for replies . -wide , -lean etc. change hex dump output format . for details , type " sfk hexdump " -flat print messages as plain text . -showip show target ip in sent ... info . input data format : 0x123456 a hex string which is converted to binary foo any other plain text is sent as is , but zero termination is NOT done automatically . all given data fragments are joined into one large block . how long the block can be is system dependent , but it must always stay below 2000 bytes. experimental multicast send if a multicast group address is given , like sfk udpsend 224.0.0.123 5000 @ @ @ @ @ @ @ @ @ @ this may or may not work depending on the OS , network interface , router and firewall settings , user rights and other programs running in parallel . chaining support small chain input data can be sent . to send continuous text over 1k do not use udpsend but tonetlog. type " sfk netlog " for more . aliasessfk udp like udpsend , but does not use chain input . sfk cudp call udp quickly without any output , same as sfk udp -quiet. web LONG ... udpsend localhost 5000 hello 0x00 send " hello " followed by a zero byte to localhost on port 5000 sfk udpsend 127.0.0.1:5000 -listen -replyport 5010 test send " test " to localhost on port 5000 and then receive a single reply on port 5010. sfk echo foo +udpsend localhost:5000 sends " foo " with ( CR ) LF to localhost port 5000. sfk echo foo +xed " /eol// " +udpsend localhost:5000 the same but strips ( CR ) LF line ending . use " sfk udpdump 5000 -text " to receive . 217463 @qwx1077463 
@@120535923 @9535923/ <h> View All Text Files Of A Folder in One Window with Depeche View for Windows XP / Vista / 7 . <p> Depeche View is a realtime text file search tool made for Programmers who have to analyze thousands of source code files , but also for Non-Programmers who need to research many ASCII text files , like CSV database exports or documentation . <p> It loads all text files of a folder into memory , showing everything in a single windows , as if it would be one large text . <p> So , if you want to read many files , you do n't have to switch between many windows or tabs . Just stay in the same window , and browse vertically over all text files in one go . <p> This simple approach of presenting text files allows you to research text faster than with any other text editor , search tool , or IDE. 
@@120535924 @9535924/ <p> sfk detab=tabsize dir ext1 ext2 ... -to outmask replace tabs by spaces within file(s) or text stream . options -to outmask do not overwrite original files , but write to output files according to outmask , e.g. -to tmp$path$base. $ext or -to tmp$file -yes if files are selected , really ( re ) write them . without -yes , detab is only simulated . -memlimit=n process files with up to n mbytes ( default=300 ) . -nowarn do not tell about skipped or unreadable files . see alsosfk scantab list files containing TAB characters . sfk help opt how to change the memlimit permanently . sfk view a text file viewer that can show all TAB characters in blue by pressing CTRL+T. web LONG ... detab=3 sources . cpp . hpp replace tabs by up to 3 blanks , within all . cpp and . hpp files of directory tree " sources " . sfk select -dir src -file . java +detab=4 -to tmp$file list all . java files of src , then detab with tabsize 4 , writing all outputs to directory tree " tmp " . @ @ @ @ @ @ @ @ @ @ same , however stripping the " src " input directory name from output file paths ( not possible with " +detab " form ) . sfk filter mytext.txt +detab=8 detab content of a single file to the console . to find how many files would need detabbing , type for example:sfk scantab testfiles . hpp . cpp . txt -&gt; scans directory testfiles , and all subdirectories , for . hpp , . cpp and . txt files containing tab characters . example output : list of files containing tabs : **38;2395;TOOLONG **27;2435;TOOLONG **36;2464;TOOLONG **25;2502;TOOLONG **32;2529;TOOLONG **36;2563;TOOLONG 6 files of 32 contain tabs . to view TAB characters in your files interactively like this : - download the free text browser Depeche View Base . - click on " Open " , select the folder containing your text files . - click on the " showtab " button in the right bottom corner . All TAB characters will be shown in blue , and all blanks in yellow . to search for TAB characters interactively : Within Depeche View , use the TAB keyword in your queries , e.g. - @ @ @ @ @ @ @ @ @ @ ( Type it all uppercase , and do n't forget the blank after TAB ) - type " TAB " to find all curly brackets preceeded by a tab : - type " foo TAB bar " to find the word combination " foo " and " bar " with exactly one TAB character inbetween . Note that the blanks around " TAB " are not used in the search . 217463 @qwx1077463 
@@120535925 @9535925/ <h> how to turn your Windows Command Prompt ( CMD.exe ) into a powerful tool . <p> By default , the Windows command line is not well configured : not enough lines of scrollback , no QuickEdit mode , etc. , therefore many people do n't use it . but with a few steps , some how-to-use knowledge , and tools like swiss file knife and depeche view , working with the command line is faster than anything else . <p> Configure the Windows Command Prompt this way : 1 . create a command line shortcut on your desktop : - over **34;2601;TOOLONG Prompt , press right mouse button , then select Copy . - go to an empty place on the desktop . - select Paste . 2. on the new desktop shortcut , press right mouse button , then select Properties . 3. in the Command Prompt Properties , set <p> 4. close Properties by clicking OK. 5. double-click on the Command Prompt icon to open a shell . Now you have a well configured power shell : - any command output is remembered up to 3000 @ @ @ @ @ @ @ @ @ @ can always scroll back . - you may select any text you see with the left mouse button , then click right button to copy the text to clipboard. - once you copied something to clipboard , click right button again to paste text from clipboard. this way you can copy/paste file- names very quickly in the command prompt , running file copies etc. much faster than by any explorer click-around. - to pause a program that dumps output to the shell , do a dummy-select of text with the left mouse button . to continue program execution , press right button , or enter . Automatic Command Completion Question : how do you enter the directory **26;2637;TOOLONG ? Answer 1 : type " cd **26;2665;TOOLONG " this is actually what most users do , and it 's a waste of time . Answer 2 : type " cd very " and then press the TAB key . since Windows XP , command completion is default . Under Win98 , completion it is NOT default , but can be activated through regedit : set the registry entry <p> HKEYCURRENTUSER Software @ @ @ @ @ @ @ @ @ @ the code of the TAB key . Using the free Swiss File Knife Now that you 're on the command line level , have a look at the multi-function tool sfk and the realtime text viewer depeche view , and experience how power searching and processing of whole directory trees can boost up your daily work . 
@@120535926 @9535926/ <h> Depeche View Realtime Source Research <p> loads all source code files from a folder , showing all content in one window . It is used to browse , search and edit huge amounts of source code , log files , documentation or CSV data at high speed with the smallest possible effort . It was developed to analyze industrial C++ automotive projects with 50,000 files and more , but can be used with any programming language ( Java , PHP etc. ) to find bugs faster than with any IDE . <p> startup <p> all in one view <p> searching <p> two views <p> fast source code browser for Windows ( XP/Vista/7/8/10 ) . <p> loads all text files from a folder , showing all content in one window as one large text . <p> fly over everything just by dragging your mouse . <p> deluxe soft scrolling by the mouse wheel . <p> search , analyze and edit thousands of source files as you type and click . <p> Depeche View does not only show everything in one window , it can also provide multiple points of @ @ @ @ @ @ @ @ @ @ windows . <p> And that 's what you need everyday : read two parts of text side by side , no matter if it 's in the same file , or in two separate files - to track dependencies between text , or to quickly copy and modify text parts between files . <p> Forget about dragging window borders . Depeche View comes with a fixed window layout . New windows are created by a click on the create view button , and are arranged instantly side by side , as shown above - because that 's what everyone needs , everyday . <p> If you want to search a word which is displayed already on screen , most text editors offer to select this by a double click , and then search it by some hot key . This is a two step operation that actually requires three input events . Repeated a hundred times a day , it 's another waste of time . <p> With Depeche View , a single SHIFT+click on a word searches it instantly , across all files , either in the current window @ @ @ @ @ @ @ @ @ @ ) . This allows realtime jumping through huge amounts of text , searching many different words in the shortest possible time . <h> Filter Text In Realtime . <p> With Depeche View , you can list all search results instantly , across all loaded text files . To do so , <p> press the Filter Button , or press CONTROL+A like " All Results " . <p> Instantly , you get All Results In One View , also called a Filtered View over all text files . <p> You see both the names of files where the word was found , as well as the actual text lines with the word . <p> To jump to any of these locations , simply click into a result line . The Filtered View is closed , and you land instantly at the selected text location . <h> One Click Copy , Bookmark , or Edit . <p> Fast text research requires elimination of two-step operations . In Depeche View , words or phrases can be copied to the clipboard instantly by a single click , while keeping the CONTROL key pressed . @ @ @ @ @ @ @ @ @ @ the phrase is copied . The same applies to bookmarking : keep ALT pressed , click on a word , done . <p> And whereever you are , text can be edited with a double click ( default with active assistance mode ) , or even just a single click ( one click edit for advanced users ) . <h> One Click Interface Revolution . <p> Depeche View is proud to break with slow , cumbersome standards used by classical text editors , Notepad/Word , or Intergrated Development Environments . Instead , it comes with a unique one-click user interface , optimized for one thing only - speed , speed , and nothing but speed . <p> Of course , this requires a short training . You have to remember three keys : <p> SHIFT key together with a mouse button Searches Text . Remember that both SHIFT and Search start with " S " . <p> CONTROL key together with a mouse button Copies Text . Remember that both CONTROL and Copy start with " C " . <p> Furthermore , to fly over a thousand text files , @ @ @ @ @ @ @ @ @ @ your mouse vertically . This is the way smartphones and touch pads do it nowadays , and it 's the way Depeche View did it always . <p> Especially the scripting features allow software developers to replace their IDE by calling command line compilers and monitoring their text outputs . ( For details , create a config file in Depeche View , then search for the " runback " and " monitor " commands. ) 
@@120535927 @9535927/ <h> A High Speed Search Tool And EditorFor Java Source Code Files <p> It loads all source files from a folder , showing them all in a single window , as if they were one large SuperSourceCode . <p> Words are searched as you type , without the need to fill in any dialogues . Furthermore , words can be searched by simply clicking on them . <p> Searches can be done in the current window , or - by a single right mouse click - in another window in parallel . <p> This radical and simple usage concept allows high speed search and analysis within thousands of Java source code files , tracking dependencies faster than with any Integrated Development Environment . <p> Look at the example screenshots to the right : <p> I want to get an overview over a Java database project , so I load all from folder workhsqldb . <p> Typing void main I get all program entry points , listed across a thousand files in 0.2 seconds ( * ) ( on a 2.13 GHz i3 notebook ) . The screenshot shows a @ @ @ @ @ @ @ @ @ @ <p> WebServer.java draws my attention . How is this web server implemented ? One right click later , there is a second window showing that text location . <p> and so I start surfing the code . What 's the method canonicalOrAbsolutePath doing ? I switch to horizontal tiling by a single F2 key press , and right click on that word . <p> Instantly I see where canonicalOrAbsolutePath is implemented , and where it is called . ( Using AutoFilter mode to list result lines only , activated by a right click on the button . ) <p> And so I may continue with further right clicks , ping-pong tracking dependies across the source . <p> And whenever an important place in the code is found , a double click ( or optionally single click ) enters editing mode , allowing to change the source code at that place immeditately . <p> Depeche View Pro comes with built-in syntax highlighting for Java source code . The highlighting can be adapted or extended through a configuration file with straightforward syntax . See an example here . 
@@120535928 @9535928/ <h> Search Text Files As You Type with Depeche View . <p> Depeche View makes a search across many text files extremely simple and fast . You never have to think where to search for something . <h> Search As You Type - Instantly . <p> Just load all text files of a folder , then type a word . It will be searched instantly across all loaded files . If you try the Depeche View Pro Demo , you will see that a single word search across 3000 files normally takes less than one second . <p> The search is so fast because all text is kept in the computer 's main memory . Furthermore , Depeche View comes with a powerful built-in search engine that can build it 's search database on the fly while text is loaded . Forget about hour-long index creation , as it is the case with other search tools . <p> Just load any text from any folder , and you can fly over those contents instantly , faster than with any other text editor , search tool or IDE. 
@@120535929 @9535929/ <p> how to write scripts to automate the windows GUI , using the free AutoHotkey tool . <p> Do you have to cope with boring repetitions of click-and-type into some windows GUI programs ? Then you may need a windows scripting language for automation . This article gives a quick view into AutoHotkey , which is both free and powerful . <p> Download the tool here and run the installer . The file extension . ahk will be registered , that is , if you type foobar.ahk on the command line , it will be processed as an AutoHotkey script . <p> Example : automated clicking-away of popups . <p> I was once working in a company with a very complicated build system . Whenever we checked out source and compiled it for the first time , we got a crash popup similar to this : <p> To continue working , we had to click on the bottom right button ( " Do n't send " ) . So what we actually did was to click away this popup every time we compiled . Of course , the obvious @ @ @ @ @ @ @ @ @ @ . But ... in a nutshell , they did it this way for years , and no further questions . <p> So we go for the 2nd-best solution : automate the clicking-away . Create the following script : <p> To run the script , either type " popup-shutup.ahk " on the windows command line , or create an icon on your desktop , pointing to it , then double-click on the icon . <p> Both ways will result in a daemon script running permanently in background , and checking every 500 milliseconds : <p> if the popup appears . if it appears , <p> the popup window is activated . <p> it is checked if the activation succeeded ( 2 seconds timeout ) . the script may also be working without this check , but it 's better to be on the safe side , to avoid GUI irritations through bugs within the script . if activation failed , the script terminates . <p> a Left Mouse Click is sent at position x=370 and y=111 , which is the position of the " Do n't send " button within the @ @ @ @ @ @ @ @ @ @ the Window Spy tool provided with AutoHotkey . <p> the popup disappears , the script continues looping . <p> Now have a look at the system tray : <p> The green-white H tells you an AutoHotkey script is currently running . Position the mouse on this icon , press right button , and you get the ahk context menu . <p> Really important are Help , giving you the full syntax of all ahk commands , and the Window Spy , telling you x/y positions of every button in a window . <p> Whenever you change the script , select Reload This Script to have the changes applied . <p> So much as a short intruction to this tool ; it actually provides a full 3GL programming language , including string processing , clipboard and file I/O , allowing automated filling in of forms and running of applications . 
@@120535930 @9535930/ <p> sfk filter fileOrDir -selectoption(s) -processoption(s)sfk filt -selectoption(s) -processoption(s) -dir mydir -file . ext1 . ext2sfk filter -memlimit=n -write inoutfile -replacepattern(s) filter and change text lines , from standard input , or from file(s). input lines may have a maximum length of 4000 characters . line selection options -+pat1 -+pat2 ... include lines containing pat1 OR pat2 ++pat1 ++pat2 ... include lines containing pat1 AND pat2 -ls+pat1 include lines starting with pat1 -le+pat1 -le+pat2 include lines ending with pat1 OR pat2 - ! pat1 - ! pat2 exclude lines containing pat1 OR pat2 -ls ! pat1 exclude lines starting with pat1 -le ! pat1 -le ! pat2 exclude lines ending with pat1 or pat2 -no-empty-lines exclude empty lines -no-blank-lines exclude lines containing just whitespaces -include p1 to p2 include only lines within blocks surrounded by boundary lines containing patterns p1 or p2 -inc- p1 to p2 same , but exclude boundary lines on output -cut- p1 to p2 remove block of lines from p1 until p2 -inc- " * " to p1 include all from text start until marker -cut- p1 to " * " cut all from marker @ @ @ @ @ @ @ @ @ @ lines of text files -tail=n read only last n lines of text files ( up to a limit of 100000 bytes from file end ) -line=n read only nth line from input -nocheck with inc , cut : ignore endings without a start -addmark txt with inc , cut : insert txt after every block -context=n select n lines of context around hit lines -precon=5:blue select context before or after hit lines , -postcon=5:cyan : --- in blue or cyan , with separator " --- " . -unique -case if same line occurs twice , keep only first . default is case insensitive text comparison . -global-unique when filtering multiple files in one command , then -unique applies to lines in the same file , and -global-unique applies across all files . this will cache the text of all files in memory and may not be used with very large files . -keep pattern after -unique : make an exception for lines containing the given pattern , and keep them even if redundant . -keep-empty , -keep-blank always keep empty or whitespace lines . text processing options applied after line @ @ @ @ @ @ @ @ @ @ dest. first character is separator character ( e.g. ) . src is case-insensitive. to select case-sensitive search , say -case. -lsreplace , -lereplace same as -replace , but replaces only once at line start or line end . -highlight color pattern : highlight matching parts within lines . color : red = dark red , Red = bright red , green , blue , yellow , cyan , magenta , default . pattern : e.g. " GET * HTTP/ " type " sfk help colors " for more about colors. -lshighlight , -lehighlight same as -highlight , but only at line start or line end . -separate " ; " -form " $col1 mytext $-0n.nqcol2 ... " break every line into columns separated by any character listed after -sep , then reformat the text according to a user-defined mask similar to printf. when leaving out -sep , the whole line is packed into column 1 . if -spat was specified , then -form also supports slash patterns like t. google for " printf syntax " to get more details . example : -form " $40col1 $-3.5col2 $05qline $ ( 10.10qcount+1000 @ @ @ @ @ @ @ @ @ @ 40 chars , column 2 left- ordered with at least 3 and a maximum of 5 chars , then add the input line number , " q " uoted , right justified with 5 digits , prefixed by zeros , then the output line number plus 1000 within quotes . NOTE : some examples may not work in an sfk script , see section " common errors " below . adding values so far only works with ( q ) line and ( q ) count . -tabform " $col1 mytext ... " split and reformat columns of tab separated csv data . -stabform " $col3t$col2t$col1 " reorder three tab separated columns , creating tabbed output using ' s'lash patterns like t -uform " #40col1 #-3.5col2 #05qline " the same as -form but using unix style syntax . short for filter -upat. -trim removes blanks and tab characters at line start and end . use -ltrim or -rtrim to trim line start or end only . -blocksep " " = treat blocks of whitespace as single whitespace separator. -joinlines join output lines , do not print linefeeds. -wrap=n wrap output @ @ @ @ @ @ @ @ @ @ to define or override the console width . -toiso=c or just -iso converts UTF-8 text to ISO-8859-1. some chars beyond the 8 bit code range will be reduced to something similar , but most of them are changed to a dot ' . ' , or character c. -toutf converts ISO-8859-1 text to UTF-8. if this is done with UTF-8 input text then existing UTF-8 sequences will be destroyed ! -tolower or -toupper convers a-z to lower- or uppercase . does not convert any special characters like accents or umlauts. conditional text processing -ls/lewhere pattern -replace -highlight -sep ... -form replace , highlight or reformat lines matching the given pattern . all lines that do not match the pattern stay unchanged . -within pattern -replace fromto replace text in a part of the line matching the given pattern . the rest of the line text stays unchanged . pattern support wildcards * and ? are active by default . add -literal to disable . slash patterns are NOT active by default . add -spat to use t q etc. if you need the wildcard * but ALSO want to find/replace @ @ @ @ @ @ @ @ @ @ * or ? to find/replace ' * ' or ' ? ' characters . instead of typing " sfk filter -spat -rep " all the time , you may use the short form " sfk filt -srep " . the same applies for -(s)sep , -(s)form etc. unified syntax since sfk 1.5.4 you can also use - : -ls : -le : under windows . filter ... -uform or filter -upat ... -form uses # instead of $ . sfk variables versus -tabform with -upat under windows , of sfk for linux , both filter -tabform and sfk variables use the syntax # ( name ) to insert values . to solve this , variable parsing is not strict and may keep undefined variable names as is. quoted multi line parameters are supported in scripts using full trim . type " sfk script " for details . further options -arc XE : include content of . zip . jar . tar etc. archives as deep as possible , including nested archives . XD : demo will read first 1000 bytes of each entry . -qarc quick read top level archives @ @ @ @ @ @ @ @ @ @ files which are currently scanned. with wfilter : tell current proxy settings , if any . -write do not print output to console but overwrite input file(s). only files with actual text changes will be rewritten . this function may be used only with plain ASCII files , not with binaries like . doc , . xls. see also " sfk replace " . -write -to msk do not overwrite input files , but save according to mask msk , e.g. tmp$file . saves only changed files . say -writeall to write all files , including those without changes . -memlimit=mb when using -write , output is cached in memory , which is limited to 300 mb. use this option to extend , e.g. -memlimit=400 -yes -write simulates by default . add -yes to really write changes . -snap detect snapfiles and list subfile names having text matches . -snapwithnames same as -snap , but include subfile names in filtering . -nofilenames do not list filenames , do not indent text lines . -count , -cnt preceed all result lines by output line counter -lnum preceed all result lines by @ @ @ @ @ @ @ @ @ @ -literal treat wildcards * and ? as normal chars ( read more above ) . -hidden include hidden and system files . -noinfo do not warn on line selection combined with -write. -noop " no operation , take the " parameter but do nothing . may help if your ( windows ) shell miscounts quotations . -hitfiles if another command follows ( e.g. +run or +ffilter ) , pass a list of files containing at least one hit . -nocconv disable umlaut and accent character conversions during output to console . " sfk help opt " for details . -justrc print no output , just set return code on matching lines . -upat unix style syntax with -form , using # instead of $ -timeout=n with wfilt : wait up to n msec for web data . list of possible input sources from stdin : type x.txt sfk filter -+pattern from single input file : sfk filter x.txt -+pattern text from chained command : sfk list mydir . txt +filter -+pattern from many files , directly : sfk filter -+pattern -dir mydir -file . txt from many files , by @ @ @ @ @ @ @ @ @ @ general , whenever you need to make sure that file contents ( not the file names ) are processed , prefer to say " filefilter " or " ffilt " . web access support searching the word " html " in an http URL can be done like : sfk filter http : //192.168.1.100/ -+htmlsfk filter http : //.100/ -+htmlsfk wfilt .100 -+htmlsfk web .100 +filt -+htmlreturn codes for batch files 0 normal execution , no matching lines found . 1 normal execution , matching lines found . with -write : returns rc 1 only if any changes were written . &gt;1 major error occurred . see " sfk help opt " for error handling options . common errors when using filter -form within sfk scripts , expressions like $10.10col1 may collide with script parameters $1 $2 $3. to solve this , use brackets like $ ( 10.10col1 ) , or " sfk label ... -prefix=% " , or -uform. see also--- open source commands ---sfk xfind search wildcard text in text/binary files sfk xtext search wildcard text in text files only sfk xhexfind search in text/binary with hex dump @ @ @ @ @ @ @ @ @ @ filter filter and edit text with simple wildcards sfk find search fixed text in text/binary files sfk ftext search fixed text in text files sfk hexfind search fixed text in binary files sfk replace replace fixed text in text/binary files --- freeware commands ---sfk view GUI tool to search text as you type --- xe commercial commands ---sfk replace replace fixed text with high performance sfk xreplace replace wildcard text in text/binary files sfk help xe about SFK XE and xreplace with SFK Expressions . beware of Shell Command Characters . to find or replace text containing spaces or special characters like &lt;&gt; ! &amp; ? * you must add quotes " " around parameters or the shell will destroy your command . it splits the command into parts and gives SFK only one part , causing errors . therefore -replace &amp;nbsp ; must be written like : -replace " &amp;nbsp ; " within a . bat or . cmd file the percent % must be escaped like %% even within quoted strings : sfk echo -spat " percent %% is a percent x25 " web referencehttp : **31;2693;TOOLONG in @ @ @ @ @ @ @ @ @ @ tutorial , including long filter examples with input , command and output . type " sfk book " for details . examplesanyprog sfk filter -+error : - ! warning run command anyprog , filter output for error messages , remove warning messages . sfk filter result.txt -rep " / " -rep " xC : /xD : /x " read result.txt , turn all slashes into / , and C : / expressions to D : / the quotes " " are optional here , and just added for safety . sfk filter index.html -rep " &lt;u&gt;&lt;b&gt; " -rep " &lt;/u&gt;&lt;/b&gt; " -write replace underlining by bold in an HTML text . quotes " " are strictly required here , otherwise the shell environment would split the command at the &lt; and &gt; characters . add option -yes to really rewrite the file . sfk filter export.csv -sep " ; " -format " title : $ ( -40col2 ) remark : $ ( -60col5 ) " reformat comma-separated data , exported from spreadsheet , as ascii text . sfk stat . +filter -blocksep " " -format " $ ( 4col1 ) @ @ @ @ @ @ @ @ @ @ output of the stat command . when using this in an sfk script round brackets ( ) are required to avoid parameter name collision . sfk filter mycsv.txt &gt;out.txt -spat -rep " -rep t -rep " ; " t " " -form " $qcol1 " read semicolon-separated spreadsheet data mycsv , strip all double colons and tab characters from data fields . replace field separator " ; " by TAB , and surround fields by double colon . -form without -sep means " pack the whole line into $col1 " , allowing -form to add quotes at start and end of each line . sfk filter logsaccess.log " -+GET * 404 " list all lines from access.log containing a phrase with GET and 404. sfk filter log.txt " -ls ! ? ? . ? ? . ? ? ? ? ? ? : ? ? : ? ? * * " excludes lines from log.txt starting with a date , and having two more words , like " 20.05.2007 07:23:09 org.whatever.server main " cd sfk run -idirs " sfk filt tpl.conf &gt;httpd.conf -rep AbsWorkDir$path " create httpd.conf from tpl.conf , @ @ @ @ @ @ @ @ @ @ which the command is run . note we can NOT use -spat in this case , as a pathname like C : temp would produce garbage ( contains slash pattern " t " ) . sfk filter in.txt -spat -sep " t " -rep q -form " INSERT INTO MYDOCS ( DOCID , DESCRIPTION ) VALUES ( ' TestDoc$03line ' , ' $col2 ' ) ; " this example ( typed in one line ) creates a list of SQL statements , using tab- separated , quoted input data , and using the input line number for document ids. the -rep q means the same as -rep " - it strips quotes from the input , but using q is safer then " as it does n't let the shell miscount quotes . sfk list documents . txt +filter -+big*foo -+wide*foo from all . txt files in documents , filter the filenames ( NOT the file contents ) for big*foo OR wide*foo. sfk list documents . txt +filefilter -+big*foo -+wide*foo from all . txt files in documents , filter the file contents ( NOT the names ) for text lines @ @ @ @ @ @ @ @ @ @ -global-unique +tofile mixedlog.txt join all . txt files from logfiles into one output file mixedlog.txt , dropping all redundant text lines . works only if logfile records are prefixed by a unique record I 'd , and if overall text data is less than available memory , because all data is cached during processing . sfk list logfiles . txt +ffilter -global-unique -write -to mytmp$filesfk snapto=mixedlog.txt mytmp same as above in two commands , using temporary files to allow more data . binrunserver.bat 2&gt;&amp;1 sfk filter -+exception filter standard output AND error stream ( " 2&gt; " ) for exceptions sfk filter result.txt -+error -justrcIF %ERRORLEVEL%==1 GOTO foundError in a batchfile : jump to label foundError if text " error " was found within file result.txt. with -justrc no output is printed to terminal . sfk filt log.txt -high cyan " *. *. * ( *. java : * ) " -high green " sql select * " dump log.txt , listing java stack traces in cyan , and sql selects in green . sfk filt x.html -where " 000099 " -rep " **29;2726;TOOLONG " -rep " &lt;/font&gt;&lt;/b&gt; " replaces html @ @ @ @ @ @ @ @ @ @ " 000099 " ( =blue ) . sfk filt foo.cpp -cut " ifdef barmode " to " endif // barmode " strip blocks of lines from foo.cpp , surrounded by the given patterns . sfk fromclip +filt -srep " " -srep " qq " -sform " q$col1nq " convert text from clipboard to source code , e.g. change the " tab character " is written like t to a C++ or Java string literal like " the " tab character " is written like tn " sfk filt csv.txt -spat -within " q*q " -rep , x01 -rep , t -rep x01 , change separators in comma separated data from comma to tab , also taking care of quotes , by replacing in-quote commas by a placeholder ( x01 ) . if the data contains escaped quotes like " " then further prefiltering can be necessary , like removing those quotes by -sreplace qq sfk filt mysrc.cpp " -+fopen ( " -postcontext=3:blue : ----- +view filter source file " mysrc.cpp " for fopen calls , and list the following three lines ( post context ) of every call , separating @ @ @ @ @ @ @ @ @ @ View ( " sfk view " for more ) . sfk filter -tail=10 -dir proj -file . cpp show last 10 lines of every . cpp file within folder proj. sfk select mydir . txt +ffilter -head=10 -+mypat search first 10 lines of every . txt file of mydir for pattern mypat. notice the ffilter to read file contents , not just filenames. see also : sfk replace - find and replace text of equal length . works also with binary files , and allows , for example , to replace ( CR ) LF line endings completely by a different string . sfk find - find text in text and binary files . 217463 @qwx1077463 
@@120535932 @9535932/ <p> sfk tail -lines=n -follow filenamesfk ... +ttail -lines=n 1 . print last lines of a file , optionally following changes . to use file content processing , provide a single filename . 2. print last text lines procuded by a previous command . to process chain text ttail is recommended . options -lines=n print last n lines ( default is 10 ) . -follow or -f waits for file changes , printing them endlessly . if file is recreated or shrunk , rereads the last lines . to post-process tail output , e.g. with +filter , always add +loop at the end of the command sequence . -nowait if tail is reached multiple times in a chain by +loop then do not wait for a file size change but force stepping of the command chain . -quiet do not tell verbosely about read restarts. -polltime=n with -follow , specifies the delay in milliseconds before the file is checked again for changes . default is 500. -altsize use a different method to determine the file size ( stat instead of seek ) . may help if the default method @ @ @ @ @ @ @ @ @ @ . -verbose tell in detail what is done . see alsosfk filter -tail=n read and search last n lines of text files . sfk view GUI tool to view all text files of a folder , then jump through file ends by ctrl+end. web LONG ... tail -follow logsaccess.log immediately lists last lines , then all added lines over time . sfk tail -f c : templog.txt +filter -+error : -+warning : +loop endless filter of error and warning messages from log.txt. example sfk script with conditional executionfile logfilter.txt : sfk label checklog +tail -follow logfile.txt +tee toterm +storetext +filter -+error : -justrc +if " rc&gt;0 " call myalert +gettext +filter -+alldone : -justrc +if " rc&gt;0 " stop +loop +end sfk label myalert +then run -yes " myalert.bat " +end sfk script logfilter.txt will run myalert.bat whenever errors appear in logfile.txt. the script stops as soon as " alldone " appears in the log. to allow double filtering of the chain text it must be stored before the first filter , then restored . scripted example if you want to both tail and filter on several phrases , the @ @ @ @ @ @ @ @ @ @ as an alternative , you may put it into a batch embedded sfk script , e.g. under windows , create a file filtlog.bat : @echo off sfk script filtlog.bat -from begin goto xend sfk label begin +tail -f log.txt +filter -high red error : * -high yellow warning : * -high blue debug : * +loop : xend then type " filtlog " . creating command sequences this way allows better readability , and easy editing in any editor . see also sfk filter - all options for selection and post-processing of text sfk partcopy - copy byte block from the beginning of a file sfk script - how to create script files with sfk commands sfk samp - ready-to-use templates for windows and linux scripts 217463 @qwx1077463 
@@120535933 @9535933/ <p> I type " mousewheel.acceleration " . Within one second ( * ) ( on a 2.13 GHz i3 notebook , with 4 GB of RAM ) I 'm landing in some source file where the value is read in a method GetAccelerationStart . <p> Next I want to know where this method is called from . One Right Click onto the word GetAccelerationStart , and it is searched in the second window . Within two seconds ( * ) I see there is one place calling it , called AccelerateWheelDelta . <p> And so I may continue with further right clicks , ping-pong tracking how the mouse wheel accelaration is used in the Firefox browser . <p> And whenever an important place in the code is found , a double click ( or optionally single click ) enters editing mode , allowing to change the source code at that place immeditately . <p> Depeche View Pro comes with built-in syntax highlighting for C and C++ source code . The highlighting can be adapted or extended through a configuration file with straightforward syntax : see an example here and @ @ @ @ @ @ @ @ @ @ View now ! <p> download the free 30 days trial installer , load up to 5000 text files , and experience all professional features like instant text editing , loading of . zip file contents , search auto suggest , clipboard loading , clipboard automation and much more . <p> or download the Freeware edition Depeche View Lite , allowing to view and search up to 100 text files in realtime. 
@@120535935 @9535935/ <p> The whole manual . All functions in a colored 200 page PDF document , with a large font and no side borders , for large text display . Allows zoomless reading on your Smartphone , 2-page side by side reading on your tablet , or optimized printing with 2 pages per paper sheet . Describes both the features of Depeche View Lite and Pro . Covers the latest Depeche View Version 1.7.2 . <p> Will it work with your reader device ? Try the 20 page Demo PDF here . The page numbers in the index are links that jump to a page when touched on . On every page you may touch on contents at the left top to jump back to the index . This was tested with Adobe Reader for Android . It does not work with Adobe Reader for Windows Phone . <h> $4.95 <p> Payment is done by PayPal . Directly after payment you will get a download link displayed on screen . Download/Save the link content to your device : on a Windows PC click with the right mouse button and select @ @ @ @ @ @ @ @ @ @ for 1-2 seconds until a menu pops up , then select Save Link ( test it with the Demo PDF above ) . Then open the file from within your download folder . 
@@120535937 @9535937/ <p> sfk detab=tabsize dir ext1 ext2 ... -to outmask replace tabs by spaces within file(s) or text stream . options -to outmask do not overwrite original files , but write to output files according to outmask , e.g. -to tmp$path$base. $ext or -to tmp$file -yes if files are selected , really ( re ) write them . without -yes , detab is only simulated . -memlimit=n process files with up to n mbytes ( default=300 ) . -nowarn do not tell about skipped or unreadable files . see alsosfk scantab list files containing TAB characters . sfk help opt how to change the memlimit permanently . sfk view a text file viewer that can show all TAB characters in blue by pressing CTRL+T. web LONG ... detab=3 sources . cpp . hpp replace tabs by up to 3 blanks , within all . cpp and . hpp files of directory tree " sources " . sfk select -dir src -file . java +detab=4 -to tmp$file list all . java files of src , then detab with tabsize 4 , writing all outputs to directory tree " tmp " . @ @ @ @ @ @ @ @ @ @ same , however stripping the " src " input directory name from output file paths ( not possible with " +detab " form ) . sfk filter mytext.txt +detab=8 detab content of a single file to the console . to find how many files would need detabbing , type for example:sfk scantab testfiles . hpp . cpp . txt -&gt; scans directory testfiles , and all subdirectories , for . hpp , . cpp and . txt files containing tab characters . example output : list of files containing tabs : **38;2757;TOOLONG **27;2797;TOOLONG **36;2826;TOOLONG **25;2864;TOOLONG **32;2891;TOOLONG **36;2925;TOOLONG 6 files of 32 contain tabs . to view TAB characters in your files interactively like this : - download the free text browser Depeche View Base . - click on " Open " , select the folder containing your text files . - click on the " showtab " button in the right bottom corner . All TAB characters will be shown in blue , and all blanks in yellow . to search for TAB characters interactively : Within Depeche View , use the TAB keyword in your queries , e.g. - @ @ @ @ @ @ @ @ @ @ ( Type it all uppercase , and do n't forget the blank after TAB ) - type " TAB " to find all curly brackets preceeded by a tab : - type " foo TAB bar " to find the word combination " foo " and " bar " with exactly one TAB character inbetween . Note that the blanks around " TAB " are not used in the search . 217463 @qwx1077463 
@@120535938 @9535938/ <p> how to write scripts to automate the windows GUI , using the free AutoHotkey tool . <p> Do you have to cope with boring repetitions of click-and-type into some windows GUI programs ? Then you may need a windows scripting language for automation . This article gives a quick view into AutoHotkey , which is both free and powerful . <p> Download the tool here and run the installer . The file extension . ahk will be registered , that is , if you type foobar.ahk on the command line , it will be processed as an AutoHotkey script . <p> Example : automated clicking-away of popups . <p> I was once working in a company with a very complicated build system . Whenever we checked out source and compiled it for the first time , we got a crash popup similar to this : <p> To continue working , we had to click on the bottom right button ( " Do n't send " ) . So what we actually did was to click away this popup every time we compiled . Of course , the obvious @ @ @ @ @ @ @ @ @ @ . But ... in a nutshell , they did it this way for years , and no further questions . <p> So we go for the 2nd-best solution : automate the clicking-away . Create the following script : <p> To run the script , either type " popup-shutup.ahk " on the windows command line , or create an icon on your desktop , pointing to it , then double-click on the icon . <p> Both ways will result in a daemon script running permanently in background , and checking every 500 milliseconds : <p> if the popup appears . if it appears , <p> the popup window is activated . <p> it is checked if the activation succeeded ( 2 seconds timeout ) . the script may also be working without this check , but it 's better to be on the safe side , to avoid GUI irritations through bugs within the script . if activation failed , the script terminates . <p> a Left Mouse Click is sent at position x=370 and y=111 , which is the position of the " Do n't send " button within the @ @ @ @ @ @ @ @ @ @ the Window Spy tool provided with AutoHotkey . <p> the popup disappears , the script continues looping . <p> Now have a look at the system tray : <p> The green-white H tells you an AutoHotkey script is currently running . Position the mouse on this icon , press right button , and you get the ahk context menu . <p> Really important are Help , giving you the full syntax of all ahk commands , and the Window Spy , telling you x/y positions of every button in a window . <p> Whenever you change the script , select Reload This Script to have the changes applied . <p> So much as a short intruction to this tool ; it actually provides a full 3GL programming language , including string processing , clipboard and file I/O , allowing automated filling in of forms and running of applications . 
@@120535939 @9535939/ <h> how to turn your Windows Command Prompt ( CMD.exe ) into a powerful tool . <p> By default , the Windows command line is not well configured : not enough lines of scrollback , no QuickEdit mode , etc. , therefore many people do n't use it . but with a few steps , some how-to-use knowledge , and tools like swiss file knife and depeche view , working with the command line is faster than anything else . <p> Configure the Windows Command Prompt this way : 1 . create a command line shortcut on your desktop : - over **34;2963;TOOLONG Prompt , press right mouse button , then select Copy . - go to an empty place on the desktop . - select Paste . 2. on the new desktop shortcut , press right mouse button , then select Properties . 3. in the Command Prompt Properties , set <p> 4. close Properties by clicking OK. 5. double-click on the Command Prompt icon to open a shell . Now you have a well configured power shell : - any command output is remembered up to 3000 @ @ @ @ @ @ @ @ @ @ can always scroll back . - you may select any text you see with the left mouse button , then click right button to copy the text to clipboard. - once you copied something to clipboard , click right button again to paste text from clipboard. this way you can copy/paste file- names very quickly in the command prompt , running file copies etc. much faster than by any explorer click-around. - to pause a program that dumps output to the shell , do a dummy-select of text with the left mouse button . to continue program execution , press right button , or enter . Automatic Command Completion Question : how do you enter the directory **26;2999;TOOLONG ? Answer 1 : type " cd **26;3027;TOOLONG " this is actually what most users do , and it 's a waste of time . Answer 2 : type " cd very " and then press the TAB key . since Windows XP , command completion is default . Under Win98 , completion it is NOT default , but can be activated through regedit : set the registry entry <p> HKEYCURRENTUSER Software @ @ @ @ @ @ @ @ @ @ the code of the TAB key . Using the free Swiss File Knife Now that you 're on the command line level , have a look at the multi-function tool sfk and the realtime text viewer depeche view , and experience how power searching and processing of whole directory trees can boost up your daily work . 
@@120535941 @9535941/ <h> A High Speed Search Tool And EditorFor Java Source Code Files <p> It loads all source files from a folder , showing them all in a single window , as if they were one large SuperSourceCode . <p> Words are searched as you type , without the need to fill in any dialogues . Furthermore , words can be searched by simply clicking on them . <p> Searches can be done in the current window , or - by a single right mouse click - in another window in parallel . <p> This radical and simple usage concept allows high speed search and analysis within thousands of Java source code files , tracking dependencies faster than with any Integrated Development Environment . <p> Look at the example screenshots to the right : <p> I want to get an overview over a Java database project , so I load all from folder workhsqldb . <p> Typing void main I get all program entry points , listed across a thousand files in 0.2 seconds ( * ) ( on a 2.13 GHz i3 notebook ) . The screenshot shows a @ @ @ @ @ @ @ @ @ @ <p> WebServer.java draws my attention . How is this web server implemented ? One right click later , there is a second window showing that text location . <p> and so I start surfing the code . What 's the method canonicalOrAbsolutePath doing ? I switch to horizontal tiling by a single F2 key press , and right click on that word . <p> Instantly I see where canonicalOrAbsolutePath is implemented , and where it is called . ( Using AutoFilter mode to list result lines only , activated by a right click on the button . ) <p> And so I may continue with further right clicks , ping-pong tracking dependies across the source . <p> And whenever an important place in the code is found , a double click ( or optionally single click ) enters editing mode , allowing to change the source code at that place immeditately . <p> Depeche View Pro comes with built-in syntax highlighting for Java source code . The highlighting can be adapted or extended through a configuration file with straightforward syntax . See an example here . 
@@120535942 @9535942/ <p> sfk tail -lines=n -follow filenamesfk ... +ttail -lines=n 1 . print last lines of a file , optionally following changes . to use file content processing , provide a single filename . 2. print last text lines procuded by a previous command . to process chain text ttail is recommended . options -lines=n print last n lines ( default is 10 ) . -follow or -f waits for file changes , printing them endlessly . if file is recreated or shrunk , rereads the last lines . to post-process tail output , e.g. with +filter , always add +loop at the end of the command sequence . -nowait if tail is reached multiple times in a chain by +loop then do not wait for a file size change but force stepping of the command chain . -quiet do not tell verbosely about read restarts. -polltime=n with -follow , specifies the delay in milliseconds before the file is checked again for changes . default is 500. -altsize use a different method to determine the file size ( stat instead of seek ) . may help if the default method @ @ @ @ @ @ @ @ @ @ . -verbose tell in detail what is done . see alsosfk filter -tail=n read and search last n lines of text files . sfk view GUI tool to view all text files of a folder , then jump through file ends by ctrl+end. web LONG ... tail -follow logsaccess.log immediately lists last lines , then all added lines over time . sfk tail -f c : templog.txt +filter -+error : -+warning : +loop endless filter of error and warning messages from log.txt. example sfk script with conditional executionfile logfilter.txt : sfk label checklog +tail -follow logfile.txt +tee toterm +storetext +filter -+error : -justrc +if " rc&gt;0 " call myalert +gettext +filter -+alldone : -justrc +if " rc&gt;0 " stop +loop +end sfk label myalert +then run -yes " myalert.bat " +end sfk script logfilter.txt will run myalert.bat whenever errors appear in logfile.txt. the script stops as soon as " alldone " appears in the log. to allow double filtering of the chain text it must be stored before the first filter , then restored . scripted example if you want to both tail and filter on several phrases , the @ @ @ @ @ @ @ @ @ @ as an alternative , you may put it into a batch embedded sfk script , e.g. under windows , create a file filtlog.bat : @echo off sfk script filtlog.bat -from begin goto xend sfk label begin +tail -f log.txt +filter -high red error : * -high yellow warning : * -high blue debug : * +loop : xend then type " filtlog " . creating command sequences this way allows better readability , and easy editing in any editor . see also sfk filter - all options for selection and post-processing of text sfk partcopy - copy byte block from the beginning of a file sfk script - how to create script files with sfk commands sfk samp - ready-to-use templates for windows and linux scripts 217463 @qwx1077463 
@@120535943 @9535943/ <h> Search Text Files As You Type with Depeche View . <p> Depeche View makes a search across many text files extremely simple and fast . You never have to think where to search for something . <h> Search As You Type - Instantly . <p> Just load all text files of a folder , then type a word . It will be searched instantly across all loaded files . If you try the Depeche View Pro Demo , you will see that a single word search across 3000 files normally takes less than one second . <p> The search is so fast because all text is kept in the computer 's main memory . Furthermore , Depeche View comes with a powerful built-in search engine that can build it 's search database on the fly while text is loaded . Forget about hour-long index creation , as it is the case with other search tools . <p> Just load any text from any folder , and you can fly over those contents instantly , faster than with any other text editor , search tool or IDE. 
@@120535944 @9535944/ <p> I type " mousewheel.acceleration " . Within one second ( * ) ( on a 2.13 GHz i3 notebook , with 4 GB of RAM ) I 'm landing in some source file where the value is read in a method GetAccelerationStart . <p> Next I want to know where this method is called from . One Right Click onto the word GetAccelerationStart , and it is searched in the second window . Within two seconds ( * ) I see there is one place calling it , called AccelerateWheelDelta . <p> And so I may continue with further right clicks , ping-pong tracking how the mouse wheel accelaration is used in the Firefox browser . <p> And whenever an important place in the code is found , a double click ( or optionally single click ) enters editing mode , allowing to change the source code at that place immeditately . <p> Depeche View Pro comes with built-in syntax highlighting for C and C++ source code . The highlighting can be adapted or extended through a configuration file with straightforward syntax : see an example here and @ @ @ @ @ @ @ @ @ @ View now ! <p> download the free 30 days trial installer , load up to 5000 text files , and experience all professional features like instant text editing , loading of . zip file contents , search auto suggest , clipboard loading , clipboard automation and much more . <p> or download the Freeware edition Depeche View Lite , allowing to view and search up to 100 text files in realtime. 
@@120535945 @9535945/ <h> Depeche View Realtime Source Research <p> loads all source code files from a folder , showing all content in one window . It is used to browse , search and edit huge amounts of source code , log files , documentation or CSV data at high speed with the smallest possible effort . It was developed to analyze industrial C++ automotive projects with 50,000 files and more , but can be used with any programming language ( Java , PHP etc. ) to find bugs faster than with any IDE . <p> startup <p> all in one view <p> searching <p> two views <p> fast source code browser for Windows ( XP/Vista/7/8/10 ) . <p> loads all text files from a folder , showing all content in one window as one large text . <p> fly over everything just by dragging your mouse . <p> deluxe soft scrolling by the mouse wheel . <p> search , analyze and edit thousands of source files as you type and click . <p> Depeche View does not only show everything in one window , it can also provide multiple points of @ @ @ @ @ @ @ @ @ @ windows . <p> And that 's what you need everyday : read two parts of text side by side , no matter if it 's in the same file , or in two separate files - to track dependencies between text , or to quickly copy and modify text parts between files . <p> Forget about dragging window borders . Depeche View comes with a fixed window layout . New windows are created by a click on the create view button , and are arranged instantly side by side , as shown above - because that 's what everyone needs , everyday . <p> If you want to search a word which is displayed already on screen , most text editors offer to select this by a double click , and then search it by some hot key . This is a two step operation that actually requires three input events . Repeated a hundred times a day , it 's another waste of time . <p> With Depeche View , a single SHIFT+click on a word searches it instantly , across all files , either in the current window @ @ @ @ @ @ @ @ @ @ ) . This allows realtime jumping through huge amounts of text , searching many different words in the shortest possible time . <h> Filter Text In Realtime . <p> With Depeche View , you can list all search results instantly , across all loaded text files . To do so , <p> press the Filter Button , or press CONTROL+A like " All Results " . <p> Instantly , you get All Results In One View , also called a Filtered View over all text files . <p> You see both the names of files where the word was found , as well as the actual text lines with the word . <p> To jump to any of these locations , simply click into a result line . The Filtered View is closed , and you land instantly at the selected text location . <h> One Click Copy , Bookmark , or Edit . <p> Fast text research requires elimination of two-step operations . In Depeche View , words or phrases can be copied to the clipboard instantly by a single click , while keeping the CONTROL key pressed . @ @ @ @ @ @ @ @ @ @ the phrase is copied . The same applies to bookmarking : keep ALT pressed , click on a word , done . <p> And whereever you are , text can be edited with a double click ( default with active assistance mode ) , or even just a single click ( one click edit for advanced users ) . <h> One Click Interface Revolution . <p> Depeche View is proud to break with slow , cumbersome standards used by classical text editors , Notepad/Word , or Intergrated Development Environments . Instead , it comes with a unique one-click user interface , optimized for one thing only - speed , speed , and nothing but speed . <p> Of course , this requires a short training . You have to remember three keys : <p> SHIFT key together with a mouse button Searches Text . Remember that both SHIFT and Search start with " S " . <p> CONTROL key together with a mouse button Copies Text . Remember that both CONTROL and Copy start with " C " . <p> Furthermore , to fly over a thousand text files , @ @ @ @ @ @ @ @ @ @ your mouse vertically . This is the way smartphones and touch pads do it nowadays , and it 's the way Depeche View did it always . <p> Especially the scripting features allow software developers to replace their IDE by calling command line compilers and monitoring their text outputs . ( For details , create a config file in Depeche View , then search for the " runback " and " monitor " commands. ) 
@@120535947 @9535947/ <p> The whole manual . All functions in a colored 200 page PDF document , with a large font and no side borders , for large text display . Allows zoomless reading on your Smartphone , 2-page side by side reading on your tablet , or optimized printing with 2 pages per paper sheet . Describes both the features of Depeche View Lite and Pro . Covers the latest Depeche View Version 1.7.2 . <p> Will it work with your reader device ? Try the 20 page Demo PDF here . The page numbers in the index are links that jump to a page when touched on . On every page you may touch on contents at the left top to jump back to the index . This was tested with Adobe Reader for Android . It does not work with Adobe Reader for Windows Phone . <h> $4.95 <p> Payment is done by PayPal . Directly after payment you will get a download link displayed on screen . Download/Save the link content to your device : on a Windows PC click with the right mouse button and select @ @ @ @ @ @ @ @ @ @ for 1-2 seconds until a menu pops up , then select Save Link ( test it with the Demo PDF above ) . Then open the file from within your download folder . 
@@120535948 @9535948/ <p> Depeche View loads all CSV ( comma or TAB separated ) data files from a folder , showing all text data within a single window . The tool allows instant search and filtering of the data without the need to load it in a spreadsheet application . <p> Example : viewing a CSV database of ZIP codes in Depeche View . <p> In the above example , a comma separated text was loaded , containing ZIP codes of the United States . To display the data in a more readable form , press CONTROL+SHIFT+TAB once to activate large ( 20 column ) TAB positions : <p> Now everything is better readable . To search for a city name , or a zip code , just type it . For example , type " los angeles " : <p> and instantly you land within the first lines containing the phrase . If you click on the big " F " button , like " Filter " : <p> then only the result lines are shown . If you right-click on the filter button , you may also activate " @ @ @ @ @ @ @ @ @ @ filtered whenever you type a word . 
@@120535949 @9535949/ <p> If this example would be really huge , we may not want to insert " " statements manually . So we may try automated source code instrumentation . <p> WARNING : before you try the following on any of your existing source code , always create a backup ! The modified source may be useful for a temporary debug session , but you may NOT want to continue working with it for all time . <p> On the command line , go into the root of your source code base , then say : <p> In ( most ) c++ methods you will find that some " mtkb " statement has been added at the method entry . Furthermore , the changed . cpp files all contain an include statement #include " mtk/mtktrace.hpp " , just like what you specified with the ' inst ' command . <p> instrumenting source code may slow down the program significantly and should never be used in production code . it makes sense only during a debug phase , e.g. to create once a stack trace for reverse call analysis . <p> @ @ @ @ @ @ @ @ @ @ In the above example , we traced the program flow directly into a tracefile using the " file:tb " option . Now let 's change the setting a bit : <p> set MTKTRACE=ring:tb , filename:log.txt <p> As you will see , the program flow is no longer traced into the trace file , speeding up program execution significantly . But how do we see now the flow of execution ? We found out that the program crashes in myfunc2() , so we want to know how we got there . Do this by inserting a call before the critical line : <p> the difference is now that we dump the last steps of the program on demand , instead of permanent flow tracing . <p> besides mtkDumpStackTrace , which lists only the last mtkb statements reached , there is also a method mtkDumpLastSteps , which dumps the last mtklog() statements which are also recorded in the ring buffer . <p> furthermore , mtkDumpStackTrace(0) or mtkDumpLastSteps(0) dumps the stack trace/last steps of ALL threads , not just of the current thread . this may create a rather long output ( last @ @ @ @ @ @ @ @ @ @ <p> so much for this short introduction to mtk. experienced developers will find out by themselves how this can be used , for example , in combination with other tracing systems already present in their source base . mtk is very low-level , low-overhead , and can be used as a layer below anything else , to mix tracing statements of different tracing systems back together . <p> NOTE : <p> if you decide to integrate mtk permanently within a project , be careful , and make sure that you provide some compile option to disable the whole tracing . mtk is intended as an analysis tool , and as with all free things , there is no guarantee whatsoever that mtk will work reliantly , especially within production systems . <p> if you use temporary ( non-check-in ) sfk instrumentation together with sfk patching , it is recommended that you instrument first , and patch second . this way you can redo your patches easily and anytime , whereas re-instrumentation ususally takes much longer . <p> mtk does not use mutex semaphores so far . this way it stays @ @ @ @ @ @ @ @ @ @ expect that the one or other tracing record may get lost during heavy multithreading. 
@@120535951 @9535951/ <p> List the contents of all . zip , . jar , . ear , . war , . aar , . tar , . tar.gz , tar.bz2 and . tgz files in a folder and all subfolders , including archives nested within other archives , with the free Swiss File Knife tool for the Windows , Intel Mac OS X and Linux command line . Fully portable , no installation . <p> In this example , there is an intro.html within a docs.jar , within a tools.jar , within bar.zip , within the mydir directory tree . <p> more examples : <p> sfk -arc list -dir mydir *. jar -file . class <p> list only . class files within . jar files within mydir ( Linux users type " % " instead of " * " ) . this example for the Windows command line uses a path mask " . jar " which is identified by a wildcard " * " . under Linux , such wildcards are misinterpreted by the shell , therefore " * " or " % " must be used instead . <p> @ @ @ @ @ @ @ @ @ @ -file . class <p> list only . class files within . ear files within the foo and bar directory tree , however excluding any files within directories named like " depr " . ( Linux users type " : " instead of " ! " ) <p> sfk list -arc **25;3119;TOOLONG <p> list everything within the eclipse SDK , in total over 70000 files . <p> sfk -arc list -big **25;3146;TOOLONG . java <p> what are the biggest . java source files within the eclipse SDK ? the result : 
@@120535953 @9535953/ <p> XMLStarlet is a command line tool with many functions for handling XML files , but the most interesting function discussed here is the reformatting of XML files , making them better " human readable " . <p> today 's software development is unimaginable without XML files . configuration data , request content , documentation - everything is packed into XML today , but often these files are not easy to read and nearly impossible to edit with a normal , straight text editor ( the only way in which I edit xml 's ) , simply because some generator bot did n't really care about the end user , or developer , who has to cope with it . 
@@120535954 @9535954/ <h> High Speed Open Source Research <p> I need example source code on how to write a video player . I go to sourceforge.net and search for " video player " . I get a list with 300 results . There is an " Open Video Player " , presenting a download button " ovp-sl-2.3.1-src.zip " . That means the presented file contains source code in a . zip package , so let 's try . I click on that button . <p> The file is downloaded and opened in Depeche View Pro immediately , presenting 319 text files . Clicking the Filter button gives me the list of filenames . Unfortunately , the project does not use C++ , but " . cs " files , meaning Microsoft Visual C# code . But I want a C++ or C example , so I press Escape and ignore that package . Depeche View saved me lots of time , as I did n't have to extract the package at all . <p> back into the SourceForge result list . I see " xine-lib-1.1.19.tar.bz2 " . Let 's try that @ @ @ @ @ @ @ @ @ @ says : it 's C source code ! <p> so I type " int main " and click on the button , to find main programs that can be taken as a research starting point . <h> Try it yourself ! <p> Run the tool as Administrator , to allow registering of file extensions . Click on the Setup button , and check all under " Register Depeche View In Windows Explorer " , as shown to the right . <p> Close Setup , exit the program by Escape . <p> The next time that you click on a . zip or . tar.bz2 link within Firefox , you will be asked to open it with Depeche View directly . <p> One further tip : when searching stuff in a . zip file , use the Filter button ( square F at the right bottom ) intensely , as it gives you either a list of text lines containing only the searched word , or the whole file list . Even better , right click on that button to activate Auto Filter Mode ( it then becomes a square A @ @ @ @ @ @ @ @ @ @ help under " Filtered Views " . <h> Try Depeche View now ! <p> download the free 30 days trial installer , load up to 5000 text files , and experience all professional features like instant text editing , loading of . zip file contents , search auto suggest , clipboard loading , clipboard automation and much more . <p> or download the Freeware edition Depeche View Lite , allowing to view and search up to 100 text files in realtime. 
@@120535955 @9535955/ <p> Depeche View is a realtime text file search tool made for Programmers who have to analyze thousands of source code files , but also for Non-Programmers who need to research many ASCII text files , like CSV database exports or documentation . <p> It loads all text files of a folder into memory , showing everything in a single windows , as if it would be one large text . <p> So , if you want to read many files , you do n't have to switch between many windows or tabs . Just stay in the same window , and browse vertically over all text files in one go . <p> This simple approach of presenting text files allows you to research text faster than with any other text editor , search tool , or IDE . <h> Try Depeche View now ! <p> download the free 30 days trial installer , load up to 5000 text files , and experience all professional features like instant text editing , loading of . zip file contents , search auto suggest , clipboard loading , clipboard automation and much @ @ @ @ @ @ @ @ @ @ Lite , allowing to view and search up to 100 text files in realtime. 
@@120535957 @9535957/ <p> Depeche View loads all text files from a folder , showing them all in a single window , as if they are one huge text . <p> Furthermore , this all-in-one window can be cloned . A click on the window create button ( or a right click on blank space while there is only one window ) creates another view onto the same text , showing the same location , no matter in what file . <p> This allows to look up informations further down or up in the same file , or nearby files , while keeping a view onto the initial text position , e.g. to swiftly continue editing . <p> Take a look at the example snapshot to the right : <p> I started text editing by double clicking on a word in the left window , within a file " sfk.cpp " . I typed " // get the file size " . <p> Now I need to look up a function named " getFileSize " , to read about it 's parameters . <p> therefore I change into the right side window @ @ @ @ @ @ @ @ @ @ <p> I type " getfilesize " , finding the function immediately . <p> now that I see how it is declared , I continue editing in the left side window . <h> Try Depeche View now ! <p> download the free 30 days trial installer , load up to 5000 text files , and experience all professional features like instant text editing , loading of . zip file contents , search auto suggest , clipboard loading , clipboard automation and much more . <p> or download the Freeware edition Depeche View Lite , allowing to view and search up to 100 text files in realtime. 
@@120535959 @9535959/ <h> Search Words In Text Files Just By Clicking On Them . <p> Depeche View loads all text files from a folder , showing them all in a single window , as if they are one huge text . <p> And whenever you see a word on screen that you would like to search everywhere , you may : <p> Search In Same Window : press the SHIFT key , then left-click on a word ( with the left mouse button ) . The word will be searched instantly across all files , with the results shown in the current window . <p> Search Into A Different Window : press the SHIFT key , then right click on a word , and it will be searched in another window , usually the second window to the right side . <p> Search Into A Window To The Left : if you have two or more windows open , you may also press the SHIFT key , then middle click on a word ( with the middle mouse button ) . This will search the word in a window leftside to @ @ @ @ @ @ @ @ @ @ window sent a search <p> This unique principle of Depeche View allows you to jump between two or three windows on the fly , sending searches here and there wherever you need them . <p> It allows Programmers to analyze and track dependencies in large software projects quickly and easily , by jumping from one point within code to another , by a single mouse click . <p> It allows , for example , to research CSV database exports by clicking into a data value , showing instantly where that value appears elsewhere , much faster than with any spreadsheet software . 
@@120535962 @9535962/ <p> Depeche View loads all text files from a folder , showing them all in a single window , as if they were one large SuperText . <p> And this single window can be duplicated , so typically a Depeche View user has two or three views open side by side , with every view providing access to the same SuperText - a unique high speed , two dimensional access scheme completely different to any other text editor or IDE . <p> This allows , for example , to edit text in one file , and browse over the same , or other , text files in parallel within another view . <p> Look at the snapshot to the right : <p> a file " sfk.cpp " is edited in the left view . <p> the same file is also browsed in the right view . <p> Now Depeche View Pro allows to : <h> Instant Cross Copy Between Views <p> keep the CONTROL key pressed , then RIGHT click into a word within the right view ( using the right mouse button ) . -&gt; the word is @ @ @ @ @ @ @ @ @ @ CONTROL key pressed , then RIGHT click into the first and last line of a text block . -&gt; the whole text block is copied instantly . <p> SHIFT+CONTROL+right click into a text line -&gt; the whole text line is copied instantly . <p> Repeat these actions a hundred times a day , and you will find that it 's a real time saver . <h> Instant Text Move Between Views <p> In the third image to the right , both views are in edit mode . I decide that I want to move the whole function " printFileTimeAndSize " into the right side view . <p> With most other text editors or IDEs , this would require a sequence like : <p> mark text block to the left by SHIFT+cursor keys . <p> CONTROL+X to cut out the block . <p> click into the right window . <p> CONTROL+V to insert from the clipboard . <p> and if I want to continue editing in the left view , it then takes another click into the left view . <p> But with Depeche View Pro , it 's only two @ @ @ @ @ @ @ @ @ @ pressed , mark the whole text block by cursor keys . It is highlighted in yellow . <p> press CONTROL+DELETE. the text block is cut out in the first view , and inserted into the second one . <p> the same text in two views , while editing in the left view . <p> block copy after right click into " int bIsDir " and " return 0 " . <p> before text move , with both views in edit mode . <p> after text move , by a single CONTROL+DELETE . <p> Depeche View Pro comes with even more streamline editing features like Auto Insert and Repeat Edit , saving you from endless CONTROL+C / CONTROL+V sequences required by many other editors . 
@@120535963 @9535963/ <h> How to receive , view and filter plain or colored network text . <p> How to receive text from shell scripts , batchfiles , or from a C++ or Java application , with a Freeware tool for Windows and Linux/Mac . <p> Depeche View can receive text from the local network sent as UDP raw text , or in the UDP sfktxt format . This is useful - for power users who want to send output of scripts directly into DView , no matter if those scripts run on the same machine , a VM , or a remote machine . - for software developers to receive trace output of their programs , no matter where they run . how to enable network text Network text must be enabled under Setup / General in the " network text " section . Check the box and close Setup . If text was loaded already , then Depeche View Lite requires to drop all text from memory on activation of network text . ( You may append text files after that . ) If you select not to drop any @ @ @ @ @ @ @ @ @ @ restart of Depeche View . In DView Pro , the net text is available immediately . On first activation of network text , the Windows Firewall may ask for permission . As soon as you see the " net " button at the top , DView is ready to receive text , which is collected into a text named " // netlog.nlog " . If you have multiple views open in vertical tiling , the net button may look different , moving to the right top corner of the leftmost window . When running Depeche View on the command line , option -net will both enable network text and immediately starts to follow incoming text . Furthermore , -net:5000 , ip listens on port 5000 and shows full ip -net:5000 , sip same , but shows only short ip ( last part ) A further way to enable network text immediately is to press CTRL+SHIFT+K. show and pause network text The following actions are possible : - jump to the netlog : if the netlog text is not currently visible , click the button or press CTRL+K to jump to @ @ @ @ @ @ @ @ @ @ jump on every received text : to see every incoming update , RIGHT click on the net button , or press CTRL+SHIFT+K. - pause receive : if you want to read the netlog text without disturbance by further input , click on the button or press CTRL+K while the text is visible . in pause mode , all incoming text is discarded . Please note that with multiple windows , automated display of netlog updates is possible in the FIRST view only . If there is few visual space , the netlog button may also change it 's appearance and move to the top right of the leftmost view . how to send network text How to send simple text : - Swiss File Knife : get sfk.exe and type " sfk netlog " for details how to send text from the command line . - C , C++ or Java programmers : just send UDP plain text messages to the machine where DView is running , to the configured port ( default is 21323 ) . - Linux tools : command line tools like netcat may be used to @ @ @ @ @ @ @ @ @ @ exceed 1000 bytes . How to send color text with long lines : - this requires to use the sfktxt protocol , which is documented with a sample implementation in the Swiss File Knife source codes . See file sfknet. ? pp , class UDPIO. - transfer of long lines will work fine as long as one client is sending at a time . as soon as multiple clients are sending , lines may be wrapped and interleaved at random points . NO TRANSMISSION GUARANTEE . Depeche View uses UDP to receive text , which makes it very easy to use and to write clients for sending . Furthermore , it makes sense for senders like scripts or server processes that want to send out status informations quickly in a " Send And Forget " way , without being slowed down , or even stopped , by a slow or non existing receiver . However , it is NOT guaranteed that all sent text will arrive in complete or in the same order . This means do not send vital , highly important stuff this way , e.g. banking server @ @ @ @ @ @ @ @ @ @ or a long , important source code . Think a moment how much of a problem it would be if the text was incomplete . The Swiss File Knife netlog command has an option -duplex to increase reliability for the sake of speed . But again , this also comes with no guarantees , and errors due to missing packages will show up at the client , but not in Depeche View itself . show sender IP and port Press CTRL+D ( like Details ) while the netlog is visible to toggle sender IP and port line prefixes . Two prefix formats are available , with full IP and port info , or just with the last part of the IP . Line prefixes will show only from the moment where you toggled the setting . Previous records are not changed . network text : using alternative port If you see " using alternative port " or " port conflict " , then this means - another application is running already which uses the network text port , like another instance of DView . DView tries to solve this automatically @ @ @ @ @ @ @ @ @ @ the configured port + 10 , or +20 , or +30 until +50 . If an unknown application is using the configured port , change the port number in Setup / General . - OR the Windows firewall does not allow network access for Depeche View . then check the firewall settings . - OR if none of the above reasons apply , it might be that network ressources of the operating system are exhausted , so try a reboot of Windows . network text error : can not initialize netlog Same reasons as described under network text port conflict above . If all alternative ports are used already , or network access is blocked by the firewall , this message may appear . network text size limit Because network text is performance critical and must be received and filtered in real time , the text is organized as a static memory block , with a fixed number of lines . - from the start , the text shows the full number of configured , yet empty lines . However , if you copy the whole text to clipboard by @ @ @ @ @ @ @ @ @ @ as soon as all lines are filled , for every new line the oldest one is dropped from memory ( a ring buffer ) . The maximum configurable memory amount for network text is 10 MB with DView Lite , and 20 MB with Pro . raw text default behaviour By default , raw UDP text is treated as a stream of characters across all senders , meaning lines that do NOT end with CR or LF will be joined into one large line , until CR or LF is received . This allows even primitive sender programs to span larger lines over multiple messages . However , some sender programs may work different , possibly sending every single line of text as one message , without any CR or LF termination . In such a case , to avoid getting endless long lines unintentionally , you may enable " auto LF on raw text " in Setup / General . 
@@120535967 @9535967/ <p> sfk space dirname-helpsfk filesys dirname show disk space and/or file system informations. a folder name can be specified which relates to a specific volume or hard disk . options -bytes all size infos in bytes -tabs pure values , tab separated -binary calculate with binary megabytes of 1048576 bytes each . aliasesdiskspace same as space fsinfo same as filesys freespace tell only free space chaining support can not use chain input data . web LONG ... filesys tell details about the file system of the current directory ( . ) sfk filesys D : tell about the file system used for drive D : sfk space tell total and free MB of the current volume . example outputssfk space . totalmb=307383 freemb=6057 just tells the total and free mb available in the volume of the current dir.sfk fsinfo . filesys= " NTFS " volume= " 15234973 EXTDATA " totalmb=307383 freemb=6057 tells also details of the current filesystem , volume I 'd and label.sfk space -bytes -tab +filter -tabform " $col2 " 6057123840 get only the free space value in bytes. under linux , use -tabform " #col2 " , @ @ @ @ @ @ @ @ @ @ all platforms . 217463 @qwx1077463 
@@120535969 @9535969/ <p> Depeche View loads all text files from a folder , showing them all in a single window , as if they are one huge text . <p> Furthermore , this all-in-one window can be cloned . A click on the window create button ( or a right click on blank space while there is only one window ) creates another view onto the same text , showing the same location , no matter in what file . <p> This allows to look up informations further down or up in the same file , or nearby files , while keeping a view onto the initial text position , e.g. to swiftly continue editing . <p> Take a look at the example snapshot to the right : <p> I started text editing by double clicking on a word in the left window , within a file " sfk.cpp " . I typed " // get the file size " . <p> Now I need to look up a function named " getFileSize " , to read about it 's parameters . <p> therefore I change into the right side window @ @ @ @ @ @ @ @ @ @ <p> I type " getfilesize " , finding the function immediately . <p> now that I see how it is declared , I continue editing in the left side window . <h> Try Depeche View now ! <p> download the free 30 days trial installer , load up to 5000 text files , and experience all professional features like instant text editing , loading of . zip file contents , search auto suggest , clipboard loading , clipboard automation and much more . <p> or download the Freeware edition Depeche View Lite , allowing to view and search up to 100 text files in realtime. 
@@120535970 @9535970/ <p> XMLStarlet is a command line tool with many functions for handling XML files , but the most interesting function discussed here is the reformatting of XML files , making them better " human readable " . <p> today 's software development is unimaginable without XML files . configuration data , request content , documentation - everything is packed into XML today , but often these files are not easy to read and nearly impossible to edit with a normal , straight text editor ( the only way in which I edit xml 's ) , simply because some generator bot did n't really care about the end user , or developer , who has to cope with it . 
@@120535977 @9535977/ <h> Search Words In Text Files Just By Clicking On Them . <p> Depeche View loads all text files from a folder , showing them all in a single window , as if they are one huge text . <p> And whenever you see a word on screen that you would like to search everywhere , you may : <p> Search In Same Window : press the SHIFT key , then left-click on a word ( with the left mouse button ) . The word will be searched instantly across all files , with the results shown in the current window . <p> Search Into A Different Window : press the SHIFT key , then right click on a word , and it will be searched in another window , usually the second window to the right side . <p> Search Into A Window To The Left : if you have two or more windows open , you may also press the SHIFT key , then middle click on a word ( with the middle mouse button ) . This will search the word in a window leftside to @ @ @ @ @ @ @ @ @ @ window sent a search <p> This unique principle of Depeche View allows you to jump between two or three windows on the fly , sending searches here and there wherever you need them . <p> It allows Programmers to analyze and track dependencies in large software projects quickly and easily , by jumping from one point within code to another , by a single mouse click . <p> It allows , for example , to research CSV database exports by clicking into a data value , showing instantly where that value appears elsewhere , much faster than with any spreadsheet software . 
@@120535978 @9535978/ <p> 1 ) on windows , download http : **32;3173;TOOLONG or get it from sourceforge. 2 ) on linux , make sure that internet access is available , then say Ubuntu : wget http : **28;3207;TOOLONG chmod +x sfk Damned Small Linux : wget http : **33;3237;TOOLONG cp sfk-lib5 sfk chmod +x sfk to download and prepare sfk for linux. 3 ) finding out the IP of the vm linux systemin Ubuntu , click at right top onto the network symbol : a popup opens , select therein the 2nd tab . the IP should appear . If the network symbol is not available in your Ubuntu , try applications / system tools / network diagnosis , and search therein for the eth0 interface . in DSL ( Damned Small Linux ) , the IP is usually listed in the upper right corner of the desktop , preceeded by " Host : " . this article assumes that your vmware player running DSL is set to " Bridged " ethernet mode . 4 ) exchanging files between linux and windowsUbuntu : 3.1. run the sfk instant ftp server on @ @ @ @ @ @ @ @ @ @ , to download file foobar.zip from windows , say . /sfk ftp 192.168.80.2 get foobar.zip 3.3. on linux , to send a file , say . /sfk ftp 192.168.80.2 put myfile.zip Damned Small Linux , Knoppix : 4.1. run the sfk instant ftp server on linux side , by . /sfk ftpserv -rw -port=30199 4.2. from windows , use the above ftp get/put commands against the IP adress which DSL told , for example : sfk ftp 192.168.178.23:30199 put myfile.zip 217463 @qwx1077463 
@@120535979 @9535979/ <p> sfk space dirname-helpsfk filesys dirname show disk space and/or file system informations. a folder name can be specified which relates to a specific volume or hard disk . options -bytes all size infos in bytes -tabs pure values , tab separated -binary calculate with binary megabytes of 1048576 bytes each . aliasesdiskspace same as space fsinfo same as filesys freespace tell only free space chaining support can not use chain input data . web LONG ... filesys tell details about the file system of the current directory ( . ) sfk filesys D : tell about the file system used for drive D : sfk space tell total and free MB of the current volume . example outputssfk space . totalmb=307383 freemb=6057 just tells the total and free mb available in the volume of the current dir.sfk fsinfo . filesys= " NTFS " volume= " 15234973 EXTDATA " totalmb=307383 freemb=6057 tells also details of the current filesystem , volume I 'd and label.sfk space -bytes -tab +filter -tabform " $col2 " 6057123840 get only the free space value in bytes. under linux , use -tabform " #col2 " , @ @ @ @ @ @ @ @ @ @ all platforms . 217463 @qwx1077463 
@@120535981 @9535981/ <p> Depeche View loads all text files from a folder , showing them all in a single window , as if they were one large SuperText . <p> And this single window can be duplicated , so typically a Depeche View user has two or three views open side by side , with every view providing access to the same SuperText - a unique high speed , two dimensional access scheme completely different to any other text editor or IDE . <p> This allows , for example , to edit text in one file , and browse over the same , or other , text files in parallel within another view . <p> Look at the snapshot to the right : <p> a file " sfk.cpp " is edited in the left view . <p> the same file is also browsed in the right view . <p> Now Depeche View Pro allows to : <h> Instant Cross Copy Between Views <p> keep the CONTROL key pressed , then RIGHT click into a word within the right view ( using the right mouse button ) . -&gt; the word is @ @ @ @ @ @ @ @ @ @ CONTROL key pressed , then RIGHT click into the first and last line of a text block . -&gt; the whole text block is copied instantly . <p> SHIFT+CONTROL+right click into a text line -&gt; the whole text line is copied instantly . <p> Repeat these actions a hundred times a day , and you will find that it 's a real time saver . <h> Instant Text Move Between Views <p> In the third image to the right , both views are in edit mode . I decide that I want to move the whole function " printFileTimeAndSize " into the right side view . <p> With most other text editors or IDEs , this would require a sequence like : <p> mark text block to the left by SHIFT+cursor keys . <p> CONTROL+X to cut out the block . <p> click into the right window . <p> CONTROL+V to insert from the clipboard . <p> and if I want to continue editing in the left view , it then takes another click into the left view . <p> But with Depeche View Pro , it 's only two @ @ @ @ @ @ @ @ @ @ pressed , mark the whole text block by cursor keys . It is highlighted in yellow . <p> press CONTROL+DELETE. the text block is cut out in the first view , and inserted into the second one . <p> the same text in two views , while editing in the left view . <p> block copy after right click into " int bIsDir " and " return 0 " . <p> before text move , with both views in edit mode . <p> after text move , by a single CONTROL+DELETE . <p> Depeche View Pro comes with even more streamline editing features like Auto Insert and Repeat Edit , saving you from endless CONTROL+C / CONTROL+V sequences required by many other editors . 
@@120535984 @9535984/ <h> instantly run a simple no-installation web server <p> on the command line , to allow easy file transfer between any Windows , Mac OS X , Linux and Raspberry Pi machine , with the free sfk httpserv command . Are you working on a machine without internet access , no shared network folders , unavailable USB ports , missing admin rights , and a thousand other reasons why it seems impossible to transfer a single file ? then try the following on a second machine ( the one from which you want to copy files ) . <p> sfk httpserv -help -port=nport -rw The SFK Instant HTTP Server for easy file transfer . default behaviour : * the CURRENT DIRECTORY is made accessible , without subdirs. * any kind of directory traversal ( .. , / etc. ) is blocked . * just ONE CLIENT ( browser etc. ) can connect at a time . only for trusted environments ! sfk httpserv is intended only for personal file transfer between two machines that the user has control of , within a trusted LAN environment . it should not @ @ @ @ @ @ @ @ @ @ is important then do not use sfk httpserv but a full scale web server like Apache . options -port=n use other port than default , e.g. -port=81. -port2=n alternative port , used if first port fails . use -port2=0 to disable alternative port . -rw allow write access . displays a single file upload form when accessing " / " . -nolist do not provide a content listing , but change any access to " / " into " index.html " . -deep allow reading of files in sub directories. only for use with -nolist , as it does not provide sub directory listings . -raw send no http reply header , just raw content . see alsosfk ftpserv -h the SFK Instant FTP server . sfk wget a web file download command . web LONG ... to copy any file between Windows and Linux machines : If the target machine has ANY connection to a local network : - on the source machine , where you have SFK already , type sfk httpserv -port=9090 within the directory from which you want to transfer files . - then , on @ @ @ @ @ @ @ @ @ @ and to access http : //othermachine:9090/ OR type wget http : **28;3272;TOOLONG If that fails ( no browser , no gui , no wget command ) , check if there exists an " ftp " command on the target machine . If so , try : SFK Instant FTP Server for easy file exchange - on another machine where you have SFK already , type sfk ftpserv - then , on the target machine , type ftp othermachine and if the login succeeds , try dir bin get yourfile - if ftp connections fail to work , check if the " ftp " client on the target accepts the command passive then try to " get " again ( ftp creates a new connection per file download , which is often blocked by firewalls. the passive command changes the way in which those connections are created . ) How to get SFK up and running anywhere : Download the executables for Windows , Linux/lib6 or Linux/lib5 By browser : - LONG ... then click on one of the top links to either download binaries instantly , or look further on @ @ @ @ @ @ @ @ @ @ console , use one of these : Instant binaries : - wget http : **28;3302;TOOLONG ( Linux lib6 ) - wget http : **33;3332;TOOLONG ( Linux lib5 ) Whole distribution package in a . zip ( insert version for nnn ) : - wget http : **35;3367;TOOLONG Make sure your system has the real Info-ZIP unzip command , in version 5.50 or higher ( just type " unzip " to find out ) . If nothing is available , get one of these : - wget LONG ... - wget LONG ... OR Apple Macintosh and 64-bit Linux in general : - there are no binary distributions so far , but you may compile the source code easily , even if you 're no software developer . first , type " g++ " to find out if a compiler exists on your system . if so , download the source code , contained in the sfknnn.zip , from LONG ... then extract that by " unzip sfknnn.zip " , and take a look into do-compile-unix.bat or type : Mac compile : g++ -DMACOSX sfk.cpp patch.cpp inst.cpp -o sfk Linux 64-bit @ @ @ @ @ @ @ @ @ @ prepare the SFK binary under Linux : - after download , you have to type chmod +x sfk-linux.exe to enable execution ( the ' x ' flag ) of sfk . Then simply type . /sfk-linux.exe to get it running ( the " . / " is often needed as the PATH may not contain the current directory " . " ) . Where to place the SFK executable : Recommendation for Windows : - create a directory structure c : appbin then rename sfknnn.exe to sfk.exe , and copy that to c : appbin . If you use the " sfk alias " command later , the created alias batch files will also be placed into " c : appbin " . - extend the Windows Shell Path set PATH=%PATH% ; c : appbin - make sure your Windows Shell supports command autocompletion and Copy/Paste of text ( the QuickEdit and Insert setting ) , otherwise it is very hard to use ! read more by typing sfk help shell - further tools can be installed parallel to " bin " into c : app This way you avoid @ @ @ @ @ @ @ @ @ @ C : Program Files " . Recommendation for Linux : - type " cd " then " pwd " to find out what your account 's home directory is. - within your home directory ( e.g. /home/users/youruserid/ ) create a directory " tools " mkdir tools then rename sfk-linux.exe to sfk , and copy that into the tools dir. - extend the PATH like export PATH=$PATH : **28;3434;TOOLONG - then you should be able to run sfk by typing " sfk " . By default , there are no colors , as it is not possible to autodetect the background color under Linux . If you like colorful output , type " sfk help color " and read on how to set the " SFKCOLORS " variable ( read it careful ! if you set a wrong " def : " value , you may end up with white text on white background ) 217463 @qwx1077463 
@@120535985 @9535985/ <h> How to search all text files of a directory quickly for words . <p> How to find words and phrases instantly just by typing them , or by clicking on them , with a Freeware tool for Windows and Linux/Mac . <p> After download , run the tool by double click , then click on Open and select a directory from which you want to load all text files . All ASCII text files from that folder will be loaded , like all . txt , . ini , . html , readme or source code files . search as you type To search the word " hello " , just type " hello " . You will be shown a result list of all lines containing that word , no matter in what file . This is called a Filtered View : the overall text is filtered for the given search term . Click into any of the result lines to jump to that text location . The Filtered View will be replaced by the actual text , without the need to move your eyes away from @ @ @ @ @ @ @ @ @ @ anytime , click the Filter Button , i.e. the striped square button at the left top , or press F4 , or press CONTROL+A ( like All Results ) . If only one text line contains the searched word , the tool jumps to that text location directly , without showing a Filtered View . disabling automatic filtered views If you do n't want to display a result list whenever typing a word , you may click with the RIGHT mouse button on the Filter Button . This selects First Result Mode : on every search , Depeche View jumps to the first result location , instead of showing the Filtered View . stepping through search results To go to the next search result , you may - press F3. - OR : press CONTROL+Cursor Down . To go to the previous search result , you may - press SHIFT+F3 , or CONTROL+F3. - OR : press CONTROL+Cursor Up . editing the find mask After typing " hello " , the find mask looks like find : &gt;hello&lt; with the edit cursor standing on " &lt; " . You can @ @ @ @ @ @ @ @ @ @ the find mask . - HOME/END to jump to the start or end of it . - BACKSPACE to delete a single char. - INSERT or SHIFT+BACKSPACE to delete the whole find mask . Note : if you press INSERT , then type nothing , dview will jump to the beginning of all loaded text files . clearing the find mask by INSERT key To repeat , the INSERT key behaves completely DIFFERENT then in any other application : you do not " mark then overwrite " to enter a new search phrase , but simply press INSERT once , then type your word . Consequently , there is no character overwrite mode ; typed characters are always inserted . If you have problems learning into this concept , you may also use the classic find dialog , by pressing CONTROL+F . However , working without this dialog is faster . find mask auto reset on inactivity If your text analysis process looks like : type a word read text for a moment press INSERT to clear the find mask type another word read text for a moment press INSERT @ @ @ @ @ @ @ @ @ @ for a moment ... then you can often save another key press this way : Click on the reset button to toggle find mask auto reset . For example , if you select 3 seconds , the find mask will be grayed out after 3 seconds of inactivity ( no further chars typed into the find mask ) . If the mask is gray , typing another char will clear it automatically . This way you can type another word instantly , without pressing INSERT first . But what if the mask is grayed out , and you want to reuse your search term ? then press any of these keys : - cursor left/right/home/end - enter - backspace and the find mask will be unlocked , allowing further edits . Find mask auto reset can also be toggled by the PAUSE key , and it can be set active from startup by a config file entry like " autoresetfind 3000 " , specifying milliseconds. 
@@120535987 @9535987/ <p> sfk lf-to-crlf options dir . ext1 . ext2 -to outmask convert just-lf ( unix ) text format to cr+lf ( dos/windows ) . if only a single filename , or list of filenames , is given then these are converted immediately . if a directory parameter is given then the command runs in simulation mode , requiring option -yes to convert . options -forceend if a file is changed and rewritten then also add a line ending at the last line even if there was none in the input file . -writeall rewrite all files no matter if changed aliasessfk addcr same as sfk lf-to-crlf see alsosfk remcr convert crlf to just lf sfk listle list line end infos for files web LONG ... addcr src . cpp . hpp add crlf on all . cpp and . hpp files within src. sfk select -dir doc -file . txt +addcr -to tmp$file add crlf on all . txt files within doc , saving to tmp. 217463 @qwx1077463 
@@120535988 @9535988/ <h> A High Speed Search Tool And EditorFor Java Source Code Files <p> It loads all source files from a folder , showing them all in a single window , as if they were one large SuperSourceCode . <p> Words are searched as you type , without the need to fill in any dialogues . Furthermore , words can be searched by simply clicking on them . <p> Searches can be done in the current window , or - by a single right mouse click - in another window in parallel . <p> This radical and simple usage concept allows high speed search and analysis within thousands of Java source code files , tracking dependencies faster than with any Integrated Development Environment . <p> Look at the example screenshots to the right : <p> I want to get an overview over a Java database project , so I load all from folder workhsqldb . <p> Typing void main I get all program entry points , listed across a thousand files in 0.2 seconds ( * ) ( on a 2.13 GHz i3 notebook ) . The screenshot shows a @ @ @ @ @ @ @ @ @ @ <p> WebServer.java draws my attention . How is this web server implemented ? One right click later , there is a second window showing that text location . <p> and so I start surfing the code . What 's the method canonicalOrAbsolutePath doing ? I switch to horizontal tiling by a single F2 key press , and right click on that word . <p> Instantly I see where canonicalOrAbsolutePath is implemented , and where it is called . ( Using AutoFilter mode to list result lines only , activated by a right click on the button . ) <p> And so I may continue with further right clicks , ping-pong tracking dependies across the source . <p> And whenever an important place in the code is found , a double click ( or optionally single click ) enters editing mode , allowing to change the source code at that place immeditately . <p> Depeche View Pro comes with built-in syntax highlighting for Java source code . The highlighting can be adapted or extended through a configuration file with straightforward syntax . See an example here . <h> Try Depeche View @ @ @ @ @ @ @ @ @ @ , load up to 5000 text files , and experience all professional features like instant text editing , loading of . zip file contents , search auto suggest , clipboard loading , clipboard automation and much more . <p> or download the Freeware edition Depeche View Lite , allowing to view and search up to 100 text files in realtime. 
@@120535990 @9535990/ <p> sfk list ... +fview -noshl-nocol " - ... " Show SFK command text output interactively in Depeche View , a high speed text browser and filter tool for Windows which also runs on Linux/Mac if WINE is installed . The tool allows browsing of text with soft scrolling and instant search as you type or click on words . Type sfk getdv to download Depeche View Lite now , or visit www.depecheview.com for manual download . The tool is fully portable and needs no installation . Many SFK commands allow to add +view to have their output shown instantly in DView . This requires dview , dview.exe or dview.bat being located in the PATH . If you have downloaded an executable like dview155.exe , rename it before use . DView can be run under Linux and Mac , but this is experimental and unsupported . The latest WINE version must be installed . Google for " linux wine " , or search it in your package manager . use as a chain command , or to display stdin : +fview can be used only after another command producing @ @ @ @ @ @ @ @ @ @ expects text as input . +fview expects a list of filenames or HTTP URLs. or use " sfk view -i " to display text from stdin. options -nocolor disable colored output and display . set this if you 're using dview &lt; 1.1.4 or any other viewer . -wrap=n wrap lines at column n. currently , this feature disables colors ( implies -nocol ) , but depending on the content processed , dview may still show colors based on syntax highlighting . -noshl disable syntax highlighting at dview. " -x1 -x2 " all other options are passed through unchanged to the viewer application . if multiple parameters have to be passed , surround them by double quotes . -verbose tell verbosely which target binary is invoked . -noback by default , dview is run as a background process , by prefixing the overall command with " start " . say -noback to let sfk wait until dview is stopped . dview options and parameters all non sfk options and parameters are passed through , like : -tab n set tab size n ( dview 1.6.3 or higher ) -area 20:20:600:400 @ @ @ @ @ @ @ @ @ @ text " search a text instantly -sfind " a qtextq " search text given with slash patterns for all dview options try : dview -help -find " all*options " temporary files this command creates a temporary file which is currently not deleted . type " sfk help options " for options on that . using a different viewer when viewing a list of files , this command runs " dview -flist tmpfilename " with tmpfilename containing a list of filenames. when viewing text line output , this command runs " dview tmpfilename " with tmpfilename containing ascii text data . specify -verbose to see what is invoked in detail . examplessfk list docs . txt +fview view content of all . txt files in directory docs . sfk echo x +view -verbose tell verbosely which dview ( .exe ? ) executable is actually used . sfk list docs . txt +ffilter -+foo -hitfiles +fview " -max -over " view all . txt files from docs containing " foo " , pass options -max -over to the viewer , showing a maximized window in overscan mode ( without any title bar @ @ @ @ @ @ @ @ @ @ " -space 0:0:40 " view only text lines from docs containing " foo " , in a window covering the whole desktop , except for 40 pixels at the bottom . sfk fromclip +view display current clipboard content ( plain text only ) . tar tvf foo.tar sfk view -i display a tar file 's content listing . sfk larc -size -time -withdirs foo.tar +view the same , with sfk reading the . tar directly . sfk filter urls.txt +fview if urls.txt contains HTTP URLs like LONG ... then dview 1.7.1 or higher will load them , allowing interactive search and filtering . sfk filt calls.txt -form " http : //.100$col1 " +fview if calls.txt contains paths like **44;3464;TOOLONG expand them like http : **30;3510;TOOLONG and load these into dview for interactive filtering . 217463 @qwx1077463 
@@120535992 @9535992/ <h> get text from the windows clipboard , or put text into clipboard <p> sfk toclip copy stdin to clipboard as plain text . type test.txt sfk toclip copies the content of ASCII file test.txt into clipboard. sfk list sfk toclip copies a file listing of the current dir into clipboard. sfk fromclip -wait -clear dump plain text content from clipboard to terminal . -wait : block until plain text is available . -clear : empty the clipboard after reading it . Example : turn backslashes into forward slashes . Imagine you have the following text open within notepad : **26;3542;TOOLONG **26;3570;TOOLONG **25;3598;TOOLONG and for some reason you need the first line in a format like this : foobarsystemsalpha1.cpp then you may do it this way : 1 . mark the first line using SHIFT + CURSOR keys . 2. press CTRL+C or CTRL+INSERT to copy it into clipboard 3. on the windows command line , run this command ( e.g. from a batch ) : sfk fromclip +filter -rep x/xx +toclip 4. back in the editor , press CTRL+V or SHIFT+INSERT , pasting the result from the clipboard @ @ @ @ @ @ @ @ @ @ foobarsystemsalpha1.cpp " . Example : reformat a spreadsheet line for further processing . Imagine you have the following Excel file open : and you need the data from line 3 as comma separated values . Now , if you click left into line 3 : and press CTRL+C , the line is copied into clipboard , however as TAB- separated data . ( at least that 's the behaviour seen with Excel . Other packages like OpenOffice may behave different . ) So if you say on the command line : sfk fromclip what you get is Foo Finance 4498542 1999 950 Dino how do you turn this into comma-separated values ? we have 5 columns , therefore extend the above command like this type the following all in ONE line : sfk fromclip +filter -spat -sep " t " -form " $col1 ; $col2 ; $col3 ; $col4 ; $col5 " which will result in this output : Foo Finance ; 4498542 ; 1999 ; 950 ; Dino to make the data even safer for post-processing , we may surround every value by quotes this way type the following @ @ @ @ @ @ @ @ @ @ " t " -form LONG ... this is hard to type , of course , but if you place it into a . bat file , you only have to type it once . this results in : " Foo Finance " ; " 4498542 " ; " 1999 " ; " 950 " ; " Dino " As ever , the same result may be achieved in may ways . For example , you may also save the whole spreadsheet data as a comma-separated file , and then filter it by sfk filter export.csv " -+Foo Finance " which should produce the same line . 217463 @qwx1077463 
@@120535994 @9535994/ <p> sfk fscript opts file -from=label parm1 parm2 ... execute sfk command(s) from a script file , which can be - an absolute filename , e.g. C : scriptsthescript.txt - a relative filename . in this case , the file is searched in the current dir " . " first , and then in the PATH . parameters : - if " -from=label " is given , the script file is searched for a statement " label mylabel " , and script execution runs from this point until +end is reached . - all other words after -from , or instead of from , are passed as parameters to the script , with one exception : a word starting with a " + " continues the sfk command chain . if you need to pass words starting with " + " to the script , set option -literal ( disallowing further chain commands ) . command chaining : with ... +script name , text data is passed to the script . with ... +fscript name , filenames are passed to the script . script file syntax : - lines @ @ @ @ @ @ @ @ @ @ line parameters 1 to 9 can be addressed both by expressions %1 to %9 , or $1 to $9. - character # at column 1 of any line is skipped , which allows bash-embedded scripts to have sfk statements outcommented if necessary . - escaped quotes " are changed into normal quotes " - line ends are ignored . in general , lines are combined into one large command chain , just like typing them all into one line of unlimited length . - any whitespace is skipped unless surrounded by quotes " however this may or may not apply with the following : about quoted multi line parameters : a command in a script like +echo " Help chapter 01---------------The quick brown fox " gets one large parameter spread across multiple lines , called a quoted multi line parameter . this contains many whitespaces at line starts , and invisible end of line characters at line ends , which often cause commands like echo , run or ( x ) replace not to work as expected . - add option -qtrim after " sfk label labelnam " to have @ @ @ @ @ @ @ @ @ @ since SFK 1.8.0. sfk will auto apply one of these trimming modes : full trim : all whitespace and eol are dropped . -&gt; used with most commands parm trim : single blank is left between words . -&gt; used with run auto indent : some blanks and eol are kept to keep an indentation relative to 1st line . -&gt; used with echo - add option -qraw after " sfk label labelnam " to keep all whitespace as it is. this is no longer defaultsince SFK 1.8.0 , and may be required with old scripts. you may also set SFKCONFIG=qraw also type " sfk label " for infos. parameter name collisions : if your script contains commands like +filter -form " $10.10col1 ... " then " $1 " will be misinterpreted as an input parameter into the script . to avoid this use one of +filter -form " $ ( 10.10col1 ) ... " or +filter -form " $$10.10col1 ... " or disable $ as a parameter name prefix by option -prefix. see " sfk label " for more on that . options -verbose tell in detail which words @ @ @ @ @ @ @ @ @ @ the script that start with " + " . see alsosfk help chain command chaining overview sfk help var about script parameters and variables sfk label further options given after label sfk load load text or data for chaining setting global options for all commands within a script : supply them directly after " sfk " of the calling command : sfk -var script myscript.txt -from=mylabel runs myscript.txt with sfk variable support active in every command . some options like -var can also be given after sfk label . see " sfk label " for more . for script examples , type : sfk samp sfk - create sfk sample script sfk samp sfkbat - sample script embedded in windows batch sfk samp sfkbash - sample script embedded in bash script sfk samp - more about the sfk sample syntax more in the SFK Book the SFK Book contains a 60 page tutorial , including long script examples with input , output and explanations . type " sfk book " for details . web LONG ... use : if you want to create an easy-to-use script on the fly , @ @ @ @ @ @ @ @ @ @ : sfk batch myscript.bat 2. edit myscript.bat with any text editor . 3. run the script by typing " myscript.bat " . 217463 @qwx1077463 
@@120535996 @9535996/ <p> gls stands for " grep the lslr index " . ( sfk will create a small batch file from the above , adding things like %1 %2 %3 automatically. ) now , the first time you enter a new package 's main directory , type for example <p> gls ! barbox util <p> which will <p> create the very detailed index file " lslr " <p> search instantly for the words " barbox " AND " util " accross this index <p> all in one step . But the next time you search further classes , you do n't have to recreate the lslr index file , so create another alias : <p> then , if LONG ... is listed in the command shell , double-click on it ( provided that QuickEdit and Insert is configured ON with your shell ) , press right button to copy to clipboard. type <p> javap ! <p> and press right mouse button again to paste the copied text : <p> javap ! LONG ... <p> press ENTER , and the class interface should be listed . <p> further reading : <p> @ @ @ @ @ @ @ @ @ @ everywhere in a directory tree . SFK is a free open source command line tool that runs instantly without installation . Get sfk.exe from the zip package and use it ( binaries for Windows , Linux and Mac OS/X are included ) . <p> Read about all SFK functions , including a 60 page tutorial with detailed example scripts , in the 5 Dollar Mobile PDF optimized for your Smartphone ! 
@@120535997 @9535997/ <p> this example lists output created by an external command " diff " , which is usually available on linux or if you download the free cygwin environment for windows . you may also use the free GUI tool WinMerge instead . <p> then the result of the whole command sequence is shown instantly within depeche view , allowing you interactive realtime searches : <p> to make the +view command work , you have to download dview.exe first , and place it in your PATH . the parameter " -noshl " for " no syntax highlighting " is needed as the colors from syntax highlighting would mess up with the red and green that we use to highlight file differences . 217463 @qwx1077463 
@@120535998 @9535998/ <h> Find files by parts of their filename quickly by typing a very short command in the Windows , Mac OS X , Linux command line . <p> sfk filefind or ff pattern pattern2 ! pattern3 ... opts easy file name finder for the current directory tree . if you remember any words of a filename , or its path , type " sfk ff " and the words to find matching filenames. to type even less , try " sfk : " followed by the first word , without blank : " sfk : word1 word2 ... " note : - searches the current directory " . " and all subdirectories. - the full filename paths , including relative filenames , are compared ( not just the relative filenames ) . - the patterns are AND combined ( not OR as with list ) , meaning that ALL given patterns must appear in a path to have it listed . the pattern sequence is ignored . - options may appear anywhere . - exclude patterns starting with ! are also supported . options -time list also file times @ @ @ @ @ @ @ @ @ @ or -kb lists sizes in kbytes instead of bytes -mbytes or -gbytes lists sizes in mbytes or gbytes -kbpure list without " kb " postfix -arc include . zip . jar . tar etc. archive contents . chaining support output chaining is supported . web LONG ... filefind foo bar ! save lists all files in the current directory tree having both foo and bar in their path+filename , regardless of sequence . files having " save " in their path ( or name ) are excluded . sfk ff foo*bar thing +fview similar to the above , lists all files having bar AFTER foo in their path+filename. thing must also be present . resulting files are loaded and shown in Depeche View . sfk : . pdf list all . pdf files down somewhere in the directory tree . sfk : debug*.o +del delete all debug executables in the current directory tree . see also : sfk list dirname filenamepattern ... sfk list dirname +filter -+pattern1 -+pattern2 ... <p> SFK is a free open source command line tool that runs instantly without installation . Get sfk.exe from the zip @ @ @ @ @ @ @ @ @ @ and Mac OS/X are included ) . <p> Read about all SFK functions , including a 60 page tutorial with detailed example scripts , in the 5 Dollar Mobile PDF optimized for your Smartphone ! 
@@120535999 @9535999/ <p> sfk ... +perline " command #text " for every chain text line run sfk commands(s) like a sub function , passing the text as parameters . options -yes really execute . default is just to simulate what would be done . -nohead does not display the simulating : info text . -stoprc=n stop on return code &gt;= n instead of default 9. -nostop do not stop on errors regardless of rc. command string format each word , separated by whitespace , is a parameter . to fill in the current chain text line use $text or #text. perline uses a strict command format by default . to insert characters $ or # as is type $$ or ## with option -spat , slashpatterns like t q xnn are supported . to use multiple words as one parameter use -spat and q ... qquoted multi line parameters are supported in scripts using parm trim . type " sfk script " for details . recursion limit if the called function calls another function by call or perline this should not be nested too often , otherwise sfk may crash . @ @ @ @ @ @ @ @ @ @ stacksize test available stack size web LONG ... echo -lines 100 101 102+perline -spat " web -nodump q. $text/xml/restart.xmlq " on local ip 's .100 .101 and .102 call a web command /xml/restart.xml. 17 sfk sel mydir . jpg +perline -spat " echo &lt;img src=q#ufileq width=q400q&gt; +tofile -append print.html " create a file print.html containing all . jpg files of folder mydir , shown with 400 pixels width . 28 217463 @qwx1077463 
@@120536000 @9536000/ <h> HTML and JavaScript Editor with Fast File Search <p> It loads all source files from a folder , showing them all in a single window , as if they were one large SuperText . <p> Words are searched as you type , without the need to fill in any dialogues . Furthermore , words can be searched by simply clicking on them . <p> Searches can be done in the current window , or - by a single right mouse click - in another window in parallel . <p> This radical and simple usage concept allows high speed search and analysis within thousands of HTML , JavaScript and CSS source code files , tracking dependencies faster than with any other editor . <p> Depeche View Pro comes with built-in syntax highlighting for HTML , JavaScript and CSS code . The highlighting can be adapted or extended through a configuration file with straightforward syntax . See an example here . <p> Browsing a mixture of HTML and PHP files in two windows . <p> A single right click on " getMsg " searched the word instantly in the right window , across all files . 
@@120536001 @9536001/ <h> A High Speed Search Tool And EditorFor Java Source Code Files <p> It loads all source files from a folder , showing them all in a single window , as if they were one large SuperSourceCode . <p> Words are searched as you type , without the need to fill in any dialogues . Furthermore , words can be searched by simply clicking on them . <p> Searches can be done in the current window , or - by a single right mouse click - in another window in parallel . <p> This radical and simple usage concept allows high speed search and analysis within thousands of Java source code files , tracking dependencies faster than with any Integrated Development Environment . <p> Look at the example screenshots to the right : <p> I want to get an overview over a Java database project , so I load all from folder workhsqldb . <p> Typing void main I get all program entry points , listed across a thousand files in 0.2 seconds ( * ) ( on a 2.13 GHz i3 notebook ) . The screenshot shows a @ @ @ @ @ @ @ @ @ @ <p> WebServer.java draws my attention . How is this web server implemented ? One right click later , there is a second window showing that text location . <p> and so I start surfing the code . What 's the method canonicalOrAbsolutePath doing ? I switch to horizontal tiling by a single F2 key press , and right click on that word . <p> Instantly I see where canonicalOrAbsolutePath is implemented , and where it is called . ( Using AutoFilter mode to list result lines only , activated by a right click on the button . ) <p> And so I may continue with further right clicks , ping-pong tracking dependies across the source . <p> And whenever an important place in the code is found , a double click ( or optionally single click ) enters editing mode , allowing to change the source code at that place immeditately . <p> Depeche View Pro comes with built-in syntax highlighting for Java source code . The highlighting can be adapted or extended through a configuration file with straightforward syntax . See an example here . <h> Try Depeche View @ @ @ @ @ @ @ @ @ @ , load up to 5000 text files , and experience all professional features like instant text editing , loading of . zip file contents , search auto suggest , clipboard loading , clipboard automation and much more . <p> or download the Freeware edition Depeche View Lite , allowing to view and search up to 100 text files in realtime. 
@@120536002 @9536002/ <h> get text from the windows clipboard , or put text into clipboard <p> sfk toclip copy stdin to clipboard as plain text . type test.txt sfk toclip copies the content of ASCII file test.txt into clipboard. sfk list sfk toclip copies a file listing of the current dir into clipboard. sfk fromclip -wait -clear dump plain text content from clipboard to terminal . -wait : block until plain text is available . -clear : empty the clipboard after reading it . Example : turn backslashes into forward slashes . Imagine you have the following text open within notepad : **26;3625;TOOLONG **26;3653;TOOLONG **25;3681;TOOLONG and for some reason you need the first line in a format like this : foobarsystemsalpha1.cpp then you may do it this way : 1 . mark the first line using SHIFT + CURSOR keys . 2. press CTRL+C or CTRL+INSERT to copy it into clipboard 3. on the windows command line , run this command ( e.g. from a batch ) : sfk fromclip +filter -rep x/xx +toclip 4. back in the editor , press CTRL+V or SHIFT+INSERT , pasting the result from the clipboard @ @ @ @ @ @ @ @ @ @ foobarsystemsalpha1.cpp " . Example : reformat a spreadsheet line for further processing . Imagine you have the following Excel file open : and you need the data from line 3 as comma separated values . Now , if you click left into line 3 : and press CTRL+C , the line is copied into clipboard , however as TAB- separated data . ( at least that 's the behaviour seen with Excel . Other packages like OpenOffice may behave different . ) So if you say on the command line : sfk fromclip what you get is Foo Finance 4498542 1999 950 Dino how do you turn this into comma-separated values ? we have 5 columns , therefore extend the above command like this type the following all in ONE line : sfk fromclip +filter -spat -sep " t " -form " $col1 ; $col2 ; $col3 ; $col4 ; $col5 " which will result in this output : Foo Finance ; 4498542 ; 1999 ; 950 ; Dino to make the data even safer for post-processing , we may surround every value by quotes this way type the following @ @ @ @ @ @ @ @ @ @ " t " -form LONG ... this is hard to type , of course , but if you place it into a . bat file , you only have to type it once . this results in : " Foo Finance " ; " 4498542 " ; " 1999 " ; " 950 " ; " Dino " As ever , the same result may be achieved in may ways . For example , you may also save the whole spreadsheet data as a comma-separated file , and then filter it by sfk filter export.csv " -+Foo Finance " which should produce the same line . 217463 @qwx1077463 
@@120536006 @9536006/ <p> sfk ... +perline " command #text " for every chain text line run sfk commands(s) like a sub function , passing the text as parameters . options -yes really execute . default is just to simulate what would be done . -nohead does not display the simulating : info text . -stoprc=n stop on return code &gt;= n instead of default 9. -nostop do not stop on errors regardless of rc. command string format each word , separated by whitespace , is a parameter . to fill in the current chain text line use $text or #text. perline uses a strict command format by default . to insert characters $ or # as is type $$ or ## with option -spat , slashpatterns like t q xnn are supported . to use multiple words as one parameter use -spat and q ... qquoted multi line parameters are supported in scripts using parm trim . type " sfk script " for details . recursion limit if the called function calls another function by call or perline this should not be nested too often , otherwise sfk may crash . @ @ @ @ @ @ @ @ @ @ stacksize test available stack size web LONG ... echo -lines 100 101 102+perline -spat " web -nodump q. $text/xml/restart.xmlq " on local ip 's .100 .101 and .102 call a web command /xml/restart.xml. 17 sfk sel mydir . jpg +perline -spat " echo &lt;img src=q#ufileq width=q400q&gt; +tofile -append print.html " create a file print.html containing all . jpg files of folder mydir , shown with 400 pixels width . 28 217463 @qwx1077463 
@@120536007 @9536007/ <h> Find files by parts of their filename quickly by typing a very short command in the Windows , Mac OS X , Linux command line . <p> sfk filefind or ff pattern pattern2 ! pattern3 ... opts easy file name finder for the current directory tree . if you remember any words of a filename , or its path , type " sfk ff " and the words to find matching filenames. to type even less , try " sfk : " followed by the first word , without blank : " sfk : word1 word2 ... " note : - searches the current directory " . " and all subdirectories. - the full filename paths , including relative filenames , are compared ( not just the relative filenames ) . - the patterns are AND combined ( not OR as with list ) , meaning that ALL given patterns must appear in a path to have it listed . the pattern sequence is ignored . - options may appear anywhere . - exclude patterns starting with ! are also supported . options -time list also file times @ @ @ @ @ @ @ @ @ @ or -kb lists sizes in kbytes instead of bytes -mbytes or -gbytes lists sizes in mbytes or gbytes -kbpure list without " kb " postfix -arc include . zip . jar . tar etc. archive contents . chaining support output chaining is supported . web LONG ... filefind foo bar ! save lists all files in the current directory tree having both foo and bar in their path+filename , regardless of sequence . files having " save " in their path ( or name ) are excluded . sfk ff foo*bar thing +fview similar to the above , lists all files having bar AFTER foo in their path+filename. thing must also be present . resulting files are loaded and shown in Depeche View . sfk : . pdf list all . pdf files down somewhere in the directory tree . sfk : debug*.o +del delete all debug executables in the current directory tree . see also : sfk list dirname filenamepattern ... sfk list dirname +filter -+pattern1 -+pattern2 ... <p> SFK is a free open source command line tool that runs instantly without installation . Get sfk.exe from the zip @ @ @ @ @ @ @ @ @ @ and Mac OS/X are included ) . <p> Read about all SFK functions , including a 60 page tutorial with detailed example scripts , in the 5 Dollar Mobile PDF optimized for your Smartphone ! 
@@120536008 @9536008/ <p> sfk lf-to-crlf options dir . ext1 . ext2 -to outmask convert just-lf ( unix ) text format to cr+lf ( dos/windows ) . if only a single filename , or list of filenames , is given then these are converted immediately . if a directory parameter is given then the command runs in simulation mode , requiring option -yes to convert . options -forceend if a file is changed and rewritten then also add a line ending at the last line even if there was none in the input file . -writeall rewrite all files no matter if changed aliasessfk addcr same as sfk lf-to-crlf see alsosfk remcr convert crlf to just lf sfk listle list line end infos for files web LONG ... addcr src . cpp . hpp add crlf on all . cpp and . hpp files within src. sfk select -dir doc -file . txt +addcr -to tmp$file add crlf on all . txt files within doc , saving to tmp. 217463 @qwx1077463 
@@120536009 @9536009/ <p> sfk fscript opts file -from=label parm1 parm2 ... execute sfk command(s) from a script file , which can be - an absolute filename , e.g. C : scriptsthescript.txt - a relative filename . in this case , the file is searched in the current dir " . " first , and then in the PATH . parameters : - if " -from=label " is given , the script file is searched for a statement " label mylabel " , and script execution runs from this point until +end is reached . - all other words after -from , or instead of from , are passed as parameters to the script , with one exception : a word starting with a " + " continues the sfk command chain . if you need to pass words starting with " + " to the script , set option -literal ( disallowing further chain commands ) . command chaining : with ... +script name , text data is passed to the script . with ... +fscript name , filenames are passed to the script . script file syntax : - lines @ @ @ @ @ @ @ @ @ @ line parameters 1 to 9 can be addressed both by expressions %1 to %9 , or $1 to $9. - character # at column 1 of any line is skipped , which allows bash-embedded scripts to have sfk statements outcommented if necessary . - escaped quotes " are changed into normal quotes " - line ends are ignored . in general , lines are combined into one large command chain , just like typing them all into one line of unlimited length . - any whitespace is skipped unless surrounded by quotes " however this may or may not apply with the following : about quoted multi line parameters : a command in a script like +echo " Help chapter 01---------------The quick brown fox " gets one large parameter spread across multiple lines , called a quoted multi line parameter . this contains many whitespaces at line starts , and invisible end of line characters at line ends , which often cause commands like echo , run or ( x ) replace not to work as expected . - add option -qtrim after " sfk label labelnam " to have @ @ @ @ @ @ @ @ @ @ since SFK 1.8.0. sfk will auto apply one of these trimming modes : full trim : all whitespace and eol are dropped . -&gt; used with most commands parm trim : single blank is left between words . -&gt; used with run auto indent : some blanks and eol are kept to keep an indentation relative to 1st line . -&gt; used with echo - add option -qraw after " sfk label labelnam " to keep all whitespace as it is. this is no longer defaultsince SFK 1.8.0 , and may be required with old scripts. you may also set SFKCONFIG=qraw also type " sfk label " for infos. parameter name collisions : if your script contains commands like +filter -form " $10.10col1 ... " then " $1 " will be misinterpreted as an input parameter into the script . to avoid this use one of +filter -form " $ ( 10.10col1 ) ... " or +filter -form " $$10.10col1 ... " or disable $ as a parameter name prefix by option -prefix. see " sfk label " for more on that . options -verbose tell in detail which words @ @ @ @ @ @ @ @ @ @ the script that start with " + " . see alsosfk help chain command chaining overview sfk help var about script parameters and variables sfk label further options given after label sfk load load text or data for chaining setting global options for all commands within a script : supply them directly after " sfk " of the calling command : sfk -var script myscript.txt -from=mylabel runs myscript.txt with sfk variable support active in every command . some options like -var can also be given after sfk label . see " sfk label " for more . for script examples , type : sfk samp sfk - create sfk sample script sfk samp sfkbat - sample script embedded in windows batch sfk samp sfkbash - sample script embedded in bash script sfk samp - more about the sfk sample syntax more in the SFK Book the SFK Book contains a 60 page tutorial , including long script examples with input , output and explanations . type " sfk book " for details . web LONG ... use : if you want to create an easy-to-use script on the fly , @ @ @ @ @ @ @ @ @ @ : sfk batch myscript.bat 2. edit myscript.bat with any text editor . 3. run the script by typing " myscript.bat " . 217463 @qwx1077463 
@@120536010 @9536010/ <p> this example lists output created by an external command " diff " , which is usually available on linux or if you download the free cygwin environment for windows . you may also use the free GUI tool WinMerge instead . <p> then the result of the whole command sequence is shown instantly within depeche view , allowing you interactive realtime searches : <p> to make the +view command work , you have to download dview.exe first , and place it in your PATH . the parameter " -noshl " for " no syntax highlighting " is needed as the colors from syntax highlighting would mess up with the red and green that we use to highlight file differences . 217463 @qwx1077463 
@@120536011 @9536011/ <p> gls stands for " grep the lslr index " . ( sfk will create a small batch file from the above , adding things like %1 %2 %3 automatically. ) now , the first time you enter a new package 's main directory , type for example <p> gls ! barbox util <p> which will <p> create the very detailed index file " lslr " <p> search instantly for the words " barbox " AND " util " accross this index <p> all in one step . But the next time you search further classes , you do n't have to recreate the lslr index file , so create another alias : <p> then , if LONG ... is listed in the command shell , double-click on it ( provided that QuickEdit and Insert is configured ON with your shell ) , press right button to copy to clipboard. type <p> javap ! <p> and press right mouse button again to paste the copied text : <p> javap ! LONG ... <p> press ENTER , and the class interface should be listed . <p> further reading : <p> @ @ @ @ @ @ @ @ @ @ everywhere in a directory tree . SFK is a free open source command line tool that runs instantly without installation . Get sfk.exe from the zip package and use it ( binaries for Windows , Linux and Mac OS/X are included ) . <p> Read about all SFK functions , including a 60 page tutorial with detailed example scripts , in the 5 Dollar Mobile PDF optimized for your Smartphone ! 
@@120536013 @9536013/ <h> HTML and JavaScript Editor with Fast File Search <p> It loads all source files from a folder , showing them all in a single window , as if they were one large SuperText . <p> Words are searched as you type , without the need to fill in any dialogues . Furthermore , words can be searched by simply clicking on them . <p> Searches can be done in the current window , or - by a single right mouse click - in another window in parallel . <p> This radical and simple usage concept allows high speed search and analysis within thousands of HTML , JavaScript and CSS source code files , tracking dependencies faster than with any other editor . <p> Depeche View Pro comes with built-in syntax highlighting for HTML , JavaScript and CSS code . The highlighting can be adapted or extended through a configuration file with straightforward syntax . See an example here . <p> Browsing a mixture of HTML and PHP files in two windows . <p> A single right click on " getMsg " searched the word instantly in the right window , across all files . 
@@120536014 @9536014/ <p> sfk deplist -flat -dir srcdir -file ... -dir targdir -file ... sfk deplist -flat singleSourceFile -dir targdir tdir2 tdir3 -file ... list possible dependencies between files through ( fuzzy ) string analysis . find out on which target files the specified source files depend . a list of target files is created from directory targdir. then all source files are loaded from srcdir , and scanned if the names of the targets appear within their content . if so , the sources are listed with their dependencies. by default , deplist also checks which targdir files depend on other targdir files ( recursive dependencies ) , resulting in more complete listings . specify -flat to disable recursive checks . if you specify just a singleSourceFile name , the source name is NOT included in the output ( unless -incsrc specified ) , and the filename list can be used by subsequent ( chained ) commands . NOTE : you may specify any number of target directories. if your list of target directories is incomplete , files from there will NOT be found . by default , only relative @ @ @ @ @ @ @ @ @ @ the file name extension . e.g. the target file : the/path/foosys.dll runs a search for : foosys.dll in the source files . options -path search target filenames including path information . e.g. the target file : the/path/foosys.dll runs a search for : the/path/foosys.dll -noext strip . extensions from filenames , compare only basename. e.g. the target file : the/path/foosys.dll runs a search for : foosys which may lead to ambiguities , listing too many hits . -noext can also be combined with -path. -case force case sensitive string comparison ( not default ) . -quiet do not print the number of source and target files . -relnames if using -path , strip targdir name from target paths for comparison . -flat do not check if target files depend on other target files . set this to improve speed , if you know that such dependencies can not exist , e.g. if the targets are . wav files . -memlimit=n load and analyze only files with a size up to n mbytes. the default load limit is 300 mbytes. see alsosfk reflist list file references . web LONG ... deplist -dir @ @ @ @ @ @ @ @ @ @ dll create a list of all . exe files in bin , and the dlls they depend on , searching for dlls in lib1 , lib2 and lib3 directories. sfk deplist bindiff.exe -dir bin -file . dll +run " copy $file tmp " find out which . dlls are used by diff.exe , and copy them to tmp. sfk deplist -relnames -case -path -noext -dir classes -dir classes find dependencies between java . class files . -path uses path infos , -noext strips " . class " , -case keeps the capital letters within names . -relnames strips " classes/ " from target names for comparison . sfk deplist -flat -dir . -file . flp -dir . -file . wav within a FruityLoops project directory lists which . flp project files are using which . wav files of that directory . note that . wav files can not " use " other . wav files , therefore -flat was set to avoid recursive target checks , speeding up the search . 217463 @qwx1077463 
@@120536016 @9536016/ <p> It loads all source files from a folder , showing them all in a single window , as if they were one large SuperText . <p> Words are searched as you type , without the need to fill in any dialogues . Furthermore , words can be searched by simply clicking on them . <p> Searches can be done in the current window , or - by a single right mouse click - in another window in parallel . <p> This radical and simple usage concept allows high speed search and analysis within thousands of PHP , HTML , JavaScript and CSS source code files , tracking dependencies faster than with any other editor . <p> Depeche View Pro comes with built-in syntax highlighting for PHP , HTML , JavaScript and CSS code . The highlighting can be adapted or extended through a configuration file with straightforward syntax . See an example here . <p> Browsing a mixture of HTML and PHP files in two windows . <p> A single right click on " getMsg " searched the word instantly in the right window , across all files . 
@@120536017 @9536017/ <h> How to view , search and edit all files of a folder quickly using a Freeware tool <p> How to find words as you type , jump to results across all files , and edit at these locations immediately , with a Freeware tool for Windows and Linux/Mac . <p> After download , run the tool by double click , then click on Open and select a directory from which you want to load all text files . All ASCII text files from that folder will be loaded , like all . txt , . ini , . html , readme or source code files . Depeche View Lite allows to load up to 30 plain text files from a folder for instant editing . Plain text means ASCII 8-bit characters , usually with ISO 8859-1 encoding . For accent insensitive search , Windows code pages 1250 and 1252 are supported . entering text edit mode To edit a text file , double click on a word in its text . A blinking cursor appears . From now , Depeche View runs in EDIT mode , which behaves @ @ @ @ @ @ @ @ @ @ behaves like the Notepad from Windows : - whatever you type is inserted into the text . the find and path mask for global search are inactive . - blocks are marked by dragging the mouse over text , or by SHIFT+cursor movements . - the INSERT key toggles insert or overwrite mode . - pressing CONTROL+Z undoes the most recent edit operation . up to 50 undo steps are available , however some operations like block replace may count as two or more steps . - to run a local search for a word , press CONTROL+F which brings up a search and replace dialogue . leaving text edit mode While editing text , as soon as you typed in text changes , you see two buttons at the right top , " Save " and " Revert " . - when you click on " Save " , all changes of all edited files are saved to disk , and all open editors are closed ( DView goes back to search mode ) . - when you click on " Revert " , all changes ( since the @ @ @ @ @ @ @ @ @ @ are closed . Furthermore - whenever you press CONTROL+S while editing text , the current changes are saved to disk , but the editor(s) are NOT closed , i.e. editing continues . This way you can save your work often and rapidly , which is always recommended in case of some major editing error , like a wrong block insert , or a PC crash to avoid losing your changes . - when you press CONTROL+E , it does the same as the Save button , i.e. saving changes then ending the edit session . - when you press F5 in edit mode , it does the same as Stop Edit , i.e. editing is stopped , but changes are not yet saved but kept in memory until saved or discarded . one click edit of text If you jump across many files , quickly editing here and there , sooner or later you wish you would n't need a DOUBLE click , but just a SINGLE click to edit text instantly . To enable this , - disable assistance mode to allow one click functionality . - click on @ @ @ @ @ @ @ @ @ @ select " one click edit " ( or " o/c edit " ) . Now , a single click on any word is sufficient to enter edit mode . Of course , this requires more discipline . Look where you click ! One click edit versus text surfing : as long as editing is not active , - if you press the left mouse button , keep it pressed , then move the mouse vertical , nothing will be edited but you start to surf through text . - if you do n't move the mouse at all , but press and then release the button on a word , you start editing . - if you want to surf text without entering edit mode , it 's best to click into blank space , but not on a word . Sooner or later , you may enter the edit mode unintentionally , maybe inserting unwanted chars . In that case , click on the Stop Edit or Revert button at the top right to undo all changes . double click text edit save and exit When the text editor @ @ @ @ @ @ @ @ @ @ and stop editing by a double click on blank space . To do so , check Setup / edit / save and stop by double click . search and replace within the text editor If you are editing text , and you want to search a word : - press CONTROL+F to open the Find And Replace dialog . type the word of interest , press ENTER . the editor will jump to the first occurrence after the current cursor position . this is a LOCAL search , done only within the currently edited file . if you then want to continue with a GLOBAL search for the same phrase , - press ESCAPE to close the find dialogue . - press F4 or CTRL+A to filter globally for the phrase . then , if you researched enough on global scope and want to continue editing , click on the gray " re-edit " button that appears at the right top . To replace text , there are also two ways . Imagine you want to replace the word " foo " by " bar " multiple times . You @ @ @ @ @ @ @ @ @ @ then TAB , then " bar " , and then ENTER . The first occurrence of " foo " will be searched . - now you can click on " Find Next " , or on " Replace " . - when clicking " Replace " , you see the word is replaced . if you click " Replace " again , the next occurrence is searched , and so on . You also type operators in your search term : WORD foo - Pro : finds " foo " as an insolated word , but skips for example thefoo or foo2. foo OR bar - finds either " foo " or " bar " . operators can also be disabled by the " noops " button . It appears at the right bottom if operators are detected . However , instead of using the Search And Replace dialogue , you should check a unique feature of the Depeche View Editor called Repeat Edit , as it allows faster editing in most cases . repeat edit : interactive search and replace The DView text editor can recognize a few , @ @ @ @ @ @ @ @ @ @ them by pressing CONTROL+R . Example : you want to replace " foo " by " bar " repeatedly . To do so , - search the first occurrence of " foo " , by pressing CONTROL+F , typing " foo " , then ENTER . - close the find dialog by pressing ESCAPE once . the word " foo " is still highlighted . - now just type " bar " . Depeche View sees that you are replacing one word by typing over another one . - now press CONTROL+R ( like Repeat ) . DView will search the next occurrence of " foo " . If another " foo " is found , - you may press CONTROL+R again to have it replaced . OR - you may press CURSOR RIGHT to step one character , THEN press CONTROL+R again , to skip the current word and have the next occurrence searched . - this way you can step through all occurrences of " foo " in the current file , deciding everytime if you really want to replace the word , or not . - by @ @ @ @ @ @ @ @ @ @ immediately , in one step . Adaptive Case Replace - if the search and replace phrase have the same length , pressing ALT+R finds the next occurrence and does a case adaptive replace , for example : initial search phrase : foosys initial replace phrase : barsys alt+r finds : FooSys then alt+r replaces as : BarSys repeat edit : insert word within line If you need to insert the same word in several lines , do it this way : - go to the first insert position , type the word . - press CURSOR DOWN to leave the line of edit . - go to the next insert position . - press CONTROL+R. the word should be inserted again . repeat edit : delete a word multiple times If you need to delete the same word multiple times , - mark the first word by SHIFT+CURSOR RIGHT . - press DELETE . - press CONTROL+R. the next occurrence will be found . - press CONTROL+R again to delete the word . repeat edit : append word at end of line The DView editor also recognizes when a phrase @ @ @ @ @ @ @ @ @ @ go to a line 's end , type a word . - press CURSOR DOWN to leave the line of edit . - go to the next target line , where the word should be appended. - press CONTROL+R. no matter how long the line is , the word will be appended after the line 's last character . repeat edit limitations The word edit auto recognition will be incomplete if you - change between overwrite and insert mode while editing a word - change multiple words in the same line . editor : cross copy words or lines between multiple views If two or more views are open , with at least one of them in edit mode , then text blocks can be copied in an optimized way like this : Example : Three views open , editing in the middle view . - You see some word in the left view that you want to insert at the edit cursor in the middle view . To do so , CONTROL+right click on that word . -&gt; it is inserted instantly at the edit position . - You @ @ @ @ @ @ @ @ @ @ want to insert at the edit cursor in the middle view . To do so , SHIFT+CONTROL+right click on that line . -&gt; it is inserted instantly at the edit position . - You see a block of five text lines you want to insert . To do so , keep CONTROL pressed , then RIGHT click into the first and last line of the text block . -&gt; it is inserted instantly at the edit position . editor : cross move text blocks between multiple views If two or more views are open , with at least two of them in edit mode , then text blocks can be moved in an optimized way like this : Example : Three views open , editing in the left and middle view . - You see text line(s) in the left view that you want to move to the edit cursor in the middle view . To do so , mark the whole line by 1 . place cursor at the start of the first line 2. keep SHIFT pressed 3. press CURSOR DOWN , until all lines are marked . @ @ @ @ @ @ @ @ @ @ lines is moved into the second view . editor : auto insert nearby words or text lines Imagine you are editing text , and within the same window , you see some text above like int iTheFooCounter = 0 ; Now you want to insert the word " iTheFooCounter " at the editing cursor . There are three ways of doing it : 1 . Notepad style , slowest : - double click on iTheFooCounter. - CONTROL+C to copy into clipboard. - click to your editing position . - CONTROL+V to insert . 2 . Depeche View Quick Copy , faster : - CONTROL+click into iTheFooCounter. ( =keep CONTROL pressed , click into the word , release the CONTROL key. ) the word is copied into the clipboard. - press CONTROL+V to insert . 3 . Depeche View Auto Insert , fastest : - click on the MODE button at right bottom , activate Auto Insert . - now , while editing , just CONTROL+click into iTheFooCounter. -&gt; it is copied to clipboard and then inserted at the cursor position immediately . editor : saving with DOS ( CRLF ) @ @ @ @ @ @ @ @ @ @ contains at least one CRLF ( not just LF ) line ending , the editor saves it in that mode . otherwise unix is displayed . Conversion from/to CRLF format must be done outside DView , for example with the Swiss File Knife 's " remcr " or " addcr " command . editor : inserting TAB chars or spaces when pressing TAB If a file contains at least one TAB character , insertion of TABs is also done with native TAB chars , otherwise as blanks . However , you may select to always insert blanks when pressing TAB by activation the mode menu option " always blank tabs " . Detabbing of text , i.e. conversion of all TAB chars to blank chars , must be done outside DView , for example with the Swiss File Knife 's " detab " command . internal text editor general limitations PLEASE NOTE : - the Depeche View internal text editor is a simple editor , suitable to edit many small text files , but not large ones . Editing of large files ( multiple MB of text ) can be @ @ @ @ @ @ @ @ @ @ , it may still make sense to use an external editor , like described here . - within one window , you can only edit a single text at a time . The other text files are grayed out until you leave edit mode either temporarily , e.g. by a global search , or permanently , e.g. by clicking on Save . - only ASCII text files can be edited . it is not possible to edit wide character files , anything containing binary data , or files within zip archives . DView internal text like the help text or clipboard contents can not be edited as well . - wrapped text can not be edited . 
@@120536018 @9536018/ <h> Run many commands in a loop , inserting a counter variable with sfk runloop for Windows , Mac OS X and Linux ( free open source ) . <p> sfk runloop ifrom ito " your command $digitsi " -yes -nohead sfk runloop ifrom -steps=n -inc=i " your command $digitsi " sfk printloop ifrom ito " your text $digitsi " run a self-defined command many times , or simply print text to the console , with a counter starting at ifrom , running until ito , or running n times if -steps=n is specified . with runloop , execution of commands is just simulated by default , so nothing happens . as soon as your command is looking well , add option " -yes " to really execute . options -inc=i increment step counter by i instead of 1 . -spat support slashpatterns like t q xnn. -delay=n wait n msec after every executed command . -nohead does not display the simulating : info text . printloop is the same as runloop -nohead. -quiet does not echo the commands before execution . -quietrc do not print rc status message @ @ @ @ @ @ @ @ @ @ contain $i which is replaced by the loop counter , or slashpatterns if option -spat is given . due to syntax limitations of the command shell , it may help - to use q instead of " ( avoids quote miscounting at shell ) - to use x26 instead of &amp; ( if ampersand is behaving unexpected ) $i also supports format parameters before ' i ' like : $5i print 5 digits , right justified , filled with blanks . $05i print 5 digits , right justified , filled with zeros. $-5i print 5 digits , left justified , filled with blanks . to print the $ char itself in output use $$ quoted multi line parameters are supported in scripts using parm trim . type " sfk script " for details . aliasessfk printloop do not execute anything but just print the resulting text to terminal . see alsosfk run - run self-defined command on filenames. web LONG ... runloop 1 100 " copy mytest.dat testfile$03i.dat " -yes creates 100 copies of mytest.dat named testfile001.dat , testfile002.dat , testfile003.dat etc. sfk printloop 1 100 -spat " &lt;a LONG @ @ @ @ @ @ @ @ @ @ that q was used instead of " , as ' &amp; ' may create problems when combined with " ( a syntax mess produced by the command shell , not by sfk itself. ) and to enable slash patterns like q , -spat had to be added . <p> SFK is a free open source command line tool that runs instantly without installation . Get sfk.exe from the zip package and use it ( binaries for Windows , Linux and Mac OS/X are included ) . <p> Read about all SFK functions , including a 60 page tutorial with detailed example scripts , in the 5 Dollar Mobile PDF optimized for your Smartphone ! 
@@120536019 @9536019/ <h> instantly run a simple no-installation ftp client <p> on the command line , to allow ftp file transfer between any Windows , Mac OS X , Linux , Raspberry Pi machine , non-interactively in a batch file . the free open source sfk ftp client is best used with the free sfk ftpserver . <p> sfk ftp host:port options command parmssfk sft host:port The SFK FTP Client . sfk ftp hostname uses plain FTP protocol via port 21 to speak with any ( non SFK ) FTP server . sfk sft hostname uses SFT Simple File Transfer via port 2121 for better connectivity , file attributes and multi file transfer , with SFK SFT servers only . commands put x send a single file with name x get x receive a single file with name x mput x send multiple files of the current directory having x in their filename mput . ext send multiple files ending with . ext mget x receive multiple files from the ftp server having x in their filename mget . ext receive multiple files ending with . ext dir list the remote @ @ @ @ @ @ @ @ @ @ change into local directory x ! mycmd execute local command mycmd bye exit with SFT only : cput x send new or changed files of the current dir. if the server time ( zone ) is incompatible this will not work and may send all files or never any files . cget x receive new or changed files of the current directory on the server . same restrictions apply as with cput. run cmd run remote command , if server allows . options -raw force ftp protocol even when connected with an sfk ftp server . default under windows , since sfk 1.8.5 , when using port 21. -sft allow sft protocol even when using port 21 with an sfk ftp server . you may also set variable set SFKCONFIG=usesft -verbose list the transmitted ftp commands , and tell if SFKFTPUSER/PW variable is used . helpful to get more infos in case of errors . -force continue transfer after errors . -quiet disable progress indicator and other output . -noprog no progress indicator during transfers . -user=x or -user x sends username x instead of anonymous . you may also @ @ @ @ @ @ @ @ @ @ SFKFTPCUSER=myuser with the latter one being used only by the sfk ftp command , but not by sfk ftpserv. -pw=x or -pw x sends an authentication password x. you may also set an environment variable like : set SFKFTPPW=mypassword or set SFKFTPCPW=mypassword with SFT only : -noclone do not copy time stamps on put/get. -pres always preserve full file attributes , including readonly modes . default is to keep file writeable by file owner and to apply umask under linux. -verify extra verify by re-reading files after transfer and comparing against a transmitted md5 checksum. aliases sfk sft ... = the same as sfk ftp , but using port 2121. automatic IP expansion if you are in the same subnet as the target host , you may supply only the IP number 's last part(s) , e.g. : sfk ftp 23 ... == sfk ftp 192.168.1.23 ... sfk ftp 2.23 ... == sfk ftp 192.168.2.23 ... this feature may or may not work , depending on your operating system and number of network interfaces . add option -showip to see what the expanded IP is. transfer protocol selection since SFK @ @ @ @ @ @ @ @ @ @ server and " sfk ftp " at the windows client , plain FTP protocol is used to avoid firewall restrictions via port 21. to use SFT Simple File Transfer for better connectivity and cput/cget support run the server as " sfk sftserv " and the client as " sfk sft " , which will use port 2121. file attributes since SFK 1.6.7 , when using the SFT protocol , linux file attributes are sent and written at the receiver , except for file owner ' rw ' flags which are set by default to allow rewrite in future transfers . when sending from linux to windows attributes like ' x ' get lost . problems and solutions : if sfk to sfk file transfer via port 21 is stopped with ECONNRESET or ECONNABORTED this is probably caused by a firewall. try option -raw to use plain FTP. alternatively use " sfk sftserv " on server and " sfk sft " at the client , which uses the unrestricted port 2121. read more under : sfk ftpserv -help see alsosfk ftpserv -helpweb LONG ... ftp farpc put test.zip send test.zip to @ @ @ @ @ @ @ @ @ @ but with authentication sfk ftp 192.168.1.99:30199 get test.zip receive test.zip from 192.168.1.99 port 30199 sfk ftp farpc mput . cpp send all . cpp files of the local dir to farpc. subfolder contents are NOT included . sfk ftp farpc mget * receive all files from farpc 's directory , overwriting everything in the local directory . sfk ftp hostname enter interactive mode , in which you can type the above commands directly . for example , ! dir runs the command " dir " locally . sfk sel -today mydir . css . php +ftp farpc mput upload all . css and . php files changed today within the mydir folder to FTP server farpc. before doing so , make sure that farpc has the same folder structure ( mydir at top level ) . sfk today mydir . css . php +ftp farpc cput similar as above , but checks also on farpc which of the selected files actually differ . IF using SFT with an sfk sft server : best practice is to run an sft ( simple file transfer ) server on the other PC or @ @ @ @ @ @ @ @ @ @ 2121 , avoiding firewall and other restrictions that usually block use of ftp port 21. then the following can be used by an sfk client : sfk sft farpc get myfile.txt download myfile.txt instantly . if a local file exists with the same name then it is overwritten . sfk sft farpc mget myfile download all files having " myfile " in their name . sfk will show a " simulating " preview first . add -yes to really download the files . sfk sft farpc mput myfile send all files having " myfile " in their name . if files with same name exist at server then they are overwritten . sfk sft farpc get thesubdirdoc.txt by default , sfk sftserv allows deep direct access to files within folders . all required output dirs are created automatically . this deep access can not be used with mget , mput and dir. sfk sel mydir . txt +sft farpc cput send all . txt files within mydir that changed since the last transmission to farpc. sfk filter filelist.txt +sft farpc mget mydir create a list with filenames , download the @ @ @ @ @ @ @ @ @ @ mydir " . sfk sft 192.168.1.100 cput . txt connect to server .100 and send all . txt files which are newer or were added in the local folder . sfk sft 2.100 cget . txt connect to a server like , for example , 192.168.2.100 and download all . txt files which are newer or were added in the remote folder . sfk sft farpc -pw mypw run " sh myscript.sh &gt;tmp1.txt 2&gt;&amp;1 " execute a command on the remote server , redirecting all output into a file tmp1.txt. requires an sfk sft server with option -run , AND -pw authentication on both sides . NOTE : existing files are overwritten without asking back . Make sure that ftp server and client are running in the correct directories , especially before mput/mget. 217463 @qwx1077463 
@@120536020 @9536020/ <p> Now type in words or phrases , e.g. " los angeles " , " arkansas " , or " 90*hollywood " , and you will be presented with matching result records instantly : <p> What you see is a filtered view , listing only the result records . <p> If you want to search for a different phrase , press the INSERT key first to clear the " find : " entry field at the bottom . <p> This is the most simple form of full text search , finding phrases across all fields , no matter if it 's the city or county name , zip code or longitude . But more precise searches are also possible . <p> There are 7 data columns ( to see the whole text , press SHIFT+CURSORRIGHT to scroll horizontally ) . The most important columns are : <p> column 1 : the zip code <p> column 2 : city name <p> column 3 : state code <p> column 4 : county or province <p> For example , to find all ZIP codes starting with " 90 " , you may @ @ @ @ @ @ @ @ @ @ where column 1 , the ZIP code , starts with " 90 " : <p> Next example : to find all cities whose name contains " woodland " in california , type <p> COL2 woodland AND COL3 ca <p> In this case , the " AND " may also be left out . <p> Example : to find all cities named exactly " Washington " ( not " Port Washington " or the like ) located outside the district of Columbia , type : <p> COL2FULL washington NOT COL4 district of columbia <p> For help on the whole tool usage , click on the " help " button at the right top . <p> Credits : <p> thanks to GeoNames.org for the original zip code data which is provided here in a modified form ( Columns reordered , and LAT/LONG decimal digits reduced ) . <p> Please note : <p> the AreaCodes search tool is based on Depeche View , the world 's fastest text search tool . It is actually a copy of Depeche View Base with an embedded database , configured to use the " Auto Filter " @ @ @ @ @ @ @ @ @ @ something is typed . This is not the default mode when running Depeche View normally . All details on how filtered views are working can be found in the tool 's help text . <p> Depeche View Base can only select five table columns ( COL1 to COL5 ) directly . To select columns 6 and further , the commercial Extended Edition is needed . 
@@120536024 @9536024/ <p> sfk xtext singleDirName " /searchtext/ " sfk xtext singleFileName " /searchtext/ " optionssfk xtext -dir mydir -file . cpp . txt -text " /from/totext/ " search in text files only using wildcards * and ? as well as SFK Simple Expressions in brackets . the search text must be surrounded by a delimiter like / or or any other character not part of the search text . by default , full text lines containing hits are shown . use option -pure to show only the found text . search text can be followed by a totext to reformat output . subdirectories are included by default the sfk default for most commands is to process the given folders , as well as all subdirs within them . specify -nosub to disable this . options -nosub do not include files in subdirectories. -nobinary skip binary files . -case case-sensitive text comparison . default is insensitive. -text starts a list of search patterns of the form /src/ or /src/totext/ where / is the separator char , src the text to search for , and totext a mask to reformat output . @ @ @ @ @ @ @ @ @ @ of the search text , i.e. /foo/ or foo both search " foo " . -text is not required if a single filename is given . -pat the same as -text , starting a pattern list . -bylist x.txt read search patterns from a file x.txt , supporting multiple lines per pattern . ( add -full for more. ) -bylinelist x read /from/to/ or just /from/ patterns from a file x with one pattern per line . ( add -full for more. ) -by(line)list does not support sfk variables . to use variables in patterns create an sfk script with patterns as parameters . " sfk script " for more . -arc XE : include content of . zip . jar . tar etc. archives as deep as possible , including nested archives . XD : demo will read first 1000 bytes of each entry . -qarc quick read top level archives but not nested ones . -firsthit show only first found pattern match per file . -progress show progress infos. -names list only names of files containing at least one hit . -justrc print no search results , just @ @ @ @ @ @ @ @ @ @ at end of command . -full print full help text telling about -bylist pat . files , special character case sensitivity and nested or repeated replace behaviour . output options -conlines=n1 show n lines of context around search hits . by default only text lines containing one or more hits are shown . all lines together can not hold more than : -conchars=n2 max. number of characters of all context lines together default is 240 or n1*160. can not be larger than 32000. -conresline show full result line but no further context ( default ) -separator show " --- " separator between hits within a file . -septext s use separator text s ( supports slash patterns n etc. ) -nosep do not show " --- " separator between hits within a file . -indent=n set n chars of indentation for result display . -pure extract only searched data , same as -context=0. you may also set an environment variable : set SFKCONFIG=xfind:pure , xtext:pure use -pure -tofile x to extract binary content as is. -fill=c replace binary null and other unprintable characters with character c. default is a dot @ @ @ @ @ @ @ @ @ @ of plain text . -showle highlight CR/LF line endings in hex dump output -nofile do not insert : file header lines in output . -crlf , -lf for file headers and default totext : force crlf or lf line endings instead of system default -filehead s file header to insert on every matching file . only file.name surrounded by text can be used . default is -filehead " : file file.namen " unless a single input filename is given . does not change hex dump output headers. -sep s define separator s between hits in a file -rawterm on output to terminal do not strip codes below 32. null bytes are always stripped . -to dir$file write output files to given path . for details about output file masks , type " sfk help opt " or " sfk run " . -tofile x write output data to a single output filename x ( which is not interpreted as a mask but taken as is ) . +tofile x as last parameter ( command chaining ) : write text as displayed on terminal to a file x. return codes for @ @ @ @ @ @ @ @ @ @ found , &gt;1 = major error occurred . see also " sfk help opt " on how to influence error processing . quoted multi line parameters are supported in scripts using full trim . type " sfk script " for details . wildcards and SFK expressions SFK Expressions are simple patterns containing literal text , wildcards * and ? and character classes in square brackets . basically , the syntax provides extended wilcards but no further logic and is not related to regular expressions . search patterns are surrounded by a separator character which can be anything not contained in the search text , like / or within a pattern /fromtext/totext/the fromtextmay contain : * - 0 to 4000 characters in the same text line or paragraph , i.e. all bytes not being CR , LF or NULL . 4000 is just a default maximum that can be changed by : 0.100000 chars - 0 to 100000 characters in the same text line or paragraph , i.e. the same as * but with a larger range . ? - one character . ? ? ? ? ? - same as @ @ @ @ @ @ @ @ @ @ ( with CR , LF , NULL ) i.e. it collects stream text across lines , even in binary data ** - the same as bytes. 0.100 bytes - 0 to 100 bytes .100000 bytes - up to 100000 bytes 1. * bytes - 1 to default maximum bytes 30 bytes - exactly 30 bytes byte of aeiou - one vocal ( a OR A OR e OR ... ) , case insensitive by default . " aeiou " is a character list . byte of x2f - a backslash or forw. slash / bytes of rn t - whitespace incl. line ends bytes of ( rn t ) - the same , ( ) are optional bytes not rn0 - up to 4000 bytes as long as no CR , LF or NULL byte appears chars - the same as bytes not rn0 , i.e. collect text in a line char not ( t ) - same as byte not ( rn0t ) , everything not blanks and tabs char not ) ( t - not brackets , blanks and tabs , same as not ( ( ) t @ @ @ @ @ @ @ @ @ @ case insensitive by default chars of x61-x7A - search a-z but not A-Z , or use option -case for case search eol - end of line by characters : CRLF or LF or CR white = chars of ( t ) - 0 or more whitespaces xwhite = bytes of ( t rn ) - same but across lines 1 white = byte of ( t ) - 1 whitespace digit = byte of ( 0-9 ) - 1 digit digits = bytes of ( 0-9 ) - 0 or more digits hexdigit = byte of ( 0-9a-f ) - 1 hexadecimal digit hexdigits = bytes of ( 0-9a-f ) - 0 or more hex digits special keywords that do not count as tokens : keep - search also the following text but keep it in the input data , without consuming it ortext - fooortextbar searches word foo or bar . ortext is allowed only between literals. anchors that have no length of their own : start - start of file end - end of file lstart - line start , i.e. start or CRLF or CR or LF @ @ @ @ @ @ @ @ @ @ of file how to search or replace special characters : - to search or replace text containing the literal characters * ? then these must be escaped like * ? - ( ) are escaped only within character lists , like ( ) - to search or replace the forward slash ' / ' type x2f or use another char around from/to text , e.g. fromtexttotext - parameters with blanks and non trivial characters need double quotes " " , see also " about Shell Command Characters " below . expansion priorities : ( highest first ) if two search parts are side by side , and the same input character matches both , then these priorities apply : 5 : start , end , lstart , lend 4 : literal text , eol 3 : whitelist classes : byte of , bytes of 2 : blacklist classes : chars not , bytes not 1 : plain wildcards : ? , * , ** , byte , bytes , chars this means in " /bytesfoo/ " the bytes will stop to collect characters as soon as " foo " is @ @ @ @ @ @ @ @ @ @ on same or higher priority the right side stops the left side . the totextmay contain : part 1 - use first text part of the fromtext. e.g. the fromtext /*foo.100 charsbar*/ contains parts 1 2 3 4 5part1 - the same ( blank is optional ) . parts 1,2,3 - use parts 1 , 2 and 3. parts 1-10 - use parts 1 to 10. strip ( part1 , 0 ) - use part 1 but remove zero bytes. only zero bytes " 0 " can be removed . file.name - full input filename with path file.relname - input filename without path file.path - input file 's path file.base - relname without last . extension file.ext - input filename extension all - use all parts from fromtext. setvar name ... endvar - set variable " name " with data between setvar and endvar. getvar name - fill in data from variable " name " although anchors like lstart , lend count as a separate part they need NOT be specified in the totext. this means that /lstartfoolend/bar/ just changes the word " foo " . supported slash patternst = @ @ @ @ @ @ @ @ @ @ byte with code 00 hexadecimal 0 = short form for x00 q = a double quote " = the backslash character itself = the bracket open character = the bracket close character * = the literal star character * ? = the literal question mark ? - = to use literal " - " in a command Within multi line -bylist files : = slash+blank is changed to a single blank Only within " char of " or " byte not " lists : ( = to use literal character " ( " ) = to use literal character " ) " SFK expression options -showpart(s) print /from/ part numbers , range statistics and expansion priority points per part . done automatically if a required /to/ text is not given with a command . -showbest if a /from/ pattern finds nothing , use this to see how many parts would match so far , and with up to how many bytes per part . anchors like lstart may show a non zero length when matching ( CR ) LF. -showlist with -bylist , show the internal joined list if commands @ @ @ @ @ @ @ @ @ @ the above . -xmaxlen=n set default maximum length for chars or bytes commands , e.g. -xmaxlen=10000 means /foo*bar/ matches with up to 10000 characters between foo and bar . the default max length without this option is 4000 characters . performance notes - always use a string literal , or single byte or char , at the start of your search expressions , like in /foo*bar/ starting with ' f ' . Do not use a wildcard like * at the start like in /*foobar/ when searching huge input data , as your search will slow down byfactor 256 . Use /lstart*foobar/ instead . - the system may cache output file(s) , writing to disk in background after sfk has finished . subsequent batch commands may execute slower . chaining support sfk extract output can be sent only to +xed or +xex. other commands require an xed conversion step like sfk extract ... +xed +viewaliasessfk xhexfind is the same as xfind -hex to extract unmodified binary data you may use either sfk xfind -pure ... -tofile or sfk extract ... -tofilesee also--- open source commands ---sfk xfind search wildcard text @ @ @ @ @ @ @ @ @ @ files only sfk xhexfind search in text/binary with hex dump output sfk extract extract wildcard data from text/binary files sfk filter filter and edit text with simple wildcards sfk find search fixed text in text/binary files sfk ftext search fixed text in text files sfk hexfind search fixed text in binary files sfk replace replace fixed text in text/binary files --- freeware commands ---sfk view GUI tool to search text as you type --- xe commercial commands ---sfk replace replace fixed text with high performance sfk xreplace replace wildcard text in text/binary files sfk help xe about SFK XE and xreplace with SFK Expressions . beware of Shell Command Characters . to find or replace text patterns containing spaces or special characters like &lt;&gt; ! &amp; ? * you must add quotes " " around parameters or the shell environment will destroy your command . for example , pattern /foo bar/other/ must be written like " /foo bar/other/ " within a . bat or . cmd file the percent % must be escaped like %% even within quotes : sfk echo -spat " percent %% is a percent x25 " @ @ @ @ @ @ @ @ @ @ see 1 type " sfk cmd 1 " for whole command in one line . bad examples with correctionsif input text contains : bool bClFoo ; bool bClBar ; sfk xfind in.txt " /boolxwhitebCl*xwhite ; / " does NOT match " bool bClFoo ; " because * eats the whole input line including " ; " so no input is left for " xwhite ; " and the whole expression fails . sfk xfind in.txt " /boolxwhitebCl* not ; xwhite ; / " does both match " bool bClFoo ; " and " bool bClBar ; " . this means whenever your search fails to work write in detail which characters ( not ) to collect where . sfk xex in.txt " /lstartfoo/lstartgoo/ " there is no need to write an anchor like lstart within totext as it contains no data . use instead : sfk xex in.txt " /lstartfoo/goo/ " sfk xex in.txt " /foolendbar/goopart2bar/ " anchors like lend must be at start or end of fromtext and can not be referenced within totext. use instead : sfk xex in.txt " /fooeolbar/goopart2bar/ " working examplessfk xfind -text " /class @ @ @ @ @ @ @ @ @ @ class definitions from mydir and write output indirectly ( via command chaining ) to out.txt 13 sfk xtext in.txt -text " /foo*bar/ " search in.txt for patterns starting with foo and ending with bar , in the same line , with up to 4000 characters inbetween. sfk xtext in.txt -text " /foo*bar/ " +view same as above , but show the result in the depeche view text browser tool for easy reading . sfk xhex -text " /foo0.100000 bytesbar/ " -dir mydir search all text and binary files of mydir for patterns of foo and bar with 0 to 100000 bytes ( including NULL , CR and LF ) inbetween and print output as hex dump . sfk xtext -text " /printf(**) ; / " -dir mydir -file . cpp find all printf statements in source code , including statements across multiple lines . sfk xtext -pure -text " /foo*bar/part2n/ " -dir mydir -file . txt +view search foo*bar in all . txt files of folder mydir , extract the text between foo and bar without any context ( -pure ) , and display this in dview. 15 sfk xtext @ @ @ @ @ @ @ @ @ @ with " class " in . zip contents XD : demo will search first 1000 bytes per . zip sub file 217463 @qwx1077463 
@@120536026 @9536026/ <h> Swiss File Knife - A Command Line Tools Collection <p> combines many functions in a single , portable executable that belongs onto every USB stick . Search and convert text files , instant simple FTP/HTTP server , find duplicate files , compare folders , treesize , run own commands on all files of a folder - it 's all within a single tool . <p> Get the Five Dollar Book ! All commands in a 300 page PDF , for convenient reading on your tablet , smartphone , or for self printing . Includes a 60 page tutorial for the most important functions . <p> Windows : after download , open a command line ( CMD.exe ) then CD into the download folder and type " sfk " for the help text . Mac OS X : open the . DMG then control+click on the contained script and select Open . Linux : after download , open a command line or terminal , then rename to sfk like " mv sfk-linux.exe sfk " , make it executable by " chmod +x sfk " and type " . /sfk @ @ @ @ @ @ @ @ @ @ Intense users may be interested in Swiss File Knife Extended Edition ( XE ) which featuresa high performance replace command for large text and binary files , and which can alsoread . zip , . jar , . tar.gz and . tar.bz2 file contents . Read more on that here . 
@@120536027 @9536027/ <h> Find identical files in one or more directory trees with the free sfk dupfind command for the Windows , Mac OS X and Linux command line . <p> sfk dupfind -dir anydir -file . ext1 . ext2 find and list duplicate files , just by file content , independent from filename . searches for files with same size and then compares contents by md5 checksums. options -diffdirs list only duplicates residing in different root directories. this option requires that you specify at least two dirs after -dir. -listorg list all original filenames , leave out any duplicate filenames. -minsize=n compare only files with size &gt;= n. examples for n are : 5m = 5000000 bytes ( 5 mbytes ) 100k = 100000 bytes ( 5 kbytes ) 1M = 1048576 bytes ( 2&lt;&lt;20 bytes ) 9000b = 9000 bytes command chaining - by default , this command passes the names of found duplicate files to the next command . - option -listorg does the opposite : it passes only original filenames , but no duplicates , to the next chain command . NOTE : if identical files are @ @ @ @ @ @ @ @ @ @ " or " duplicate " is currently based on the order in the file system : the file found first is listed as " original " . check carefully if this is what you think , before cleaning up any duplicates . web LONG ... dupfind . find all duplicates within the current directory tree . sfk dupfind -dir docs1 docs2 docs3 find all dups across and within the given directories. sfk dupfind -diffdir -dir docs1 docs2 docs3 find dups between docs1/docs2 , docs2/docs3 , docs1/docs3 , but does NOT list dups within the same root directory . sfk dupfind docs . doc +del find all duplicate . doc files , within the docs directory tree , and delete them . sfk dupfind -listorg docs . doc +run " copy $file docs2 " copy all . doc files from docs to docs2 , but leave out any duplicate files . sfk dupfind -dir pic1 -dir pic2 -dir pic3 find duplicates across three different directory trees . specifying multiple -dirs is also a way of influencing the result order ; if a file is found both in pic1 and pic3 , @ @ @ @ @ @ @ @ @ @ the other one as the duplicate . sfk sel -dir pic1 pic2 pic3 -file . jpg +dup -minsize=1m similar to the above , this example uses command chaining : list all . jpg files from the pic directories , then pass this to the dupfind command , also filtering by size . <p> SFK is a free open source command line tool that runs instantly without installation . Get sfk.exe from the zip package and use it ( binaries for Windows , Linux and Mac OS/X are included ) . <p> Read about all SFK functions , including a 60 page tutorial with detailed example scripts , in the 5 Dollar Mobile PDF optimized for your Smartphone ! 
@@120536028 @9536028/ <p> Depeche View is a high speed text search application that can search TAB separated database exports from databases or spreadsheet applications in realtime . <p> It allows to search words as you type , or by clicking on words already present on screen , producing result lists instantly . <p> A typical scenario is to check address data for correctness . <p> In the screenshot to the right , a database of zip codes , or postal codes , taken from geonames.org was loaded with Depeche View Pro . The database provides country code , postal code , place name , state , county and community as tab separated columns . <p> I press CONTROL+SHIFT+TAB in Depeche View to select a large tab size of 20 , for a better display of the columns . <p> I right click on the button to activate AutoFilter mode . This means : whenever I type a word , the tool will present a list of only the text lines containing that word ( a filtered view ) . <p> Now let 's type , for example , " Washington " @ @ @ @ @ @ @ @ @ @ containting that word . But actually I meant the city Washington , not every city within a state , county or province named Washington . <p> So I have to restrict my search to the third column of the database , as this is the city name . This is done by typing : <p> COL3 washington . <p> This way , I get only 358 hits . But still I get city names like Mount Washington , or Fort Washington . I want records with the whole 3rd column containting only Washington , and nothing else . Furthermore , it should be in the District Of Columbia only . Finally , I type : <p> COL3FULL washington COL5FULL DC <p> and get all zip codes from exactly that city . <p> As you can see , the main principle of Depeche View is simplicity . It does NOT use complicated regular expressions , but plain English search operators like AND , OR , NOT , or COL for column . <p> Furthermore Depeche View allows to search words by a single click on a word , either in the @ @ @ @ @ @ @ @ @ @ different window . This allows high speed jumping between different table contents . <p> Another major feature is clipboard automation : let Depeche View run in parallel to your spreadsheet application , and whenever you copy a word into the clipboard , let Depeche View run an automated search in it 's text data . <p> This and more can be tried immediately by downloading the free Depeche View Pro Demo . <h> Try Depeche View now ! <p> download the free 30 days trial installer , load up to 5000 text files , and experience all professional features like instant text editing , loading of . zip file contents , search auto suggest , clipboard loading , clipboard automation and much more . <p> or download the Freeware edition Depeche View Lite , allowing to view and search up to 100 text files in realtime. 
@@120536029 @9536029/ <p> sfk alias -list-del-ren shortname = command create , list , delete or rename command aliases. aliases are short command names selected by yourself to save typing effort . sfk alias shortname = command ... create an alias . this actually creates a small batch file in the directory where sfk itself is located . requirements : - the sfk executable has been copied into some directory x. - this directory x must be in your PATH. - you must have write permission for directory x. - directory x is NOT the current working directory " . " . if any of these requirements is not met , the command will fail . for example , if sfk.exe is located just in your current working directory " . " , copy sfk.exe into a different directory of the PATH , and then start aliasing. see also sfk mkcd : create an alias remembering the current directory . web LONG ... alias list = " sfk list " creates the alias named " list " . from now on , you can type " list " instead of " sfk @ @ @ @ @ @ @ @ @ @ -arc . . jar filter -+%1. class " creates alias " wherc " , searching for class files in jars . after the alias exists , command " wherc Foo " executes the commands from above , listing all class names with " Foo " . sfk alias tab2c " sfk fromclip +filt -spat -rep t , +toclip " then type tab2c to replace tabs by commas within clipboard. sfk alias copytoday " sfk run " copy $file c : tmp " . -today " copy all files changed today to c : tmp. if double quotes " should be part of your command , they must be escaped as " sfk alias wide MODE CON COLS=160 extend the current shell window to a width of 160 columns . sfk alias ec " notepad c : appbin%1.bat " provided that c : appbin is in your path , creates a command " ec " to instantly edit further commands . PARAMETER LIMITATION : note that the created batch files may accept only a maximum of 9 parameters , called %1 to %9 . Further parameters may be ignored , or @ @ @ @ @ @ @ @ @ @ command string contains special characters like % ! otherwise these chars may be removed ( or misinterpreted ) by the command shell . sfk alias -list list all existing aliases. this actually scans the directory where sfk is located for batch files containing aliases. sfk alias shortname list definition of an existing alias . sfk alias -del aliasname delete an alias ( deletes the associated batchfile ) . sfk alias -ren oldname newname rename an alias ( renames the associated batchfile ) . more examples:sfk alias late = sfk list -late after that , you have a command " late " , which can be used like : late . lists the most recent files in the current directory , including all subdirectories. sfk alias later = sfk list -norec -late creates a command " later " , which can be used like : later . lists the most recent files in the current directory , NOT including subdirectories. sfk alias findhtm " sfk find -pat %2 %3 %4 -dir %1 -file . htm . php " creates a command " findhtm " , which can be used like findhtm @ @ @ @ @ @ @ @ @ @ and . php files in directory htdocs , including all subdirectories , for text lines containing the words " index.php " AND " mode " . sfk alias zipsince " sfk run -since %1 " zip -r %2 $qfile " " creates a command " zipsince " , zipping files changed on or after a specific date , using zip.exe ( free tool from the InfoZIP group ) . zipsince 20070303 update.zip work ! . exe ! . obj collect all files from directory " work " , excluding . exe and . obj files , which have been changed since 03-Mar-2007 , into a file " update.zip " . sfk mkcd cdname creates an alias batch file , remembering the current directory . this batch can be used later to re-enter the remembered directory . example : 1 . you are currently working in C : Documents And Long Complicated PathsUsersYouWork 2. now type : sfk mkcd cd1 which saves above path in a command " cd1 " . 3. you go into a different directory , e.g. C : Another ProjectNested DirsWork2 4. now type : sfk mkcd @ @ @ @ @ @ @ @ @ @ jump instantly into C : Documents And Long Complicated PathsUsersYouWork and anytime you type : cd2 you jump instantly into C : Another ProjectNested DirsWork2 if the creation of the alias fails , please type " sfk alias " to read about the required directories and access rights . 217463 @qwx1077463 
@@120536031 @9536031/ <p> The same applies for phrase search : keep left button pressed , then click on " Foo " and move the mouse over to " candy " . A phrase like " FooController : : testBar ( char *pszCandy " will be searched immediately , leaving the filtered view . <p> To repeat , since Release 1.5.3 Depeche View automatically presents a Filtered View whenever something is searched . If you want to disable this , you may right click on the filter button , to enter First Result Mode . In that mode , every search jumps straight to the first result , no matter in what file . To reactivate automatic filtering , right click on the filter button again . <p> Within First Result Mode , you may get a Filtered View temporarily anytime by pressing F4 or left clicking on the filter button . <p> Depeche View is a high speed text search tool for Windows and Linux ( WINE ) . Download the free Lite Edition here , or the 30 days Pro Demo here . Depeche View Lite requires no installation . @ @ @ @ @ @ @ @ @ @ text files of a folder instantly in one window . <p> snapshot with 8254 files loaded . the word " interface " was found 5690 times . 
@@120536032 @9536032/ <p> Depeche View loads all C++ source code files ( . cpp/.hpp etc. ) from a directory tree , showing the code lines from all files within a single window . This allows high speed research across thousands of source files . <p> Example : searching the word " class " across 790 C++ header files . <p> Search words as you type , or by clicking on them . Fly through search results by the turn of your mousewheel . Copy text , and create bookmarks with the same ease . If you have to read through many small ASCII text files , e.g. source code , this tool allows text analysis at extreme speeds . <p> For example , to search a word , forget about opening a dialogue , setting options , clicking through results lists to open one result file after another . No , just type the word - and land within the first matching line in the first matching file , instantly . Then , if you see another word of interest , do n't even type it - click on it ! @ @ @ @ @ @ @ @ @ @ for this word , instantly , no matter in what file . <p> By default , you jump from result to result in the normal text . Even more efficient is the filtered view : click on the large " F " button at the right bottom to show only the text lines containing the search result . <p> One step more extreme is the Auto Filter : by right-clicking on the " F " button , it turns into " A " , as in the example at the top . Now , whenever you type a word , filtering is activated instantly , showing only the result lines . Now , to read a text part of interest , just click into one of the result lines . In the example above , we click on " class nsIContentSerializer " , so this text area is unfolded : 
@@120536038 @9536038/ <p> sfk alias -list-del-ren shortname = command create , list , delete or rename command aliases. aliases are short command names selected by yourself to save typing effort . sfk alias shortname = command ... create an alias . this actually creates a small batch file in the directory where sfk itself is located . requirements : - the sfk executable has been copied into some directory x. - this directory x must be in your PATH. - you must have write permission for directory x. - directory x is NOT the current working directory " . " . if any of these requirements is not met , the command will fail . for example , if sfk.exe is located just in your current working directory " . " , copy sfk.exe into a different directory of the PATH , and then start aliasing. see also sfk mkcd : create an alias remembering the current directory . web LONG ... alias list = " sfk list " creates the alias named " list " . from now on , you can type " list " instead of " sfk @ @ @ @ @ @ @ @ @ @ -arc . . jar filter -+%1. class " creates alias " wherc " , searching for class files in jars . after the alias exists , command " wherc Foo " executes the commands from above , listing all class names with " Foo " . sfk alias tab2c " sfk fromclip +filt -spat -rep t , +toclip " then type tab2c to replace tabs by commas within clipboard. sfk alias copytoday " sfk run " copy $file c : tmp " . -today " copy all files changed today to c : tmp. if double quotes " should be part of your command , they must be escaped as " sfk alias wide MODE CON COLS=160 extend the current shell window to a width of 160 columns . sfk alias ec " notepad c : appbin%1.bat " provided that c : appbin is in your path , creates a command " ec " to instantly edit further commands . PARAMETER LIMITATION : note that the created batch files may accept only a maximum of 9 parameters , called %1 to %9 . Further parameters may be ignored , or @ @ @ @ @ @ @ @ @ @ command string contains special characters like % ! otherwise these chars may be removed ( or misinterpreted ) by the command shell . sfk alias -list list all existing aliases. this actually scans the directory where sfk is located for batch files containing aliases. sfk alias shortname list definition of an existing alias . sfk alias -del aliasname delete an alias ( deletes the associated batchfile ) . sfk alias -ren oldname newname rename an alias ( renames the associated batchfile ) . more examples:sfk alias late = sfk list -late after that , you have a command " late " , which can be used like : late . lists the most recent files in the current directory , including all subdirectories. sfk alias later = sfk list -norec -late creates a command " later " , which can be used like : later . lists the most recent files in the current directory , NOT including subdirectories. sfk alias findhtm " sfk find -pat %2 %3 %4 -dir %1 -file . htm . php " creates a command " findhtm " , which can be used like findhtm @ @ @ @ @ @ @ @ @ @ and . php files in directory htdocs , including all subdirectories , for text lines containing the words " index.php " AND " mode " . sfk alias zipsince " sfk run -since %1 " zip -r %2 $qfile " " creates a command " zipsince " , zipping files changed on or after a specific date , using zip.exe ( free tool from the InfoZIP group ) . zipsince 20070303 update.zip work ! . exe ! . obj collect all files from directory " work " , excluding . exe and . obj files , which have been changed since 03-Mar-2007 , into a file " update.zip " . sfk mkcd cdname creates an alias batch file , remembering the current directory . this batch can be used later to re-enter the remembered directory . example : 1 . you are currently working in C : Documents And Long Complicated PathsUsersYouWork 2. now type : sfk mkcd cd1 which saves above path in a command " cd1 " . 3. you go into a different directory , e.g. C : Another ProjectNested DirsWork2 4. now type : sfk mkcd @ @ @ @ @ @ @ @ @ @ jump instantly into C : Documents And Long Complicated PathsUsersYouWork and anytime you type : cd2 you jump instantly into C : Another ProjectNested DirsWork2 if the creation of the alias fails , please type " sfk alias " to read about the required directories and access rights . 217463 @qwx1077463 
@@120536039 @9536039/ <h> Swiss File Knife - A Command Line Tools Collection <p> combines many functions in a single , portable executable that belongs onto every USB stick . Search and convert text files , instant simple FTP/HTTP server , find duplicate files , compare folders , treesize , run own commands on all files of a folder - it 's all within a single tool . <p> Get the Five Dollar Book ! All commands in a 300 page PDF , for convenient reading on your tablet , smartphone , or for self printing . Includes a 60 page tutorial for the most important functions . <p> Windows : after download , open a command line ( CMD.exe ) then CD into the download folder and type " sfk " for the help text . Mac OS X : open the . DMG then control+click on the contained script and select Open . Linux : after download , open a command line or terminal , then rename to sfk like " mv sfk-linux.exe sfk " , make it executable by " chmod +x sfk " and type " . /sfk @ @ @ @ @ @ @ @ @ @ Intense users may be interested in Swiss File Knife Extended Edition ( XE ) which featuresa high performance replace command for large text and binary files , and which can alsoread . zip , . jar , . tar.gz and . tar.bz2 file contents . Read more on that here . 
@@120536040 @9536040/ <h> Find identical files in one or more directory trees with the free sfk dupfind command for the Windows , Mac OS X and Linux command line . <p> sfk dupfind -dir anydir -file . ext1 . ext2 find and list duplicate files , just by file content , independent from filename . searches for files with same size and then compares contents by md5 checksums. options -diffdirs list only duplicates residing in different root directories. this option requires that you specify at least two dirs after -dir. -listorg list all original filenames , leave out any duplicate filenames. -minsize=n compare only files with size &gt;= n. examples for n are : 5m = 5000000 bytes ( 5 mbytes ) 100k = 100000 bytes ( 5 kbytes ) 1M = 1048576 bytes ( 2&lt;&lt;20 bytes ) 9000b = 9000 bytes command chaining - by default , this command passes the names of found duplicate files to the next command . - option -listorg does the opposite : it passes only original filenames , but no duplicates , to the next chain command . NOTE : if identical files are @ @ @ @ @ @ @ @ @ @ " or " duplicate " is currently based on the order in the file system : the file found first is listed as " original " . check carefully if this is what you think , before cleaning up any duplicates . web LONG ... dupfind . find all duplicates within the current directory tree . sfk dupfind -dir docs1 docs2 docs3 find all dups across and within the given directories. sfk dupfind -diffdir -dir docs1 docs2 docs3 find dups between docs1/docs2 , docs2/docs3 , docs1/docs3 , but does NOT list dups within the same root directory . sfk dupfind docs . doc +del find all duplicate . doc files , within the docs directory tree , and delete them . sfk dupfind -listorg docs . doc +run " copy $file docs2 " copy all . doc files from docs to docs2 , but leave out any duplicate files . sfk dupfind -dir pic1 -dir pic2 -dir pic3 find duplicates across three different directory trees . specifying multiple -dirs is also a way of influencing the result order ; if a file is found both in pic1 and pic3 , @ @ @ @ @ @ @ @ @ @ the other one as the duplicate . sfk sel -dir pic1 pic2 pic3 -file . jpg +dup -minsize=1m similar to the above , this example uses command chaining : list all . jpg files from the pic directories , then pass this to the dupfind command , also filtering by size . <p> SFK is a free open source command line tool that runs instantly without installation . Get sfk.exe from the zip package and use it ( binaries for Windows , Linux and Mac OS/X are included ) . <p> Read about all SFK functions , including a 60 page tutorial with detailed example scripts , in the 5 Dollar Mobile PDF optimized for your Smartphone ! 
@@120536041 @9536041/ <p> Depeche View is a high speed text search application that can search TAB separated database exports from databases or spreadsheet applications in realtime . <p> It allows to search words as you type , or by clicking on words already present on screen , producing result lists instantly . <p> A typical scenario is to check address data for correctness . <p> In the screenshot to the right , a database of zip codes , or postal codes , taken from geonames.org was loaded with Depeche View Pro . The database provides country code , postal code , place name , state , county and community as tab separated columns . <p> I press CONTROL+SHIFT+TAB in Depeche View to select a large tab size of 20 , for a better display of the columns . <p> I right click on the button to activate AutoFilter mode . This means : whenever I type a word , the tool will present a list of only the text lines containing that word ( a filtered view ) . <p> Now let 's type , for example , " Washington " @ @ @ @ @ @ @ @ @ @ containting that word . But actually I meant the city Washington , not every city within a state , county or province named Washington . <p> So I have to restrict my search to the third column of the database , as this is the city name . This is done by typing : <p> COL3 washington . <p> This way , I get only 358 hits . But still I get city names like Mount Washington , or Fort Washington . I want records with the whole 3rd column containting only Washington , and nothing else . Furthermore , it should be in the District Of Columbia only . Finally , I type : <p> COL3FULL washington COL5FULL DC <p> and get all zip codes from exactly that city . <p> As you can see , the main principle of Depeche View is simplicity . It does NOT use complicated regular expressions , but plain English search operators like AND , OR , NOT , or COL for column . <p> Furthermore Depeche View allows to search words by a single click on a word , either in the @ @ @ @ @ @ @ @ @ @ different window . This allows high speed jumping between different table contents . <p> Another major feature is clipboard automation : let Depeche View run in parallel to your spreadsheet application , and whenever you copy a word into the clipboard , let Depeche View run an automated search in it 's text data . <p> This and more can be tried immediately by downloading the free Depeche View Pro Demo . <h> Try Depeche View now ! <p> download the free 30 days trial installer , load up to 5000 text files , and experience all professional features like instant text editing , loading of . zip file contents , search auto suggest , clipboard loading , clipboard automation and much more . <p> or download the Freeware edition Depeche View Lite , allowing to view and search up to 100 text files in realtime. 
@@120536043 @9536043/ <p> The same applies for phrase search : keep left button pressed , then click on " Foo " and move the mouse over to " candy " . A phrase like " FooController : : testBar ( char *pszCandy " will be searched immediately , leaving the filtered view . <p> To repeat , since Release 1.5.3 Depeche View automatically presents a Filtered View whenever something is searched . If you want to disable this , you may right click on the filter button , to enter First Result Mode . In that mode , every search jumps straight to the first result , no matter in what file . To reactivate automatic filtering , right click on the filter button again . <p> Within First Result Mode , you may get a Filtered View temporarily anytime by pressing F4 or left clicking on the filter button . <p> Depeche View is a high speed text search tool for Windows and Linux ( WINE ) . Download the free Lite Edition here , or the 30 days Pro Demo here . Depeche View Lite requires no installation . @ @ @ @ @ @ @ @ @ @ text files of a folder instantly in one window . <p> snapshot with 8254 files loaded . the word " interface " was found 5690 times . 
@@120536044 @9536044/ <p> sfk version filenamesfk ver -own print version of a binary file , or of sfk itself . this function can be used : 1 . with binary files containing a portable version string : LONG ... File Knife , date=Aug 2 2008 , info=major rework$0 2. with windows binaries , where only file version and bitsize are extracted , and shown with the file modification time . if a product version is found that differs from the file version it is shown in the info field . version string fields : 2 *name short name , usually similar to the executable name 3 type the type of edition , e.g. base or extended 4 *os operating system , e.g. windows , linux-lib6 , linux-lib5 5 *vernum version number , any number of values separated by dots 6 fix fix level , e.g. a revision or service pack number 7 *title long , descriptive name , as printed in a help text 8 *date release or compile date 9 info additional infos or remarks , free text string fields marked with " * " are mandatory for a valid @ @ @ @ @ @ @ @ @ @ , or be empty like " , fix= , " . if found , contents are printed TAB-separated , after the filename , therefore the numbers given above are output column numbers , not the location in the input string ( which is random anyway ) . options -number just print the full version number , combining vernum and fix to a dotted string . can not be used with -own. -verbose tells a warning if file(s) contain no version . -windows compact display of file , os , version and filetime which is all that 's shown for windows binaries. aliasessfk winver - same as sfk ver -win to primarily list windows file version infos. see alsosfk require - check if a required version is used . web LONG ... ver dview.exe print the version of a Depeche View executable. sfk ver -own print sfk 's version . sfk ver . print sfk 's version ( quickest ) . sfk ver . . exe show the version of all . exe files within the current folder and all sub folders . sfk ver -nosub . . exe +filt -ssep @ @ @ @ @ @ @ @ @ @ exe files of the current dir for versions , reformatting the output , with a 20 chars filename limit . version embedding example for C/C++ programsAdd to your source code : #define SOFTWAREVERSION 101 // meaning 1.01 #define OSSHORTNAME " linux " // or " windows " , " mac " #define STRINGIFY(x) #x #define TOSTRING(x) STRINGIFY(x) #define SOFTWAREVERTEXT **25;3774;TOOLONG static const char *pGlblVersionText = " $version:name=footool , vernum= " SOFTWAREVERTEXT " , " " title=The Foo Bar Tool , " " os= " OSSHORTNAME " , " " date= " DATE " " TIME " $0 " ; void printHelpText() // NOTE : this dummy operation is required with some compilers // to keep pGlblVersionText from being stripped by the linker , // as it is n't used anywhere within the code . printf ( " %c " , *pGlblVersionText ) ; // ... ( print actual help text ) After compile , extract version like : sfk version footool.exe Example output : footool.exe footool linux 101 The Foo Bar Tool Apr 20 2013 08:58:40 217463 @qwx1077463 
@@120536045 @9536045/ <p> Depeche View loads all C++ source code files ( . cpp/.hpp etc. ) from a directory tree , showing the code lines from all files within a single window . This allows high speed research across thousands of source files . <p> Example : searching the word " class " across 790 C++ header files . <p> Search words as you type , or by clicking on them . Fly through search results by the turn of your mousewheel . Copy text , and create bookmarks with the same ease . If you have to read through many small ASCII text files , e.g. source code , this tool allows text analysis at extreme speeds . <p> For example , to search a word , forget about opening a dialogue , setting options , clicking through results lists to open one result file after another . No , just type the word - and land within the first matching line in the first matching file , instantly . Then , if you see another word of interest , do n't even type it - click on it ! @ @ @ @ @ @ @ @ @ @ for this word , instantly , no matter in what file . <p> By default , you jump from result to result in the normal text . Even more efficient is the filtered view : click on the large " F " button at the right bottom to show only the text lines containing the search result . <p> One step more extreme is the Auto Filter : by right-clicking on the " F " button , it turns into " A " , as in the example at the top . Now , whenever you type a word , filtering is activated instantly , showing only the result lines . Now , to read a text part of interest , just click into one of the result lines . In the example above , we click on " class nsIContentSerializer " , so this text area is unfolded : 
@@120536046 @9536046/ <p> sfk tolog -helpsfk tonetlog server:portport Send text output of a command to terminal , and/or append it to a log file , and/or send it to a network text viewer . The log target(s) can be specified in the following ways : 1 . by defining an environment variable : set **26;3801;TOOLONG , rawset **26;3829;TOOLONG SFKLOGTO=term where targets can be combined like : set SFKLOGTO=term , file:log.txt , net , duplex 2. by using tonetlog to force sending by network . in that case , a hostname and port can be specified as parameters . the default is to send to localhost . If no log target is specified all text goes to terminal . A recommended GUI tool to view and filter network text is Depeche View . Type sfk getdv to download , then run the tool by dview -net for instant net text display . It runs with Windows , and on Linux/Mac using WINE . parameters ( with tonetlog only ) server IP or name of target machine to send text to . port target port , default is 21323 ( SFK UDP Text @ @ @ @ @ @ @ @ @ @ server : " . options -help print this help text ( same as " sfk netlog " ) . -duplex request a reply for each message sent . much slower , but it is made sure that the receiver actually receives all text , which is not sure without -duplex. -timeout=n with -duplex : time to wait for a reply . default is 1000 msec. -delay=n if not using -duplex then wait so many msec after each message sent ( default is 10 ) . delay is required with longer text as receiver may fail to cache all messages . -raw send raw UDP text without sfktxt header . can not be combined with -duplex. -toiso=c or just -iso converts utf8 to iso-8859-1 with default character c for non-8bit codes . -nolf do not append LF after single line text . -usecr append CR instead of LF after single line text . -clear clear target log. can not be used with -raw. -verbose tell log target if taken from environment . -recsize=n UDP max message size , default is 1000 bytes . SFKLOGTO accepted fields LONG ... Send And Forget @ @ @ @ @ @ @ @ @ @ without checkingif it arrives at receiver . This is the way that plain UDP works , and it makes sense for scripts that shall NOT slow down or even stop just because the receiver is too slow , or not present at all . However , it is NOT guaranteed that all text arrivesin complete , or in the same order as sent . If text is lost you may increment the -delay , or use the -duplex option . With duplex , however , non listening or slow receivers will cause delays and error messages and may stop command execution . Working process example : remote compile scripts Type " sfk netlog -full " for example scripts how to run batch files on remote machines and view their output . see also sfk fromnet -help - print incoming network text sfk udpsend - send UDP text and binary messages sfk udpdump - print incoming raw UDP messages sfk append - append text output to a file sfk echo - for the list of possible colors sfk view - more about the text viewer program sfk samp cppnetlog - sample @ @ @ @ @ @ @ @ @ @ Java code for sending text web LONG ... echo " Redfoodef and Bluebardef " +tonetlog sends colored text to a viewer on the same machine . Red with big ' R ' sends bright color , ' r'ed sends dark . Type sfk getdv then dview -net to download and run the Depeche View network text viewer tool . dir sfk tonetlog 192.168.1.100 send output of a folder listing to machine .100 set SFKLOGTO=term , net:192.168.1.100cl mysrc.c 2&gt;&amp;1 sfk tolog sends output of a command " gcc " as UDP text both to terminal and to a text viewer running on .100 set SFKLOGTO=term , net , duplex , timeout:3000cl mysrc.c 2&gt;&amp;1 sfk tolog similar to above , but sends output to a viewer on the local machine , asking for receipts within 3 seconds . set LONG ... list mydir +tolog append filename list of folder mydir to log1.txt and send it as raw network text to machine .30 port 5000. dview -net:3000 , ip runs dview on port 3000 with sender ip display . sfk tail -f mylog.txt +tonetlog .229:3000 +loop whenever mylog.txt changes , send changed text @ @ @ @ @ @ @ @ @ @ subnet on port 3000. source code examplesHow to send network text in C++How to send network text in Java 217463 @qwx1077463 
@@120536047 @9536047/ <p> Depeche View loads all text files from a folder , showing them all in a single window , as if they were one large SuperText . <p> And this single window can be duplicated , so typically a Depeche View user has two or three views open side by side , with every view providing access to the same SuperText - a unique high speed , two dimensional access scheme completely different to any other text editor or IDE . <p> This allows , for example , to edit text in one file , and browse over the same , or other , text files in parallel within another view . <p> Depeche View Pro comes with even more streamline editing features like Auto Insert and Repeat Edit , saving you from endless CONTROL+C / CONTROL+V sequences required by many other editors . <p> Download the Pro Demo and find out yourself ! <h> Try Depeche View now ! <p> download the free 30 days trial installer , load up to 5000 text files , and experience all professional features like instant text editing , loading of . @ @ @ @ @ @ @ @ @ @ , clipboard automation and much more . <p> or download the Freeware edition Depeche View Lite , allowing to view and search up to 100 text files in realtime. 
@@120536048 @9536048/ <p> sfk general options reference : Please note : some of these options are supported only by some commands . -var insert SFK variables by using # ( varname ) . type this option directly after " sfk " to use it globally with all commands in a chain or script . to print " # ( " literally then escape it like ## ( -upat unix compatible file or text selection and patterns . allows to use -subdir : /tmp instead of ! tmp , filter -:foo instead of - ! foo and run " #file " instead of " $file " , to create unified . sh batch files for Windows and Linux. -upat2 same as -upat but also support wildcard % instead of * you may also set this by an environment variable like : set SFKCONFIG=upat2 -nosub or -norec does not include subdirectories ( subfolders ) . processing of subdirs is DEFAULT with most commands , therefore you must specify -nosub to switch it off . -withsub include subdirs. is DEFAULT with most commands . -verbose print additional infos while running a command . helpful @ @ @ @ @ @ @ @ @ @ some commands support -verbose. try also -verbose=2. -nofollow or -nofo does not follow symbolic directory links . this option may NOT work with older Linux versions , esp . those needing the " lib5 " binary version of sfk. -quiet reduce output on some commands . e.g. the find command will not display the " scan " status info while searching files . -quiet=2 reduce output even more on some commands . -memcheck check memory list at the end of every command to detect overwrites. reduces performance . -debug print extra program flow infos to track errors . also activates -memcheck under Windows . -nohead no not list header/trailer info on some commands : the run cmd will not tell " simulating " even if it 's in simulation mode . -case activate case sensitive text comparison with some commands . most text processing commands are case-insensitive by default . filename comparison is always case insensitive. -hidden include hidden and system files . -nohidden exclude hidden and system files . -yes fully execute the command . some commands like " run " are running in simulation mode by default , @ @ @ @ @ @ @ @ @ @ you 're unsure which files and dirs to select . as soon as you add -yes , however , everything is fully executed . -minsize=s select only files &gt;= size , like 10b or 100k -maxsize=s select only files &lt;= size , like 10m or 4g b=bytes k=kbytes m=megabytes g=gigabytes=109 bytes K=210 bytes M=220 bytes G=230 bytes -weblimit=n change web access download limit to n mbytes , with functions like sfk web , filter , xex. default is 10 mb. you may also set SFKCONFIG=weblimit:20 -webtimeout=n web access timeout in msec. default is 10000. you may also set **25;3857;TOOLONG -headers print http headers with commands accessing the web . -textfiles process only text files , no binaries. -text is the same , but this may interfere with some command 's local -text option . text/binary detection only checks the file 's first 4 kbytes. -binfiles process only binary files . -bin is the same , but this may interfere with some command 's local -bin option . -umlauts with binary-to-text conversion , include german characters . -nocol disable all colored output . important if your shell has a background color @ @ @ @ @ @ @ @ @ @ linux ) if the sfk output text must be processed further through pipelining , and needs to be stripped from the color escape sequences . -col switch on colored output . " sfk help colors " for more . -html dump sfk help text ( color control ) in html format . -html must be typed directly after " sfk " . -htmlpage the same , but include a header to view it in a browser. -sincedir or -sincedif/add/chg : compare directory tree against a reference tree , process only changed or added files . see " sfk list " for details . -tracesel give verbose infos why directories and files have been selected or excluded . -tracedirs lists only directories , -tracefiles lists only files . -since process only files changed on or after the supplied date/timestamp. " sfk list " for details . -before process only files changed before that date/timestamp. -flist fn or " -fl fn " reads list of filenames from file fn. -spat activates interpretation of slash patterns : t=TAB q= " r=CR n=LF = xnn=any char w/hex code nn with some commands like replace @ @ @ @ @ @ @ @ @ @ of wildcards * and ? and slash patterns , if they were activated previously . -nospat disables only slash patterns . -nocconv when printing output to the windows console , sfk tries to convert umlaut and accent characters to display them correctly with codepage 850. set -nocconv to disable this . whenever output is redirected to file , no conversion is done . -cconv force codepage conversions : if command output is redirected to a file , codepage conversion is disabled by default . use this option to activate , e.g. when post-processing sfk run output which produced filename lists . -noipex disable automatic IP expansion with some commands . -arc read contents of well known zip , tar.gz and tar.bz2 archives as deep as possible , including nested archives . well known archives must have one of these extensions : . zip . jar . ear . war . aar . xpi . tar . tar.gz . tar.bz2 . tgz . gz . bz2 . odt . ods . odp . odg . odc . ott . ots . otp . otg to include further extensions , read below @ @ @ @ @ @ @ @ @ @ only the first 1000 bytes of every archive entry . listing of contents is not limited . type " sfk help xe " for all details and restrictions . -xarc read contents of any zip file , regardless of file extension , and tar.gz and tar.bz2 files . reads the first bytes of every file and will therefore perform slower then -arc. -wchar activate EXPERIMENTAL utf-16 ( ucs-2 , wide char ) decoding , allowing sfk find or filter to search text in utf-16 files . should not be used when ( re ) writing files . get more infos by typing " sfk help unicode " . -to mask specify where to write output files with some commands . mask supports $file , $path , $base , $ext and more , like -to outdir$base-modified. $ext say " sfk run " for a list of possible keywords . -tofile x specify a single output filename , which is taken as is and not checked for any $ patterns . -tomake . ext select only files that have no , or an older , counterpart file with extension . ext in @ @ @ @ @ @ @ @ @ @ have no or an older counterpart file in outdir with extension . ext. see " sfk run " for example : . wav to . mp3 conversion -tmpdir x set directory x as temporary file directory . default is to use the path specified by TEMP or TMP env variable . -showtmp tell verbosely which temporary files are created . -keeptmp do not delete the temporary files , if possible . -nowarn and -noerr , -nonote disable warn , error and note messages . -memlimit=n set the caching memory limit to n mbytes ( default=300 ) . used if a function needs to load whole files into memory . if zip etc. archive processing is very slow , it may be caused by a cache overflow . try to increase the -memlimit then . if you think sfk uses too much memory while processing files , try to reduce -memlimit ( values below 200 are not recommended ) . you may also set SFKCONFIG ( see end of this text ) . -cachestat tell amount of memory used by archive file cache . -nocache disable the disk cache ( for @ @ @ @ @ @ @ @ @ @ program end . -noesckey disable stop by escape key . ( windows only ) shell return code handling and error processing : -showrc print sfk return code at program end . may not print anything in case of fatal errors , like wrong syntax ( usually rc 9 ) . -exterr in case of operating system related errors like file access , prints extended error information , if available . -waitonerr wait for user input on every error . -waitonend wait for user input at program end . -stoponerr stop directory tree processing on first unreadable file . default is to process as many files as possible , skipping unreadable files and directories. -rcfromerr some commands like filter , find , hexfind tell by shell rc that something was found . by default , skipped errors like unreadable files do NOT change this rc. with -rcfromerr , skipped errors do override the resulting shell rc. -echoonerr echo whole command to stderr when an error occurs . see also the SFKCONFIG setting " echoonstart " below . to experiment with the above options , try " sfk errortest " . command @ @ @ @ @ @ @ @ @ @ many options have an effect only locally with the command where they are specified , e.g. in sfk filt x.txt -case -high red FooCase +filt -high blue TheBar the " -case " is valid only for the first filter command . but the following options can also be used globally , if specified directly after " sfk " : -nohead -noinfo -nofile -case -literal -spat for example , in sfk -case filt x.txt -high red FooCase +filt -high blue TheBar the " -case " is valid for ALL commands in the command chain . environment configuration:set LONG ... columns : sfk ( for windows ) tries to autodetect the no. of console columns , but you may also set this value through this config parm. active-file-age:n some functions need to tell if a file is ' recently edited ' or rather old and inactive . by default , files &gt; 30 days of age are considered non-active. reconfigure the no. of days threshold here . memlimit : set memory limit to n mbytes. echoonstart : echo the whole sfk command on start , to stderr. echoonerr : echo the whole @ @ @ @ @ @ @ @ @ @ for temporary files , used by some commands . e.g. set SFKCONFIG=tmpdir:d : tmp , memlimit:500 set SFKZIPEXT= " . foo . bar . myext " set additional , user defined zip file extensions . in this example , files ending with . foo , . bar or . myext are also treated as zip files . for the list of default extensions , look above at the -arc option . 217463 @qwx1077463 
@@120536049 @9536049/ <p> capability of your firmware running on .188 to rename binary.newto it 's own binary name and then to restart itself . <p> The firmware on .188 may send trace outputs via network to some trace tool written by your company . Ideally this trace tool contains an option to forward text as plain UDP to any other port , so you can read the firmware traces also directly in Depeche View by Network Text . <p> Appendix : SFK/XMake batch files <p> xmake.bat : called manually on the command line , or by a script from DView Pro 
@@120536051 @9536051/ <p> There are many free text editors around , and if you do n't know which one to try first , have a look at notepad++ . <p> the free notepad++ , available for download here ( take the . bin.zip ) , provides essential features like a straight GUI , macro recording , syntax highlighting and vertical block copying ( through alt+mouse ) . You can choose between an installer version or the . bin.zip , which contains an executable without install effort , perfect for every usb stick . 
@@120536052 @9536052/ <p> sfk run " your command $file $relfile ... " -yes -nohead -quiet ... run a self-defined command on every file- or directory name . within your command string , you may specify : $file - insert full filename , including path . $quotfile or $qfile - just as $file , but with quotes " " around . $relfile or $qrelfile - insert relative filename , without path . $base or $qbase - the relative base filename , without extension . $ext or $qext - filename extension . foo.bar.txt has extension . txt. $path or $qpath - the path ( directory ) without filename . $ufile or $upath - force unix style slashes " / " on output . $qufile or $qupath - unix slashes and quotes combined . $since or $qsince - with option -sincediff : the reference file name . $text or $qtext - one record of input text , similar to $file. $targ or $qtarg - with -tomake : target filename . always prefer ' q ' forms over non-quoted forms : as soon as there is a filename containing blanks , e.g. X : the @ @ @ @ @ @ @ @ @ @ you have to manually insert " or q escaped quotes ( see 3rd example below ) . you may also use $quotrelfile , $quotsince , $quottext for greater clarity . if you supply only $path expressions , only directories will be processed . on single word chain commands like " +run vi " , " $qfile " is added automatically . further pattern support : -spat activates slash patterns like t q xnn etc. -upat unix style syntax using # instead of $ options -yes really execute . default is just to simulate what would be done . -nohead does not display the simulating : info text . -noinfo unless you use $text , sfk checks the input filenames 1 . if they contain blanks , but no quotes are given within command . 2. if they seem to use the wrong path separator character . in both cases , a reminder is printed . if you know that your command needs no changes , add -noinfo or use $text instead of $file. -quiet does not echo the commands before execution . -relnames strips the root directory names from filenames. @ @ @ @ @ @ @ @ @ @ process a directory name list from stdin. on stdin , ' # ' remark lines and empty lines are skipped . note : " sfk.exe &lt;list.txt " supports only 4 KB for list.txt under windows . " type list.txt sfk.exe " supports unlimited stream length . -nofilenames with chaining , does not create " : file " name records . -printcmd print the full command which is executed to console . -stoprc=n stop processing if a command returns return code &gt;= n. command string format with option -spat , slashpatterns like t q xnn are supported . due to syntax limitations of the command shell , it may help - to use q instead of " ( avoids quote miscounting at shell ) - to use x26 instead of &amp; ( if ampersand is behaving unexpected ) quoted multi line parameters are supported in scripts using parm trim . type " sfk script " for details . temporary or permanent output files if run output is post-processed by command chaining , e.g. run ... +filter , sfk creates temporary files to collect the output . by default , these files @ @ @ @ @ @ @ @ @ @ options " for more on this . specify -to targetdir$file to write command output into a permanent target fileset. required directories are created automatically . -to accepts the same mask as run itself , e.g. -to " mydir$path$base.tmp " by default , standard output AND standard error stream are written to file . add 2&gt;nul to your command to strip the error stream . command chaining notes sfk run " ... $path ... " +nextcmd : will pass directories , not filenames. sfk run ... -to tmp$file +nextcmd : will pass output filenames , not input . sfk run ... +run : will pass unchanged input filename list . see alsosfk perline run sfk command(s) per text input line . sfk runloop run commands using a loop counter . web LONG ... run " attrib -R $qfile " -quiet **25;3884;TOOLONG -yes removes readonly attribute on all files within BarDriver sfk run " &lt;img src=$quottext&gt; " -dir . -file . jpg -nohead &gt;index.html create html-style image list of all jpegs ( using just simulation ) . note that option -nohead removes the simulating : info text lines . type dirlist.txt sfk @ @ @ @ @ @ @ @ @ @ z : $path " /I /D " -yes update-copy all directories from dirlist.txt from x : to z : sfk run " diff oldsrc$file newsrc$file " -relnames -sincediff oldsrc newsrc compare directories , run " diff " on all files with different content . sfk run " diff $qsince $qfile " -sincediff oldsrc newsrc same as above , only shorter and safer ( including quotes around filenames ) . sfk run " zip update.zip $qfile " -since 20070131 . . java . jsp collect . java and . jsp files added/changed since 31-Jan-2007 into a zip file . sfk list testfiles . txt +run vi open all . txt files in vi . $qfile is added automatically . sfk sel . . avi +run " ffmpeg -i $file -f image -t .02 thumbs$base-%d.jpg " extract first image from all . avi movies , videos using ffmpeg. sfk sel -since 30m . . cpp . hpp +run -printcmd " rm $path/$base.o " -yes delete all object files of source codes changed in the last 30 minutes sfk echo -lines 100 101 102 +run " showstatus.bat $text " run showstatus.bat three times @ @ @ @ @ @ @ @ @ @ soundlib . wav -tomake " outdir$base.mp3 " +run " ffmpeg -i $qfile $qtarg " for all . wav files within soundlib that have no , or an older , . mp3 file within outdir , run command ffmpeg to convert from . wav to . mp3 . Do n't try to execute a full run statement in ONE GO . Almost certainly , something will go wrong ( wrong files selected , syntax error in the command itself ) , and you end up with many wrong output files . Instead , use THREE STEPS : 1 . find the correct file set , by some trial and error:sfk run " echo $quotfile " mydir This will simply show all filenames from " mydir " . no command is executed on those files , so nothing bad is happening . almost certainly , you notice that too many files are included . Maybe you have to add " -nosub " to exclude subfolders , or add more details about your file selection , like : sfk run " echo $quotfile " mydir . jpg . jpeg which reduces the file @ @ @ @ @ @ @ @ @ @ " mydir " . 2 . Replace " echo " by the actual command , still running in simulation mode.sfk run " copy $quotfile " d : picsmall$base.jpg " " mydir . jpg . jpeg This simulates a copy of all images from mydir to d : pic , prefixing their name by " small " , and ensuring that all target file extensions are only " . jpg " . 3 . When you 're satisfied with the simulation output , add " -yes " . Another example : list the methods of all . class files in a directory tree . This time , we take a different approach , starting with " sfk list " . To list all . class files in the directory tree " pack " , we say : sfk list pack . class This may result in an output like this : packLemon.class packCurry.class packYet.class packAnother.class packOne.class Our goal is to turn these lines into commands of the form : javap pack.classname So how do we achieve this ? First , we have to change the format of the output lines , @ @ @ @ @ @ @ @ @ @ pack . class +filter -rep //. / -rep /. class// This replaces all slashes " " by a dot " . " , and strips off the " . class " . Now the resulting output is : pack.Lemon pack.Curry pack.Yet pack.Another pack.One Finally , we pipe this into " run " : sfk list pack . class +filt -rep //. / -rep /. class// +run " javap $file " The resulting output - a simulated preview - is now : javap " pack.Lemon " javap " pack.Curry " javap " pack.Yet " javap " pack.Another " javap " pack.One " Finally , run the command again , this time adding " -yes " : sfk list pack . class +filt -rep //. / -rep /. class// +run " javap $file " -yes Which will result in the interface listings of all classes . 217463 @qwx1077463 
@@120536053 @9536053/ <h> How to search in text files for words ignoring special characters . <p> How to ignore accents and German umlauts , or even different punctuation like slashes , dots and quotes , with a Freeware tool for Windows and Linux/Mac . <p> After download , run the tool by double click , then click on Open and select a directory from which you want to load all text files . All ASCII text files from that folder will be loaded , like all . txt , . ini , . html , readme or source code files . accent insensitive search When searching through text in European languages , containing sometimes helpful to treat those characters like a simple " a " . This can be done by activating accent insensitive search : 1 . Select " mode / ignore accents " . 2. now for example , type a German word like " blatt " , ( finding both the singular and plural forms of the word ) . Accent insensitive search is supported only on windows systems using - Codepage 1252 ( Western Europe ) - @ @ @ @ @ @ @ @ @ @ codepage your system is using , click on " Mode " then hoover the mouse over " ignore accents " . If DView says " not supported " then accent insensitive search may work only with a few characters , or none at all . punctuation insensitive search Select " mode / ignore punctuation " for puncuation insensitive search : - slashes and / are treated as the same , helpful for text with mixed Windows/Unix filename formats . - all quotations characters are treated as the same : in detail the ISO 8859-1 character codes 0x22 , 0x27 , 0x60 , 0x82 , 0x84 , 0x8B , 0x91 , 0x92 , 0x93 , 0x94 , 0x9B , 0xB4 , 0xBB. - , and . are treated as the same , helpful for text with mixed number formats . Punctuation insensitive search is supported only on windows systems using the code pages : - Codepage 1252 ( Western Europe ) - Codepage 1250 ( Central Europe ) to find out what codepage your system is using , click on " Mode " then hoover the mouse over " ignore punctuation @ @ @ @ @ @ @ @ @ @ punctuation insensitive search may work only with a few characters , or none at all . 
@@120536057 @9536057/ <p> A bookmark is created , and shown at the right top . In a bookmark , Depeche View remembers : <p> the selected phrase , as the bookmark " title " . <p> the full line of the selected phrase . i.e. internally , dview also remembers the whole line from " long " until " ) " , to allow safer bookmark searches later . <p> the filename in which the bookmark was defined . <p> Now you can jump back to the remembered text location anytime just by clicking on the bookmark . <p> Let 's have another example text : void FooController : : importantSubFunc() printf ( " foo candy delivery just startedn " ) ; Just as above , bookmark the phrase from " Foo " until " Func " . Now you have two bookmarks : FooController : : testBar ( char *pszCandy FooController : : importantSubFunc Actually , " importantSubFunc " is a function called by " testBar " . To make this dependency clearer , it would be good if the second bookmarks would be indented , like : FooController : @ @ @ @ @ @ @ @ @ @ With Depeche View Pro , you can use up to 9 bookmark sets in parallel on the same directory . To switch between them , click on the bookmark set selectors showing number 1 to 9 , just above the actual bookmarks . Alternatively , press CTRL+1 to CTRL+9 for quick switching . <p> Depeche View is a high speed text search tool for Windows and Linux ( WINE ) . Download the free Lite Edition here , or the 30 days Pro Demo here . Depeche View Lite requires no installation . Just run the tool , then load and search all text files of a folder instantly in one window . <p> snapshot with 8254 files loaded . the word " interface " was found 5690 times . 
@@120536059 @9536059/ <p> sfk entab=tabsize dir ext1 ext2 ... replace groups of spaces by tabs within file(s). options -to outmask do not overwrite original files , but write to output files according to outmask , e.g. -to tmp$path$base. $ext or -to tmp$file -yes if files are selected , really ( re ) write them . without -yes , entab is only simulated . -memlimit=n process files with up to n mbytes ( default=300 ) . -nowarn do not tell about skipped or unreadable files . see alsosfk scantab list files containing TAB characters . sfk help opt how to change the memlimit permanently . sfk view a text file viewer that can show all TAB characters in blue by pressing CTRL+T. web LONG ... entab=3 sources . cpp . hpp replace 3 spaces each by a TAB character in all . cpp and . hpp files within folder sources . sfk entab=3 singleFileName.txt the same , but only in a single file . 217463 @qwx1077463 
@@120536061 @9536061/ <p> just like fast image loading , fast sound loading uses compression and background loading . bundling and loading on demand are so far not covered by d3caster , more about that later . <p> compression <p> In the origin , sound consists of . wav files , in the case of d3caster encoded with 32 kHz , 16 bits . All sounds together make up about 5 MBytes of data - far too much to load them in their original format . <p> The new state-of-the-art sound compression format is Ogg Vorbis . Just like being made for online games , it provides a great sound quality AND maximum compression . I researched what Java implementations are available , and concluded for myself that the best and easiest implementation is JOrbis from JCraft , also because their package contained a nice sample source , the JOrbisPlayer , showing quick and easy how the stuff is used . Still , it took me half a day to turn this into glue code bringing JOrbis loading and the demo game 's sound system together . The result can be found @ @ @ @ @ @ @ @ @ @ create . ogg from . wav , there are quite a number of free tools available . I 'm using OggEnc . For example , the command " oggenc --resample 32000 -q0 %1. wav " encodes a . wav of any sample rate to an . ogg with 32 kHz , at maximum compression ( q0 ) , which still provides great sound quality . <p> background loading <p> Again , the idea is simple but effective : from a total of 17 sounds , we only load the most important 4 ones immediately ( -&gt; loadSounds() ) , and the others after the game has started , step by step ( -&gt; stepSoundLoading() ) . <p> There is probably some room left for optimization : stepSoundLoading() is n't done in a separate thread , and the importand sounds are n't bundled within a JAR . Nevertheless , as it is , the supplied demo game loads fast enough . <p> compatible ? <p> Of course , you could now keep it that way - just supply a game for Java 2 sound , and that 's it . However @ @ @ @ @ @ @ @ @ @ NOT speak Java JDK 2 . Within these browsers , sound is coded completely different , using Sun 's Audioclip classes . I wo n't go into detail about this , it 's all done in d3sound1.java , so you may check the source directly . <p> But when do we use Java 2 version , and when Java 1 ? At first , I compiled two different engines , leading two 2 different binaries , installation directories , and startup html files . A painful and uncomfortable process . The final solution was to create an abstract interface , the d3soundsys , and to turn d3sound1 and d3sound2 into implementations of this interface . Now , in the main engine ( d3caster.java ) , we can simply try it : <p> An old Java JDK 1 will already fail at the statement " new d3sound2() " , as it wo n't be able to load Java 2 bytecode . But that 's no problem - in this case , the system simply falls through to use Java 1 sound . <p> As a result , with have an all-compatible @ @ @ @ @ @ @ @ @ @ running on . 
@@120536062 @9536062/ <h> How to load all text files from a directory , and subdirectories , matching givenfilename and directory name patterns <p> How to include or exclude files to load by name , extension , or sub directory name , with a Freeware tool for Windows and Linux/Mac . <p> After download , run the tool by double click , then click on Open and select a directory from which you want to load all text files . All ASCII text files from that folder will be loaded , like all . txt , . ini , . html , readme or source code files . how to load only specific file types By default , if you open or a directory in Depeche View , ALL text files from within that directory tree will be loaded . In many cases , this is too much . Especially when searching in a huge source code base , you may want to load all . java or . cpp files , but not every . xml or . tmp file . This can be achieved 1 . by the file loading @ @ @ @ @ @ @ @ @ @ the command line 3. or by creating fileset definitions . file loading filters and options dialog Click on the four-light button right next to " open " , or select Setup / Workspace . The file loading options dialog appears , which is basically self-explaining : hoover the mouse over any element , and read the local help text shown under " additional infos " . Short summary of the most important fields : - if you want to load ONLY files containing some word in their filename , enter the list under " load only from filenames " , separated by blanks . if you want to EXCLUDE files containing some word , list them prefixed by " ! " . for example : . cpp . hpp . java ! . tmp ! . bak ! . save loads foobar.cpp and goo.java but NOT foobar.bak - if you want to EXCLUDE subdirectories containing a word in the directory name , make a list of words prefixed by " ! " , e.g. ! tmp ! save excludes all files from " tmp " , " tmp1 " , @ @ @ @ @ @ @ @ @ @ examples Under Setup / Workspace , you can configure which files or sub folders to include while loading , and which not . File exclusion by filename : ! foo -&gt; exclude all files like *foo* ! foo -&gt; exclude starting with foo ! foo -&gt; exclude ending with foo ! foo -&gt; exclude exactly foo ! . foo -&gt; exclude extension foo File inclusion by filename : foo -&gt; include all files like *foo* foo -&gt; include starting with foo foo -&gt; include ending with foo foo -&gt; include exactly foo . foo . bar -&gt; select only . foo and . bar files Combined file mask example : . hpp . cpp ! bak ! save ! readme.hpp -&gt; load only . hpp and . cpp files , exclude for example foo-bak.cpp and files starting like save , exclude files called exactly readme.hpp Sub directory exclusion examples : ! foo -&gt; exclude subdirs like *foo* ! . foo -&gt; exclude with extension . foo ! foo -&gt; exclude starting with foo ! foo -&gt; exclude ending with foo ! foo -&gt; exclude exactly foo ! foobar -&gt; exclude @ @ @ @ @ @ @ @ @ @ anywhere Sub directory inclusion ( white listing ) examples : foo -&gt; include paths having *foo* foo -&gt; include paths having *foo foo -&gt; include paths having *foo foo -&gt; include paths exactly foo . foo -&gt; include with extension . foo foobar -&gt; include subdir combi Combined dir mask example : source include ! . svn ! tmp ! save -&gt; load only from sub folders having source in their name or which start like " include " , excluding all sub folders with extension . svn or starting like tmp or save . all command line options Depeche View uses the Swiss File Knife file selection syntax : - loads whole directory trees by default , i.e. includes sub directories without an extra option - does not require wildcards in most cases , as " * " is implied around every plain text word . i.e. " foo " by default means " *foo* " . - very flexible selection of dirs , subdirs , and files . short format : dview options singleDirName filePattern1 filePattern2 ... long format : dview options -dir mydir1 -file fpat1 ... -dir @ @ @ @ @ @ @ @ @ @ absolute startup window location and size -space ... set relative startup window location and size for details see display area size and location . -max start maximized , covering the whole desktop . -lean start with non maximized width , in isolated view mode ( without a master frame , without pull down menu ) . as long as there is no second window , the initial one can be maximized by F1. -noassist disable assistance mode popups. -clean disable assistance mode , and scrollbars in vertical tiling . -assist activate assistance mode . -edit Pro : if only a single file is loaded , enter edit mode . -isolated starts with isolated frame mode . you may also use " -iso " . -overscan starts with isolated overscan mode . may also use " -over " . -verbose during startup , tell in the message log in detail which root dirs , dir masks and file masks have actually been selected for loading . helpful to analyze why some files are loaded , and others not . the output may differ slightly from what you specified , for example @ @ @ @ @ @ @ @ @ @ you only supplied an " ! " exclusion , or " . zip " file masks may be converted into path masks ( i.e. , dir masks starting with " * " ) . -withsub load subdirectory contents ( default if not disabled by Setup ) . -nosub do not load subdirectory contents . -hidden also load all HIDDEN or SYSTEM files ( not default ) . helpful if you need to search through configuration files , for example of your web browser. -allbin also load all binary files ( extracting text parts ) . -wrap=n wrap long text lines at current screen width , or column n. -wrapbin=n wrap text extracted from binary files at column n. -arc Pro : load contents of . zip . jar . ear etc. archives and also . gz , . bz2 , . tar , . tar.gz and . tar.bz2 as deep as possible , including nested archives . -qarc Pro : quick load archives , load only archive entries at the top level , skipping nested archives . -since load only files changed since this timestamp , e.g. " 2006-01-31 12:15:59 @ @ @ @ @ @ @ @ @ @ since midnight of today 1d : changed since 1 day , i.e. not counting from midnight , but 24 hours into the past 5h , 30m , 10s : 5 hours , 30 minutes , 10 seconds . -before load files modified before that timestamp. -today short replacement for " -since today " . -usectime use creation time instead of modification time . may not be available on some filesystems. -sincedir compare against another directory , load files that have been added , have different time , or content . -sinceadd like -sincedir , load only added files . -sincedif like -sincedir , load only changed files . does not load files with diff. time but same content . does not load added files . -sincechg load files with different content , and added files . does not load files with diff. time but same content . -umlauts with binary-to-text conversion , include german characters . -flist fn or " -fl fn " reads list of filenames from file fn. -fileset x use a fileset definition . more on that below . -utf load also utf-16 ( ucs-2 , wide @ @ @ @ @ @ @ @ @ @ and will only extract plain ASCII text contents from those files . -memlimit=n set the caching memory limit to n mbytes ( default=300 ) . if zip etc. archive processing is very slow , it may be caused by a cache overflow . try to increase -memlimit then . details of filename / extension selection : - when specifying a filename pattern beginning with a dot " . " and no wildcard , only files with this extension will be selected . - otherwise the pattern is searched anywhere within the filename . to force a filename start comparison , say pattern ( with a slash ) . - filename means the relative filename , not directory or path name . command line file selection examples dview foodir . txt . hpp . cpp loads all . txt , . hpp and . cpp files from the directory tree foodir , including all subdirectories. this is the short file selection syntax , with ONE directory name , and MANY file patterns . dview -nosub -today foodir loads all text files from foodir that have been changed today , however excluding @ @ @ @ @ @ @ @ @ @ save ! . svn -file . txt loads all . txt files from the root directories foodir1 , foodir2 and foodir3 , except those in sub directories starting like " save " or having an . svn extension . dview -dir foodir1 -file . h . c -dir foodir2 -file . txt ! . tmp.txt loads all . h , . c and . txt files from foodir1 and all . txt files from foodir2 , however excluding all files from foodir2 ending with " . tmp.txt " . this is the long file selection syntax , supporting any number of directories and any number of file patterns . dview -arc -dir foo1.zip foo2.tar.bz2 Pro : loads all text files from foo1.zip and foo2.tar.bz2. note that archive files are treated as directories. by default , archive files embedded within the listed archive files are loaded as well . dview -arc -dir foo1.zip foo2.tar.bz2 -file . txt . js . cc Pro : loads . txt , . js and . cc files from the archives foo1.zip and foo2.tar.bz2. in this case , the same file filter is used for both @ @ @ @ @ @ @ @ @ @ -file . cpp Pro : load all . txt from foo1.zip , and all . cpp from foo2.tar.bz2. in this case , separate file filters are used per directory . Long -dir ... -file ... format further examples : to load from multiple root directories : -dir rootdir1 rootdir2 ... -file . cpp . hpp . txt ... to include or exclude contents of sub directories within the given root directories , use : wide sub dir selection syntax : -dir . -subdir ! foo -&gt; exclude subdirs like *foo* -dir . -subdir ! . foo -&gt; exclude with extension . foo -dir . -subdir ! foo -&gt; exclude starting with foo -dir . -subdir ! foo -&gt; exclude ending with foo -dir . -subdir ! foo -&gt; exclude exactly foo -dir . -subdir ! foobar -&gt; exclude subdir combi -dir . -subdir ! *. foo* -&gt; exclude with . foo anywhere -dir . -subdir foo -&gt; include paths having *foo* -dir . -subdir foo -&gt; include paths having *foo -dir . -subdir foo -&gt; include paths having *foo -dir . -subdir foo -&gt; include paths exactly foo -dir . @ @ @ @ @ @ @ @ @ @ . -subdir foobar -&gt; include subdir combi ... instead of -subdir , you may also type just -sub compact sub dir selection syntax : -dir . ! foo -&gt; exclude subdirs like *foo* -dir . ! . foo -&gt; exclude with extension . foo -dir . ! foo -&gt; exclude starting with foo -dir . ! foo -&gt; exclude ending with foo -dir . ! foo -&gt; exclude exactly foo -dir . ! foobar -&gt; exclude subdir combi -dir . ! *. foo* -&gt; exclude with . foo anywhere -dir . *foo* -&gt; include paths having *foo* -dir . *foo -&gt; include paths having *foo -dir . *foo -&gt; include paths having *foo -dir . *foo -&gt; include paths exactly foo -dir . *. foo -&gt; include with extension . foo -dir . *foobar -&gt; include subdir combi ... as you can see , when using the compact syntax , sub directory inclusion masks require a wildcard " * " in their name , to make sure they 're not interpreted as root directory names . In the Setup / workspace settings , " * " is not required around @ @ @ @ @ @ @ @ @ @ exclusion by filename : -file ! foo -&gt; exclude all files like *foo* -file ! foo -&gt; exclude starting with foo -file ! foo -&gt; exclude ending with foo -file ! foo -&gt; exclude exactly foo -file ! . foo -&gt; exclude extension foo inclusion by filename : -file foo -&gt; include all files like *foo* -file foo -&gt; include starting with foo -file foo -&gt; include ending with foo -file foo -&gt; include exactly foo -file . foo . bar -&gt; select . foo and . bar files Typical errors in command line file selection BAD : dview -arc foo1.zip foo2.tar.bz2 -&gt; this actually means : load all files having foo2.tar.bz2 in their name from foo1.zip , and it will not load anything . use " dview -arc -dir foo1.zip foo2.tar.bz2 " instead . BAD : dview -nosub -arc -dir foo1.zip -&gt; exclusion of subdirectories is not supported within archive files . however , if you want to disable the processing of archives embedded within archives , you may use " dview -qarc -dir foo1.zip " BAD : dview -arc -dir . *. xpi *mysrc.tar.bz2 -&gt; the intention is @ @ @ @ @ @ @ @ @ @ however , if many other archive files are present within the current directory " . " , dview will SCAN THEM ALL , searching for files embedded within ANY archive having " . xpi " or " mysrc.tar.bz2 " in their name . so , the command must be rewritten to list the exact names that should be loaded , like dview -arc -dir foo1.xpi foo2.xpi foo3.xpi mysrc.tar.bz2 Whenever in doubt , use option -verbose to see in the message log what DView really tries to load . defining filesets Another way is to define " file sets " , which are text files containing : - directory names to include or exclude - filename patterns or extensions to include or exclude example : -------- file mywork1.txt begin ---------- # within this directory tree -dir mysrcbaselib # take only . h . c . txt files -file . h . c . txt # within this directory tree -dir mysrcfoobank # exclude all save and tmp dirs ! save ! tmp # then take only . hpp and . cpp files -file . hpp . cpp # from this directory @ @ @ @ @ @ @ @ @ @ take all files except . bak and . tmp # and except names containing " old stuff " -file -all ! . bak ! . tmp " ! old stuff " -------- file mywork1.txt end ---------- As you may guess , lines having ' # ' as first character are remarks , and names containing blanks must be surrounded by double quotes " " . using workspace definitions from the command line So the above fileset defines 3 directories , and what to load and not to load from those directories . Now copy the above text into a file " mywork1.txt " , then run dview from the command line : dview -fileset mywork1.txt And dview will load the text files as defined in mywork1.txt . Even faster : produce a snapfile from the above fileset definition , which is a collection of text files , then load that at high speed . Find more on that under reducing load times . using workspace definitions when starting by icon You may also create a Depeche View Icon on the desktop , via the Icon button , then open the @ @ @ @ @ @ @ @ @ @ " field . For example , if dview is located in C : appbin , you may change it to C : appbindview.exe -fileset mywork1.txt Then , a double click onto that icon will load that workspace. bookmark filename definition with filesets When using filesets , what will be the bookmark filename ? Just as if you say " -dir mydir1 -dir mydir2 " on the commandline , the first directory tree will be taken to build the bookmark file base name , all others will be ignored . In the example -dir mysrcbaselib -file . h . c . txt ! . hpp ! . cpp -dir mysrcfoobank -file . hpp . cpp -dir mysrcformats -file -all ! . bak the bookmark filenames would be **32;3911;TOOLONG **32;3945;TOOLONG **32;3979;TOOLONG ... If you want to load bookmarks from somewhere else , read more here . using plain filename lists Sometimes you may want to load files whose names are listed in a simple text file , called a file list . This can be done by dview -flist names.txt loading text extracts from binary files By default , dview skips all @ @ @ @ @ @ @ @ @ @ to take a peek into binary files , e.g. to search through meta informations in ( smaller ) media files . To do so , you can - click on the load options button right next to " open " , then check " load text from binary files " . - OR : click " open / load text from a single file " , then select a single binary file . this way you do n't have to check the " load text from binary files " option . - OR : run dview from the command line , supplying a single binary file name - OR : run dview from the command line , with option " -allbin " and a directory name , e.g. dview -allbin mydir In all these cases , dview tries to identifiy readable text informations from binary files , which may or may not produce anything useful . loading hidden and system files Hidden files and directories are , as the name implies , invisible , so the directories do NOT appear in the Open dialogue , and their contents are NOT @ @ @ @ @ @ @ @ @ @ But sometimes it is helpful to load also hidden files . For example , if your Firefox browser behaves unexpected , it is very helpful to take a deeper look into its configuration files , especially " prefs.js " . But where are those files ? Under Windows XP , they are somewhere below C : Documents and **25;4013;TOOLONG DataMozillaFirefox ... But , to repeat , because " Application Data " can be a HIDDEN folder already , it may NOT appear within the Open dialogue . So try exactly these steps : 1 . click on the load options button right next to " Open " , check " include hidden and system files " , and close Setup . 2. select " open / load all text from a folder " . 3. click into the " folder " text entry field at the bottom . ( may not work under Linux , as the WINE dialog might be limited ) Now type MANUALLY : - C : documents and settings - then your userid and " " - then " application data " as soon as you @ @ @ @ @ @ @ @ @ @ you further directories within the hidden folder ! - now type " mozillafirefox " and finally press ENTER . so the whole path would be C : documents and **29;4040;TOOLONG data mozillafirefox 4. dview will load all config files of firefox. 5. type " prefs.js " into the PATH : field . Now you should see what the startup config of Firefox is . Another way : use dview from the command line The command dview -hidden -dir " C : documents and settings " " *firefox* " Does the following : - walk through all normal and hidden files within " C : documents and settings " , including all ( hidden ) subdirectories. - but load only files having " firefox " in their path . ( *firefox* is called a " path mask " in dview , identified by the wildcards. ) excluding subdirectory contents during load By default , if you select a folder through the Open button , dview loads the files from that folder and all its subdirectories . If you do NOT want to include subdirectory contents , - click on the load @ @ @ @ @ @ @ @ @ @ " include subdirectory contents " and close Setup . On the next Open or Append operation , subdirs will be excluded . When running dview from the command line , use option " -nosub " . 
@@120536067 @9536067/ <p> sfk run " your command $file $relfile ... " -yes -nohead -quiet ... run a self-defined command on every file- or directory name . within your command string , you may specify : $file - insert full filename , including path . $quotfile or $qfile - just as $file , but with quotes " " around . $relfile or $qrelfile - insert relative filename , without path . $base or $qbase - the relative base filename , without extension . $ext or $qext - filename extension . foo.bar.txt has extension . txt. $path or $qpath - the path ( directory ) without filename . $ufile or $upath - force unix style slashes " / " on output . $qufile or $qupath - unix slashes and quotes combined . $since or $qsince - with option -sincediff : the reference file name . $text or $qtext - one record of input text , similar to $file. $targ or $qtarg - with -tomake : target filename . always prefer ' q ' forms over non-quoted forms : as soon as there is a filename containing blanks , e.g. X : the @ @ @ @ @ @ @ @ @ @ you have to manually insert " or q escaped quotes ( see 3rd example below ) . you may also use $quotrelfile , $quotsince , $quottext for greater clarity . if you supply only $path expressions , only directories will be processed . on single word chain commands like " +run vi " , " $qfile " is added automatically . further pattern support : -spat activates slash patterns like t q xnn etc. -upat unix style syntax using # instead of $ options -yes really execute . default is just to simulate what would be done . -nohead does not display the simulating : info text . -noinfo unless you use $text , sfk checks the input filenames 1 . if they contain blanks , but no quotes are given within command . 2. if they seem to use the wrong path separator character . in both cases , a reminder is printed . if you know that your command needs no changes , add -noinfo or use $text instead of $file. -quiet does not echo the commands before execution . -relnames strips the root directory names from filenames. @ @ @ @ @ @ @ @ @ @ process a directory name list from stdin. on stdin , ' # ' remark lines and empty lines are skipped . note : " sfk.exe &lt;list.txt " supports only 4 KB for list.txt under windows . " type list.txt sfk.exe " supports unlimited stream length . -nofilenames with chaining , does not create " : file " name records . -printcmd print the full command which is executed to console . -stoprc=n stop processing if a command returns return code &gt;= n. command string format with option -spat , slashpatterns like t q xnn are supported . due to syntax limitations of the command shell , it may help - to use q instead of " ( avoids quote miscounting at shell ) - to use x26 instead of &amp; ( if ampersand is behaving unexpected ) quoted multi line parameters are supported in scripts using parm trim . type " sfk script " for details . temporary or permanent output files if run output is post-processed by command chaining , e.g. run ... +filter , sfk creates temporary files to collect the output . by default , these files @ @ @ @ @ @ @ @ @ @ options " for more on this . specify -to targetdir$file to write command output into a permanent target fileset. required directories are created automatically . -to accepts the same mask as run itself , e.g. -to " mydir$path$base.tmp " by default , standard output AND standard error stream are written to file . add 2&gt;nul to your command to strip the error stream . command chaining notes sfk run " ... $path ... " +nextcmd : will pass directories , not filenames. sfk run ... -to tmp$file +nextcmd : will pass output filenames , not input . sfk run ... +run : will pass unchanged input filename list . see alsosfk perline run sfk command(s) per text input line . sfk runloop run commands using a loop counter . web LONG ... run " attrib -R $qfile " -quiet **25;4071;TOOLONG -yes removes readonly attribute on all files within BarDriver sfk run " &lt;img src=$quottext&gt; " -dir . -file . jpg -nohead &gt;index.html create html-style image list of all jpegs ( using just simulation ) . note that option -nohead removes the simulating : info text lines . type dirlist.txt sfk @ @ @ @ @ @ @ @ @ @ z : $path " /I /D " -yes update-copy all directories from dirlist.txt from x : to z : sfk run " diff oldsrc$file newsrc$file " -relnames -sincediff oldsrc newsrc compare directories , run " diff " on all files with different content . sfk run " diff $qsince $qfile " -sincediff oldsrc newsrc same as above , only shorter and safer ( including quotes around filenames ) . sfk run " zip update.zip $qfile " -since 20070131 . . java . jsp collect . java and . jsp files added/changed since 31-Jan-2007 into a zip file . sfk list testfiles . txt +run vi open all . txt files in vi . $qfile is added automatically . sfk sel . . avi +run " ffmpeg -i $file -f image -t .02 thumbs$base-%d.jpg " extract first image from all . avi movies , videos using ffmpeg. sfk sel -since 30m . . cpp . hpp +run -printcmd " rm $path/$base.o " -yes delete all object files of source codes changed in the last 30 minutes sfk echo -lines 100 101 102 +run " showstatus.bat $text " run showstatus.bat three times @ @ @ @ @ @ @ @ @ @ soundlib . wav -tomake " outdir$base.mp3 " +run " ffmpeg -i $qfile $qtarg " for all . wav files within soundlib that have no , or an older , . mp3 file within outdir , run command ffmpeg to convert from . wav to . mp3 . Do n't try to execute a full run statement in ONE GO . Almost certainly , something will go wrong ( wrong files selected , syntax error in the command itself ) , and you end up with many wrong output files . Instead , use THREE STEPS : 1 . find the correct file set , by some trial and error:sfk run " echo $quotfile " mydir This will simply show all filenames from " mydir " . no command is executed on those files , so nothing bad is happening . almost certainly , you notice that too many files are included . Maybe you have to add " -nosub " to exclude subfolders , or add more details about your file selection , like : sfk run " echo $quotfile " mydir . jpg . jpeg which reduces the file @ @ @ @ @ @ @ @ @ @ " mydir " . 2 . Replace " echo " by the actual command , still running in simulation mode.sfk run " copy $quotfile " d : picsmall$base.jpg " " mydir . jpg . jpeg This simulates a copy of all images from mydir to d : pic , prefixing their name by " small " , and ensuring that all target file extensions are only " . jpg " . 3 . When you 're satisfied with the simulation output , add " -yes " . Another example : list the methods of all . class files in a directory tree . This time , we take a different approach , starting with " sfk list " . To list all . class files in the directory tree " pack " , we say : sfk list pack . class This may result in an output like this : packLemon.class packCurry.class packYet.class packAnother.class packOne.class Our goal is to turn these lines into commands of the form : javap pack.classname So how do we achieve this ? First , we have to change the format of the output lines , @ @ @ @ @ @ @ @ @ @ pack . class +filter -rep //. / -rep /. class// This replaces all slashes " " by a dot " . " , and strips off the " . class " . Now the resulting output is : pack.Lemon pack.Curry pack.Yet pack.Another pack.One Finally , we pipe this into " run " : sfk list pack . class +filt -rep //. / -rep /. class// +run " javap $file " The resulting output - a simulated preview - is now : javap " pack.Lemon " javap " pack.Curry " javap " pack.Yet " javap " pack.Another " javap " pack.One " Finally , run the command again , this time adding " -yes " : sfk list pack . class +filt -rep //. / -rep /. class// +run " javap $file " -yes Which will result in the interface listings of all classes . 217463 @qwx1077463 
@@120536071 @9536071/ <p> sfk entab=tabsize dir ext1 ext2 ... replace groups of spaces by tabs within file(s). options -to outmask do not overwrite original files , but write to output files according to outmask , e.g. -to tmp$path$base. $ext or -to tmp$file -yes if files are selected , really ( re ) write them . without -yes , entab is only simulated . -memlimit=n process files with up to n mbytes ( default=300 ) . -nowarn do not tell about skipped or unreadable files . see alsosfk scantab list files containing TAB characters . sfk help opt how to change the memlimit permanently . sfk view a text file viewer that can show all TAB characters in blue by pressing CTRL+T. web LONG ... entab=3 sources . cpp . hpp replace 3 spaces each by a TAB character in all . cpp and . hpp files within folder sources . sfk entab=3 singleFileName.txt the same , but only in a single file . 217463 @qwx1077463 
@@120536072 @9536072/ <p> A bookmark is created , and shown at the right top . In a bookmark , Depeche View remembers : <p> the selected phrase , as the bookmark " title " . <p> the full line of the selected phrase . i.e. internally , dview also remembers the whole line from " long " until " ) " , to allow safer bookmark searches later . <p> the filename in which the bookmark was defined . <p> Now you can jump back to the remembered text location anytime just by clicking on the bookmark . <p> Let 's have another example text : void FooController : : importantSubFunc() printf ( " foo candy delivery just startedn " ) ; Just as above , bookmark the phrase from " Foo " until " Func " . Now you have two bookmarks : FooController : : testBar ( char *pszCandy FooController : : importantSubFunc Actually , " importantSubFunc " is a function called by " testBar " . To make this dependency clearer , it would be good if the second bookmarks would be indented , like : FooController : @ @ @ @ @ @ @ @ @ @ With Depeche View Pro , you can use up to 9 bookmark sets in parallel on the same directory . To switch between them , click on the bookmark set selectors showing number 1 to 9 , just above the actual bookmarks . Alternatively , press CTRL+1 to CTRL+9 for quick switching . <p> Depeche View is a high speed text search tool for Windows and Linux ( WINE ) . Download the free Lite Edition here , or the 30 days Pro Demo here . Depeche View Lite requires no installation . Just run the tool , then load and search all text files of a folder instantly in one window . <p> snapshot with 8254 files loaded . the word " interface " was found 5690 times . 
@@120536074 @9536074/ <h> How to load all text files from a directory , and subdirectories , matching givenfilename and directory name patterns <p> How to include or exclude files to load by name , extension , or sub directory name , with a Freeware tool for Windows and Linux/Mac . <p> After download , run the tool by double click , then click on Open and select a directory from which you want to load all text files . All ASCII text files from that folder will be loaded , like all . txt , . ini , . html , readme or source code files . how to load only specific file types By default , if you open or a directory in Depeche View , ALL text files from within that directory tree will be loaded . In many cases , this is too much . Especially when searching in a huge source code base , you may want to load all . java or . cpp files , but not every . xml or . tmp file . This can be achieved 1 . by the file loading @ @ @ @ @ @ @ @ @ @ the command line 3. or by creating fileset definitions . file loading filters and options dialog Click on the four-light button right next to " open " , or select Setup / Workspace . The file loading options dialog appears , which is basically self-explaining : hoover the mouse over any element , and read the local help text shown under " additional infos " . Short summary of the most important fields : - if you want to load ONLY files containing some word in their filename , enter the list under " load only from filenames " , separated by blanks . if you want to EXCLUDE files containing some word , list them prefixed by " ! " . for example : . cpp . hpp . java ! . tmp ! . bak ! . save loads foobar.cpp and goo.java but NOT foobar.bak - if you want to EXCLUDE subdirectories containing a word in the directory name , make a list of words prefixed by " ! " , e.g. ! tmp ! save excludes all files from " tmp " , " tmp1 " , @ @ @ @ @ @ @ @ @ @ examples Under Setup / Workspace , you can configure which files or sub folders to include while loading , and which not . File exclusion by filename : ! foo -&gt; exclude all files like *foo* ! foo -&gt; exclude starting with foo ! foo -&gt; exclude ending with foo ! foo -&gt; exclude exactly foo ! . foo -&gt; exclude extension foo File inclusion by filename : foo -&gt; include all files like *foo* foo -&gt; include starting with foo foo -&gt; include ending with foo foo -&gt; include exactly foo . foo . bar -&gt; select only . foo and . bar files Combined file mask example : . hpp . cpp ! bak ! save ! readme.hpp -&gt; load only . hpp and . cpp files , exclude for example foo-bak.cpp and files starting like save , exclude files called exactly readme.hpp Sub directory exclusion examples : ! foo -&gt; exclude subdirs like *foo* ! . foo -&gt; exclude with extension . foo ! foo -&gt; exclude starting with foo ! foo -&gt; exclude ending with foo ! foo -&gt; exclude exactly foo ! foobar -&gt; exclude @ @ @ @ @ @ @ @ @ @ anywhere Sub directory inclusion ( white listing ) examples : foo -&gt; include paths having *foo* foo -&gt; include paths having *foo foo -&gt; include paths having *foo foo -&gt; include paths exactly foo . foo -&gt; include with extension . foo foobar -&gt; include subdir combi Combined dir mask example : source include ! . svn ! tmp ! save -&gt; load only from sub folders having source in their name or which start like " include " , excluding all sub folders with extension . svn or starting like tmp or save . all command line options Depeche View uses the Swiss File Knife file selection syntax : - loads whole directory trees by default , i.e. includes sub directories without an extra option - does not require wildcards in most cases , as " * " is implied around every plain text word . i.e. " foo " by default means " *foo* " . - very flexible selection of dirs , subdirs , and files . short format : dview options singleDirName filePattern1 filePattern2 ... long format : dview options -dir mydir1 -file fpat1 ... -dir @ @ @ @ @ @ @ @ @ @ absolute startup window location and size -space ... set relative startup window location and size for details see display area size and location . -max start maximized , covering the whole desktop . -lean start with non maximized width , in isolated view mode ( without a master frame , without pull down menu ) . as long as there is no second window , the initial one can be maximized by F1. -noassist disable assistance mode popups. -clean disable assistance mode , and scrollbars in vertical tiling . -assist activate assistance mode . -edit Pro : if only a single file is loaded , enter edit mode . -isolated starts with isolated frame mode . you may also use " -iso " . -overscan starts with isolated overscan mode . may also use " -over " . -verbose during startup , tell in the message log in detail which root dirs , dir masks and file masks have actually been selected for loading . helpful to analyze why some files are loaded , and others not . the output may differ slightly from what you specified , for example @ @ @ @ @ @ @ @ @ @ you only supplied an " ! " exclusion , or " . zip " file masks may be converted into path masks ( i.e. , dir masks starting with " * " ) . -withsub load subdirectory contents ( default if not disabled by Setup ) . -nosub do not load subdirectory contents . -hidden also load all HIDDEN or SYSTEM files ( not default ) . helpful if you need to search through configuration files , for example of your web browser. -allbin also load all binary files ( extracting text parts ) . -wrap=n wrap long text lines at current screen width , or column n. -wrapbin=n wrap text extracted from binary files at column n. -arc Pro : load contents of . zip . jar . ear etc. archives and also . gz , . bz2 , . tar , . tar.gz and . tar.bz2 as deep as possible , including nested archives . -qarc Pro : quick load archives , load only archive entries at the top level , skipping nested archives . -since load only files changed since this timestamp , e.g. " 2006-01-31 12:15:59 @ @ @ @ @ @ @ @ @ @ since midnight of today 1d : changed since 1 day , i.e. not counting from midnight , but 24 hours into the past 5h , 30m , 10s : 5 hours , 30 minutes , 10 seconds . -before load files modified before that timestamp. -today short replacement for " -since today " . -usectime use creation time instead of modification time . may not be available on some filesystems. -sincedir compare against another directory , load files that have been added , have different time , or content . -sinceadd like -sincedir , load only added files . -sincedif like -sincedir , load only changed files . does not load files with diff. time but same content . does not load added files . -sincechg load files with different content , and added files . does not load files with diff. time but same content . -umlauts with binary-to-text conversion , include german characters . -flist fn or " -fl fn " reads list of filenames from file fn. -fileset x use a fileset definition . more on that below . -utf load also utf-16 ( ucs-2 , wide @ @ @ @ @ @ @ @ @ @ and will only extract plain ASCII text contents from those files . -memlimit=n set the caching memory limit to n mbytes ( default=300 ) . if zip etc. archive processing is very slow , it may be caused by a cache overflow . try to increase -memlimit then . details of filename / extension selection : - when specifying a filename pattern beginning with a dot " . " and no wildcard , only files with this extension will be selected . - otherwise the pattern is searched anywhere within the filename . to force a filename start comparison , say pattern ( with a slash ) . - filename means the relative filename , not directory or path name . command line file selection examples dview foodir . txt . hpp . cpp loads all . txt , . hpp and . cpp files from the directory tree foodir , including all subdirectories. this is the short file selection syntax , with ONE directory name , and MANY file patterns . dview -nosub -today foodir loads all text files from foodir that have been changed today , however excluding @ @ @ @ @ @ @ @ @ @ save ! . svn -file . txt loads all . txt files from the root directories foodir1 , foodir2 and foodir3 , except those in sub directories starting like " save " or having an . svn extension . dview -dir foodir1 -file . h . c -dir foodir2 -file . txt ! . tmp.txt loads all . h , . c and . txt files from foodir1 and all . txt files from foodir2 , however excluding all files from foodir2 ending with " . tmp.txt " . this is the long file selection syntax , supporting any number of directories and any number of file patterns . dview -arc -dir foo1.zip foo2.tar.bz2 Pro : loads all text files from foo1.zip and foo2.tar.bz2. note that archive files are treated as directories. by default , archive files embedded within the listed archive files are loaded as well . dview -arc -dir foo1.zip foo2.tar.bz2 -file . txt . js . cc Pro : loads . txt , . js and . cc files from the archives foo1.zip and foo2.tar.bz2. in this case , the same file filter is used for both @ @ @ @ @ @ @ @ @ @ -file . cpp Pro : load all . txt from foo1.zip , and all . cpp from foo2.tar.bz2. in this case , separate file filters are used per directory . Long -dir ... -file ... format further examples : to load from multiple root directories : -dir rootdir1 rootdir2 ... -file . cpp . hpp . txt ... to include or exclude contents of sub directories within the given root directories , use : wide sub dir selection syntax : -dir . -subdir ! foo -&gt; exclude subdirs like *foo* -dir . -subdir ! . foo -&gt; exclude with extension . foo -dir . -subdir ! foo -&gt; exclude starting with foo -dir . -subdir ! foo -&gt; exclude ending with foo -dir . -subdir ! foo -&gt; exclude exactly foo -dir . -subdir ! foobar -&gt; exclude subdir combi -dir . -subdir ! *. foo* -&gt; exclude with . foo anywhere -dir . -subdir foo -&gt; include paths having *foo* -dir . -subdir foo -&gt; include paths having *foo -dir . -subdir foo -&gt; include paths having *foo -dir . -subdir foo -&gt; include paths exactly foo -dir . @ @ @ @ @ @ @ @ @ @ . -subdir foobar -&gt; include subdir combi ... instead of -subdir , you may also type just -sub compact sub dir selection syntax : -dir . ! foo -&gt; exclude subdirs like *foo* -dir . ! . foo -&gt; exclude with extension . foo -dir . ! foo -&gt; exclude starting with foo -dir . ! foo -&gt; exclude ending with foo -dir . ! foo -&gt; exclude exactly foo -dir . ! foobar -&gt; exclude subdir combi -dir . ! *. foo* -&gt; exclude with . foo anywhere -dir . *foo* -&gt; include paths having *foo* -dir . *foo -&gt; include paths having *foo -dir . *foo -&gt; include paths having *foo -dir . *foo -&gt; include paths exactly foo -dir . *. foo -&gt; include with extension . foo -dir . *foobar -&gt; include subdir combi ... as you can see , when using the compact syntax , sub directory inclusion masks require a wildcard " * " in their name , to make sure they 're not interpreted as root directory names . In the Setup / workspace settings , " * " is not required around @ @ @ @ @ @ @ @ @ @ exclusion by filename : -file ! foo -&gt; exclude all files like *foo* -file ! foo -&gt; exclude starting with foo -file ! foo -&gt; exclude ending with foo -file ! foo -&gt; exclude exactly foo -file ! . foo -&gt; exclude extension foo inclusion by filename : -file foo -&gt; include all files like *foo* -file foo -&gt; include starting with foo -file foo -&gt; include ending with foo -file foo -&gt; include exactly foo -file . foo . bar -&gt; select . foo and . bar files Typical errors in command line file selection BAD : dview -arc foo1.zip foo2.tar.bz2 -&gt; this actually means : load all files having foo2.tar.bz2 in their name from foo1.zip , and it will not load anything . use " dview -arc -dir foo1.zip foo2.tar.bz2 " instead . BAD : dview -nosub -arc -dir foo1.zip -&gt; exclusion of subdirectories is not supported within archive files . however , if you want to disable the processing of archives embedded within archives , you may use " dview -qarc -dir foo1.zip " BAD : dview -arc -dir . *. xpi *mysrc.tar.bz2 -&gt; the intention is @ @ @ @ @ @ @ @ @ @ however , if many other archive files are present within the current directory " . " , dview will SCAN THEM ALL , searching for files embedded within ANY archive having " . xpi " or " mysrc.tar.bz2 " in their name . so , the command must be rewritten to list the exact names that should be loaded , like dview -arc -dir foo1.xpi foo2.xpi foo3.xpi mysrc.tar.bz2 Whenever in doubt , use option -verbose to see in the message log what DView really tries to load . defining filesets Another way is to define " file sets " , which are text files containing : - directory names to include or exclude - filename patterns or extensions to include or exclude example : -------- file mywork1.txt begin ---------- # within this directory tree -dir mysrcbaselib # take only . h . c . txt files -file . h . c . txt # within this directory tree -dir mysrcfoobank # exclude all save and tmp dirs ! save ! tmp # then take only . hpp and . cpp files -file . hpp . cpp # from this directory @ @ @ @ @ @ @ @ @ @ take all files except . bak and . tmp # and except names containing " old stuff " -file -all ! . bak ! . tmp " ! old stuff " -------- file mywork1.txt end ---------- As you may guess , lines having ' # ' as first character are remarks , and names containing blanks must be surrounded by double quotes " " . using workspace definitions from the command line So the above fileset defines 3 directories , and what to load and not to load from those directories . Now copy the above text into a file " mywork1.txt " , then run dview from the command line : dview -fileset mywork1.txt And dview will load the text files as defined in mywork1.txt . Even faster : produce a snapfile from the above fileset definition , which is a collection of text files , then load that at high speed . Find more on that under reducing load times . using workspace definitions when starting by icon You may also create a Depeche View Icon on the desktop , via the Icon button , then open the @ @ @ @ @ @ @ @ @ @ " field . For example , if dview is located in C : appbin , you may change it to C : appbindview.exe -fileset mywork1.txt Then , a double click onto that icon will load that workspace. bookmark filename definition with filesets When using filesets , what will be the bookmark filename ? Just as if you say " -dir mydir1 -dir mydir2 " on the commandline , the first directory tree will be taken to build the bookmark file base name , all others will be ignored . In the example -dir mysrcbaselib -file . h . c . txt ! . hpp ! . cpp -dir mysrcfoobank -file . hpp . cpp -dir mysrcformats -file -all ! . bak the bookmark filenames would be **32;4098;TOOLONG **32;4132;TOOLONG **32;4166;TOOLONG ... If you want to load bookmarks from somewhere else , read more here . using plain filename lists Sometimes you may want to load files whose names are listed in a simple text file , called a file list . This can be done by dview -flist names.txt loading text extracts from binary files By default , dview skips all @ @ @ @ @ @ @ @ @ @ to take a peek into binary files , e.g. to search through meta informations in ( smaller ) media files . To do so , you can - click on the load options button right next to " open " , then check " load text from binary files " . - OR : click " open / load text from a single file " , then select a single binary file . this way you do n't have to check the " load text from binary files " option . - OR : run dview from the command line , supplying a single binary file name - OR : run dview from the command line , with option " -allbin " and a directory name , e.g. dview -allbin mydir In all these cases , dview tries to identifiy readable text informations from binary files , which may or may not produce anything useful . loading hidden and system files Hidden files and directories are , as the name implies , invisible , so the directories do NOT appear in the Open dialogue , and their contents are NOT @ @ @ @ @ @ @ @ @ @ But sometimes it is helpful to load also hidden files . For example , if your Firefox browser behaves unexpected , it is very helpful to take a deeper look into its configuration files , especially " prefs.js " . But where are those files ? Under Windows XP , they are somewhere below C : Documents and **25;4200;TOOLONG DataMozillaFirefox ... But , to repeat , because " Application Data " can be a HIDDEN folder already , it may NOT appear within the Open dialogue . So try exactly these steps : 1 . click on the load options button right next to " Open " , check " include hidden and system files " , and close Setup . 2. select " open / load all text from a folder " . 3. click into the " folder " text entry field at the bottom . ( may not work under Linux , as the WINE dialog might be limited ) Now type MANUALLY : - C : documents and settings - then your userid and " " - then " application data " as soon as you @ @ @ @ @ @ @ @ @ @ you further directories within the hidden folder ! - now type " mozillafirefox " and finally press ENTER . so the whole path would be C : documents and **29;4227;TOOLONG data mozillafirefox 4. dview will load all config files of firefox. 5. type " prefs.js " into the PATH : field . Now you should see what the startup config of Firefox is . Another way : use dview from the command line The command dview -hidden -dir " C : documents and settings " " *firefox* " Does the following : - walk through all normal and hidden files within " C : documents and settings " , including all ( hidden ) subdirectories. - but load only files having " firefox " in their path . ( *firefox* is called a " path mask " in dview , identified by the wildcards. ) excluding subdirectory contents during load By default , if you select a folder through the Open button , dview loads the files from that folder and all its subdirectories . If you do NOT want to include subdirectory contents , - click on the load @ @ @ @ @ @ @ @ @ @ " include subdirectory contents " and close Setup . On the next Open or Append operation , subdirs will be excluded . When running dview from the command line , use option " -nosub " . 
@@120536075 @9536075/ <p> just like fast image loading , fast sound loading uses compression and background loading . bundling and loading on demand are so far not covered by d3caster , more about that later . <p> compression <p> In the origin , sound consists of . wav files , in the case of d3caster encoded with 32 kHz , 16 bits . All sounds together make up about 5 MBytes of data - far too much to load them in their original format . <p> The new state-of-the-art sound compression format is Ogg Vorbis . Just like being made for online games , it provides a great sound quality AND maximum compression . I researched what Java implementations are available , and concluded for myself that the best and easiest implementation is JOrbis from JCraft , also because their package contained a nice sample source , the JOrbisPlayer , showing quick and easy how the stuff is used . Still , it took me half a day to turn this into glue code bringing JOrbis loading and the demo game 's sound system together . The result can be found @ @ @ @ @ @ @ @ @ @ create . ogg from . wav , there are quite a number of free tools available . I 'm using OggEnc . For example , the command " oggenc --resample 32000 -q0 %1. wav " encodes a . wav of any sample rate to an . ogg with 32 kHz , at maximum compression ( q0 ) , which still provides great sound quality . <p> background loading <p> Again , the idea is simple but effective : from a total of 17 sounds , we only load the most important 4 ones immediately ( -&gt; loadSounds() ) , and the others after the game has started , step by step ( -&gt; stepSoundLoading() ) . <p> There is probably some room left for optimization : stepSoundLoading() is n't done in a separate thread , and the importand sounds are n't bundled within a JAR . Nevertheless , as it is , the supplied demo game loads fast enough . <p> compatible ? <p> Of course , you could now keep it that way - just supply a game for Java 2 sound , and that 's it . However @ @ @ @ @ @ @ @ @ @ NOT speak Java JDK 2 . Within these browsers , sound is coded completely different , using Sun 's Audioclip classes . I wo n't go into detail about this , it 's all done in d3sound1.java , so you may check the source directly . <p> But when do we use Java 2 version , and when Java 1 ? At first , I compiled two different engines , leading two 2 different binaries , installation directories , and startup html files . A painful and uncomfortable process . The final solution was to create an abstract interface , the d3soundsys , and to turn d3sound1 and d3sound2 into implementations of this interface . Now , in the main engine ( d3caster.java ) , we can simply try it : <p> An old Java JDK 1 will already fail at the statement " new d3sound2() " , as it wo n't be able to load Java 2 bytecode . But that 's no problem - in this case , the system simply falls through to use Java 1 sound . <p> As a result , with have an all-compatible @ @ @ @ @ @ @ @ @ @ running on . 
@@120536078 @9536078/ <p> if you received an email with a text like this : The result of leveraging enormous amounts of vapourware within the sco pe of the 1st quarter should lead to an immense return on investment i nside the global enterprise whatever . Concerning the shareholder value returning on investments it is essential that no only those who have related to , now i forgot how the sentence was starting . in any way , th is text was obvioulsy truncated by some mail client at a random column and we really hope that it can be turned into a stream text again by use of the sfk text-join-lines function . then either the sender 's or your email client split the text lines , making the text hard to read . now do this : - mark the whole text in your email client . - press CTRL+INSERT or CTRL+C to copy it into clipboard. - in a command shell , run a simple text editor , e.g. type : notepad - press SHIFT+INSERT or CTRL+V - save the text , e.g. under the name a1.txt - in @ @ @ @ @ @ @ @ @ @ sfk will auto-detect the colum at which the lines were broken , paste them together , and write the result to a2.txt. 217463 @qwx1077463 
@@120536080 @9536080/ <p> Move all thumbnail images of a webpage to the page top , to get an instant overview of the gallery content without scrolling down . <p> Top Thumbs is an Add-On for the Firefox browser , providing a gallery filter mode . When this mode is activated , the thumbnails ( image links ) of every webpage are moved to the page top , with a fixed height . <p> before <p> after <p> This way , you get an instant overview of the first contained gallery images , without the need to scroll down . But if you want to read the original web page text with all text links , you can still scroll down . <p> If you CONTROL+CLICK onto a thumbnail , another webpage is opened in a tab , which again is filtered in the same way - allowing high speed surfing across many image galleries . 
@@120536081 @9536081/ <p> there are several ways to search text within 3000 text files:1. ) let your IDE/editor scan the files directly on hard disk . this will take at least 30 seconds , or even several minutes . 2. ) index files on hard disk , then scan them . IF your files are indexed already , this will only take seconds . but in most cases , the index is " out of sync " , and after the sync is done , depending on your IDE , you may have to click once for every hit to view it 's context . but every superfluous click is a boring waste of time . 3. ) collect all text files into one large text file , then load this within an editor or IDE. it 's simple : loading one large file is at least 10 times faster then loading many small files . therefore sfk snapto was created . on the command line , cd into the toplevel of your working tree , then say sfk snapto=all-src.cpp . which means " collect all text files from the current @ @ @ @ @ @ @ @ @ @ all-src.cpp " . when this is done , load all-src.cpp into you favourite editor and run some searches . you will see that jumping through results across everything has become much easier and faster . 4. ) collect all text files into one large text file , then load this within depeche view . as an extension to the above example , say dview all-src.cpp the snapfile is loaded . now , to search anything , just type the word , wait one or two seconds , then use MOUSE WHEEL DOWN ( or SHIFT+CRSR DOWN for notebook users ) to fly through the results . 5. ) alternatively , let depeche view load a directory tree directly , without creating a snapfile : cd into your favourite working dir , then say dview . and depeche view will load and display all text files instantly . 6. ) how to include also binary files : to collect text files AND . doc . ppt . xls contents from mydir : sfk snapto=all.txt mydir -all . doc . ppt . xls only ASCII text portions will be extracted from . @ @ @ @ @ @ @ @ @ @ binary content will be ignored . alternatively , to view the same contents directly : dview mydir -all . doc . ppt . xls it is recommended to use snapfiles on very large directory trees , and to load the tree directly on smaller ones . for more infos about depeche view , read on here . 217463 @qwx1077463 
@@120536083 @9536083/ <p> A free Java Doom-like game engine , providing 3-D gaming with high color and sound on every browser . <p> Click here for an instant play of a demo game , which was made with the engine . <p> Download the full distribution here ( 2.3 MBytes ) . The current version is 1.1 ( -&gt; change history ) . This is a development kit , containing - classes and source code ( GNU GPL license ) - the demo game with graphics , sound and music - tools for development ( free image converter ) - documentation <p> Find here for the full online version of Art Attack , featuring nicknames and area heroes lists . <p> d3caster 's 3-D graphics part is based on the Open Source " Java Maze " by Jonathan Thomas ( www.shinelife.co.uk ) . It includes JOrbis from JCraft , support classes for the great and free sound compression format Ogg Vorbis. 
@@120536084 @9536084/ <p> and how to start the action even before everything 's loaded : a tutorial with free source code for download . <p> fast image loading is achieved through a combination of techniques , namely compression , bundling , background loading , and loading on demand . <p> compression <p> All images are converted from the original PNG form to a combination of JPEG ( usually 80 percent quality ) and a ZIP mask file . The resulting JPEG plus the ZIP is usually four times smaller than the original PNG , due to JPEG 's compression . -&gt; see the source of d3conv.java , which is part of the d3caster package . <p> bundling <p> Loading many images by just using the applet 's getImage() method will result in many separate GET requests to the webserver , which is slower than just loading one large file with a single request . Therefore the most important images are bundled within a JAR file , by a command like " jar cfM images.jar *. jpg *. zip " . Actually , d3caster currently uses two separate jar 's , one @ @ @ @ @ @ @ @ @ @ -&gt; see the do-convert-images batch for the whole image compression process . Notice that not simply ALL images from pic256/ are placed therein , but just the most important ones . <p> avoid to load everything at game startup <p> As a general rule , if you show the user a screen that does n't change for longer than 5 seconds , you risk that he will simply CANCEL your applet , and surf away . In the role of a user , we 're all very impatient . <p> So restrict your applet to load only the most important stuff immediately , and everything else later . Important is , of course , everything that can be seen from the start - some wall textures , some objects , a rocket shape . Not important are wall pictures which can be found three rooms later ; maybe the player never reaches that room , so why load the stuff ? So these things will be loaded on demand . <p> background image loading , and loading on demand <p> So , if only some images are loaded immediately , @ @ @ @ @ @ @ @ @ @ an own thread , the image loader ( -&gt; see runImageLoader() ) . This enables the player to have full action , and immediate system feedback , although some work is still done in the background . <p> But what images should be loaded next ? Simple answer : those that we 're looking at . An example : <p> looking at a new wall segment <p> a moment later <p> To the left : as we enter a new area , we find ourselves looking at a a new wall segment , whose texture is n't loaded yet . Nevertheless , the action must continue . So we show a default texture - the woody basetext.jpg . This is one of the first images loaded at startup , and it 's guaranteed to be available immediately . <p> But what happens then ? Because we look at the texture , the renderer sets a flag called " touched " on the corresponding d3texture object , signalling the image loader that this thing should be loaded next . A getImage() is started in the background . Be aware that network @ @ @ @ @ @ @ @ @ @ so the game continues at full speed while the data is loaded . A short moment later , the image is fully loaded , and the d3texture is updated , as seen on the right . <p> This way , we can add tons of images to our game , without long , boaring startup times . The user may see a strange default texture from time to time , but he is n't stopped within action , so this is far less irritating than waiting . <p> Find the whole source code in d3caster.java , provided within the d3caster package . 
@@120536085 @9536085/ <p> sfk copy srcRoot dstRoot -dir subdir1 subdir2 -file . ext1 . ext2sfk sync srcRoot dstRoot -dir subdir1 subdir2 -file . ext1 . ext2 Directory tree copy , update copy and synchronization . If destination does not yet exist , whole content of source is copied , INCLUDING HIDDEN AND SYSTEM FILES . If destination already exists , only updates are copied . Symbolic links are NOT kept , but their content is duplicated . If this is a problem , use a copy command of your operating system instead . copy copies files from source to destination if the target file does n't exist yet , or if the source is NEWER than the target . copy will NOT copy OLDER files over NEWER files . furthermore , files that exist in destination but not in source are not removed , so copy will ADD and REPLACE , but not DELETE . sync nearly same as copy , however files that exist in destination but not in the source are called STALE files , and are DELETED if their age is &gt;= 30 days . USE WITH CARE @ @ @ @ @ @ @ @ @ @ this may delete files unintentionally . Take a close look at the output of the simulation mode , which is active by default . -mirror with sync , copy even older files from source over destination . -wipe delete stale files now ( ignoring file ages ) . -nocopy with sync , do not copy files , run only delete cleanup. can be used if you want copy files first with a different copy program , and then run an sfk sync-delete. -diff list files in destination which have been modified after last copy . Whenever you get a short info " n differing files in dest " , add -dif to get their names listed . -since or -sincedir/dif/add/chg copies only files selected by age or difference to another directory . " sfk list " for details . -nohidden exclude hidden and system files from copy . -nofollow do not follow symbolic link directory contents . -stat in simulation : do not list filenames , only size statistics . -keepstale=n change the 30 days limit for stale files until deletion. -noinfo do not comment on skipped files . -relnames @ @ @ @ @ @ @ @ @ @ from filenames. if not selected , absolute paths starting like C : or /tmp will be stripped automatically . some chain commands may provide filenames without separate directories , in this case -relnames will produce an error . -ltarg always list target filenames ( instead of source filenames ) . files with whole content being copied are listed in default color . files that will be deleted during sync are listed in warning color . files with differing time but equal content are listed in time color . completeness and efficiency : - under Windows , SFK uses the CopyFileEx API function , which should be able to copy most file attributes and contents as good and fast as the XCopy command provided with Windows . - under Linux , no native copy function is available , therefore SFK may not be able to copy all attributes , access rights and timestamps of the original files . Furthermore , copying can be slower than " cp " . - Directory attributes , access rights and time stamps may not be completely reproduced both on Windows and Linux. - Changes from/to @ @ @ @ @ @ @ @ @ @ FAT and NTFS may always copy files which were copied already . this is a general problem with all copy commands . using file system views : if you want to specify many directory trees and dir/file masks , you may create a fileset , containing a list of directories. type " sfk help fileset " for details . NO WARRANTY FOR DATA INTEGRITY . SFK copy is very convenient to use , but if you need to copy massive amounts of highly important data , it is recommended to use the original copy command of your operating system . Always keep backups of important stuff . After large copies , do some spot checking if important files were really copied without modifications . Always double-check the reliability of external media like USB sticks , e.g. by creating md5 lists ( see " sfk md5gento " ) . web LONG ... copy c : work d : arcwork -dir . ! tmp ! save -file ! . bak copy directory tree c : work to d : arcwork , excluding all dirs called tmp or save , including all files @ @ @ @ @ @ @ @ @ @ v : teamproj -dir foosysinclude foosyssource tools within directory tree proj , copy subdirectory trees foosysinclude , foosyssource and tools , including all files therein . sfk filter testfiles -+foo +copy tmp copy all files from testfiles containing " foo " to tmp. sfk copy work archive -fileset myflist.txt copy the files listed in myflist.txt from work to archive . note that " -yes " must be specified directly after " copy " . see also " sfk help fileset " . sfk list mydir . txt . doc code.cpp +copy d : save copies all . txt , . doc and code.cpp files from within mydir , including all subdirs , to d : save . ALSO copies mycode.cpp , subcode.cpp.1 etc. as " code.cpp " ist just a pattern . sfk list -sincedir mydir1 -dir mydir2 -subdir ! save-file ! . bak +copy mydir3 copies all files that were added or changed between mydir1 and mydir2 to mydir3 , excluding files in sub folders " save " , and excluding . bak files ( type whole command in one line ) . type " sfk list " for more on -sincedir , -sinceadd or -sincedif. 217463 @qwx1077463 
@@120536088 @9536088/ <p> sfk reflist -path -wide -dir sdir -file . text -dir tdir -file . sextsfk reflist -dir sourcedir -dir targetdir1 targetdir2 targetdir3 ... list possible dependencies between files through ( fuzzy ) content analysis . find out which target files are referenced by any of the source files . a list of target files is created from directory targdir. then all source files are loaded from srcdir , and scanned if the names of the targets appear within their content . if so , the targets are listed , with the number of referring source files , and a list ( of the first 10 ) of these files . NOTE that sfk reflist DOES NOT GUARANTEE that files are ( not ) referenced . This way of reference detection is just a FUZZY INDICATOR , so keep thinking and make backups before you massively cleanup files without references ! NOTE : you may specify any number of target directories. if your list of target directories is incomplete , files from there will NOT be found . by default , only relative target filenames are searched , without path @ @ @ @ @ @ @ @ @ @ target file : the/path/foosys.dll runs a search for : foosys.dll in the source files . options -path search target filenames including path information . e.g. the target file : the/path/foosys.dll runs a search for : the/path/foosys.dll -noext strip . extensions from filenames , compare only basename. e.g. the target file : the/path/foosys.dll runs a search for : foosys which may lead to ambiguities , listing too many hits . -noext can also be combined with -path. -wide=n list references in an extended format , with a list of ( up to to n ) source files per target file , telling in detail which text patterns were found . -case force case sensitive string comparison ( not default ) . -quiet do not print the number of source and target files . -relnames if using -path , strip targdir name from target paths for comparison . -flat do not check if target files depend on other target files . set this to improve speed , if you know that such dependencies can not exist , e.g. if the targets are . wav files . -memlimit=n load and analyze only files @ @ @ @ @ @ @ @ @ @ limit is 300 mbytes. see alsosfk deplist list file dependencies. web LONG ... reflist -dir mysrcdir mytargdir check every file in mytargdir if it is referenced by any file within mysrcdir. sfk reflist -dir movie -file . ppt -dir pic -file . png find out which . png files within pic are referenced by . ppt files within movie . sfk reflist -wide=100 -dir bin -file . exe -dir bin -file . dll find out which . dlls are directly referenced by . exe files within directory bin , listing up to 100 references per target . sfk reflist -dir . -file . flp -dir . -file . wav within a FruityLoops project directory lists which . wav files are referenced by which . flp project files of that directory . sfk reflist -dir film -file . ppj -dir audio frames clips tell which audio , image and movie clip files ( e.g. . wav . bmp . avi ) are used by which Adobe Premiere project files ( . ppj ) within the film directory . if image sequences are used , only the first image of such sequences will be found , e.g. foobar00001.bmp 217463 @qwx1077463 
@@120536090 @9536090/ <h> trace HTTP requests of your browser onto terminal <p> , by connecting to the sfk tcpdump local server on Windows , Mac OS X , Linux and Raspberry Pi . the browser requests can be forwarded to another server , to trace a whole conversation . may work also with other protocols , e.g. telnet. free open source command line tool with no installation . 217463 @qwx1077463 
@@120536092 @9536092/ <p> sfk runloop ifrom ito " your command $digitsi " -yes -nohead sfk runloop ifrom -steps=n -inc=i " your command $digitsi " sfk printloop ifrom ito " your text $digitsi " run a self-defined command many times , or simply print text to the console , with a counter starting at ifrom , running until ito , or running n times if -steps=n is specified . with runloop , execution of commands is just simulated by default , so nothing happens . as soon as your command is looking well , add option " -yes " to really execute . options -inc=i increment step counter by i instead of 1 . -spat support slashpatterns like t q xnn. -delay=n wait n msec after every executed command . -nohead does not display the simulating : info text . printloop is the same as runloop -nohead. -quiet does not echo the commands before execution . -quietrc do not print rc status message per command . command string format the command string may contain $i which is replaced by the loop counter , or slashpatterns if option -spat is given . due @ @ @ @ @ @ @ @ @ @ help - to use q instead of " ( avoids quote miscounting at shell ) - to use x26 instead of &amp; ( if ampersand is behaving unexpected ) $i also supports format parameters before ' i ' like : $5i print 5 digits , right justified , filled with blanks . $05i print 5 digits , right justified , filled with zeros. $-5i print 5 digits , left justified , filled with blanks . to print the $ char itself in output use $$ quoted multi line parameters are supported in scripts using parm trim . type " sfk script " for details . aliasessfk printloop do not execute anything but just print the resulting text to terminal . see also sfk run - run self-defined command on filenames. web LONG ... runloop 1 100 " copy mytest.dat testfile$03i.dat " -yes creates 100 copies of mytest.dat named testfile001.dat , testfile002.dat , testfile003.dat etc. sfk printloop 1 100 -spat " &lt;a LONG ... creates html code containing 100 web links . note that q was used instead of " , as ' &amp; ' may create problems when combined with @ @ @ @ @ @ @ @ @ @ , not by sfk itself. ) and to enable slash patterns like q , -spat had to be added . 217463 @qwx1077463 
@@120536093 @9536093/ <p> But you may also create a Depeche View Icon on the desktop , via the Icon button , then open the Icon properties , and change the Icon 's " target " field . For example , if dview is located in C : appbin , you may change it to <p> C : appbindview.exe -cfg1 -fileset mywork1.txt <p> Then , a double click onto that icon will load that workspace. ( -cfg1 is not strictly required , but recommended as it tells the tool that it 's started by an Icon . ) <p> Depeche View is a high speed text search tool for Windows and Linux ( WINE ) . Download the free Lite Edition here , or the 30 days Pro Demo here . Depeche View Lite requires no installation . Just run the tool , then load and search all text files of a folder instantly in one window . <p> snapshot with 8254 files loaded . the word " interface " was found 5690 times . 
@@120536095 @9536095/ <p> , with no installation or configuration , using the free command line tool Swiss File Knife . <p> Are you working on a machine without internet access , no shared network folders , unavailable USB ports , missing admin rights , and a thousand other reasons why it seems impossible to transfer a single file ? <p> How to get SFK up and running anywhere : Download the executables for Windows , Linux/lib6 or Linux/lib5 By browser : - LONG ... then click on one of the top links to either download binaries instantly , or look further on sourceforge : - LONG ... OR On a Linux or Mac command line console , use one of these : Instant binaries : - wget http : //stahlworks.com/sfkux ( Intel Linux lib6 ) - wget http : **25;4258;TOOLONG ( Intel Linux lib5 ) - wget http : //stahlworks.com/sfkarm ( ARM Linux ) - curl -o sfk http : //stahlworks.com/sfkmac ( Mac i686 ) - curl -o sfk http : **26;4285;TOOLONG ( Mac PowerPC ) After download , follow the " prepare " steps below before use . If files @ @ @ @ @ @ @ @ @ @ wget tool destroyed the binary as it can not handle the missing file extension . In that case , try a wget on one of the full . exe paths : wget http : **38;4313;TOOLONG ( Intel lib6 ) wget LONG ... ( Intel lib5 ) wget http : **36;4353;TOOLONG ( ARM Linux ) wget LONG ... ( Mac i686 ) wget http : **40;4391;TOOLONG ( Mac PowerPC ) How to prepare the SFK binary under Linux/Mac : - after download , you should rename the executable to " sfk " to save typing effort , for example mv sfkux sfk then allow execution by setting the ' x ' attribute chmod +x sfk then simply type . /sfk to get it running ( the " . / " is often needed as the PATH may not contain the current directory " . " ) . SFK Instant HTTP Server for easy file exchange - on the machine where you have downloaded SFK , type sfk httpserv -port=9090 - then , on the target machine , try to open a web browser and to access http : //othermachine:9090/ and you @ @ @ @ @ @ @ @ @ @ directory on the other machine ( where you ran sfk ) . - if no web browser is available , try a direct wget http : **28;4433;TOOLONG with " yourfile " being the single file you want to transfer . If that fails ( no browser , no gui , no wget command ) , check if there exists an " ftp " command on the target . If so , try : SFK Instant FTP Server for easy file exchange - on the machine where you have SFK already , type sfk ftpserv - then , on the target machine , type ftp othermachine and if the login succeeds , try dir bin get yourfile - if ftp connections fail to work , check if the " ftp " client on the target accepts the command passive then try to " get " again ( ftp creates a new connection per file download , which is often blocked by firewalls. the passive command changes the way in which those connections are created. ) 
@@120536096 @9536096/ <p> sometimes you type a command , e.g. " make " , and wonder that it behaves totally unexpected . maybe you have several versions of the command , from different software packages , within your PATH ... and according to murphy 's laws , you run the wrong version , of course . but from where within the PATH is it loaded ? just type sfk pathfind yourcommand.exe to find out . for example : sfk pathfind make.exe =&gt; d : toolsmsysbinmake.exe in this example , you see that make.exe is loaded from d : toolsmsysbinmake.exe. should there be another make.exe further down in the path , then it is ignored . you may also say " sfk where " , which is the same , but shorter to type : sfk where zip.exe =&gt; c : program filescygwinbinzip.exe windows users may even leave out the file extension : sfk where foobar in this case , sfk finds all files with the specified base name , having one of the extensions from the PATHEXT environment variable . for example : c : appbinfoobar.exe c : appbinfoobar.bat see also @ @ @ @ @ @ @ @ @ @ 
@@120536097 @9536097/ <p> sfk name2 word word2 ! exclude . ext find filenames as fast as possible by using index files created by sfk index or gindex. sfk name word word2 word3 ... will use local index files zz-index.txt - in the current folder - in the parent folder - and so on , until the root folder " " and also the global Base Index file from C : **29;4463;TOOLONG and then lists all file names from those indexes having the given words in their name or path . sfk name2 word word2 word3 ... does the same as name , but also includes the global Extended Index file . sfk gname uses only the global index . sfk lname uses only local index files . pattern syntax - just type up to 10 words that must be contained somehere in the file name or it 's path . the words are AND combined . the sequence is ignored . - words starting with ! or : will exclude any file having the word in it 's name . - words starting with " . " are a file extension @ @ @ @ @ @ @ @ @ @ name , or be followed in the filename by another " . " like " . so " in foobar.so.1.2.3 options -size include size info in result -size=n pad size info to n characters -tab create tab separated output output sorting output is always sorted by file modification time , listing the most recent files at the list bottom . chaining support output chaining is supported . aliasessfk iname same as sfk namesfk x same as sfk namesfk x2 same as sfk name2see alsosfk gindex - create global index file(s) sfk index - create local index file(s) web LONG ... name . pdf lists all PDF files in the Base Index . sfk name part 2391 datasheet . pdf lists all PDF files in the Base Index having the words " part " , " 2391 " and " datasheet " somewhere in their name , for example : C : **36;4494;TOOLONG C : **35;4532;TOOLONG sfk name2 part 2391 datasheet . pdf the same , but may list further results also from the extended index , for example : Z : **39;4569;TOOLONG sfk name . hpp +find class tree search @ @ @ @ @ @ @ @ @ @ the words " class " and " tree " . sfk name tree . hpp +fview load and view all . hpp files having " tree " in their name or path . ( " sfk view " for more ) 217463 @qwx1077463 
@@120536100 @9536100/ <p> sfk copy srcRoot dstRoot -dir subdir1 subdir2 -file . ext1 . ext2sfk sync srcRoot dstRoot -dir subdir1 subdir2 -file . ext1 . ext2 Directory tree copy , update copy and synchronization . If destination does not yet exist , whole content of source is copied , INCLUDING HIDDEN AND SYSTEM FILES . If destination already exists , only updates are copied . Symbolic links are NOT kept , but their content is duplicated . If this is a problem , use a copy command of your operating system instead . copy copies files from source to destination if the target file does n't exist yet , or if the source is NEWER than the target . copy will NOT copy OLDER files over NEWER files . furthermore , files that exist in destination but not in source are not removed , so copy will ADD and REPLACE , but not DELETE . sync nearly same as copy , however files that exist in destination but not in the source are called STALE files , and are DELETED if their age is &gt;= 30 days . USE WITH CARE @ @ @ @ @ @ @ @ @ @ this may delete files unintentionally . Take a close look at the output of the simulation mode , which is active by default . -mirror with sync , copy even older files from source over destination . -wipe delete stale files now ( ignoring file ages ) . -nocopy with sync , do not copy files , run only delete cleanup. can be used if you want copy files first with a different copy program , and then run an sfk sync-delete. -diff list files in destination which have been modified after last copy . Whenever you get a short info " n differing files in dest " , add -dif to get their names listed . -since or -sincedir/dif/add/chg copies only files selected by age or difference to another directory . " sfk list " for details . -nohidden exclude hidden and system files from copy . -nofollow do not follow symbolic link directory contents . -stat in simulation : do not list filenames , only size statistics . -keepstale=n change the 30 days limit for stale files until deletion. -noinfo do not comment on skipped files . -relnames @ @ @ @ @ @ @ @ @ @ from filenames. if not selected , absolute paths starting like C : or /tmp will be stripped automatically . some chain commands may provide filenames without separate directories , in this case -relnames will produce an error . -ltarg always list target filenames ( instead of source filenames ) . files with whole content being copied are listed in default color . files that will be deleted during sync are listed in warning color . files with differing time but equal content are listed in time color . completeness and efficiency : - under Windows , SFK uses the CopyFileEx API function , which should be able to copy most file attributes and contents as good and fast as the XCopy command provided with Windows . - under Linux , no native copy function is available , therefore SFK may not be able to copy all attributes , access rights and timestamps of the original files . Furthermore , copying can be slower than " cp " . - Directory attributes , access rights and time stamps may not be completely reproduced both on Windows and Linux. - Changes from/to @ @ @ @ @ @ @ @ @ @ FAT and NTFS may always copy files which were copied already . this is a general problem with all copy commands . using file system views : if you want to specify many directory trees and dir/file masks , you may create a fileset , containing a list of directories. type " sfk help fileset " for details . NO WARRANTY FOR DATA INTEGRITY . SFK copy is very convenient to use , but if you need to copy massive amounts of highly important data , it is recommended to use the original copy command of your operating system . Always keep backups of important stuff . After large copies , do some spot checking if important files were really copied without modifications . Always double-check the reliability of external media like USB sticks , e.g. by creating md5 lists ( see " sfk md5gento " ) . web LONG ... copy c : work d : arcwork -dir . ! tmp ! save -file ! . bak copy directory tree c : work to d : arcwork , excluding all dirs called tmp or save , including all files @ @ @ @ @ @ @ @ @ @ v : teamproj -dir foosysinclude foosyssource tools within directory tree proj , copy subdirectory trees foosysinclude , foosyssource and tools , including all files therein . sfk filter testfiles -+foo +copy tmp copy all files from testfiles containing " foo " to tmp. sfk copy work archive -fileset myflist.txt copy the files listed in myflist.txt from work to archive . note that " -yes " must be specified directly after " copy " . see also " sfk help fileset " . sfk list mydir . txt . doc code.cpp +copy d : save copies all . txt , . doc and code.cpp files from within mydir , including all subdirs , to d : save . ALSO copies mycode.cpp , subcode.cpp.1 etc. as " code.cpp " ist just a pattern . sfk list -sincedir mydir1 -dir mydir2 -subdir ! save-file ! . bak +copy mydir3 copies all files that were added or changed between mydir1 and mydir2 to mydir3 , excluding files in sub folders " save " , and excluding . bak files ( type whole command in one line ) . type " sfk list " for more on -sincedir , -sinceadd or -sincedif. 217463 @qwx1077463 
@@120536102 @9536102/ <h> trace HTTP requests of your browser onto terminal <p> , by connecting to the sfk tcpdump local server on Windows , Mac OS X , Linux and Raspberry Pi . the browser requests can be forwarded to another server , to trace a whole conversation . may work also with other protocols , e.g. telnet. free open source command line tool with no installation . 217463 @qwx1077463 
@@120536104 @9536104/ <p> But you may also create a Depeche View Icon on the desktop , via the Icon button , then open the Icon properties , and change the Icon 's " target " field . For example , if dview is located in C : appbin , you may change it to <p> C : appbindview.exe -cfg1 -fileset mywork1.txt <p> Then , a double click onto that icon will load that workspace. ( -cfg1 is not strictly required , but recommended as it tells the tool that it 's started by an Icon . ) <p> Depeche View is a high speed text search tool for Windows and Linux ( WINE ) . Download the free Lite Edition here , or the 30 days Pro Demo here . Depeche View Lite requires no installation . Just run the tool , then load and search all text files of a folder instantly in one window . <p> snapshot with 8254 files loaded . the word " interface " was found 5690 times . 
@@120536105 @9536105/ <p> , with no installation or configuration , using the free command line tool Swiss File Knife . <p> Are you working on a machine without internet access , no shared network folders , unavailable USB ports , missing admin rights , and a thousand other reasons why it seems impossible to transfer a single file ? <p> How to get SFK up and running anywhere : Download the executables for Windows , Linux/lib6 or Linux/lib5 By browser : - LONG ... then click on one of the top links to either download binaries instantly , or look further on sourceforge : - LONG ... OR On a Linux or Mac command line console , use one of these : Instant binaries : - wget http : //stahlworks.com/sfkux ( Intel Linux lib6 ) - wget http : **25;4610;TOOLONG ( Intel Linux lib5 ) - wget http : //stahlworks.com/sfkarm ( ARM Linux ) - curl -o sfk http : //stahlworks.com/sfkmac ( Mac i686 ) - curl -o sfk http : **26;4637;TOOLONG ( Mac PowerPC ) After download , follow the " prepare " steps below before use . If files @ @ @ @ @ @ @ @ @ @ wget tool destroyed the binary as it can not handle the missing file extension . In that case , try a wget on one of the full . exe paths : wget http : **38;4665;TOOLONG ( Intel lib6 ) wget LONG ... ( Intel lib5 ) wget http : **36;4705;TOOLONG ( ARM Linux ) wget LONG ... ( Mac i686 ) wget http : **40;4743;TOOLONG ( Mac PowerPC ) How to prepare the SFK binary under Linux/Mac : - after download , you should rename the executable to " sfk " to save typing effort , for example mv sfkux sfk then allow execution by setting the ' x ' attribute chmod +x sfk then simply type . /sfk to get it running ( the " . / " is often needed as the PATH may not contain the current directory " . " ) . SFK Instant HTTP Server for easy file exchange - on the machine where you have downloaded SFK , type sfk httpserv -port=9090 - then , on the target machine , try to open a web browser and to access http : //othermachine:9090/ and you @ @ @ @ @ @ @ @ @ @ directory on the other machine ( where you ran sfk ) . - if no web browser is available , try a direct wget http : **28;4785;TOOLONG with " yourfile " being the single file you want to transfer . If that fails ( no browser , no gui , no wget command ) , check if there exists an " ftp " command on the target . If so , try : SFK Instant FTP Server for easy file exchange - on the machine where you have SFK already , type sfk ftpserv - then , on the target machine , type ftp othermachine and if the login succeeds , try dir bin get yourfile - if ftp connections fail to work , check if the " ftp " client on the target accepts the command passive then try to " get " again ( ftp creates a new connection per file download , which is often blocked by firewalls. the passive command changes the way in which those connections are created. ) 
@@120536107 @9536107/ <p> sfk name2 word word2 ! exclude . ext find filenames as fast as possible by using index files created by sfk index or gindex. sfk name word word2 word3 ... will use local index files zz-index.txt - in the current folder - in the parent folder - and so on , until the root folder " " and also the global Base Index file from C : **29;4815;TOOLONG and then lists all file names from those indexes having the given words in their name or path . sfk name2 word word2 word3 ... does the same as name , but also includes the global Extended Index file . sfk gname uses only the global index . sfk lname uses only local index files . pattern syntax - just type up to 10 words that must be contained somehere in the file name or it 's path . the words are AND combined . the sequence is ignored . - words starting with ! or : will exclude any file having the word in it 's name . - words starting with " . " are a file extension @ @ @ @ @ @ @ @ @ @ name , or be followed in the filename by another " . " like " . so " in foobar.so.1.2.3 options -size include size info in result -size=n pad size info to n characters -tab create tab separated output output sorting output is always sorted by file modification time , listing the most recent files at the list bottom . chaining support output chaining is supported . aliasessfk iname same as sfk namesfk x same as sfk namesfk x2 same as sfk name2see alsosfk gindex - create global index file(s) sfk index - create local index file(s) web LONG ... name . pdf lists all PDF files in the Base Index . sfk name part 2391 datasheet . pdf lists all PDF files in the Base Index having the words " part " , " 2391 " and " datasheet " somewhere in their name , for example : C : **36;4846;TOOLONG C : **35;4884;TOOLONG sfk name2 part 2391 datasheet . pdf the same , but may list further results also from the extended index , for example : Z : **39;4921;TOOLONG sfk name . hpp +find class tree search @ @ @ @ @ @ @ @ @ @ the words " class " and " tree " . sfk name tree . hpp +fview load and view all . hpp files having " tree " in their name or path . ( " sfk view " for more ) 217463 @qwx1077463 
@@120536108 @9536108/ <p> sfk runloop ifrom ito " your command $digitsi " -yes -nohead sfk runloop ifrom -steps=n -inc=i " your command $digitsi " sfk printloop ifrom ito " your text $digitsi " run a self-defined command many times , or simply print text to the console , with a counter starting at ifrom , running until ito , or running n times if -steps=n is specified . with runloop , execution of commands is just simulated by default , so nothing happens . as soon as your command is looking well , add option " -yes " to really execute . options -inc=i increment step counter by i instead of 1 . -spat support slashpatterns like t q xnn. -delay=n wait n msec after every executed command . -nohead does not display the simulating : info text . printloop is the same as runloop -nohead. -quiet does not echo the commands before execution . -quietrc do not print rc status message per command . command string format the command string may contain $i which is replaced by the loop counter , or slashpatterns if option -spat is given . due @ @ @ @ @ @ @ @ @ @ help - to use q instead of " ( avoids quote miscounting at shell ) - to use x26 instead of &amp; ( if ampersand is behaving unexpected ) $i also supports format parameters before ' i ' like : $5i print 5 digits , right justified , filled with blanks . $05i print 5 digits , right justified , filled with zeros. $-5i print 5 digits , left justified , filled with blanks . to print the $ char itself in output use $$ quoted multi line parameters are supported in scripts using parm trim . type " sfk script " for details . aliasessfk printloop do not execute anything but just print the resulting text to terminal . see also sfk run - run self-defined command on filenames. web LONG ... runloop 1 100 " copy mytest.dat testfile$03i.dat " -yes creates 100 copies of mytest.dat named testfile001.dat , testfile002.dat , testfile003.dat etc. sfk printloop 1 100 -spat " &lt;a LONG ... creates html code containing 100 web links . note that q was used instead of " , as ' &amp; ' may create problems when combined with @ @ @ @ @ @ @ @ @ @ , not by sfk itself. ) and to enable slash patterns like q , -spat had to be added . 217463 @qwx1077463 
@@120536109 @9536109/ <p> sometimes you type a command , e.g. " make " , and wonder that it behaves totally unexpected . maybe you have several versions of the command , from different software packages , within your PATH ... and according to murphy 's laws , you run the wrong version , of course . but from where within the PATH is it loaded ? just type sfk pathfind yourcommand.exe to find out . for example : sfk pathfind make.exe =&gt; d : toolsmsysbinmake.exe in this example , you see that make.exe is loaded from d : toolsmsysbinmake.exe. should there be another make.exe further down in the path , then it is ignored . you may also say " sfk where " , which is the same , but shorter to type : sfk where zip.exe =&gt; c : program filescygwinbinzip.exe windows users may even leave out the file extension : sfk where foobar in this case , sfk finds all files with the specified base name , having one of the extensions from the PATHEXT environment variable . for example : c : appbinfoobar.exe c : appbinfoobar.bat see also @ @ @ @ @ @ @ @ @ @ 
@@120536112 @9536112/ <p> sfk ... +if opts expression command1 ... +command2 execute command1 if expression is true , then continue to command2. if expression is not true , skip directly to command2. can be used only in a command chain , after another command . supported expressionsreturn code comparison " rc=n " return code of previous command equal to n " rc&gt;n " return code of previous command higher than n " rc&lt;n " return code of previous command lower than n generic text or number comparison " l = r " left part is equal to right " l &lt;&gt; r " left part is not equal to right " l &lt; r " left part is lower then right " l &gt; r " left part is higher then right " l &lt;= r " left part is lower or equal " l &gt;= r " left part is higher or equal if both l and r contain only digits a numeric comparison is done , else a text comparison . options options for if must be given before expression . -var use sfk variables , must be first @ @ @ @ @ @ @ @ @ @ case sensitive text comparison -debug tell what is done in a generic comparison chaining support since sfk 1.7.7 this command no longer consumes text input from the command chain . see alsosfk call call sub functions in a script . sfk goto jump to a local label . examplessfk filter in.txt -+err +if " rc&gt;0 " run -yes " x.bat " +echo done if file in.txt contains the word " err " , run x.bat. the " echo done " is always executed . sfk xex -justrc in.txt " /foo*bar/ " +if " rc=0 " stop 9 " Rederror : def miss " +echo " match " type this all in one line , or use " sfk cmd 18 " . 18 if file in.txt does not contain the search pattern then stop with return code 9 , printing an error . 217463 @qwx1077463 
@@120536113 @9536113/ <p> sfk gindex2 opts -dir rootDir rootDir2 ... sfk index opts -dir localDir ... create index file(s) containing file names with time and size info , for later realtime filename lookup , or just to archive folder meta data . creating index files for use with sfk name to create a local index of the current directory tree , use sfk index . which writes a local file zz-index.txt to create a global index of the current machine , use sfk gindex -dir C : D : which stores a base index file in your user folder : LONG ... to create an extended global index of network drives , use sfk gindex2 -dir T : P : V : if drives T , P , V are network drives . this will write an extended index file in a user local folder : LONG ... in other words : sfk index writes an index locally onto the disk where you are standing , visible for all users . this is useful 1 . under linux in the root dir " / " to make an index of all @ @ @ @ @ @ @ @ @ @ USB hard drives , where an index in the drive root can be used on any machine . sfk gindex is your personal global index of whatever disk contents are important for you , not for useby other users , and maintained only by yourself . creating special purpose meta data archives to create a local index of a sub folder " mydir " , use sfk index mydir which writes a file zz-index-mydir.txt. this file can NOT be used with sfk name . it 's just an archive of file meta informations for that sub folder . using indexes for fast name lookupsfk name word word2 word3 ... will use local index files : - in the current folder - in the parent folder - and so on , until the root folder " " - and also the global Base Index file and then lists all file names from those indexes having the given words in their name or path . sfk name2 word word2 word3 ... does the same as name , but also includes the global Extended Index file . sfk index options -tofile f write @ @ @ @ @ @ @ @ @ @ file . can be used then with " sfk name -from f ... " -hidden list also hidden or system files -arc include contents of . zip . jar . ear etc. archives and also . gz , . bz2 , . tar , . tar.gz and . tar.bz2 as deep as possible , including nested archives . type " sfk help opt " for supported file extensions . -qarc quick list archives , lists only archive entries at the top level , skipping nested archives . aliasessfk lindex same as sfk indexsfk iname same as sfk namesee alsosfk name lookup files in local and Base Indexes sfk name2 lookup in local , Base and Extended Index sfk help select the sfk file selection syntax . sfk help opt for further general options . sfk dir list contents of a directory . web LONG ... gindex C : create a global Base Index containing all file names from drive C : using a short syntax . sfk gindex C : ! . tmp ! . bak the same , but excluding all . tmp and . bak files . to @ @ @ @ @ @ @ @ @ @ syntax must be used : sfk gindex -dir C : D : -subdir ! tmp -file ! . bak create Base Index of C : and D : without any sub dirs having tmp in their name , and w/o . bak files . sfk gindex2 -dir P : W : if P : and W : are network drives , this creates an Extended Index file with their contents . sfk index . if standing in the root dir of a drive like D : this will write a local index file for that drive which can later be used by typing sfk name from within in any folder on that drive . 217463 @qwx1077463 
@@120536114 @9536114/ <p> Art Attack is a full-scale 3-D action game in pure Java . It does not require a hardware 3-D accelerator card , no exotic plugins or libraries , and no installation efforts . Art Attack simply runs everywhere , instantly , at anytime - just like Java was designed for . <p> This game features dynamic light effects , like rocket trails , explosions and their flashes . Within battle , you see the rockets approach by looking at the ceiling . When an alien robot is hit , the whole area is flooded with light - awesome impressions which were never before available in a browser-based game ! <p> True Color light shading with high-color textures . The powerful d3caster 3-D java gaming engine uses dynamic texture loading , getting the graphics of a new area on demand . This allows the player to start quickly , and to play instantly without long and boring waits ( at least via DSL/cable ) . <p> Yes , Java is fast ! . No other application like a 3-D software-rendered action game could be a better prove for this @ @ @ @ @ @ @ @ @ @ MHz , and even on this old machine , it runs smoothly at about 18 frames per second . Future versions on Pentium IV or AMD Athlon 64 may even run at fullscreen resolutions . 
@@120536115 @9536115/ <p> sfk ftext opts singledir word word2 word3 ... -names case-insensitive text search for text files only . options -arc XE : include content of . zip . jar . tar etc. archives as deep as possible , including nested archives . XD : demo will read first 1000 bytes of each entry . -qarc quick read top level archives but not nested ones . -bin do not autodetect file content , process all as binary . can also be used for floating text files ( one linefeed per paragraph , not per line ) . may produce unwanted line breaks with short-lined text . -len=n increase the line length for text extracted from binary to find longer strings . maximum is 600 approx. -wide same as -len=300 -delim=. , ; set delimiters to enable soft word wrapping . default is to soft wrap only on white space . -hidden include hidden and system files . -c case-sensitive search ( not default ) . -lnum list line numbers of hits . -nocol disable color highlighting of output ( sfk help colors ) . -names list only names of files @ @ @ @ @ @ @ @ @ @ matching lines per file . implies -names. requires -text option , can not be used with binary files . -quiet do not show " scan " progress info . -pure do not list filenames , list only text hits without indent . default when specifying a single file as first parameter . -verbose tells in detail what find is actually searching for . -nocconv disable umlaut and accent character conversions during output to console . " sfk help opt " for details . -firsthit show only first matching result per file . -justrc print nothing to terminal , just set return code . -head=n read only first n text lines from files . search limitations within binary data by default , only lines up to 80 characters are extracted from binary data , so strings longer than this may not be found . this can be changed by option -len=n or -wide. pattern support no wildcards or slash patterns are supported , with one exception : if you need to find patterns starting with " - " or " + " , prefix them with backslash to avoid misinterpretation as @ @ @ @ @ @ @ @ @ @ matches , 1 = matches found , &gt;1 = major error occurred . see also " sfk help opt " on how to influence error processing . see also--- open source commands ---sfk xfind search wildcard text in text/binary files sfk xtext search wildcard text in text files only sfk xhexfind search in text/binary with hex dump output sfk extract extract wildcard data from text/binary files sfk filter filter and edit text with simple wildcards sfk find search fixed text in text/binary files sfk ftext search fixed text in text files sfk hexfind search fixed text in binary files sfk replace replace fixed text in text/binary files --- freeware commands ---sfk view GUI tool to search text as you type --- xe commercial commands ---sfk replace replace fixed text with high performance sfk xreplace replace wildcard text in text/binary files sfk help xe about SFK XE and xreplace with SFK Expressions . web LONG ... find . foo bar include search all files in current dir for the words foo+bar+include. note that the short form syntax supports one directory name , and any number of text patterns , but no @ @ @ @ @ @ @ @ @ @ src1 src2 -file . cpp . hpp searches within the specified directories and file masks . sfk list src +find -verbose -pat -foo +list find lines containing words " -pat " , " -foo " and " +list " in all files of directory src , with verbose search infos. sfk find testfiles class +view search " class " within " testfiles " , and show results interactively in Depeche View ( " sfk view " for details ) . 217463 @qwx1077463 
@@120536117 @9536117/ <h> ASCII and ISO 8859-1 character set quick overview <p> , as created with the sfk ascii command from the swiss file knife tool . <p> Character set : ASCII from 0 to 126 , codes above are system specific , but most of them should display as ISO 8859-1 characters . Unprintable characters were replaced by a dot " . " . The code of the actual dot " . " is decimal 46 , hexadecimal 0x2E . To create such a table on the command line just download the swiss file knife , and run the command : sfk ascii Under windows , this will display DOS specific characters 128 to 255 directly in the command line window . To see windows specific characters instead , redirect the output into a file : sfk ascii &gt;tmp.txt then load this file in a windows text editor , e.g. notepad. 
@@120536119 @9536119/ <p> Basically , it is another view onto the same text ; everything is just like in the first window or view . This second view tries to CLONE the first , including the current text position , and the word you are currently searching . <p> The term NEARBY VIEW now gets a new meaning : in general , it is the view to the RIGHT , but if you 're already in the rightmost view , it wraps around , and nearby then means the leftmost view ( within the same vertical position ) . <p> Depeche View is a high speed text search tool for Windows and Linux ( WINE ) . Download the free Lite Edition here , or the 30 days Pro Demo here . Depeche View Lite requires no installation . Just run the tool , then load and search all text files of a folder instantly in one window . <p> snapshot with 8254 files loaded . the word " interface " was found 5690 times . 
@@120536120 @9536120/ <p> sfk ... +xex /from/ /from2/ a stream text filter using SFK Simple Expressions . - takes text stream input from a previous command or a single file . - joins all lines into one large block that can be searched in complete . - splits output again into lines for further use , or passes output as binary to +xed xed/xex is designed to post process small to medium sized data streams or files . it is not suitable to edit large files beyond 100 MB , as the whole content must fit into memory multiple times . use " sfk xreplace " to process large files . wildcards and SFK expressions SFK Expressions are simple patterns containing literal text , wildcards * and ? and character classes in square brackets . basically , the syntax provides extended wilcards but no further logic and is not related to regular expressions . search patterns are surrounded by a separator character which can be anything not contained in the search text , like / or within a pattern /fromtext/totext/the fromtextmay contain : * - 0 to 4000 characters in the @ @ @ @ @ @ @ @ @ @ being CR , LF or NULL . 4000 is just a default maximum that can be changed by : 0.100000 chars - 0 to 100000 characters in the same text line or paragraph , i.e. the same as * but with a larger range . ? - one character . ? ? ? ? ? - same as 5.5 chars or 5 charsbytes - 0 to 4000 bytes ( with CR , LF , NULL ) i.e. it collects stream text across lines , even in binary data ** - the same as bytes. 0.100 bytes - 0 to 100 bytes .100000 bytes - up to 100000 bytes 1. * bytes - 1 to default maximum bytes 30 bytes - exactly 30 bytes byte of aeiou - one vocal ( a OR A OR e OR ... ) , case insensitive by default . " aeiou " is a character list . byte of x2f - a backslash or forw. slash / bytes of rn t - whitespace incl. line ends bytes of ( rn t ) - the same , ( ) are optional bytes not rn0 - up @ @ @ @ @ @ @ @ @ @ or NULL byte appears chars - the same as bytes not rn0 , i.e. collect text in a line char not ( t ) - same as byte not ( rn0t ) , everything not blanks and tabs char not ) ( t - not brackets , blanks and tabs , same as not ( ( ) t ) chars of a-z0-9 - means a-zA-Z0-9 as search is case insensitive by default chars of x61-x7A - search a-z but not A-Z , or use option -case for case search eol - end of line by characters : CRLF or LF or CR white = chars of ( t ) - 0 or more whitespaces xwhite = bytes of ( t rn ) - same but across lines 1 white = byte of ( t ) - 1 whitespace digit = byte of ( 0-9 ) - 1 digit digits = bytes of ( 0-9 ) - 0 or more digits hexdigit = byte of ( 0-9a-f ) - 1 hexadecimal digit hexdigits = bytes of ( 0-9a-f ) - 0 or more hex digits special keywords that do not count @ @ @ @ @ @ @ @ @ @ but keep it in the input data , without consuming it ortext - fooortextbar searches word foo or bar . ortext is allowed only between literals. anchors that have no length of their own : start - start of file end - end of file lstart - line start , i.e. start or CRLF or CR or LF lend - logical line end , i.e. eol or end of file how to search or replace special characters : - to search or replace text containing the literal characters * ? then these must be escaped like * ? - ( ) are escaped only within character lists , like ( ) - to search or replace the forward slash ' / ' type x2f or use another char around from/to text , e.g. fromtexttotext - parameters with blanks and non trivial characters need double quotes " " , see also " about Shell Command Characters " below . expansion priorities : ( highest first ) if two search parts are side by side , and the same input character matches both , then these priorities apply : 5 : start @ @ @ @ @ @ @ @ @ @ , eol 3 : whitelist classes : byte of , bytes of 2 : blacklist classes : chars not , bytes not 1 : plain wildcards : ? , * , ** , byte , bytes , chars this means in " /bytesfoo/ " the bytes will stop to collect characters as soon as " foo " is found , as " foo " is a literal . on same or higher priority the right side stops the left side . the totextmay contain : part 1 - use first text part of the fromtext. e.g. the fromtext /*foo.100 charsbar*/ contains parts 1 2 3 4 5part1 - the same ( blank is optional ) . parts 1,2,3 - use parts 1 , 2 and 3. parts 1-10 - use parts 1 to 10. strip ( part1 , 0 ) - use part 1 but remove zero bytes. only zero bytes " 0 " can be removed . file.name - full input filename with path file.relname - input filename without path file.path - input file 's path file.base - relname without last . extension file.ext - input filename extension all @ @ @ @ @ @ @ @ @ @ - set variable " name " with data between setvar and endvar. getvar name - fill in data from variable " name " although anchors like lstart , lend count as a separate part they need NOT be specified in the totext. this means that /lstartfoolend/bar/ just changes the word " foo " . supported slash patternst = TAB r = CR n = LF x00 = one byte with code 00 hexadecimal 0 = short form for x00 q = a double quote " = the backslash character itself = the bracket open character = the bracket close character * = the literal star character * ? = the literal question mark ? - = to use literal " - " in a command Within multi line -bylist files : = slash+blank is changed to a single blank Only within " char of " or " byte not " lists : ( = to use literal character " ( " ) = to use literal character " ) " SFK expression options -showpart(s) print /from/ part numbers , range statistics and expansion priority points per part . done automatically @ @ @ @ @ @ @ @ @ @ command . -showbest if a /from/ pattern finds nothing , use this to see how many parts would match so far , and with up to how many bytes per part . anchors like lstart may show a non zero length when matching ( CR ) LF. -showlist with -bylist , show the internal joined list if commands are spread across multiple lines . -showall show all of the above . -xmaxlen=n set default maximum length for chars or bytes commands , e.g. -xmaxlen=10000 means /foo*bar/ matches with up to 10000 characters between foo and bar . the default max length without this option is 4000 characters . performance notes - always use a string literal , or single byte or char , at the start of your search expressions , like in /foo*bar/ starting with ' f ' . Do not use a wildcard like * at the start like in /*foobar/ when searching huge input data , as your search will slow down byfactor 256 . Use /lstart*foobar/ instead . - the system may cache output file(s) , writing to disk in background after sfk has finished . @ @ @ @ @ @ @ @ @ @ read /from/to/ patterns from a file x , supporting multiple lines per pattern . type sfk xrep for details . -bylinelist x read /from/to/ or just /from/ patterns from a file with one pattern per line . best for searching many phrases with simple or no output reformatting. -i process text stream from standard input -nomark do not highlight changes in output -nocol no colors at all to allow more memory -tofile f write output to file f. do not use +tofile chaining as it splits data into text lines . -rawterm on output to terminal do not strip codes below 32 . Null bytes are always stripped . -dumpraw create hex dump raw = w/o eol highlight -crlf , -lf for file headers and default totext : force crlf or lf line endings instead of default -justrc print no output , just set return code . -firsthit use only first matching result . chaining I/O supportextract ... +xed supports binary data transfer . xed ... +xed supports binary data transfer . In all other cases like xed ... +filter data is passed as text lines without zero bytes and @ @ @ @ @ @ @ @ @ @ four times free memory available then the actual number of bytes passed . web access support extracting the head section from a web page can be done like : sfk xex http : //192.168.1.100/ " **27;4962;TOOLONG " sfk xex http : //.100/ " **27;4991;TOOLONG " sfk web .100 +xex " **27;5020;TOOLONG " archive file reading xed may directly read archive file entries like **26;5049;TOOLONG for details and limitations type " sfk help xe " . beware of Shell Command Characters . to find or replace text patterns containing spaces or special characters like &lt;&gt; ! &amp; ? * you must add quotes " " around parameters or the shell environment will destroy your command . for example , pattern /foo bar/other/ must be written like " /foo bar/other/ " within a . bat or . cmd file the percent % must be escaped like %% even within quotes : sfk echo -spat " percent %% is a percent x25 " unexpected repeat replace behaviour depending on the input data and search/replace expressions , it can happen that running the same replace multiple times on the same stream produces further hits @ @ @ @ @ @ @ @ @ @ the sfk xtext extended help text by " sfk xtext -full " for details . quoted multi line parameters are supported in scripts using full trim . type " sfk script " for details . return codes for batch files 0 = no matches , 1 = matches found , &gt;1 = major error occurred . see also " sfk help opt " on how to influence error processing . about example numbers with brackets if you see 1 type " sfk cmd 1 " for whole command in one line . web referencehttp : **28;5077;TOOLONG in the SFK Book the SFK Book contains a 60 page tutorial , including detailed xed examples with input , script and output . type " sfk book " for details . examples Note : also see " sfk xed " for further examples . sfk xex in.txt " foo*barpart2n " extract any text found within the same line between foo and bar , using " " as separator character instead of " / " . you may leave out the third " " to get an info text listing part numbers . sfk @ @ @ @ @ @ @ @ @ @ with " foo " enclosed by double quotes , then having up to 100 bytes ( including CR or LF , i.e. across multiple text lines ) , then ending with bar enclosed by double quotes , and print all parts . sfk xex in.cpp " /printf(bytes) ; /alln/ " +xed " / ) ; eol/all/ " " /eol.100 bytes of x20/ / " collect all ( multi line ) printf statements from a text and reformat them as one statement per line . notice that " / ) ; eol/all/ " is a cover pattern , meaning it does not change anything , but keeps line endings after " ) ; " from being changed by other patterns . 1 sfk xex in.xml LONG ... if in.xml contains simple xml data like : LONG ... **45;5107;TOOLONG then reformat this to tab separated csv data . 2 sfk xex in.csv " lstart*t*t*&lt;row&gt;n **35;5154;TOOLONG **33;5191;TOOLONG LONG ... if in.csv contains tab separated data like : **34;5226;TOOLONG then reformat this to xml data . 3 dir sfk xex -i -bylist dirtags.txt reformat windows ' dir ' command output like : 05.12.2013 19:17 @ @ @ @ @ @ @ @ @ @ dirtags.txt like : LONG ... /DIR : part13n/. / ? ? . ? ? . ? ? ? ? white ? ? : ? ? whitedigit* not ( ) white* /file : part14n/. producing output : DIR : myproj file : readme.txt sfk xex in.hpp " /boolxwhitebCl* ; / " " /intxwhiteiCl* ; / " extract variable declarations like " bool bClDone ; " or " int iClCounter ; " from source code , including statements across multiple lines . sfk xex in.html " **27;5262;TOOLONG " extract head section from an html. notice that " " is used as the separator , as " / " is part of the text . sfk xex in.txt " /lstart4 chars15 chars15 **26;5291;TOOLONG " +xed " /whitechar of ( trn ) /part2/ " +tabtocsv extract from fixed column data like below : 4 7936JAMES FOO ATLANTA 20140129 the first three columns as comma separated data like 7936 , JAMES FOO , ATLANTA sfk xex **38;5319;TOOLONG " /class*/ " XE : extract phrases starting with " class " from a . tar.gz within a . tar.bz2 within a . zip file . XD : @ @ @ @ @ @ @ @ @ @ " /rel : 02 digits. 02 digits. 04 digits/setvar dateparts 2,3,4,5,6endvar/ " +getvar searches a phrase like " rel : 03.09.2016 " within in.txt and stores it as an sfk variable " date " . the +getvar prints all defined variables with their content . 7 sfk xex in.xml " **40;5359;TOOLONG " type this incomplete command to get part number infos. then complete the command like : sfk xex in.xml LONG ... +filt -line=3+setvar zoneid +echo -var " .100/start.php ? zone=# ( zoneid ) " from an xml file like LONG ... LONG ... get the 3rd i 'd and create an http URL using echo . add +tweb to execute the web request . 9 sfk xex foo.h +setvar a +then xed bar.c " /lstart#include qfoo.hq*eol/getvar a/ " replace a text line : #include " foo.h " within file bar.c by the file content of foo.h 217463 @qwx1077463 
@@120536121 @9536121/ <p> Practice Range An simple version of the game , good for some practicing . <p> In Another Surreal Dream ... <p> you find yourself in a strange gallery , full of boring but expensive images . As you try to leave , you notice that the security robots behave somewhat aggressive ... and suddenly , you know : this is n't the art that should be shown here , and these bots belong to some kind of tasteless alien force . What a coincidence that you carry a rocket launcher with you , to start your mission ... clear all areas , and find your way out ! <p> Further game tips:Prepare a piece of paper , and a pencil , to write down the precious access codes . Never mix up or forget SHIFT and CTRL , they ARE important within action . SHIFT is not just for running , but also for a quick turn . For precise far shots , do not use SHIFT , instead try several shots with a slight CTRL sidestep . Mind that you can fire just 6 rockets in parallel @ @ @ @ @ @ @ @ @ @ long until they hit the far end . <p> More game snapshots , desktop backgrounds and infos are available here . You may also write your own 3D Java action game using the free game SDK. 
@@120536123 @9536123/ <p> sfk hexfind opts -pat /pattern/ -dir anydir -file . ext1 . ext2 search text or binary data in text and binary files . if multiple patterns are given then they are searched independently ( pattern1 OR pattern2 ) . this is a basic command to search only static data . type sfk xhexfind to use wildcards and expressions . subdirectories are included by default the sfk default for most commands is to process the given folders , as well as all subdirs within them . specify -nosub to disable this . options -nosub do not include files in subdirectories. -nobinary skip binary files . -case case-sensitive text comparison . default is case-insensitive comparison for all -text strings , but NOT for -bin blocks . case-sensitive comparison is faster then case-insensitive. -nocase force case-insensitive comparison ALSO on -bin patterns . -text starts a list of search patterns of the form /src/ or /src/totext/ where / is the separator char , src the text to search for , and totext a mask to reformat output . any separator char can be used which is not part of the search text @ @ @ @ @ @ @ @ @ @ . -text is not required if a single filename is given . -pat the same as -text , starting a pattern list . -spat same as -pat but also activates slash patterns like t . type " sfk help pat " for the list of possible patterns . -spatstrict same as -spat , but stops with error on undefined slash patterns like m in C : myproj. every slash must then be escaped , e.g. using C : myproj. -binary starts a list of binary replace patterns , specified as hexcode like /0A0D/2020/ -bylist x.txt read search patterns from a file x.txt , supporting multiple lines per pattern . ( add -full for more. ) -bylinelist x read /from/to/ or just /from/ patterns from a file x with one pattern per line . ( add -full for more. ) -by(line)list does not support sfk variables . to use variables in patterns create an sfk script with patterns as parameters . " sfk script " for more . -arc XE : include content of . zip . jar . tar etc. archives as deep as possible , including nested archives . @ @ @ @ @ @ @ @ @ @ entry . -qarc quick read top level archives but not nested ones . -firsthit process only first found pattern match per file . -quiet do not show progress infos. -stat show statistics like hits per pattern and no. of files . -perf show performance statistics . -full print full help text telling about -bylist pat . files , special character case sensitivity and nested or repeated replace behaviour . output options -wide show 16 bytes per line in output . -lean show 8 bytes per line in output . -fullheader print offset/length of hits both in decimal and hex. -maxdump=n show up to n bytes only . -nodump do not create a hexdump , list only matching files . -showle highlight CR/LF line endings in hex dump output -context=n with hexdump : show additional n bytes of context . -reldist with hexdump : tell relative distances to previous hits . +tofile x as last parameter ( command chaining ) : write text as displayed on terminal to a file x. return codes for batch files 0 = no matches , 1 = matches found , &gt;1 = major error occurred @ @ @ @ @ @ @ @ @ @ to influence error processing . quoted multi line parameters are supported in scripts using full trim . type " sfk script " for details . aliasessfk xhexfind is the same as xfind -hex to extract unmodified binary data you may use either sfk xfind -pure ... -tofile or sfk extract ... -tofilesee also--- open source commands ---sfk xfind search wildcard text in text/binary files sfk xtext search wildcard text in text files only sfk xhexfind search in text/binary with hex dump output sfk extract extract wildcard data from text/binary files sfk filter filter and edit text with simple wildcards sfk find search fixed text in text/binary files sfk ftext search fixed text in text files sfk hexfind search fixed text in binary files sfk replace replace fixed text in text/binary files --- freeware commands ---sfk view GUI tool to search text as you type --- xe commercial commands ---sfk replace replace fixed text with high performance sfk xreplace replace wildcard text in text/binary files sfk help xe about SFK XE and xreplace with SFK Expressions . beware of Shell Command Characters . to find or replace text patterns containing spaces @ @ @ @ @ @ @ @ @ @ must add quotes " " around parameters or the shell environment will destroy your command . for example , pattern /foo bar/other/ must be written like " /foo bar/other/ " within a . bat or . cmd file the percent % must be escaped like %% even within quotes : sfk echo -spat " percent %% is a percent x25 " web LONG ... usage errorssfk hexfind in.txt " /foorn/ " will not find " foo " at line ends , but searches literal strings like " slash and r " . add option -spat to enable slash patterns , converting rn to real CRLF codes , or use xhexfind where slash patterns are default . sfk hexfind mydir " /foo*bar/ " will not find " foo " and " bar " with any characters inbetween , but searches a literal star " * " . use xhexfind to enable search with wildcards. sfk rep in.txt " /foo0.1000 bytesbar/---/ " will not replace up to 1000 bytes between " foo " and " bar " , but replaces a literal string " foo " then " 1000 bytes " then @ @ @ @ @ @ @ @ @ @ examplessfk hexfind -text " /foo/ " " /bar/ " -dir mydir -file . txt . hpp find words " foo " or " bar " case insensitive in all . txt or . hpp files in a folder mydir. sfk hexfind -binary /666f6f/ -dir mydir -file . exe +view find binary data with hex values 0x66 , 0x6f , 0x6f in all . exe files of mydir and show result in dview. 217463 @qwx1077463 
@@120536126 @9536126/ <p> gls stands for " grep the lslr index " . ( sfk will create a small batch file from the above , adding things like %1 %2 %3 automatically. ) now , the first time you enter a new package 's main directory , type for example <p> gls ! barbox util <p> which will <p> create the very detailed index file " lslr " <p> search instantly for the words " barbox " AND " util " accross this index <p> all in one step . But the next time you search further classes , you do n't have to recreate the lslr index file , so create another alias : <p> then , if LONG ... is listed in the command shell , double-click on it ( provided that QuickEdit and Insert is configured ON with your shell ) , press right button to copy to clipboard. type 217463 @qwx1077463 
@@120536130 @9536130/ <h> Find out which files are used ( referenced ) by other files through fuzzy content analysis , with the free sfk reflist command for the Windows , Mac OS X , Linux command shell . <p> sfk reflist -path -wide -dir sdir -file . text -dir tdir -file . sextsfk reflist -dir sourcedir -dir targetdir1 targetdir2 targetdir3 ... list possible dependencies between files through ( fuzzy ) content analysis . find out which target files are referenced by any of the source files . a list of target files is created from directory targdir. then all source files are loaded from srcdir , and scanned if the names of the targets appear within their content . if so , the targets are listed , with the number of referring source files , and a list ( of the first 10 ) of these files . NOTE that sfk reflist DOES NOT GUARANTEE that files are ( not ) referenced . This way of reference detection is just a FUZZY INDICATOR , so keep thinking and make backups before you massively cleanup files without references ! NOTE : you @ @ @ @ @ @ @ @ @ @ of target directories is incomplete , files from there will NOT be found . by default , only relative target filenames are searched , without path , but including the file name extension . e.g. the target file : the/path/foosys.dll runs a search for : foosys.dll in the source files . options -path search target filenames including path information . e.g. the target file : the/path/foosys.dll runs a search for : the/path/foosys.dll -noext strip . extensions from filenames , compare only basename. e.g. the target file : the/path/foosys.dll runs a search for : foosys which may lead to ambiguities , listing too many hits . -noext can also be combined with -path. -wide=n list references in an extended format , with a list of ( up to to n ) source files per target file , telling in detail which text patterns were found . -case force case sensitive string comparison ( not default ) . -quiet do not print the number of source and target files . -relnames if using -path , strip targdir name from target paths for comparison . -flat do not check if target files depend @ @ @ @ @ @ @ @ @ @ , if you know that such dependencies can not exist , e.g. if the targets are . wav files . -memlimit=n load and analyze only files with a size up to n mbytes. the default load limit is 300 mbytes. see alsosfk deplist list file dependencies. web LONG ... reflist -dir mysrcdir mytargdir check every file in mytargdir if it is referenced by any file within mysrcdir. sfk reflist -dir movie -file . ppt -dir pic -file . png find out which . png files within pic are referenced by . ppt files within movie . sfk reflist -wide=100 -dir bin -file . exe -dir bin -file . dll find out which . dlls are directly referenced by . exe files within directory bin , listing up to 100 references per target . sfk reflist -dir . -file . flp -dir . -file . wav within a FruityLoops project directory lists which . wav files are referenced by which . flp project files of that directory . sfk reflist -dir film -file . ppj -dir audio frames clips tell which audio , image and movie clip files ( e.g. . @ @ @ @ @ @ @ @ @ @ Adobe Premiere project files ( . ppj ) within the film directory . if image sequences are used , only the first image of such sequences will be found , e.g. foobar00001.bmp <p> SFK is a free open source command line tool that runs instantly without installation . Get sfk.exe from the zip package and use it ( binaries for Windows , Linux and Mac OS/X are included ) . <p> Read about all SFK functions , including a 60 page tutorial with detailed example scripts , in the 5 Dollar Mobile PDF optimized for your Smartphone ! 
@@120536131 @9536131/ <p> Practice Range An simple version of the game , good for some practicing . <p> In Another Surreal Dream ... <p> you find yourself in a strange gallery , full of boring but expensive images . As you try to leave , you notice that the security robots behave somewhat aggressive ... and suddenly , you know : this is n't the art that should be shown here , and these bots belong to some kind of tasteless alien force . What a coincidence that you carry a rocket launcher with you , to start your mission ... clear all areas , and find your way out ! <p> Further game tips:Prepare a piece of paper , and a pencil , to write down the precious access codes . Never mix up or forget SHIFT and CTRL , they ARE important within action . SHIFT is not just for running , but also for a quick turn . For precise far shots , do not use SHIFT , instead try several shots with a slight CTRL sidestep . Mind that you can fire just 6 rockets in parallel @ @ @ @ @ @ @ @ @ @ long until they hit the far end . <p> More game snapshots , desktop backgrounds and infos are available here . You may also write your own 3D Java action game using the free game SDK. 
@@120536133 @9536133/ <p> sfk hexfind opts -pat /pattern/ -dir anydir -file . ext1 . ext2 search text or binary data in text and binary files . if multiple patterns are given then they are searched independently ( pattern1 OR pattern2 ) . this is a basic command to search only static data . type sfk xhexfind to use wildcards and expressions . subdirectories are included by default the sfk default for most commands is to process the given folders , as well as all subdirs within them . specify -nosub to disable this . options -nosub do not include files in subdirectories. -nobinary skip binary files . -case case-sensitive text comparison . default is case-insensitive comparison for all -text strings , but NOT for -bin blocks . case-sensitive comparison is faster then case-insensitive. -nocase force case-insensitive comparison ALSO on -bin patterns . -text starts a list of search patterns of the form /src/ or /src/totext/ where / is the separator char , src the text to search for , and totext a mask to reformat output . any separator char can be used which is not part of the search text @ @ @ @ @ @ @ @ @ @ . -text is not required if a single filename is given . -pat the same as -text , starting a pattern list . -spat same as -pat but also activates slash patterns like t . type " sfk help pat " for the list of possible patterns . -spatstrict same as -spat , but stops with error on undefined slash patterns like m in C : myproj. every slash must then be escaped , e.g. using C : myproj. -binary starts a list of binary replace patterns , specified as hexcode like /0A0D/2020/ -bylist x.txt read search patterns from a file x.txt , supporting multiple lines per pattern . ( add -full for more. ) -bylinelist x read /from/to/ or just /from/ patterns from a file x with one pattern per line . ( add -full for more. ) -by(line)list does not support sfk variables . to use variables in patterns create an sfk script with patterns as parameters . " sfk script " for more . -arc XE : include content of . zip . jar . tar etc. archives as deep as possible , including nested archives . @ @ @ @ @ @ @ @ @ @ entry . -qarc quick read top level archives but not nested ones . -firsthit process only first found pattern match per file . -quiet do not show progress infos. -stat show statistics like hits per pattern and no. of files . -perf show performance statistics . -full print full help text telling about -bylist pat . files , special character case sensitivity and nested or repeated replace behaviour . output options -wide show 16 bytes per line in output . -lean show 8 bytes per line in output . -fullheader print offset/length of hits both in decimal and hex. -maxdump=n show up to n bytes only . -nodump do not create a hexdump , list only matching files . -showle highlight CR/LF line endings in hex dump output -context=n with hexdump : show additional n bytes of context . -reldist with hexdump : tell relative distances to previous hits . +tofile x as last parameter ( command chaining ) : write text as displayed on terminal to a file x. return codes for batch files 0 = no matches , 1 = matches found , &gt;1 = major error occurred @ @ @ @ @ @ @ @ @ @ to influence error processing . quoted multi line parameters are supported in scripts using full trim . type " sfk script " for details . aliasessfk xhexfind is the same as xfind -hex to extract unmodified binary data you may use either sfk xfind -pure ... -tofile or sfk extract ... -tofilesee also--- open source commands ---sfk xfind search wildcard text in text/binary files sfk xtext search wildcard text in text files only sfk xhexfind search in text/binary with hex dump output sfk extract extract wildcard data from text/binary files sfk filter filter and edit text with simple wildcards sfk find search fixed text in text/binary files sfk ftext search fixed text in text files sfk hexfind search fixed text in binary files sfk replace replace fixed text in text/binary files --- freeware commands ---sfk view GUI tool to search text as you type --- xe commercial commands ---sfk replace replace fixed text with high performance sfk xreplace replace wildcard text in text/binary files sfk help xe about SFK XE and xreplace with SFK Expressions . beware of Shell Command Characters . to find or replace text patterns containing spaces @ @ @ @ @ @ @ @ @ @ must add quotes " " around parameters or the shell environment will destroy your command . for example , pattern /foo bar/other/ must be written like " /foo bar/other/ " within a . bat or . cmd file the percent % must be escaped like %% even within quotes : sfk echo -spat " percent %% is a percent x25 " web LONG ... usage errorssfk hexfind in.txt " /foorn/ " will not find " foo " at line ends , but searches literal strings like " slash and r " . add option -spat to enable slash patterns , converting rn to real CRLF codes , or use xhexfind where slash patterns are default . sfk hexfind mydir " /foo*bar/ " will not find " foo " and " bar " with any characters inbetween , but searches a literal star " * " . use xhexfind to enable search with wildcards. sfk rep in.txt " /foo0.1000 bytesbar/---/ " will not replace up to 1000 bytes between " foo " and " bar " , but replaces a literal string " foo " then " 1000 bytes " then @ @ @ @ @ @ @ @ @ @ examplessfk hexfind -text " /foo/ " " /bar/ " -dir mydir -file . txt . hpp find words " foo " or " bar " case insensitive in all . txt or . hpp files in a folder mydir. sfk hexfind -binary /666f6f/ -dir mydir -file . exe +view find binary data with hex values 0x66 , 0x6f , 0x6f in all . exe files of mydir and show result in dview. 217463 @qwx1077463 
@@120536135 @9536135/ <p> gls stands for " grep the lslr index " . ( sfk will create a small batch file from the above , adding things like %1 %2 %3 automatically. ) now , the first time you enter a new package 's main directory , type for example <p> gls ! barbox util <p> which will <p> create the very detailed index file " lslr " <p> search instantly for the words " barbox " AND " util " accross this index <p> all in one step . But the next time you search further classes , you do n't have to recreate the lslr index file , so create another alias : <p> then , if LONG ... is listed in the command shell , double-click on it ( provided that QuickEdit and Insert is configured ON with your shell ) , press right button to copy to clipboard. type 217463 @qwx1077463 
@@120536138 @9536138/ <p> sfk ... +xex /from/ /from2/ a stream text filter using SFK Simple Expressions . - takes text stream input from a previous command or a single file . - joins all lines into one large block that can be searched in complete . - splits output again into lines for further use , or passes output as binary to +xed xed/xex is designed to post process small to medium sized data streams or files . it is not suitable to edit large files beyond 100 MB , as the whole content must fit into memory multiple times . use " sfk xreplace " to process large files . wildcards and SFK expressions SFK Expressions are simple patterns containing literal text , wildcards * and ? and character classes in square brackets . basically , the syntax provides extended wilcards but no further logic and is not related to regular expressions . search patterns are surrounded by a separator character which can be anything not contained in the search text , like / or within a pattern /fromtext/totext/the fromtextmay contain : * - 0 to 4000 characters in the @ @ @ @ @ @ @ @ @ @ being CR , LF or NULL . 4000 is just a default maximum that can be changed by : 0.100000 chars - 0 to 100000 characters in the same text line or paragraph , i.e. the same as * but with a larger range . ? - one character . ? ? ? ? ? - same as 5.5 chars or 5 charsbytes - 0 to 4000 bytes ( with CR , LF , NULL ) i.e. it collects stream text across lines , even in binary data ** - the same as bytes. 0.100 bytes - 0 to 100 bytes .100000 bytes - up to 100000 bytes 1. * bytes - 1 to default maximum bytes 30 bytes - exactly 30 bytes byte of aeiou - one vocal ( a OR A OR e OR ... ) , case insensitive by default . " aeiou " is a character list . byte of x2f - a backslash or forw. slash / bytes of rn t - whitespace incl. line ends bytes of ( rn t ) - the same , ( ) are optional bytes not rn0 - up @ @ @ @ @ @ @ @ @ @ or NULL byte appears chars - the same as bytes not rn0 , i.e. collect text in a line char not ( t ) - same as byte not ( rn0t ) , everything not blanks and tabs char not ) ( t - not brackets , blanks and tabs , same as not ( ( ) t ) chars of a-z0-9 - means a-zA-Z0-9 as search is case insensitive by default chars of x61-x7A - search a-z but not A-Z , or use option -case for case search eol - end of line by characters : CRLF or LF or CR white = chars of ( t ) - 0 or more whitespaces xwhite = bytes of ( t rn ) - same but across lines 1 white = byte of ( t ) - 1 whitespace digit = byte of ( 0-9 ) - 1 digit digits = bytes of ( 0-9 ) - 0 or more digits hexdigit = byte of ( 0-9a-f ) - 1 hexadecimal digit hexdigits = bytes of ( 0-9a-f ) - 0 or more hex digits special keywords that do not count @ @ @ @ @ @ @ @ @ @ but keep it in the input data , without consuming it ortext - fooortextbar searches word foo or bar . ortext is allowed only between literals. anchors that have no length of their own : start - start of file end - end of file lstart - line start , i.e. start or CRLF or CR or LF lend - logical line end , i.e. eol or end of file how to search or replace special characters : - to search or replace text containing the literal characters * ? then these must be escaped like * ? - ( ) are escaped only within character lists , like ( ) - to search or replace the forward slash ' / ' type x2f or use another char around from/to text , e.g. fromtexttotext - parameters with blanks and non trivial characters need double quotes " " , see also " about Shell Command Characters " below . expansion priorities : ( highest first ) if two search parts are side by side , and the same input character matches both , then these priorities apply : 5 : start @ @ @ @ @ @ @ @ @ @ , eol 3 : whitelist classes : byte of , bytes of 2 : blacklist classes : chars not , bytes not 1 : plain wildcards : ? , * , ** , byte , bytes , chars this means in " /bytesfoo/ " the bytes will stop to collect characters as soon as " foo " is found , as " foo " is a literal . on same or higher priority the right side stops the left side . the totextmay contain : part 1 - use first text part of the fromtext. e.g. the fromtext /*foo.100 charsbar*/ contains parts 1 2 3 4 5part1 - the same ( blank is optional ) . parts 1,2,3 - use parts 1 , 2 and 3. parts 1-10 - use parts 1 to 10. strip ( part1 , 0 ) - use part 1 but remove zero bytes. only zero bytes " 0 " can be removed . file.name - full input filename with path file.relname - input filename without path file.path - input file 's path file.base - relname without last . extension file.ext - input filename extension all @ @ @ @ @ @ @ @ @ @ - set variable " name " with data between setvar and endvar. getvar name - fill in data from variable " name " although anchors like lstart , lend count as a separate part they need NOT be specified in the totext. this means that /lstartfoolend/bar/ just changes the word " foo " . supported slash patternst = TAB r = CR n = LF x00 = one byte with code 00 hexadecimal 0 = short form for x00 q = a double quote " = the backslash character itself = the bracket open character = the bracket close character * = the literal star character * ? = the literal question mark ? - = to use literal " - " in a command Within multi line -bylist files : = slash+blank is changed to a single blank Only within " char of " or " byte not " lists : ( = to use literal character " ( " ) = to use literal character " ) " SFK expression options -showpart(s) print /from/ part numbers , range statistics and expansion priority points per part . done automatically @ @ @ @ @ @ @ @ @ @ command . -showbest if a /from/ pattern finds nothing , use this to see how many parts would match so far , and with up to how many bytes per part . anchors like lstart may show a non zero length when matching ( CR ) LF. -showlist with -bylist , show the internal joined list if commands are spread across multiple lines . -showall show all of the above . -xmaxlen=n set default maximum length for chars or bytes commands , e.g. -xmaxlen=10000 means /foo*bar/ matches with up to 10000 characters between foo and bar . the default max length without this option is 4000 characters . performance notes - always use a string literal , or single byte or char , at the start of your search expressions , like in /foo*bar/ starting with ' f ' . Do not use a wildcard like * at the start like in /*foobar/ when searching huge input data , as your search will slow down byfactor 256 . Use /lstart*foobar/ instead . - the system may cache output file(s) , writing to disk in background after sfk has finished . @ @ @ @ @ @ @ @ @ @ read /from/to/ patterns from a file x , supporting multiple lines per pattern . type sfk xrep for details . -bylinelist x read /from/to/ or just /from/ patterns from a file with one pattern per line . best for searching many phrases with simple or no output reformatting. -i process text stream from standard input -nomark do not highlight changes in output -nocol no colors at all to allow more memory -tofile f write output to file f. do not use +tofile chaining as it splits data into text lines . -rawterm on output to terminal do not strip codes below 32 . Null bytes are always stripped . -dumpraw create hex dump raw = w/o eol highlight -crlf , -lf for file headers and default totext : force crlf or lf line endings instead of default -justrc print no output , just set return code . -firsthit use only first matching result . chaining I/O supportextract ... +xed supports binary data transfer . xed ... +xed supports binary data transfer . In all other cases like xed ... +filter data is passed as text lines without zero bytes and @ @ @ @ @ @ @ @ @ @ four times free memory available then the actual number of bytes passed . web access support extracting the head section from a web page can be done like : sfk xex http : //192.168.1.100/ " **27;5401;TOOLONG " sfk xex http : //.100/ " **27;5430;TOOLONG " sfk web .100 +xex " **27;5459;TOOLONG " archive file reading xed may directly read archive file entries like **26;5488;TOOLONG for details and limitations type " sfk help xe " . beware of Shell Command Characters . to find or replace text patterns containing spaces or special characters like &lt;&gt; ! &amp; ? * you must add quotes " " around parameters or the shell environment will destroy your command . for example , pattern /foo bar/other/ must be written like " /foo bar/other/ " within a . bat or . cmd file the percent % must be escaped like %% even within quotes : sfk echo -spat " percent %% is a percent x25 " unexpected repeat replace behaviour depending on the input data and search/replace expressions , it can happen that running the same replace multiple times on the same stream produces further hits @ @ @ @ @ @ @ @ @ @ the sfk xtext extended help text by " sfk xtext -full " for details . quoted multi line parameters are supported in scripts using full trim . type " sfk script " for details . return codes for batch files 0 = no matches , 1 = matches found , &gt;1 = major error occurred . see also " sfk help opt " on how to influence error processing . about example numbers with brackets if you see 1 type " sfk cmd 1 " for whole command in one line . web referencehttp : **28;5516;TOOLONG in the SFK Book the SFK Book contains a 60 page tutorial , including detailed xed examples with input , script and output . type " sfk book " for details . examples Note : also see " sfk xed " for further examples . sfk xex in.txt " foo*barpart2n " extract any text found within the same line between foo and bar , using " " as separator character instead of " / " . you may leave out the third " " to get an info text listing part numbers . sfk @ @ @ @ @ @ @ @ @ @ with " foo " enclosed by double quotes , then having up to 100 bytes ( including CR or LF , i.e. across multiple text lines ) , then ending with bar enclosed by double quotes , and print all parts . sfk xex in.cpp " /printf(bytes) ; /alln/ " +xed " / ) ; eol/all/ " " /eol.100 bytes of x20/ / " collect all ( multi line ) printf statements from a text and reformat them as one statement per line . notice that " / ) ; eol/all/ " is a cover pattern , meaning it does not change anything , but keeps line endings after " ) ; " from being changed by other patterns . 1 sfk xex in.xml LONG ... if in.xml contains simple xml data like : LONG ... **45;5546;TOOLONG then reformat this to tab separated csv data . 2 sfk xex in.csv " lstart*t*t*&lt;row&gt;n **35;5593;TOOLONG **33;5630;TOOLONG LONG ... if in.csv contains tab separated data like : **34;5665;TOOLONG then reformat this to xml data . 3 dir sfk xex -i -bylist dirtags.txt reformat windows ' dir ' command output like : 05.12.2013 19:17 @ @ @ @ @ @ @ @ @ @ dirtags.txt like : LONG ... /DIR : part13n/. / ? ? . ? ? . ? ? ? ? white ? ? : ? ? whitedigit* not ( ) white* /file : part14n/. producing output : DIR : myproj file : readme.txt sfk xex in.hpp " /boolxwhitebCl* ; / " " /intxwhiteiCl* ; / " extract variable declarations like " bool bClDone ; " or " int iClCounter ; " from source code , including statements across multiple lines . sfk xex in.html " **27;5701;TOOLONG " extract head section from an html. notice that " " is used as the separator , as " / " is part of the text . sfk xex in.txt " /lstart4 chars15 chars15 **26;5730;TOOLONG " +xed " /whitechar of ( trn ) /part2/ " +tabtocsv extract from fixed column data like below : 4 7936JAMES FOO ATLANTA 20140129 the first three columns as comma separated data like 7936 , JAMES FOO , ATLANTA sfk xex **38;5758;TOOLONG " /class*/ " XE : extract phrases starting with " class " from a . tar.gz within a . tar.bz2 within a . zip file . XD : @ @ @ @ @ @ @ @ @ @ " /rel : 02 digits. 02 digits. 04 digits/setvar dateparts 2,3,4,5,6endvar/ " +getvar searches a phrase like " rel : 03.09.2016 " within in.txt and stores it as an sfk variable " date " . the +getvar prints all defined variables with their content . 7 sfk xex in.xml " **40;5798;TOOLONG " type this incomplete command to get part number infos. then complete the command like : sfk xex in.xml LONG ... +filt -line=3+setvar zoneid +echo -var " .100/start.php ? zone=# ( zoneid ) " from an xml file like LONG ... LONG ... get the 3rd i 'd and create an http URL using echo . add +tweb to execute the web request . 9 sfk xex foo.h +setvar a +then xed bar.c " /lstart#include qfoo.hq*eol/getvar a/ " replace a text line : #include " foo.h " within file bar.c by the file content of foo.h 217463 @qwx1077463 
@@120536141 @9536141/ <p> sfk fromnet port options receive network text sent by sfk tolog or tonetlog. if a port number is given , it is used to receive text instead of the default UDP port 21323. options -raw do not cache text lines without linefeed but print them to terminal immediately . default is to wait for a linefeed , to join large lines split across multiple messages . chaining support can not not use chain input data . see also sfk netlog - how to send SFK network text sfk udpdump - print raw udp data immediately A recommended GUI tool to view and filter network text is Depeche View . Type sfk getdv to download , then run the tool by dview -net for instant net text display . It runs with Windows , and on Linux/Mac using WINE . web LONG ... fromnet wait for incoming text and print it to terminal . sfk fromnet +filter -high red error +loop highlight errors in red in the incoming text . sfk echo " waiting ... " +fromnet 5000 prints a message then waits for text on port 5000. to @ @ @ @ @ @ @ @ @ @ " hello " +tonetlog localhost:5000 217463 @qwx1077463 
@@120536142 @9536142/ <h> Find out which files are used ( referenced ) by other files through fuzzy content analysis , with the free sfk reflist command for the Windows , Mac OS X , Linux command shell . <p> sfk reflist -path -wide -dir sdir -file . text -dir tdir -file . sextsfk reflist -dir sourcedir -dir targetdir1 targetdir2 targetdir3 ... list possible dependencies between files through ( fuzzy ) content analysis . find out which target files are referenced by any of the source files . a list of target files is created from directory targdir. then all source files are loaded from srcdir , and scanned if the names of the targets appear within their content . if so , the targets are listed , with the number of referring source files , and a list ( of the first 10 ) of these files . NOTE that sfk reflist DOES NOT GUARANTEE that files are ( not ) referenced . This way of reference detection is just a FUZZY INDICATOR , so keep thinking and make backups before you massively cleanup files without references ! NOTE : you @ @ @ @ @ @ @ @ @ @ of target directories is incomplete , files from there will NOT be found . by default , only relative target filenames are searched , without path , but including the file name extension . e.g. the target file : the/path/foosys.dll runs a search for : foosys.dll in the source files . options -path search target filenames including path information . e.g. the target file : the/path/foosys.dll runs a search for : the/path/foosys.dll -noext strip . extensions from filenames , compare only basename. e.g. the target file : the/path/foosys.dll runs a search for : foosys which may lead to ambiguities , listing too many hits . -noext can also be combined with -path. -wide=n list references in an extended format , with a list of ( up to to n ) source files per target file , telling in detail which text patterns were found . -case force case sensitive string comparison ( not default ) . -quiet do not print the number of source and target files . -relnames if using -path , strip targdir name from target paths for comparison . -flat do not check if target files depend @ @ @ @ @ @ @ @ @ @ , if you know that such dependencies can not exist , e.g. if the targets are . wav files . -memlimit=n load and analyze only files with a size up to n mbytes. the default load limit is 300 mbytes. see alsosfk deplist list file dependencies. web LONG ... reflist -dir mysrcdir mytargdir check every file in mytargdir if it is referenced by any file within mysrcdir. sfk reflist -dir movie -file . ppt -dir pic -file . png find out which . png files within pic are referenced by . ppt files within movie . sfk reflist -wide=100 -dir bin -file . exe -dir bin -file . dll find out which . dlls are directly referenced by . exe files within directory bin , listing up to 100 references per target . sfk reflist -dir . -file . flp -dir . -file . wav within a FruityLoops project directory lists which . wav files are referenced by which . flp project files of that directory . sfk reflist -dir film -file . ppj -dir audio frames clips tell which audio , image and movie clip files ( e.g. . @ @ @ @ @ @ @ @ @ @ Adobe Premiere project files ( . ppj ) within the film directory . if image sequences are used , only the first image of such sequences will be found , e.g. foobar00001.bmp <p> SFK is a free open source command line tool that runs instantly without installation . Get sfk.exe from the zip package and use it ( binaries for Windows , Linux and Mac OS/X are included ) . <p> Read about all SFK functions , including a 60 page tutorial with detailed example scripts , in the 5 Dollar Mobile PDF optimized for your Smartphone ! 
@@120536143 @9536143/ <p> Search text in one or more . zip , . jar , . ear , . war or . aar files , and even zip files nested within other zips , with the free ZZFind tool for Windows and Linux . Fully portable , no installation - runs from any USB stick . <p> The current version is 1.5.6 Revision 3 , fixing startup error messages . <p> Type " zzfind " on the command line to get the following help text . <p> usage:zzfind opts zipname word1 word2 word3 ... zzfind opts -pat word1 ... -dir zip1 ! *path -file ! . ext1 searches in . zip . jar . ear . war or . aar files , and in zip files embedded within other zip files , for words . if multiple words are given , then only areas containing ALL words are listed . the search is case insensitive by default . zzfind autodetects if a file content is text or binary . with binary , the distance between words must be &lt;80 chars to be listed as a hit . file and search pattern @ @ @ @ @ @ @ @ @ @ flexible : singlezipname word1 word2 word3 ... searches a single zip file for words . 2. long form , more to type but very flexible : -pat word1 ... -dir zip1 zip2 ! *pathmask -file fm1 fm2 searches any number of zip files for patterns ( words ) , but only - within subfiles having file mask fm1 or fm2 in their name - within subfiles having ( not ) pathmask in their path . " subfile " means a file within a zip file . a path mask is defined as a word with a wildcard " * " listed in the -dir section . path masks and file masks can be negated by ! , for example , " -file ! . bak " means " all files except . bak files " . to learn all about the file selection syntax , it is recommended to download the free Swiss File Knife Base and type " sfk help select " . options -text process only text files , skip all binary files . finds words also over long lines , avoiding line breaks . -bin do not @ @ @ @ @ @ @ @ @ @ also be used for floating text files ( one linefeed per paragraph , not per line ) . may produce unwanted line breaks with short-lined text . -case or -c activates case-sensitive search ( not default ) . -lnum list line numbers of hits . -nocol disable color highlighting of output . -names list only names of files containing at least one hit . -count list no. of matching lines per file . implies -names. requires -text option , can not be used with binary files . -quiet do not show " scan " progress info . -pure do not list filenames , list only text hits without indent . default when specifying a single file as first parameter . -verbose tells in detail what find is actually searching for . pattern support : no wildcards or slash patterns are supported , with one exception : if you need to find patterns starting with " - " or " + " , prefix them with backslash to avoid misinterpretation as options . return codes for batch files 0 = no matches , 1 = matches found , &gt;1 = error @ @ @ @ @ @ @ @ @ @ within myzip for the words foo+bar+include. zzfind -text myzip.zip foo bar include the same , but search only in text files , skipping binaries. zzfind -pat " class " -dir source.zip -file . h search all . h files within source.zip for pattern " class " . zzfind -pat " class " -dir x.zip *include search for pattern " class " in all include directories of x.zip. note that the " * " marks include as a path mask . zzfind -pat foosys -dir foo.zip bar.zip ! *depr -file . java within files foo.zip and bar.zip search for the word " foosys " but only within . java file contents that are NOT located within a path starting with " depr " ( e.g. deprecated ) . <p> including the contents of all contained . zip , . tar , . tar.gz and . tar.bz2 archive files <p> including archives embedded within other archives , like a . tar.bz2 within a . tar.gz within a . zip . <p> The free Swiss File Knife Base allows to create directory listings of all files and archives in a folder , and @ @ @ @ @ @ @ @ @ @ the first 1000 bytes of each archive entry . 
@@120536146 @9536146/ <p> sfk rename dirname " /fromtext/totext/ " to outdirsfk rename -dir mydir -file . txt -pat " /fromtext/totext/ " flexible multi file rename using rename expressions . handle with care . - multi file rename may cause problems in folders which are controlled by version control systems like cvs or svn , or within workspaces of programs that keep file references , like video editing software or IDE's. - keep backups of original files in case that output filenames are unexpected or cause conflicts . to make things more safe , by default - sfk rename runs on the given folder only , without sub folders . use option -withsub to include sub folders . - sfk rename runs in simulation mode , previewing changes without modifying anything . add option -yes to apply changes . syntax of /fromtext/totext/ rename expressions are a subset of simple expressions , supporting an extra symbol ' # ' within totext. slash patterns are not enabled by default but require an option -spat. instead of " / " around /from/to/ any unique char can be used , like in fromtexttotext within /fromtext/ you @ @ @ @ @ @ @ @ @ @ 0 or more ) ? for exactly one character n chars for exactly n characters within /totext/ you may use : part1 fill in part 1 extracted from name parts 1,3 fill in parts 1 and 3 parts 1-3 fill in parts 1 to 3 #1 fill in part 1 , same as part1 #10 fill in part 10 # without digits : fill in next part #5## fill in parts 5,6,7 with option -spat only : search or fill in the ' ' character # * ? same for characters # * ? search or fill in the backslash ' ' extra parameters to outdir after rename , move the file to folder outdir which must be on the same partition . options -pat x to specify /from/to/ pattern after long -dir ... -file ... parameters -spat enable slash patterns like xnn -exact fromtext must match whole filename , not just a part of it . -verbose show part numbers within /from/ text accent or umlaut characters in the search pattern may have to be rewritten by wildcard " ? " to match . quoted multi line parameters are @ @ @ @ @ @ @ @ @ @ script " for details . aliasessfk rensub same as " sfk rename -withsub " beware of Shell Command Characters . to find or replace text patterns containing spaces or special characters like &lt;&gt; ! &amp; ? * you must add quotes " " around parameters or the shell environment will destroy your command . for example , pattern /foo bar/other/ must be written like " /foo bar/other/ " within a . bat or . cmd file the percent % must be escaped like %% even within quotes : sfk echo -spat " percent %% is a percent x25 " about example numbers with brackets if you see 1 type " sfk cmd 1 " for whole command in one line . web referencehttp : **31;5840;TOOLONG in the SFK Book the SFK Book contains a 60 page tutorial , including rename examples with input and output filenames. type " sfk book " for details . examples : short syntax step by stepsfk rename mydir list all files of mydir ( nothing is changed ) sfk ren mydir " /-1540-*. mts/ " list files in mydir with " -1540- " in their @ @ @ @ @ @ @ @ @ @ sfk will show an info text telling about the part numbers the search mask ( fromtext ) is made of . sfk ren mydir " /-1540-*. mts/part1Newspart3/ " same as above , but extended to change the wild- card part " * " of a match to " News " . sfk ren mydir " /-1540-*. mts/#News#3/ " same as above , but shorter to type . " # " without a number takes part1 , #3 takes part 3. sfk ren mydir " /-1540-*. mts/#News#3/ " to news after rename move the file to folder " news " . finally add -yes to apply filename changes . examples : flexible syntax step by stepsfk rename -dir mydir -file chan list files of mydir having " chan " in their name sfk ren -dir mydir -file chan -pat " /-1540-*. mts/ " list chan files in mydir with " -1540- " in their filename , followed by any characters , until . mts sfk ren -dir mydir -file chan -pat " /-1540-*. mts/#News#3/ " within filenames of mydir containing parts -1540- , then anything , then . mts , like @ @ @ @ @ @ @ @ @ @ into " News " : **31;5912;TOOLONG further examplessfk rename . /. mts/.mpg/ change all . mts to . mpg in current folder sfk ren -dir mydir -file . txt -pat " /foo/bar/ " replace foo by bar in all . txt filenames within mydir sfk ren -dir mydir -file " *- ? ? ? ? 2015- " -pat " /-2 chars2 chars4 chars-4 chars-*. /-parts 4,2,3-parts 6-9/ " in folder mydir change date string in files like : 20 **37;5945;TOOLONG to a format with year first : **37;5984;TOOLONG sfk ren -dir mydir -file " *- ? ? ? ? 2015- " -pat " /-2 chars2 chars4 chars-4 chars-*. /-#4#2#-#6###/ " same as above , only shorter . #6### means to take part 6 and then the three following parts 7,8,9. 21 217463 @qwx1077463 
@@120536147 @9536147/ <h> Replace text in files on the command line <p> sfk xreplace dirName " /searchtext/totext/ " replace in text and binary files using wildcards * and ? as well as SFK Simple Expressions in brackets . Multiple search patterns are executed in the given sequence . Mind this if they overlap , e.g. /foo/bar/ /foosys/thesys/ makes no sense ( foo is replaced by the first expression , so the 2nd one will fail to match ) . by default , replace functions run in SIMULATION mode , previewing hits without changing anything . add -yes to apply changes . Changing binaries may lead to unpredictable results , therefore keep backups of your files in any case . subdirectories are included by default the sfk default for most commands is to process the given directories , as well as all subdirs within them . specify -nosub to disable this . options -nosub do not include files in subdirectories. -nobinary skip binary files . -case case-sensitive text comparison . default is insensitive. -pat starts a list of search or replace patterns of the form xsrcxdstx where x is the separator char @ @ @ @ @ @ @ @ @ @ the destination to replace it with . e.g. /foo/bar/ or foobar both replace foo by bar . -pat is not required if a single filename is given . -text the same as -pat , starting a text pattern list . -bylist x.txt read search patterns from a file x.txt , supporting multiple lines per pattern . ( add -full for more. ) -bylinelist x read /from/to/ or just /from/ patterns from a file x with one pattern per line . ( add -full for more. ) -by(line)list does not support sfk variables . to use variables in patterns create an sfk script with patterns as parameters . " sfk script " for more . -usetmp allow creation of temporary files if output data is larger than the memory limit ( default : 300 MB ) . without -usetmp , SFK uses the whole RAM , but stops with an error if it runs out of memory . -memlimit=n use up to n mbytes of RAM to store output data , and when the limit is reached , use a temporary file . this option implies -usetmp. to set this permanently @ @ @ @ @ @ @ @ @ @ SFKCONFIG=memlimit:n -tmpdir x set directory x as temporary file directory . default is to use the path specified by TEMP or TMP env variable . -showtmp tell verbosely which temporary files are created . SFK temporary filenames contain the process I 'd to make sure multiple SFK running in parallel do not use the same temporary file . -notmp never create temporary files ( default ) . if combined with -memlimit , sfk stops with an error if memlimit is reached . -recsize set input record size for processing ( default=100k ) . xreplace , xtext and xhexfind extend this automatically based on the largest search patterns . -firsthit process only first found pattern match per file . -quiet do not show progress infos. -stat show statistics like hits per pattern and no. of files . -perf show performance statistics . -full print full help text telling about -bylist pattern files , special character case sensitivity and nested or repeated replace behaviour . output options -dump create hexdump of search hits or replaced text . -wide with -dump : show 16 bytes per line . -lean with -dump : show 8 @ @ @ @ @ @ @ @ @ @ not replaced text . -dumpall dump search text and replaced text . -nodump do not create a hexdump , list only matching files . -astext no hexdump , but print search hits as plain text . use this only with plain text files , not binary . -showle highlight CR/LF line endings in hex dump output -context=n with hexdump : show additional n bytes of context . -reldist with hexdump : tell relative distances to previous hits . -to dir$file write output files to given path . for details about output file masks , type " sfk help opt " or " sfk run " . -tofile x write output data to a single output filename x ( which is not interpreted as a mask but taken as is ) . return codes for batch files 0 = no matches , 1 = matches found , &gt;1 = major error occurred . see also " sfk help opt " on how to influence error processing . temporary files with option -usetmp or -memlimit sfk may create temporary files in a folder specified by TEMP or TMP environment variable , or @ @ @ @ @ @ @ @ @ @ by -tmpdir or from an SFKCONFIG=tmpdir : ... setting . type " sfk help opt " for further infos. about nested replacement patternssfk replace myfile.dat /foo/bar/ /bar/goo/ with SFK base , " foo " will be replaced by " bar " and then immediately " bar " is replaced again by " goo " . with SFK XE , a replaced part of text is not replaced again in the same command , so " foo " stays replaced by " bar " . unexpected repeat replace behaviour depending on the input data and search/replace expressions , it can happen that running the same replace multiple times on the same file produces further hits that did n't exist in the first run . add option -full to read more on this . quoted multi line parameters are supported in scripts using full trim . type " sfk script " for details . wildcards and SFK expressions SFK Expressions are simple patterns containing literal text , wildcards * and ? and character classes in square brackets . basically , the syntax provides extended wilcards but no further logic and is not @ @ @ @ @ @ @ @ @ @ a separator character which can be anything not contained in the search text , like / or within a pattern /fromtext/totext/the fromtextmay contain : * - 0 to 4000 characters in the same text line or paragraph , i.e. all bytes not being CR , LF or NULL . 4000 is just a default maximum that can be changed by : 0.100000 chars - 0 to 100000 characters in the same text line or paragraph , i.e. the same as * but with a larger range . ? - one character . ? ? ? ? ? - same as 5.5 chars or 5 charsbytes - 0 to 4000 bytes ( with CR , LF , NULL ) i.e. it collects stream text across lines , even in binary data ** - the same as bytes. 0.100 bytes - 0 to 100 bytes .100000 bytes - up to 100000 bytes 1. * bytes - 1 to default maximum bytes 30 bytes - exactly 30 bytes byte of aeiou - one vocal ( a OR A OR e OR ... ) , case insensitive by default . " aeiou " is @ @ @ @ @ @ @ @ @ @ or forw. slash / bytes of rn t - whitespace incl. line ends bytes of ( rn t ) - the same , ( ) are optional bytes not rn0 - up to 4000 bytes as long as no CR , LF or NULL byte appears chars - the same as bytes not rn0 , i.e. collect text in a line char not ( t ) - same as byte not ( rn0t ) , everything not blanks and tabs char not ) ( t - not brackets , blanks and tabs , same as not ( ( ) t ) chars of a-z0-9 - means a-zA-Z0-9 as search is case insensitive by default chars of x61-x7A - search a-z but not A-Z , or use option -case for case search eol - end of line by characters : CRLF or LF or CR white = chars of ( t ) - 0 or more whitespaces xwhite = bytes of ( t rn ) - same but across lines 1 white = byte of ( t ) - 1 whitespace digit = byte of ( 0-9 ) - 1 digit @ @ @ @ @ @ @ @ @ @ more digits hexdigit = byte of ( 0-9a-f ) - 1 hexadecimal digit hexdigits = bytes of ( 0-9a-f ) - 0 or more hex digits special keywords that do not count as tokens : keep - search also the following text but keep it in the input data , without consuming it ortext - fooortextbar searches word foo or bar . ortext is allowed only between literals. anchors that have no length of their own : start - start of file end - end of file lstart - line start , i.e. start or CRLF or CR or LF lend - logical line end , i.e. eol or end of file how to search or replace special characters : - to search or replace text containing the literal characters * ? then these must be escaped like * ? - ( ) are escaped only within character lists , like ( ) - to search or replace the forward slash ' / ' type x2f or use another char around from/to text , e.g. fromtexttotext - parameters with blanks and non trivial characters need double quotes " " , @ @ @ @ @ @ @ @ @ @ expansion priorities : ( highest first ) if two search parts are side by side , and the same input character matches both , then these priorities apply : 5 : start , end , lstart , lend 4 : literal text , eol 3 : whitelist classes : byte of , bytes of 2 : blacklist classes : chars not , bytes not 1 : plain wildcards : ? , * , ** , byte , bytes , chars this means in " /bytesfoo/ " the bytes will stop to collect characters as soon as " foo " is found , as " foo " is a literal . on same or higher priority the right side stops the left side . the totextmay contain : part 1 - use first text part of the fromtext. e.g. the fromtext /*foo.100 charsbar*/ contains parts 1 2 3 4 5part1 - the same ( blank is optional ) . parts 1,2,3 - use parts 1 , 2 and 3. parts 1-10 - use parts 1 to 10. strip ( part1 , 0 ) - use part 1 but remove zero bytes. @ @ @ @ @ @ @ @ @ @ file.name - full input filename with path file.relname - input filename without path file.path - input file 's path file.base - relname without last . extension file.ext - input filename extension all - use all parts from fromtext. setvar name ... endvar - set variable " name " with data between setvar and endvar. getvar name - fill in data from variable " name " although anchors like lstart , lend count as a separate part they need NOT be specified in the totext. this means that /lstartfoolend/bar/ just changes the word " foo " . supported slash patternst = TAB r = CR n = LF x00 = one byte with code 00 hexadecimal 0 = short form for x00 q = a double quote " = the backslash character itself = the bracket open character = the bracket close character * = the literal star character * ? = the literal question mark ? - = to use literal " - " in a command Within multi line -bylist files : = slash+blank is changed to a single blank Only within " char of " or " byte @ @ @ @ @ @ @ @ @ @ " ( " ) = to use literal character " ) " SFK expression options -showpart(s) print /from/ part numbers , range statistics and expansion priority points per part . done automatically if a required /to/ text is not given with a command . -showbest if a /from/ pattern finds nothing , use this to see how many parts would match so far , and with up to how many bytes per part . anchors like lstart may show a non zero length when matching ( CR ) LF. -showlist with -bylist , show the internal joined list if commands are spread across multiple lines . -showall show all of the above . -xmaxlen=n set default maximum length for chars or bytes commands , e.g. -xmaxlen=10000 means /foo*bar/ matches with up to 10000 characters between foo and bar . the default max length without this option is 4000 characters . performance notes - always use a string literal , or single byte or char , at the start of your search expressions , like in /foo*bar/ starting with ' f ' . Do not use a wildcard like * at @ @ @ @ @ @ @ @ @ @ , as your search will slow down byfactor 256 . Use /lstart*foobar/ instead . - the system may cache output file(s) , writing to disk in background after sfk has finished . subsequent batch commands may execute slower . see also--- open source commands ---sfk xfind search wildcard text in text/binary files sfk xtext search wildcard text in text files only sfk xhexfind search in text/binary with hex dump output sfk extract extract wildcard data from text/binary files sfk filter filter and edit text with simple wildcards sfk find search fixed text in text/binary files sfk ftext search fixed text in text files sfk hexfind search fixed text in binary files sfk replace replace fixed text in text/binary files --- freeware commands ---sfk view GUI tool to search text as you type --- xe commercial commands ---sfk replace replace fixed text with high performance sfk xreplace replace wildcard text in text/binary files sfk help xe about SFK XE and xreplace with SFK Expressions . beware of Shell Command Characters . to find or replace text patterns containing spaces or special characters like &lt;&gt; ! &amp; ? * you must add @ @ @ @ @ @ @ @ @ @ destroy your command . for example , pattern /foo bar/other/ must be written like " /foo bar/other/ " within a . bat or . cmd file the percent % must be escaped like %% even within quotes : sfk echo -spat " percent %% is a percent x25 " web referencehttp : **30;6023;TOOLONG example numbers with brackets if you see 1 type " sfk cmd 1 " for whole command in one line . bad examples with correctionsif input text contains : bool bClFoo ; bool bClBar ; sfk xfind in.txt " /boolxwhitebCl*xwhite ; / " does NOT match " bool bClFoo ; " because * eats the whole input line including " ; " so no input is left for " xwhite ; " and the whole expression fails . sfk xfind in.txt " /boolxwhitebCl* not ; xwhite ; / " does both match " bool bClFoo ; " and " bool bClBar ; " . this means whenever your search fails to work write in detail which characters ( not ) to collect where . sfk xex in.txt " /lstartfoo/lstartgoo/ " there is no need to write an @ @ @ @ @ @ @ @ @ @ . use instead : sfk xex in.txt " /lstartfoo/goo/ " sfk xex in.txt " /foolendbar/goopart2bar/ " anchors like lend must be at start or end of fromtext and can not be referenced within totext. use instead : sfk xex in.txt " /fooeolbar/goopart2bar/ " working examplessfk xrep mydir " /foo*bar/ " an incomplete command ( missing " totext " part in pattern ) . sfk shows an info text telling about part numbers and runs a search for " foo*bar " in all files of mydir. nothing is changed so far . sfk xrep mydir " /foo*bar/part1goopart3/ " same as above , but now the /fromtext/totext/ is complete . again sfk runs a search for " foo*bar " , but now it displays the changed output text ( totext ) , with everything between " foo " and " bar " being changed to " goo " . add option -dumpfrom to display the original found text instead . sfk sel mydir . txt +xrep " /foo*bar/part1goopart3/ " similar to above , replace in all . txt files of mydir. sfk xrep -text " /class* CFoo/part1part3/ " -dir mydir -file . @ @ @ @ @ @ @ @ @ @ replace for example " class IMPORT CFoo " by " class CFoo " . sfk xrep -pat " /byte not nend/part1n/ " -dir mydir -file . cpp . hpp -dumpall find all . cpp or . hpp files in mydir whose last line is not ending with a linefeed , and add the linefeed. to check exactly what is changed dump both input and output text . 23 sfk xrep -dir mydir -file . hpp -enddir-text " /byte not nend/part1n/ " -dumpall same as above but with dir parameters first . 25 sfk xrep io.txt " /lstart20 chars*/part3/ " cut first 20 characters in every line of io.txt. sfk xrep io.txt " /lstart9 **26;6055;TOOLONG " in fixed position text file data like : rec. 001:5318 aef3 2751 1001 rec. 002:1001 aef5 275a 1001 rec. 003:ef49 aef7 2763 1001 replace " 1001 " where it appears in columns 10 to 13 , in this example only the first " 1001 " in record 2. sfk xrep in.dat " /xFFxFE1 **27;6083;TOOLONG " replace byte sequences ( not ASCII text strings ) in binary data . searches byte groups starting with values 0xFF @ @ @ @ @ @ @ @ @ @ , and replaces the variable byte by always a binary 0x00 value . sfk xreplace in.txt " /foo*bar/other/ " replace phrases starting with " foo " and ending with " bar " by word " other " in single file in.txt sfk xreplace -text " /foo*bar/===part2===/ " -dir mydir -file . txt replace foo*bar in all . txt files of folder mydir with a new pattern containing the text between foo and bar surrounded by " === " . sfk xrep -text " /x66x6fx6f0.100 bytesx62x61x72/---/ " -dir mydir -file . dat replace binary data starting with bytes 0x66 , 0x6f , 0x6f , ending with 0x62 , 0x61 , 0x72 and up to 100 bytes inbetween by " --- " within all . dat files of folder mydir. 24 
@@120536148 @9536148/ <p> sfk web options url optionssfk filter ... +tweb options call an http : // URL and print output to terminal , or pass output to further commands for processing . sfk ... +web requires an url parameter . sfk ... +tweb gets the url(s) from a previous command . options -nodump do not print reply data . -proxy hostname:port of a proxy server . from within a company network it is often required to connect through proxies . alternatively , set the environment variable SFKPROXY : set **25;6112;TOOLONG to find out what proxy your browser is using , see - Firefox : **39;6139;TOOLONG - IE : tools/internet options/connections/lan settings -timeout=n wait up to n msec for connection or data . default is a blocking access , i.e. connect stops after the operating system default timeout , and data read may block endless . -webtimeout=n same , but can be given as global option for a multi command chain . -delay=n wait n msec after each request . -weblimit=n set download size limit to n mb -status=s add a status line after reply data , optionally prefixed by string @ @ @ @ @ @ @ @ @ @ on command chaining fields are separated by tabs , otherwise by blanks . -noerr print no error message -quiet do not print status line in case of -nodump -headers print sent and received http headers -showreq print full URL , may also use -status -verbose tell current proxy settings , if any automatic name expansions http : // is added automatically . short ip 's like .100 are extended like 192.168.1.100 depending on your subnet. quoted multi line parameters are supported in scripts using full trim . type " sfk script " for details . limitations - by default sfk web reads up to 10 mbytes of data . use -weblimit=n to change this to n mbytes. - if binary data is found , binary codes are stripped on output to terminal . aliasescweb call the web quickly without any output , same as web -nodump -quiet. tweb same as web but tells explicitely that it expects chain text input . chaining support since sfk 1.8.7 +web does not use chain text input . use +tweb to read url 's from chain text , or set global option -chainweb to @ @ @ @ @ @ @ @ @ @ supported . see alsosfk wfilt download web text and filter it directly sfk wget download file from http URL sfk view GUI tool to search and filter text from an http URL interactively curl powerful web request and download tool web referencehttp : **28;6180;TOOLONG in the SFK Book the SFK Book contains a 60 page tutorial , including an HTTP automation example with detailed explanations . type " sfk book " for details . examplessfk web .100/getStatus.xml calls , for example , http : **29;6210;TOOLONG and prints the xml reply to terminal sfk web 192.168.1.200/zones.xml +filter -+status calls http : **25;6241;TOOLONG and extracts all lines containing " status " . sfk web .100 +xex " **27;6268;TOOLONG " gets main page from .100 and extracts html head tag . sfk filter ips.txt -form " $col1/xml/status.xml " +tweb -nodump calls many different urls based on a table of ips. option -nodump does not print the full result data but only a single status line . --- scripting example : --- +setvar error= " " +setvar uptime= " " +web -maxwait=2000 -noerr -status=:status : " .250/info.xml " +xex " : status : *tERR @ @ @ @ @ @ @ @ @ @ " # ( error ) &lt;&gt; " stop -var 5 " no access ( # ( error ) ) " +getvar --- scripting example end --- try to read an xml value " uptime " from info.xml on local IP .250 and show it by +getvar. if there is no connection or an HTTP error then stop instead with a text " no acess " . 217463 @qwx1077463 
@@120536150 @9536150/ <h> How to find words in many text files by typing the path and search term . <p> How to find anything quickly by typing filename patterns and word patterns to search for , with a Freeware tool for Windows and Linux/Mac . <p> After download , run the tool by double click , then click on Open and select a directory from which you want to load all text files . All ASCII text files from that folder will be loaded , like all . txt , . ini , . html , readme or source code files . So far we learned that typing or clicking on " hello " searches this word instantly , everywhere across all loaded files . But what if we do NOT want to search everywhere , but only in a specific file or files ? using the path mask Below the " find : " mask at the left bottom , you see the " path : " mask . Basically , " find : " says WHAT you are searching - it is matched against the text content within selected @ @ @ @ @ @ @ @ @ @ it searched - it is matched against the filenames . By default , whatever you type goes into the FIND mask . Concentrate on it , and spot the orange cursor within . Now press the TAB key . Voila - the cursor is now in the PATH mask . Whatever you type NOW changes that path mask , for example , type " help " and you select all files having " help " in their name , so probably just one file , right now . The path mask is always case insensitive , so " help " will also find files having " Help " in their name . Now press TAB again - the cursor is back in the FIND mask . Whatever you type NOW is searched ONLY within files having " help " in their filename . Or let 's say , the search scope is reduced to that files . clearing the path mask Enough ? Want unlimited search over everything again ? To achieve this , you may - press TAB again , then INSERT to clear the PATH mask , and @ @ @ @ @ @ @ @ @ @ . - OR : click on the " clear " button in the right bottom ( this button may be visible only in full screen mode , and it shows only with a non-empty path mask ) . - OR : press CTRL+M . And why CTRL+M ? Because it 's next to CTRL+N like narrow . We 'll come to that further below . further ways of editing the find or path mask Instead of pressing TAB , you may also change between " find " and " path " by simply clicking into those masks . The Depeche View Find and Path masks are optimized for speed : - you do not have to press any hotkey to activate it . the find ( or path ) mask is always active . just type a word to find it , instantly . - you do not mark anything in the mask to replace its content ; just press INSERT , and the whole mask is cleared , instantly . - to paste a phrase from clipboard into the mask , press SHIFT+INSERT ( or CONTROL+V ) . no @ @ @ @ @ @ @ @ @ @ of words from other applications can be done with the least possible effort . - to copy the mask content to clipboard , CONTROL+click into it . However , it may take a while to learn into this concept . If you want to search things in a more " Notepad " like way , press CONTROL+F , which brings up a Find dialog with classic text fields . narrowing the path mask If you are standing in a file LONG ... and you want to search words just and only in that " howto.txt " file , but not in all other " howto.txt " somewhere in other directories : - press CONTROL+N like " narrow to this single file " and the full path of the current file is copied into the " path : " mask . If multiple file contents are shown on screen , make sure that the filename of interest is highlighted before pressing CONTROL+N , by moving the mouse up or down . ( There is also a " local " button for the same function , but currently this button works fine @ @ @ @ @ @ @ @ @ @ the whole screen. ) reducing the path mask by a directory Let 's repeat the above example . Your path mask contains : LONG ... and now you want to search in all files of the directory C : **38;6329;TOOLONG then : - click on the " pathup " button - OR : press CONTROL+U like " up in the directory tree " Of course , repeated CTRL+U will step up even further . Rightmost Wildcard Reduction : If the path mask contains a wildcard expression at the rightmost position , like myprojectsourcefoo*.hpp then the first pathup or CTRL+U will reduce this to myprojectsourcefoo treating the wildcard like a sublevel in the folder . The second pathup will then reduce this to myprojectsource 
@@120536152 @9536152/ <h> Send pings to many computers in the local network in parallel , <p> on the command line , showing either a list of replying devices or a graphical permanent info , with the free Swiss File Knife for Windows , Mac OS X and Linux . Requires administrator rights , as the API calls used for ping do n't work in a normal user context . Source code is available for self compile . <p> sfk ping ip ip2 to ip3 options check if machine(s) on given ip(s) reply to pings . REQUIRES ADMIN RIGHTS . right click on cmd.exe and select " run as admin " to enable sfk ping . default with only a few target adresses is to show a graphical display of replies . with many addresses a list of replies is shown . experimental command . may not always list all available machines , especially on embedded linux. parameters to n ping range up to n within the same class c network ( up to 0 addresses ) net n n2 ping 192.168. n.1 to 192.168. n.254 if computer runs in 192.168 network @ @ @ @ @ @ @ @ @ @ network of this computer options -maxwait n wait up to n msec for a reply -maxwait ns wait up to n seconds -list send just one ping and show result as a flat list without graph -stop stop on first reply from any ip , implies -single -range s e with " net " : ping from s to e instead of 1 to 254 -pure print just replying ip 's -quiet print less infos -quiet=2 show no OK etc. with -stop web LONG ... ping 192.168.1.200 -stop -maxwait 600s+sleep 1000 +then run " install.sh " -yes waits for a ping reply on given ip , then runs install.sh after another delay . sfk ping 192.168.1.200 192.168.1.210 ping these two ip 's in parallel sfk ping 130 140 2.150 ping IP .130 and .140 within current subnet and .150 in the .2 subnet sfk ping net 1 2 10 ping whole subnets 1 , 2 and 10 , like 192.168.1.1 to 192.168.1.254 192.168.2.1 to 192.168.2.254 192.168.10.1 to 192.168.10.254 if your computer is within 192.168. x.x sfk ping net 192.178 3 5 ping 192.178.3.1 to 254 and .5.1 to 254 sfk @ @ @ @ @ @ @ @ @ @ this pings 192.168.178.1 to .254 217463 @qwx1077463 
@@120536153 @9536153/ <p> of course , copying just the single . exe means leaving out some features provided by plugins and filters - but so far I use only source code comparison ( . cpp , . java ) and for that the single . exe is sufficient . <p> comparing directory tree differences <p> winmerge is great for comparing two files , but when i try to compare whole directories this way : <p> winmerge docs-old docs <p> i do get some overview : <p> but to really find out , for example , that **31;6369;TOOLONG is different , I have to invest at least three double mouseclicks . <p> multiply this by all other files which may have differences , this clicking-around is a major waste of time - a problem common to most GUI based programs . <p> so let 's get back to the command line , and do it fast , using the sfk run command : <p> as we see , there are two different files over the whole directory tree . ( option -sincedif lists only different files , not added files. ) if @ @ @ @ @ @ @ @ @ @ the previed winmerge commands are executed : 
@@120536156 @9536156/ <h> If you want to delete , for example , only . bak and . tmp files <p> in a directory tree , within sub folders names tmp or save , then sfk delete helps with its very flexible file selection syntax . Free open source command line tool for Windows , Mac OS X , Linux and Raspberry Pi . <p> sfk delete dir ext1 ext2 ... -yessfk deltree targetdir -yessfk del -dir dir1 dir2 -file . ext1 delete files or dirs , even if they 're write protected . deltree or rmtree deletes a directory tree with all contents . options -yes really delete the files . without option -yes , del only lists the files that would be deleted . -withdirs if you supply a file mask other than " * " , or -wdir and file deletion leads to an empty directory , then the directory is removed as well . if you supply no file mask ( or " * " ) , then every empty directory is always deleted . this option can not be used with chaining , as chaining passes only @ @ @ @ @ @ @ @ @ @ hidden and system files . this option is default when using deltree. lazy confirmation on command chaining if you selected files in a command chain , then want to add +del you may type " +del. " ( with a dot ) or " +del ! " ( windows only ) instead of " +del -yes " to actually delete the files . web LONG ... del -withdirs src . bak deletes . bak files within src and all subdirs. if a directory contained only . bak files , it is deleted as well . sfk del -yes -withdirs -hidden tmp delete tmp with all files , including hidden files . sfk deltree. tmp the same as above , with " . " as a short for -yes. sfk list -dir src -file foo*.hpp +del first list target files , then add +del sfk fromclip +del take a list of filenames from clipboard and delete them . see " sfk help shell " on how to configure your windows command prompt , to allow easy copying of filename lists . example with output : I plan to delete all . @ @ @ @ @ @ @ @ @ @ all . tmp files in directory tree " src2 " : sfk del -dir src1 -file . bak -dir src2 -file . tmpsimulating : DEL : **39;6402;TOOLONG DEL : **37;6443;TOOLONG DEL : **36;6482;TOOLONG DEL : **31;6520;TOOLONG DEL : **39;6553;TOOLONG DEL : **37;6594;TOOLONG DEL : **36;6633;TOOLONG DEL : **31;6671;TOOLONG 10 files would be deleted . say -yes , -del. or -del ! to execute . But I see : oops , I want to keep DBController.bak as it may be needed later ... same applies for FooGUI.tmp . No problem - above is just a simulation , so nothing happened yet . I adapt the command to : sfk del -dir src1 -file . bak ! DBCon -dir src2 -file . tmp ! FooGUIsimulating : DEL : **39;6704;TOOLONG DEL : **37;6745;TOOLONG DEL : **31;6784;TOOLONG DEL : **39;6817;TOOLONG DEL : **37;6858;TOOLONG DEL : **36;6897;TOOLONG 8 files would be deleted . say -yes , -del. or -del ! to execute . The result looks OK , so I add " -yes " to really delete the files . 217463 @qwx1077463 
@@120536161 @9536161/ <p> sfk web options url optionssfk filter ... +tweb options call an http : // URL and print output to terminal , or pass output to further commands for processing . sfk ... +web requires an url parameter . sfk ... +tweb gets the url(s) from a previous command . options -nodump do not print reply data . -proxy hostname:port of a proxy server . from within a company network it is often required to connect through proxies . alternatively , set the environment variable SFKPROXY : set **25;6935;TOOLONG to find out what proxy your browser is using , see - Firefox : **39;6962;TOOLONG - IE : tools/internet options/connections/lan settings -timeout=n wait up to n msec for connection or data . default is a blocking access , i.e. connect stops after the operating system default timeout , and data read may block endless . -webtimeout=n same , but can be given as global option for a multi command chain . -delay=n wait n msec after each request . -weblimit=n set download size limit to n mb -status=s add a status line after reply data , optionally prefixed by string @ @ @ @ @ @ @ @ @ @ on command chaining fields are separated by tabs , otherwise by blanks . -noerr print no error message -quiet do not print status line in case of -nodump -headers print sent and received http headers -showreq print full URL , may also use -status -verbose tell current proxy settings , if any automatic name expansions http : // is added automatically . short ip 's like .100 are extended like 192.168.1.100 depending on your subnet. quoted multi line parameters are supported in scripts using full trim . type " sfk script " for details . limitations - by default sfk web reads up to 10 mbytes of data . use -weblimit=n to change this to n mbytes. - if binary data is found , binary codes are stripped on output to terminal . aliasescweb call the web quickly without any output , same as web -nodump -quiet. tweb same as web but tells explicitely that it expects chain text input . chaining support since sfk 1.8.7 +web does not use chain text input . use +tweb to read url 's from chain text , or set global option -chainweb to @ @ @ @ @ @ @ @ @ @ supported . see alsosfk wfilt download web text and filter it directly sfk wget download file from http URL sfk view GUI tool to search and filter text from an http URL interactively curl powerful web request and download tool web referencehttp : **28;7003;TOOLONG in the SFK Book the SFK Book contains a 60 page tutorial , including an HTTP automation example with detailed explanations . type " sfk book " for details . examplessfk web .100/getStatus.xml calls , for example , http : **29;7033;TOOLONG and prints the xml reply to terminal sfk web 192.168.1.200/zones.xml +filter -+status calls http : **25;7064;TOOLONG and extracts all lines containing " status " . sfk web .100 +xex " **27;7091;TOOLONG " gets main page from .100 and extracts html head tag . sfk filter ips.txt -form " $col1/xml/status.xml " +tweb -nodump calls many different urls based on a table of ips. option -nodump does not print the full result data but only a single status line . --- scripting example : --- +setvar error= " " +setvar uptime= " " +web -maxwait=2000 -noerr -status=:status : " .250/info.xml " +xex " : status : *tERR @ @ @ @ @ @ @ @ @ @ " # ( error ) &lt;&gt; " stop -var 5 " no access ( # ( error ) ) " +getvar --- scripting example end --- try to read an xml value " uptime " from info.xml on local IP .250 and show it by +getvar. if there is no connection or an HTTP error then stop instead with a text " no acess " . 217463 @qwx1077463 
@@120536163 @9536163/ <h> Send pings to many computers in the local network in parallel , <p> on the command line , showing either a list of replying devices or a graphical permanent info , with the free Swiss File Knife for Windows , Mac OS X and Linux . Requires administrator rights , as the API calls used for ping do n't work in a normal user context . Source code is available for self compile . <p> sfk ping ip ip2 to ip3 options check if machine(s) on given ip(s) reply to pings . REQUIRES ADMIN RIGHTS . right click on cmd.exe and select " run as admin " to enable sfk ping . default with only a few target adresses is to show a graphical display of replies . with many addresses a list of replies is shown . experimental command . may not always list all available machines , especially on embedded linux. parameters to n ping range up to n within the same class c network ( up to 0 addresses ) net n n2 ping 192.168. n.1 to 192.168. n.254 if computer runs in 192.168 network @ @ @ @ @ @ @ @ @ @ network of this computer options -maxwait n wait up to n msec for a reply -maxwait ns wait up to n seconds -list send just one ping and show result as a flat list without graph -stop stop on first reply from any ip , implies -single -range s e with " net " : ping from s to e instead of 1 to 254 -pure print just replying ip 's -quiet print less infos -quiet=2 show no OK etc. with -stop web LONG ... ping 192.168.1.200 -stop -maxwait 600s+sleep 1000 +then run " install.sh " -yes waits for a ping reply on given ip , then runs install.sh after another delay . sfk ping 192.168.1.200 192.168.1.210 ping these two ip 's in parallel sfk ping 130 140 2.150 ping IP .130 and .140 within current subnet and .150 in the .2 subnet sfk ping net 1 2 10 ping whole subnets 1 , 2 and 10 , like 192.168.1.1 to 192.168.1.254 192.168.2.1 to 192.168.2.254 192.168.10.1 to 192.168.10.254 if your computer is within 192.168. x.x sfk ping net 192.178 3 5 ping 192.178.3.1 to 254 and .5.1 to 254 sfk @ @ @ @ @ @ @ @ @ @ this pings 192.168.178.1 to .254 217463 @qwx1077463 
@@120536164 @9536164/ <h> If you want to delete , for example , only . bak and . tmp files <p> in a directory tree , within sub folders names tmp or save , then sfk delete helps with its very flexible file selection syntax . Free open source command line tool for Windows , Mac OS X , Linux and Raspberry Pi . <p> sfk delete dir ext1 ext2 ... -yessfk deltree targetdir -yessfk del -dir dir1 dir2 -file . ext1 delete files or dirs , even if they 're write protected . deltree or rmtree deletes a directory tree with all contents . options -yes really delete the files . without option -yes , del only lists the files that would be deleted . -withdirs if you supply a file mask other than " * " , or -wdir and file deletion leads to an empty directory , then the directory is removed as well . if you supply no file mask ( or " * " ) , then every empty directory is always deleted . this option can not be used with chaining , as chaining passes only @ @ @ @ @ @ @ @ @ @ hidden and system files . this option is default when using deltree. lazy confirmation on command chaining if you selected files in a command chain , then want to add +del you may type " +del. " ( with a dot ) or " +del ! " ( windows only ) instead of " +del -yes " to actually delete the files . web LONG ... del -withdirs src . bak deletes . bak files within src and all subdirs. if a directory contained only . bak files , it is deleted as well . sfk del -yes -withdirs -hidden tmp delete tmp with all files , including hidden files . sfk deltree. tmp the same as above , with " . " as a short for -yes. sfk list -dir src -file foo*.hpp +del first list target files , then add +del sfk fromclip +del take a list of filenames from clipboard and delete them . see " sfk help shell " on how to configure your windows command prompt , to allow easy copying of filename lists . example with output : I plan to delete all . @ @ @ @ @ @ @ @ @ @ all . tmp files in directory tree " src2 " : sfk del -dir src1 -file . bak -dir src2 -file . tmpsimulating : DEL : **39;7152;TOOLONG DEL : **37;7193;TOOLONG DEL : **36;7232;TOOLONG DEL : **31;7270;TOOLONG DEL : **39;7303;TOOLONG DEL : **37;7344;TOOLONG DEL : **36;7383;TOOLONG DEL : **31;7421;TOOLONG 10 files would be deleted . say -yes , -del. or -del ! to execute . But I see : oops , I want to keep DBController.bak as it may be needed later ... same applies for FooGUI.tmp . No problem - above is just a simulation , so nothing happened yet . I adapt the command to : sfk del -dir src1 -file . bak ! DBCon -dir src2 -file . tmp ! FooGUIsimulating : DEL : **39;7454;TOOLONG DEL : **37;7495;TOOLONG DEL : **31;7534;TOOLONG DEL : **39;7567;TOOLONG DEL : **37;7608;TOOLONG DEL : **36;7647;TOOLONG 8 files would be deleted . say -yes , -del. or -del ! to execute . The result looks OK , so I add " -yes " to really delete the files . 217463 @qwx1077463 
@@120536165 @9536165/ <p> of course , copying just the single . exe means leaving out some features provided by plugins and filters - but so far I use only source code comparison ( . cpp , . java ) and for that the single . exe is sufficient . <p> comparing directory tree differences <p> winmerge is great for comparing two files , but when i try to compare whole directories this way : <p> winmerge docs-old docs <p> i do get some overview : <p> but to really find out , for example , that **31;7685;TOOLONG is different , I have to invest at least three double mouseclicks . <p> multiply this by all other files which may have differences , this clicking-around is a major waste of time - a problem common to most GUI based programs . <p> so let 's get back to the command line , and do it fast , using the sfk run command : <p> as we see , there are two different files over the whole directory tree . ( option -sincedif lists only different files , not added files. ) if @ @ @ @ @ @ @ @ @ @ the previed winmerge commands are executed : 
@@120536171 @9536171/ <p> sfk media infile.mpg -keep n1-n2 -cut n3-n4 -tofile out.mpgsfk media infile.m3u -keepbook -tofile out.mpgsfk list mydir . m3u +media -keepbook -to outdir$base.mpg cuts mpeg2 video or other binary file(s) , by keeping or dropping parts given as absolute byte positions in the file . sfk media does not interpret , decode or encode any video data , and knows nothing about the file format . it simply copiesblocks of bytes , which may or may not work , depending on the file format ( mpeg2 is best ) , media player ( VLC is best ) and installed codecs of the operating system . This command is not suitable for mpeg4 or any format using file headers . Splitting or reducing an mpeg2 file usually keeps the result playable in media players . Joining multiple mpeg2 files into one file strictly requires post processing by ffmpeg , to recalculate PCR time stamps required for playback . parameters for cutting and post processing -keep n1-n2 keep this part of the file , from byte offset n1 until before n2 ( excluding offset n2 ) , and cut everything before @ @ @ @ @ @ @ @ @ @ cut " parameters . n1 means an absolute byte position like 12345. one " keep " can be followed by multiple n-n. -cut n1-n2 cut this part . multiple cut parameters can be given , and they can refer to an area within a " keep " range . infile.m3u use a VLC player bookmark file instead of specifying file and positions manually . takes only the last entry in that file . file must contain an even number of start/end positions of sections to keep . -keepbook only with . m3u files : keep all parts marked by a bookmark at start and end of part -joinraw join all input files or parts into one output . with mpeg video , the output file will NOT work correctly in players due to wrong timestamps and therefore requires post processing like : ffmpeg -i in.mpg -target pal-dvd -c copy out.mpg ( without -target , the output will have no sound ) -fix parm create a temporary file ( with -tmp in filename ) then run ffmpeg to fix the output file by re- rendering timestamps. " parm " is passed @ @ @ @ @ @ @ @ @ @ which are extended like : pal-dvd = -target pal-dvd ( for pal output ) ntsc-dvd = -target ntsc-dvd ( for ntsc output ) use -fix " " to pass no extra parameters . requires ffmpeg 1.2 in the PATH . -keeptmp keep temporary files produced by option -fix. default is to clean them up . -joinfull p run joinraw and -fix p in one go . required to produce mpeg2 video suitable for playback . -tmpdir d specify a folder to use for temporary files , and create unique filenames within . -keepall keep whole content of input file(s). used only with -joinraw. note : - all output files are overwritten without asking back , including temporary files . check the simulation output. - check free disk space by " sfk space " before processing . options -fix or -joinfull will use double disk space.general options -tofile f write output to a single file with name f -to outmask write multiple input files to output names given by a mask , like -to outdir$file " sfk help opt " for details . -movesrcto x after processing , move every video @ @ @ @ @ @ @ @ @ @ by rename , so x must be on same file system as input . if an output file of same name exists already then add option -force to overwrite . -yes really create or overwrite output file -quiet do not print part and progress infos -verbose=2 tell more details about what is done recommended process for video cutting 1 . download the VLC media player installer , run the tool and open an mpeg2 . mpg file . 2. select Playback / Custom bookmarks / manage ( CTRL+B ) . for every section to keep , create a bookmark at the start and end of that section . 3. make sure there is an even number of bookmarks . 4. select Media / Save Playlist ( CTRL+Y ) , select file type M3U ( not m3u8 ) and save , e.g. , to cut01.m3u ( if you used the VLC installer , it will remember M3U as the preferred export type. ) 5. sfk media cut01.m3u -keepbook -tofile out.mpg with . mts files and ffmpeg in your path , try instead : sfk media cut01.m3u -keepbook -tofile out.mts -fix " @ @ @ @ @ @ @ @ @ @ VLC session , the M3U files may contain references to many files , but only the last ( newest ) entry is used . see alsosfk partcopy - copy a single part of a file sfk space d - tell free disk space available in current or given directory d web LONG ... media in.mpg -keep 100000-200000 -cut 150000-160000-tofile out.mpg keep area from offset 100000 to 200000 ( with a length of 100000 bytes ) except for 10000 bytes inbetween. sfk media in.mpg -keep 120578-301436 518297-783591-tofile out.mpg keep the two sections and drop the rest . sfk media in.m3u -keepbook -tofile out.mpg keep areas listed in the bookmark M3U file . sfk select mydir . m3u +media -keepbook -to out$base.mpg execute all . m3u files from mydir , write output files to a folder out , with the same relative name as the input . M3U , but with an . mpg output extension . sfk select n : dvd1part1.vob n : dvd1part2.vob+media -joinraw -tofile out.mpg join two . vob files into one out.mpg without any modifications . out.mpg will need post processing before it can be used in a @ @ @ @ @ @ @ @ @ @ +media -joinfull pal-dvd-tofile out.mpg -tmpdir c : tmp join all . vob files of a PAL dvd , sorted by name , into one out.mpg and call ffmpeg to fix timestamps. uses a temporary file in c : tmp. sfk sel -sort d : . vob +media -joinfull " -target pal-dvd -map 0:0 -map 0:2 " -tofile out.mpg -tmpdir e : tmp -keeptmp similar to above , but explicitely passing several parameters to ffmpeg , selecting dvd output and to mix channels 0:0 ( e.g. video ) and 0:2 ( e.g. an audio track with alternative language ) . temporary file is stored on another drive and kept , in case post processing fails and must be done manually . 217463 @qwx1077463 
@@120536173 @9536173/ <p> sfk command chaining reference : several commands can be combined in a so-called " command chain " . this is done by appending command names prefixed by " + " , for example : sfk list docs . txt +ffilter -+foo " list " produces a filename list and passes this to " filefilter " . ffilter reads the contents of these files looking for word " foo " . chain data types three types of data can be passed from one command to another : - filename lists. - plain text records ( lines ) . - stream text or binary data . output is dependent on command . for example , sfk select produces filename lists , sfk filter makes plain text records , xex/xed can produce streams of text or binary data . chain data type conversion vice versa , some commands accept filenames , or text input , or both . depending on what you want to do you may have to convert between this types of data . this can be done by the keywords : +texttofilenames or +ttf+filenamestotext or +ftt however , @ @ @ @ @ @ @ @ @ @ using chain data between commandssfk cmd1 ... +then cmd2 does not pass any data to cmd2 , prints cmd1 output to terminal . sfk ... +toterm dumps current chain content to terminal . sfk ... +tofile outfile dumps chain content to file outfile. sfk ... +tovoid +cmd2 does not pass any data to cmd2 , drops cmd1 chain text silently . in all cases , the chain is cleared . if another command is following , it will receive no input from the chain . using chain data with call / label / endsfk ... +call myfunc passes no chain data into myfunc sfk ... +tcall myfunc passes text data into myfunc sfk ... +fcall myfunc passes filenames into myfunc sfk label ... +end returns no chain data sfk label ... +tend returns text data sfk label ... +fend returns a filename list scope and lifetime of options most options are valid only for the command where they are specified . if another command follows in the chain , the option is reset . but some options may also be specified on a global scope . read more on that @ @ @ @ @ @ @ @ @ @ SFK Book the SFK Book contains long examples with input , output , script and detailed command explanations . type " sfk book " for more . see alsosfk batch create an example script sfk help var how to use sfk variables sfk script about sfk scripting sfk call calling a function in a script sfk label possible options with label sfk if conditional execution sfk goto jump to a local label sfk for repeat commands n times sfk load load text or data for chaining see also sfk script - place sfk commands into a multi-line script file sfk samp - examples for batch embedded sfk scripts 217463 @qwx1077463 
@@120536174 @9536174/ <p> sfk label name options + ... sfk ... +label name + ... define a label at the beginning or within an sfk script . a label is a user-defined name that can be jumped to by the sfk script command . global options All options after " label " are global and therefore valid for all following commands . -prefix=s set user-defined input parameter name prefix . by default , parameters passed into sfk scripts are called $1 to $9 , or %1 to %9. with -prefix , you can define your own parameter names , e.g. if you rewrite the sfk label line like this : sfk label begin -prefix=$parm then the input parameters are renamed to $parm1 , $parm2 , ... accepting no other names . or simply say sfk label begin -prefix=% to accept ONLY %1 to %9 but NOT $1 to $9 , to get around conflicts with script commands using expressions like " $10.10col1 " . -var enable use of variables like # ( name ) -qtrim automatic reformatting of quoted multi line parameters depending on target command . this is default since @ @ @ @ @ @ @ @ @ @ leading spaces to apply auto indentation , while +xed will strip all leading spaces and line ends . see " sfk script " for details . -qraw do not reformat quoted multi line parameters . this was default with sfk up to 1.7.7. since sfk 1.8.0 some old scripts may need : sfk label labelname -qraw or via environment variable : set SFKCONFIG=qraw options must be given after the label name . if -prefix is used it must be the first option . examplessfk samp sfkbat mytest.bat creates a windows batch file mytest.bat with an embedded sfk command script . sfk samp sfkbash mytest creates a linux batch file mytest with an embedded sfk command script . see alsosfk script how to run sfk scripts. sfk if about conditional execution . sfk goto jump to a local label . 217463 @qwx1077463 
@@120536175 @9536175/ <p> sfk chars wordsfk ... +chars print ascii codes of all chars of a word , or print chars for the given code(s). options -codes force listing of character codes , do not check if word is a number . -literal or -lit stops interpretation of any further options or chain commands . required if you need the code of " - " or " + " . -hexlist print flat list of hex codes -hexsrc print as hex source code -fromutf decode utf8 sequence from hexadecimal input like 0xe28098 command chaining support accepts text or binary from a previous command . web LONG ... chars hello prints 5 lines of codes , one for each char. sfk chars 0x53464b prints ' SFK ' , the letters for these hex codes . any number of hex values can be provided . sfk chars -fromutf 0x54657374e28098e28099 decodes ASCII characters and UTF-8 sequences , listing code points of each character found . sfk char 65 prints ' A ' , the letter for that decimal code . only a single decimal value can be provided . sfk char -lit + print @ @ @ @ @ @ @ @ @ @ codes from the word in the clipboard. 217463 @qwx1077463 
@@120536176 @9536176/ <p> sfk ... +xed /from/to/ /from2/to2/ a stream text editor using SFK Simple Expressions . - takes text stream input from a previous command , or a binary stream from sfk extract . - joins all lines into one large block that can be changed in complete . - splits output again into lines for further use , or passes output as binary to another +xed. - may also read and write a single file . xed/xex is designed to post process small to medium sized data streams or files . it is not suitable to edit large files beyond 100 MB , as the whole content must fit into memory multiple times . use " sfk xreplace " to process large files . wildcards and SFK expressions SFK Expressions are simple patterns containing literal text , wildcards * and ? and character classes in square brackets . basically , the syntax provides extended wilcards but no further logic and is not related to regular expressions . search patterns are surrounded by a separator character which can be anything not contained in the search text , like / or @ @ @ @ @ @ @ @ @ @ to 4000 characters in the same text line or paragraph , i.e. all bytes not being CR , LF or NULL . 4000 is just a default maximum that can be changed by : 0.100000 chars - 0 to 100000 characters in the same text line or paragraph , i.e. the same as * but with a larger range . ? - one character . ? ? ? ? ? - same as 5.5 chars or 5 charsbytes - 0 to 4000 bytes ( with CR , LF , NULL ) i.e. it collects stream text across lines , even in binary data ** - the same as bytes. 0.100 bytes - 0 to 100 bytes .100000 bytes - up to 100000 bytes 1. * bytes - 1 to default maximum bytes 30 bytes - exactly 30 bytes byte of aeiou - one vocal ( a OR A OR e OR ... ) , case insensitive by default . " aeiou " is a character list . byte of x2f - a backslash or forw. slash / bytes of rn t - whitespace incl. line ends bytes of ( rn @ @ @ @ @ @ @ @ @ @ bytes not rn0 - up to 4000 bytes as long as no CR , LF or NULL byte appears chars - the same as bytes not rn0 , i.e. collect text in a line char not ( t ) - same as byte not ( rn0t ) , everything not blanks and tabs char not ) ( t - not brackets , blanks and tabs , same as not ( ( ) t ) chars of a-z0-9 - means a-zA-Z0-9 as search is case insensitive by default chars of x61-x7A - search a-z but not A-Z , or use option -case for case search eol - end of line by characters : CRLF or LF or CR white = chars of ( t ) - 0 or more whitespaces xwhite = bytes of ( t rn ) - same but across lines 1 white = byte of ( t ) - 1 whitespace digit = byte of ( 0-9 ) - 1 digit digits = bytes of ( 0-9 ) - 0 or more digits hexdigit = byte of ( 0-9a-f ) - 1 hexadecimal digit hexdigits = bytes of @ @ @ @ @ @ @ @ @ @ keywords that do not count as tokens : keep - search also the following text but keep it in the input data , without consuming it ortext - fooortextbar searches word foo or bar . ortext is allowed only between literals. anchors that have no length of their own : start - start of file end - end of file lstart - line start , i.e. start or CRLF or CR or LF lend - logical line end , i.e. eol or end of file how to search or replace special characters : - to search or replace text containing the literal characters * ? then these must be escaped like * ? - ( ) are escaped only within character lists , like ( ) - to search or replace the forward slash ' / ' type x2f or use another char around from/to text , e.g. fromtexttotext - parameters with blanks and non trivial characters need double quotes " " , see also " about Shell Command Characters " below . expansion priorities : ( highest first ) if two search parts are side by side , and @ @ @ @ @ @ @ @ @ @ apply : 5 : start , end , lstart , lend 4 : literal text , eol 3 : whitelist classes : byte of , bytes of 2 : blacklist classes : chars not , bytes not 1 : plain wildcards : ? , * , ** , byte , bytes , chars this means in " /bytesfoo/ " the bytes will stop to collect characters as soon as " foo " is found , as " foo " is a literal . on same or higher priority the right side stops the left side . the totextmay contain : part 1 - use first text part of the fromtext. e.g. the fromtext /*foo.100 charsbar*/ contains parts 1 2 3 4 5part1 - the same ( blank is optional ) . parts 1,2,3 - use parts 1 , 2 and 3. parts 1-10 - use parts 1 to 10. strip ( part1 , 0 ) - use part 1 but remove zero bytes. only zero bytes " 0 " can be removed . file.name - full input filename with path file.relname - input filename without path file.path - input file @ @ @ @ @ @ @ @ @ @ - input filename extension all - use all parts from fromtext. setvar name ... endvar - set variable " name " with data between setvar and endvar. getvar name - fill in data from variable " name " although anchors like lstart , lend count as a separate part they need NOT be specified in the totext. this means that /lstartfoolend/bar/ just changes the word " foo " . supported slash patternst = TAB r = CR n = LF x00 = one byte with code 00 hexadecimal 0 = short form for x00 q = a double quote " = the backslash character itself = the bracket open character = the bracket close character * = the literal star character * ? = the literal question mark ? - = to use literal " - " in a command Within multi line -bylist files : = slash+blank is changed to a single blank Only within " char of " or " byte not " lists : ( = to use literal character " ( " ) = to use literal character " ) " SFK expression options -showpart(s) print @ @ @ @ @ @ @ @ @ @ per part . done automatically if a required /to/ text is not given with a command . -showbest if a /from/ pattern finds nothing , use this to see how many parts would match so far , and with up to how many bytes per part . anchors like lstart may show a non zero length when matching ( CR ) LF. -showlist with -bylist , show the internal joined list if commands are spread across multiple lines . -showall show all of the above . -xmaxlen=n set default maximum length for chars or bytes commands , e.g. -xmaxlen=10000 means /foo*bar/ matches with up to 10000 characters between foo and bar . the default max length without this option is 4000 characters . performance notes - always use a string literal , or single byte or char , at the start of your search expressions , like in /foo*bar/ starting with ' f ' . Do not use a wildcard like * at the start like in /*foobar/ when searching huge input data , as your search will slow down byfactor 256 . Use /lstart*foobar/ instead . - the system @ @ @ @ @ @ @ @ @ @ after sfk has finished . subsequent batch commands may execute slower . options -bylist x read /from/to/ patterns from a file x , supporting multiple lines per pattern . type sfk xrep for details . -bylinelist x read /from/to/ or just /from/ patterns from a file with one pattern per line . best for searching many phrases with simple or no output reformatting. -i process text stream from standard input -nomark do not highlight changes in output -nocol no colors at all to allow more memory -tofile f write output to file f. do not use +tofile chaining as it splits data into text lines . -rawterm on output to terminal do not strip codes below 32 . Null bytes are always stripped . -dumpraw create hex dump raw = w/o eol highlight -crlf , -lf for file headers and default totext : force crlf or lf line endings instead of default -justrc print no output , just set return code . -firsthit use only first matching result . chaining I/O supportextract ... +xed supports binary data transfer . xed ... +xed supports binary data transfer . In all other @ @ @ @ @ @ @ @ @ @ lines without zero bytes and up to 4000 chars per line . Binary transfer needs four times free memory available then the actual number of bytes passed . web access support extracting the head section from a web page can be done like : sfk xex http : //192.168.1.100/ " **27;7718;TOOLONG " sfk xex http : //.100/ " **27;7747;TOOLONG " sfk web .100 +xex " **27;7776;TOOLONG " archive file reading xed may directly read archive file entries like **26;7805;TOOLONG for details and limitations type " sfk help xe " . beware of Shell Command Characters . to find or replace text patterns containing spaces or special characters like &lt;&gt; ! &amp; ? * you must add quotes " " around parameters or the shell environment will destroy your command . for example , pattern /foo bar/other/ must be written like " /foo bar/other/ " within a . bat or . cmd file the percent % must be escaped like %% even within quotes : sfk echo -spat " percent %% is a percent x25 " unexpected repeat replace behaviour depending on the input data and search/replace expressions , it can @ @ @ @ @ @ @ @ @ @ same stream produces further hits that did n't exist in the first run . read the sfk xtext extended help text by " sfk xtext -full " for details . quoted multi line parameters are supported in scripts using full trim . type " sfk script " for details . return codes for batch files 0 = no matches , 1 = matches found , &gt;1 = major error occurred . see also " sfk help opt " on how to influence error processing . about example numbers with brackets if you see 1 type " sfk cmd 1 " for whole command in one line . web referencehttp : **28;7833;TOOLONG in the SFK Book the SFK Book contains a 60 page tutorial , including detailed xed examples with input , script and output . type " sfk book " for details . examples Note : also see " sfk xex " for further examples . sfk xed in.txt " /foo*bar/goo/ " -tofile out.txt read from file in.txt , replace " foo " and " bar " with up to 4000 characters inbetween , in the same line , by @ @ @ @ @ @ @ @ @ @ file out.txt. sfk xed in.html " /&lt; ! --**--&gt;// " -tofile out.html remove all remark blocks starting with " &lt; ! -- " and ending with " --&gt; " , across any number of lines , with up to 4000 bytes , from the HTML code . sfk xex **38;7863;TOOLONG " /class*/ " XE : extract phrases starting with " class " from a . tar.gz within a . tar.bz2 within a . zip file . sfk xed in.txt /foo12/foo34/ /foo34/foo12/ -tofile out.txt swaps foo12 and foo34. with xed , replaced text is not replaced again by further patterns in the same command . sfk xed in.dat -dump " /x66x6fx6f0.100 bytesx62x61x72/---/ " replace binary data starting with bytes 0x66 , 0x6f , 0x6f , ending with 0x62 , 0x61 , 0x72 and up to 100 bytes inbetween by " --- " and show a hex dump of the output data . 5 add -tofile out.dat to write the output data to a file . sfk xed in.csv " /*t*t*Genway Rd*/parts 1,2,5,6,7,2,3/ " a tab separated CSV file with name , road , city like Bemond Furn . Ltd 147 Elney @ @ @ @ @ @ @ @ @ @ 868 Genway Rd Betree Furn . Ltd 311 Napton Rd Portland NC 97702 contains wrong records with " Genway Rd " in the 3rd column . fix only these records by swapping column 2 and 3. part 2 is just a tab character , used twice in output . sfk xed in.txt " /r// " +xed " lstart* byteskeepn* **34;7903;TOOLONG " change a plain text enumeration like 6 * first item is a double line text * second * third followed by an empty line to HTML code like &lt;li&gt;first item is a double line text&lt;/li&gt; **27;7939;TOOLONG **26;7968;TOOLONG things to consider : - each enum paragraph ends at another line starting with * or at an empty line nn - windows text files use rn line endings , so to allow a convenient nn search for empty lines use /r// first . this must be done as a separate +xed , otherwise the edited line ends are skipped in further searches . - we can not search the line ends by eol as ortext requires pure literals like n. - the keep tells to search until n* but not to @ @ @ @ @ @ @ @ @ @ it as lstart*sfk version -own +filter -stabform " $col5 " +setvar ver+then xed info.xml LONG ... verpart3= " get the version number from sfk , store it in an sfk variable " var " and fill this into info.xml by changing the text within the programversion tag . because both / and chars are used in the xml data we use another delimiter character " = " . 8 sfk xed in.txt " /eol/ , / " +xed " /60 chars* , /alln/ " if in.txt contains only one short word per line reformat this as a comma separated text using at least 60 characters per line . sfk xed in.txt " /*eol/qpart1q , / " +xed " /60 chars* , /alln/ " same as above , but surrounding words by quotes . sfk xex foo.h +setvar a +then xed bar.c " /lstart#include qfoo.hq*eol/getvar a/ " replace a text line : #include " foo.h " within file bar.c by the file content of foo.h 217463 @qwx1077463 
@@120536178 @9536178/ <p> sfk wget options url outfileoutdir options download content from a given http : // URL. an output filename or directory can be specified . existing output files are overwritten without asking back . options -proxy hostname:port of a proxy server . from within a company network , it is often required to connect through proxies . alternatively , set the environment variable SFKPROXY : set **25;7996;TOOLONG to find out what proxy your browser is using , see - Firefox : **39;8023;TOOLONG - IE : tools/internet options/connections/lan settings -path2name include web path in generated output name , to create unique names on multiple downloads. this option is default on chained processing . -fullpath recreate the whole web path within output dir. -nodom do not include domain name in output name . -nopath do not include any path and domain information within the output names . will not work if URL does not contain any relative filename . -quiet or -noprog shows no download progress indicator . -quiet=2 show no " done " info line . -addext always add a filename extension like . txt , . html or . @ @ @ @ @ @ @ @ @ @ -timeout=n wait up to n msec for data -verbose tell current proxy settings , if any automatic name expansions http : // is added automatically . short ip 's like .100 are extended like 192.168.1.100 depending on your subnet. quoted multi line parameters are supported in scripts using full trim . type " sfk script " for details . limitations although sfk wget can download a list of URLs , it is not a real webpage downloader/archiver , as this would require the conversion of html pages to adapt contained links . chaining support output filename chaining is supported . see alsosfk web send a simple web request with instant result output to terminal curl powerful web request and download tool web LONG ... wget -proxy myproxy:8000 http : //foobar.com/x.zip foo.zip download x.zip , writing the content into a file foo.zip , connecting through a proxy server myproxy on port 8000. sfk filt urls.txt +wget mydir if urls.txt contains a list of http : // URLs , load it and download all contents into mydir. the output names will include path information found in the source URL. sfk filt urls.txt @ @ @ @ @ @ @ @ @ @ but create the whole dir structure , and then list biggest files from the downloaded. sfk wget -quiet=2 server/info.xml tmp.txt +ffilter -nofile download info.xml from server , write it as file tmp.txt and instantly print the tmp.txt content to terminal without any status messages or filename infos. 217463 @qwx1077463 
@@120536179 @9536179/ <p> and if you have the ONE CLICK search mode active , this will ... run an instant search and jump to anywhere ! <p> =&gt; your colleague will PANIC , and possibly jump out of the application window . <p> OR : he uses dview already , but does n't have all those user key definitions that you use . <p> OR : he does n't know what an autofilter is good for , but you use it all the time . <p> To avoid such irritating situations , do the following : <p> colleague approaches your working place . <p> click on the big round button left to " mode " . <p> -&gt; one-click search is deactivated in all views . ( 1click button at the right bottom grays out ) <p> -&gt; your custom keyboard layout ( if any ) is decativated in all views . ( ukeys button at the right bottom grays out ) <p> -&gt; autofilter is deactivated in the current view . ( filter button at the right bottom grays out ) <p> -&gt; if a filtered view is open in @ @ @ @ @ @ @ @ @ @ of clicking on the button , you may also <p> - press CONTROL+BLANK <p> which is a bit more inconspicuous . <p> now , let the colleague show you something in the text . he can click on any word - nothing will happen , except some text surf , which is actually a bit easier now . <p> whenever you want to search a visible word or phrase , use SHIFT+LBUTTON instead of just the LBUTTON . <p> as soon as the colleague leaves your working place , and you need the full input power back , press CTRL+BLANK again . Be aware that you can not use the easy button to reactivate power settings - this button guarantees easy settings , and nothing else . <p> Depeche View is a high speed text search tool for Windows and Linux ( WINE ) . Download the free Lite Edition here , or the 30 days Pro Demo here . Depeche View Lite requires no installation . Just run the tool , then load and search all text files of a folder instantly in one window . <p> snapshot with @ @ @ @ @ @ @ @ @ @ found 5690 times . 
@@120536180 @9536180/ <p> to use them within browser-based Java gaming : a tutorial with free source code for download . <p> Transparent images are essential for game objects , e.g. robots , rockets , explosions . The graphics for such objects are typically created in a rendering or paint software . They must then be exported in a file format supporting transparency , ideally PNG . If the rendering software can not export PNG directly , but some other format supporting alpha channels , then this can still be turned into PNG through many freeware converters . <p> But how do we load this within browser Java ? <p> load the PNG directly ? Two problems here : PNG 's are 10 times larger than JPEG , so it would take far too long to load them from the internet . Second , many ( older ) browsers do not support PNG loading at all - so we may have to use 3rd-party PNG reader classes . Although there are some really good reader classes available , we always end up with a far too long downloading time . <p> one @ @ @ @ @ @ @ @ @ @ something with JPEG . Concerning download ( and game startup ) time , every single byte matters , and only JPEG provides the maximum compression . So we have to convert the original PNG to JPEG . But JPEG provides no transparency ! <p> so how do we " make a JPEG transparent " ? First , I tried greenboxing - use all green pixels within a JPEG as a transparent background . Unfortunately , due to the compression , you can never expect that an original " full green " ( 0x00FF00 ) really keeps it 's color code . The result : the objects frayed , and showed ugly borders . <p> So there 's no way around - we have to store the transparency information separately from the JPEG . But in what format ? - GIF ? Just google for " GIF patent " , and ask no further . Although some of the patents may have elapsed by now , no one will ever again feel comfortable with it . - PNG again ? Yes , I tried also to put a single-bitplane image ( @ @ @ @ @ @ @ @ @ @ I had the problem that I needed special support classes just for loading this , to be all-browser compatible . And after all , the goal is just to load a simple byte array into memory . - an own file format ? First I thought this would be lots of effort , as we need compression . But then I remembered the standard Java package java.util.zip ! <p> So , within the image converter d3conv , I extract the alpha transparency from the original PNG , and have it as a byte array within memory . I then simply have to dump this array into a compressed file , using Java 's Zip classes , and to reload this within the engine . Therefore you find a . zip file for every . jpg requiring additional transparency . <p> I even took this one step further : because we now have many small . zip files , we can speed up loading again by packing them all together in one large wrapper . zip file , called masks.jar ( a . jar is technically identical to a . zip @ @ @ @ @ @ @ @ @ @ to do so - a simple command " jar cfM masks.jar *. zip " does the job ! <p> Some further notes about d3conv : <p> This tool actually implements two methods of transparency in parallel : the alpha channel mask , and whiteboxing . So , if you have any " pure white " areas in your original image , that is , colors of code 0xFFFFFF ( red=255 , green=255 , blue=255 ) , they will also be considered as transparent . The reason is that we need some way to display object shadows - to have a shadow , the object must be standing on some kind of ground , otherwise the shadow will not be visible . But in the game , we do n't want this original ground , as the object will stand on something else . So the ground must be identified and removed - and therefore it 's white . <p> Be aware that if you have white areas on your actual objects , you have to reduce the color a bit into grey , e.g. to red=254 , green=254 , blue=254 @ @ @ @ @ @ @ @ @ @ . 
@@120536181 @9536181/ <p> sfk fixfile options dirname repair file names with invalid characters , add missing file time from filename , on files created by embedded devices like personal video recorders ( PVR ) . use with care ! filenames and times may be changed completely and this can not be undone . this command runs in simulation mode by default , previewing changes without modifying anything . add -yes to really apply changes . limited file selection this command is for Windows only and supports only a few file selection options like -dir and -file. options -dewide if any unicode 16 bit wide characters are found in the filename ( making the file unusable for many command line applications ) remove them . careful ! use this only if just a few of such characters exist , otherwise the file may become completely unusable. -setftime if date and time info are found in the name like in **29;8064;TOOLONG then extract date and time . if the file has no date or a different date change it to the found date . -setndate change date text in filename to normalized flat @ @ @ @ @ @ @ @ @ @ -withsub include sub directories ( not default ) see also the following are normally used after fixfile as they need plain ASCII filenames to work with . sfk rename flexible mass rename of files sfk media to cut mpeg2 video files examplessfk fixfile -defull f : HBPVR . mts . meta fix filenames and times of . mts and . meta files in the recording folder of a XORO HRK 7560. for example , it will change a filename like ? S ? uper ? R ? **30;8095;TOOLONG to **36;8127;TOOLONG stripping four wide characters and also setting the file date/time to 31.01.2015 at 05:40. sfk fixfile -defull -dir f : HBPVR -file . mts . meta same as above using long file selection syntax . 217463 @qwx1077463 
@@120536182 @9536182/ <p> Click above into the image , then try cursor keys , space , and control+cursor left/right . If you see nothing above , enable Java on your browser . If you get an error , you may also try to download the latest Java Plugin , and/or the Firefox browser . Press ESCAPE to enter your nickname , to be listed as an area hero . If the game runs too slow , you may try the Small Edition here . Press G for high detail light effects . Press M to disable music effects . <p> To start , click into image to get focus . Press ESCAPE to enter nicknameor area access code ( starting with " # " ) . <p> The SHIFT and CTRL keys are important . SHIFT is not just for running , but also for a quick turn . The best defense is a sidestep , by pressing CTRL together with Cursor Left or Cursor Right . <p> This game needs some practice , and a Pentium III 900 MHz or better computer 